<?xml version="1.0" encoding="UTF-8"?>
    <rss version="2.0"
      xmlns:content="http://purl.org/rss/1.0/modules/content/"
      xmlns:dsq="http://www.disqus.com/"
      xmlns:dc="http://purl.org/dc/elements/1.1/"
      xmlns:wp="http://wordpress.org/export/1.0/">
      <channel><item>
     <title>Throttling the level of concurrency in F#</title>
     <link>http://blog.mavnn.co.uk/throttling-the-level-of-concurrency-in-f</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2013-02-15 08:07:33</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     <wp:comment>
     <wp:comment_id>11855667</wp:comment_id>
     <wp:comment_author>Michael Newton</wp:comment_author>
     <wp:comment_author_email></wp:comment_author_email>
     <wp:comment_author_url></wp:comment_author_url>
     <wp:comment_author_IP></wp:comment_author_IP>
     <wp:comment_date_gmt>2013-02-16 00:56:01</wp:comment_date_gmt>
     <wp:comment_content><![CDATA[Line 6 in the first gist is particularly inspired. Not sure what I was thinking there...]]></wp:comment_content>
     <wp:comment_approved>1</wp:comment_approved>
     <wp:comment_parent>0</wp:comment_parent>
   </wp:comment>
   </item><item>
     <title>Fake Part 2: Build and test</title>
     <link>http://blog.mavnn.co.uk/fake-part-2-build-and-test</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2013-02-13 04:09:00</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     
   </item><item>
     <title>A short interlude into adaptive polling</title>
     <link>http://blog.mavnn.co.uk/a-short-interlude-into-adaptive-polling-tag-f</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2013-01-22 08:00:00</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     
   </item><item>
     <title>Corrected Error Handling Computational Expression</title>
     <link>http://blog.mavnn.co.uk/corrected-error-handling-computational-expres</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2013-01-18 09:03:17</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     <wp:comment>
     <wp:comment_id>11794942</wp:comment_id>
     <wp:comment_author>Johann Deneux</wp:comment_author>
     <wp:comment_author_email></wp:comment_author_email>
     <wp:comment_author_url></wp:comment_author_url>
     <wp:comment_author_IP></wp:comment_author_IP>
     <wp:comment_date_gmt>2013-01-21 08:28:14</wp:comment_date_gmt>
     <wp:comment_content><![CDATA[Glad I could help :)<br />I think part of the problem is that monads originally come from Haskell which has lazy interpretation. You can't take Haskell code and port it directly to F#, even if you are writing pure functional code in F#.<br />For this reason, you will have to write continuation-based custom workflows even in situations where you are not primarily interested in continuations (e.g. async, seq).<br />Maybe it would be a good idea to avoid Haskell-terminology and use more F#-specific terms "computations expressions" and "custom workflows" instead of "monad".]]></wp:comment_content>
     <wp:comment_approved>1</wp:comment_approved>
     <wp:comment_parent>0</wp:comment_parent>
   </wp:comment>
   </item><item>
     <title>In Which Our Intrepid Author De-sugars a Monad by Hand</title>
     <link>http://blog.mavnn.co.uk/in-which-our-intrepid-author-de-sugars-a-mona</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2013-01-16 12:31:00</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     <wp:comment>
     <wp:comment_id>11785660</wp:comment_id>
     <wp:comment_author>Johann Deneux</wp:comment_author>
     <wp:comment_author_email></wp:comment_author_email>
     <wp:comment_author_url></wp:comment_author_url>
     <wp:comment_author_IP></wp:comment_author_IP>
     <wp:comment_date_gmt>2013-01-17 00:52:51</wp:comment_date_gmt>
     <wp:comment_content><![CDATA[My comment on the earlier post was partly mistaken, I mixed up TryFInally with TryWIth.<br />Still, what I said regarding eager evaluation of the parameters applies.<br />You can try this little test:<p>audit { try failwith "Boom!" finally printfn "Finally!" }</p><p>Result by FSI:<br />> <br />System.Exception: Boom!<br />   at &lt;startupcode$fsi_0003>.$FSI_0003.main@()<br />Stopped due to error</p><p>Note that "Finally!" was not printed.<br />If you add a debug printf in TryFinally, you'll also see it's not actually called.</p><p>Another small note: I would expect Zero to return Some(), not None, but that's up to the designer, I guess.</p>]]></wp:comment_content>
     <wp:comment_approved>1</wp:comment_approved>
     <wp:comment_parent>0</wp:comment_parent>
   </wp:comment> <wp:comment>
     <wp:comment_id>11785860</wp:comment_id>
     <wp:comment_author>Michael Newton</wp:comment_author>
     <wp:comment_author_email></wp:comment_author_email>
     <wp:comment_author_url></wp:comment_author_url>
     <wp:comment_author_IP></wp:comment_author_IP>
     <wp:comment_date_gmt>2013-01-17 02:45:14</wp:comment_date_gmt>
     <wp:comment_content><![CDATA[You are quite right, and I had completely missed the point of your earlier comment. My apologies.<p>Expect a further edit soon once I have actually working code!</p>]]></wp:comment_content>
     <wp:comment_approved>1</wp:comment_approved>
     <wp:comment_parent>0</wp:comment_parent>
   </wp:comment> <wp:comment>
     <wp:comment_id>11785861</wp:comment_id>
     <wp:comment_author>Michael Newton</wp:comment_author>
     <wp:comment_author_email></wp:comment_author_email>
     <wp:comment_author_url></wp:comment_author_url>
     <wp:comment_author_IP></wp:comment_author_IP>
     <wp:comment_date_gmt>2013-01-17 02:45:31</wp:comment_date_gmt>
     <wp:comment_content><![CDATA[Out of interest, why would you prefer Some () to None?]]></wp:comment_content>
     <wp:comment_approved>1</wp:comment_approved>
     <wp:comment_parent>0</wp:comment_parent>
   </wp:comment> <wp:comment>
     <wp:comment_id>11786103</wp:comment_id>
     <wp:comment_author>Johann Deneux</wp:comment_author>
     <wp:comment_author_email></wp:comment_author_email>
     <wp:comment_author_url></wp:comment_author_url>
     <wp:comment_author_IP></wp:comment_author_IP>
     <wp:comment_date_gmt>2013-01-17 04:26:57</wp:comment_date_gmt>
     <wp:comment_content><![CDATA[Apologies not accepted, none are needed :)<br />Regarding Zero() = None, I prefer it because I thought an empty audit should do nothing, as opposed to reporting a failure.<br />It bothers me a bit that Combine(Zero(), e) would be different than e (assuming a Combine that would work similarly to Bind, if you were to write one).]]></wp:comment_content>
     <wp:comment_approved>1</wp:comment_approved>
     <wp:comment_parent>0</wp:comment_parent>
   </wp:comment>
   </item><item>
     <title>Playing with error handling strategies</title>
     <link>http://blog.mavnn.co.uk/playing-with-error-handling-strategies</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2013-01-14 13:58:00</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     <wp:comment>
     <wp:comment_id>11783816</wp:comment_id>
     <wp:comment_author>Johann Deneux</wp:comment_author>
     <wp:comment_author_email></wp:comment_author_email>
     <wp:comment_author_url></wp:comment_author_url>
     <wp:comment_author_IP></wp:comment_author_IP>
     <wp:comment_date_gmt>2013-01-16 10:31:55</wp:comment_date_gmt>
     <wp:comment_content><![CDATA[I don't think your TryWith methods do what they are supposed to do, since evaluation in F# is eager.<br />In other words, by the time you send expr to TryWith it has already been evaluated, and it has either already thrown, in which case TryWith won't be executed, or it hasn't thrown in which case it won't either in the body of TryWith.<br />Or did I miss something?]]></wp:comment_content>
     <wp:comment_approved>1</wp:comment_approved>
     <wp:comment_parent>0</wp:comment_parent>
   </wp:comment> <wp:comment>
     <wp:comment_id>11784127</wp:comment_id>
     <wp:comment_author>Michael Newton</wp:comment_author>
     <wp:comment_author_email></wp:comment_author_email>
     <wp:comment_author_url></wp:comment_author_url>
     <wp:comment_author_IP></wp:comment_author_IP>
     <wp:comment_date_gmt>2013-01-16 12:35:52</wp:comment_date_gmt>
     <wp:comment_content><![CDATA[Hi Johann,<br />my reply to this turned out a bit long, so I turned it into my next blog post instead.<p>You can find it at <a href="http://blog.mavnn.co.uk/in-which-our-intrepid-author-de-sugars-a-mona" rel="nofollow">http://blog.mavnn.co.uk/in-which-our-intrepid-author-de-sugars-a-mona</a></p><p>Thanks for the comment, it definitely made me think...</p>]]></wp:comment_content>
     <wp:comment_approved>1</wp:comment_approved>
     <wp:comment_parent>0</wp:comment_parent>
   </wp:comment>
   </item><item>
     <title>Getting started with Fake - an introduction</title>
     <link>http://blog.mavnn.co.uk/getting-started-with-fake-an-introduction-tag</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2013-01-09 05:40:00</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     <wp:comment>
     <wp:comment_id>11768783</wp:comment_id>
     <wp:comment_author>Karl</wp:comment_author>
     <wp:comment_author_email></wp:comment_author_email>
     <wp:comment_author_url></wp:comment_author_url>
     <wp:comment_author_IP></wp:comment_author_IP>
     <wp:comment_date_gmt>2013-01-10 03:19:55</wp:comment_date_gmt>
     <wp:comment_content><![CDATA[Good post!]]></wp:comment_content>
     <wp:comment_approved>1</wp:comment_approved>
     <wp:comment_parent>0</wp:comment_parent>
   </wp:comment>
   </item><item>
     <title>St. Lambda and the T-shirt of Extra Geek</title>
     <link>http://blog.mavnn.co.uk/st-lambda-and-the-t-shirt-of-extra-geek</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2013-01-04 12:57:38</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     <wp:comment>
     <wp:comment_id>11769446</wp:comment_id>
     <wp:comment_author>Jack Fox</wp:comment_author>
     <wp:comment_author_email></wp:comment_author_email>
     <wp:comment_author_url></wp:comment_author_url>
     <wp:comment_author_IP></wp:comment_author_IP>
     <wp:comment_date_gmt>2013-01-10 07:48:15</wp:comment_date_gmt>
     <wp:comment_content><![CDATA[Michael, I want one! I have a cool #NOOO number to show-off, but boy those T-shirts are expensive.]]></wp:comment_content>
     <wp:comment_approved>1</wp:comment_approved>
     <wp:comment_parent>0</wp:comment_parent>
   </wp:comment> <wp:comment>
     <wp:comment_id>11769452</wp:comment_id>
     <wp:comment_author>Michael Newton</wp:comment_author>
     <wp:comment_author_email></wp:comment_author_email>
     <wp:comment_author_url></wp:comment_author_url>
     <wp:comment_author_IP></wp:comment_author_IP>
     <wp:comment_date_gmt>2013-01-10 07:50:39</wp:comment_date_gmt>
     <wp:comment_content><![CDATA[They are: I'm afraid the only reason I went for it is that I'd already been promised a few geeky t-shirts as a Christmas/birthday present.]]></wp:comment_content>
     <wp:comment_approved>1</wp:comment_approved>
     <wp:comment_parent>0</wp:comment_parent>
   </wp:comment>
   </item><item>
     <title>Dealing with grief</title>
     <link>http://blog.mavnn.co.uk/losing-an-unborn-child</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2012-12-23 16:05:00</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     
   </item><item>
     <title>Anyone Using FsCheck for Business Code?</title>
     <link>http://blog.mavnn.co.uk/anyone-using-fscheck-for-business-code</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2012-12-13 12:39:31</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     
   </item><item>
     <title>Strange errors from the F# compiler</title>
     <link>http://blog.mavnn.co.uk/strange-errors-from-the-f-compiler</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2012-11-23 08:24:58</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     
   </item><item>
     <title>Some days it's good to be a dad</title>
     <link>http://blog.mavnn.co.uk/some-days-its-good-to-be-a-dad</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2012-11-17 02:10:50</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     
   </item><item>
     <title>Representing EasyNetQ Message Subscriptions as Blocking Queues</title>
     <link>http://blog.mavnn.co.uk/representing-easynetq-message-subscriptions-a</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2012-11-15 11:17:00</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     <wp:comment>
     <wp:comment_id>11622957</wp:comment_id>
     <wp:comment_author>Michael Newton</wp:comment_author>
     <wp:comment_author_email></wp:comment_author_email>
     <wp:comment_author_url></wp:comment_author_url>
     <wp:comment_author_IP></wp:comment_author_IP>
     <wp:comment_date_gmt>2012-11-15 11:24:34</wp:comment_date_gmt>
     <wp:comment_content><![CDATA[Unfortunately Posterous is being annoying today. I suspect this blog post is now going to appear 3 times, but hey ho...]]></wp:comment_content>
     <wp:comment_approved>1</wp:comment_approved>
     <wp:comment_parent>0</wp:comment_parent>
   </wp:comment>
   </item><item>
     <title>An introduction to F# (Screencast and PDF slides)</title>
     <link>http://blog.mavnn.co.uk/an-introduction-to-f-screencast-and-pdf-slide</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2012-11-09 04:15:36</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     
   </item><item>
     <title>Sending emails via the command line</title>
     <link>http://blog.mavnn.co.uk/sending-emails-via-the-command-line</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2012-10-11 02:54:56</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     
   </item><item>
     <title>Teaching Good Programming Style</title>
     <link>http://blog.mavnn.co.uk/teaching-good-programming-style</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2012-10-09 08:33:52</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     
   </item><item>
     <title>Stress testing EasyNetQ services with F#</title>
     <link>http://blog.mavnn.co.uk/stress-testing-easynetq-services-with-f</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2012-10-04 02:15:45</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     
   </item><item>
     <title>GPL Munitions</title>
     <link>http://blog.mavnn.co.uk/gpl-munitions</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2012-06-12 14:36:11</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     
   </item><item>
     <title>Anyone seen one these before?</title>
     <link>http://blog.mavnn.co.uk/anyone-seen-one-these-before</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2012-04-27 14:03:58</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     
   </item><item>
     <title>More progress</title>
     <link>http://blog.mavnn.co.uk/more-progress</link>
     <dsq:thread_identifier></dsq:thread_identifier>
     <wp:post_date_gmt>2012-03-18 16:30:35</wp:post_date_gmt>
     <wp:comment_status>open</wp:comment_status>
     
   </item></channel>
    </rss>
