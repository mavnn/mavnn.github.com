<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mavnn's blog]]></title>
  <link href="http://blog.mavnn.co.uk/atom.xml" rel="self"/>
  <link href="http://blog.mavnn.co.uk/"/>
  <updated>2016-04-15T16:48:55+01:00</updated>
  <id>http://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Video and Slides for From the Ivory Tower]]></title>
    <link href="http://blog.mavnn.co.uk/video-and-slides-for-from-the-ivory-tower/"/>
    <updated>2016-04-15T14:14:17+01:00</updated>
    <id>http://blog.mavnn.co.uk/video-and-slides-for-from-the-ivory-tower</id>
    <content type="html"><![CDATA[<p>I spoke this morning at <a href="https://skillsmatter.com/conferences/7145-f-exchange-2016#program">F# Exchange</a> and this being SkillsMatter they&rsquo;ve published the recording already.</p>

<p>It&rsquo;s a nice short talk, weighing in at about 15 minutes. So grab yourself a coffee and
take a short tour of how some of F#&rsquo;s more esoteric features (active patterns, computational expressions,
quotations and type providers) have been used to solve real problems in the real world.</p>

<p>Video here: <a href="https://skillsmatter.com/skillscasts/7735-fixing-real-life-problems-from-the-ivory-tower">https://skillsmatter.com/skillscasts/7735-fixing-real-life-problems-from-the-ivory-tower</a></p>

<p>Slides here: <a href="http://blog.mavnn.co.uk/FromTheIvoryTower/">http://blog.mavnn.co.uk/FromTheIvoryTower/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expanding Existing Computational Expressions]]></title>
    <link href="http://blog.mavnn.co.uk/expanding-existing-computational-expressions/"/>
    <updated>2016-03-29T19:15:20+01:00</updated>
    <id>http://blog.mavnn.co.uk/expanding-existing-computational-expressions</id>
    <content type="html"><![CDATA[<p>This is a &ldquo;just because you can&rdquo; post, although frankly bizarrely I have a genuine use case for this.</p>

<p>Let the mind melting commence!</p>

<p>Computational expressions in F# provide nice sugared syntax for monadic data structures such as <code>seq</code> and <code>async</code>; but the specific expressions are not built in language features. You can <a href="http://fsharpforfunandprofit.com/series/computation-expressions.html">build your own</a>.</p>

<p>Which is fun and all, but you know what&rsquo;s even more fun? Well, it turns out that there&rsquo;s no requirements for computational expressions to be actual monads. Even more fun than that is that the bind operation (used when you invoke <code>let!</code> syntax) is a member on a class &ndash; and it is valid both for it to be an extension method, and for it to be overloaded. You can even add custom operators to computational expressions using the extension method trick.</p>

<p>Which means you can do some very interesting things indeed to existing computational expressions. Let&rsquo;s try it out!</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">MyThing</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nc">MyThing</span> <span class="k">of</span> <span class="k">&#39;</span><span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">testFunc</span> <span class="n">str</span> <span class="o">=</span>
</span><span class='line'>  <span class="nc">MyThing</span> <span class="o">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">length</span> <span class="n">str</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">AsyncBuilder</span> <span class="k">with</span>
</span><span class='line'>  <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Bind</span><span class="o">(</span><span class="n">value</span> <span class="o">:</span> <span class="nc">MyThing</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="n">f</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">Async</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">b</span><span class="o">&gt;)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">(</span><span class="nc">MyThing</span> <span class="n">inner</span><span class="o">)</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>    <span class="n">f</span> <span class="n">inner</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[&lt;</span><span class="nc">CustomOperation</span><span class="o">(</span><span class="s2">&quot;log&quot;</span><span class="o">,</span> <span class="nc">MaintainsVariableSpaceUsingBind</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)&gt;]</span>
</span><span class='line'>  <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Log</span><span class="o">(</span><span class="n">boundValues</span> <span class="o">:</span> <span class="nc">Async</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="o">[&lt;</span><span class="nc">ProjectionParameter</span><span class="o">&gt;]</span> <span class="n">messageFunc</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">let</span><span class="o">!</span> <span class="n">b</span> <span class="o">=</span> <span class="n">boundValues</span>
</span><span class='line'>      <span class="n">printfn</span> <span class="s2">&quot;Log message: %s&quot;</span> <span class="o">&lt;|</span> <span class="n">messageFunc</span> <span class="n">b</span>
</span><span class='line'>      <span class="n">printfn</span> <span class="s2">&quot;Currently let bound things: %A&quot;</span> <span class="n">b</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">b</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">workflow</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">log</span> <span class="s2">&quot;a string&quot;</span>
</span><span class='line'>    <span class="k">let</span><span class="o">!</span> <span class="n">c</span> <span class="o">=</span> <span class="n">testFunc</span> <span class="s2">&quot;Count the letters&quot;</span>
</span><span class='line'>    <span class="k">let</span><span class="o">!</span> <span class="n">result</span> <span class="o">=</span> <span class="n">async</span> <span class="o">{</span> <span class="k">return</span> <span class="o">(</span><span class="n">c</span> <span class="o">*</span> <span class="mi">10</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">do</span><span class="o">!</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Sleep</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">log</span> <span class="s2">&quot;more string&quot;</span>
</span><span class='line'>    <span class="k">let</span><span class="o">!</span> <span class="n">a</span> <span class="o">=</span> <span class="nc">MyThing</span> <span class="s2">&quot;A prefix here: &quot;</span>
</span><span class='line'>    <span class="n">log</span> <span class="s2">&quot;a different string&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sprintf</span> <span class="s2">&quot;%s %d&quot;</span> <span class="n">a</span> <span class="n">result</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="o">&lt;|</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">RunSynchronously</span> <span class="n">workflow</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Program outputs:</span>
</span><span class='line'><span class="c1">// Log message: a string</span>
</span><span class='line'><span class="c1">// Currently let bound things: &lt;null&gt;</span>
</span><span class='line'><span class="c1">// Log message: more string</span>
</span><span class='line'><span class="c1">// Currently let bound things: (17, 170)</span>
</span><span class='line'><span class="c1">// Log message: a different string</span>
</span><span class='line'><span class="c1">// Currently let bound things: (17, 170, &quot;A prefix here: &quot;)</span>
</span><span class='line'><span class="c1">// &quot;A prefix here:  170&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a full code example that compiles, runs and builds. Oh yes, and it&rsquo;s an example of a bind based custom operator in case you&rsquo;ve been looking for one.</p>

<p>As you can see we can now <code>let!</code> both <code>MyThing</code> and <code>Async</code> results and both will be handled correctly &ndash; and we can also add logging statements using the custom operator which will get placed correctly into the async workflow. For even more fun and profit, the log custom operator has access to all currently bound values (which it logs in our example).</p>

<p>In case the custom operator is making you scratch your head, the way this one works is that a tuple of the currently bound values in the CE is passed into the operator as the first argument wrapped using the <code>Return</code> method of the CE (in this case, that means we get an Async&lt;&lsquo;a> where &#8216;a is a tuple). The <code>ProjectionParameter</code> is a function from the currently bound values to the expression that follows the custom operator. In my case, that&rsquo;s always a static string, but of course it could be an expression which used some of the already bound values. Once you&rsquo;ve done whatever you&rsquo;re doing within the custom operator, it&rsquo;s important that you pass back the bound values you received &ndash; again, wrapped in a type that the CE knows how to bind as it will use bind to include this code into the overall expression result. As a word of warning, the explanation above is only true for custom operators where <code>MaintainsVariableSpaceUsingBind</code> is set to true. If it is set to false, the CE must support yield and the expansion mechanism is quite different.</p>

<p>I see all kinds of useful ways of bending the F# language here, and making libraries easier to use from within the built in CEs. Have fun, and remember to use these powers for good!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type Provider Pro-Tip: Using Dictionary]]></title>
    <link href="http://blog.mavnn.co.uk/type-provider-pro-tip-using-dictionary/"/>
    <updated>2016-03-05T15:38:45+00:00</updated>
    <id>http://blog.mavnn.co.uk/type-provider-pro-tip-using-dictionary</id>
    <content type="html"><![CDATA[<p>During the <a href="http://blog.mavnn.co.uk/type-providers-live-the-movie/">Type Provider Live</a> recording, <a href="https://twitter.com/panesofglass">Ryan</a> asked me about basing erased provided types on dictionary types, and then exposing nicely typed properties to access data stored within the dictionary.</p>

<p>This will sound familiar to users of a number of dynamically typed languages as in many cases objects in these languages are just dictionaries under the hood.</p>

<p>This is such a common thing to be doing in a type provider that I thought it was worth writing up a working example that can then be modified to your individual situation. I&rsquo;ve presented the entire listing below with comments, but there is one particular trick I&rsquo;ll explain in a bit more detail. Let&rsquo;s have a look at let bindings in quotations!</p>

<!-- more -->


<p>So, normally when you write a <code>let</code> binding in F#, and end up writing something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">myFunction</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span> <span class="o">+</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, the body of function <code>myFunction</code> is an expression that evaluates to 20. But it turns out that this is actually syntax sugar for:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">myFunction</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span> <span class="k">in</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>A quotation in F# always represents a single expression, so it shouldn&rsquo;t come as a surprise at this point that the <code>Expr.Let</code> class has a constructor this three arguments. The variable being bound, the value to bind to it, and the body in which it is used. So if you want to express the body of the function above you end up with something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">version1</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">&lt;@@</span> <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span> <span class="k">in</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">10</span> <span class="o">@@&gt;</span> <span class="c1">// cheat!</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">version2</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">xVar</span> <span class="o">=</span> <span class="nc">Var</span><span class="o">(</span><span class="s2">&quot;x&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;)</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Var</span> <span class="n">xVar</span>
</span><span class='line'>  <span class="nn">Expr</span><span class="p">.</span><span class="nc">Let</span><span class="o">(</span><span class="n">xVar</span><span class="o">,</span> <span class="o">&lt;@@</span> <span class="mi">10</span> <span class="o">@@&gt;,</span> <span class="o">&lt;@@</span> <span class="o">%%</span><span class="n">x</span> <span class="o">+</span> <span class="mi">10</span> <span class="o">@@&gt;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The trick you need to know is that <code>Expr.Var</code> produces an Expr that represents a place where a variable will be used. But it creates an untyped Expr, and this can (and does) cause issues with type inference. We can work around this by making use of typed expressions, represented by the generic <code>Expr&lt;'a&gt;</code> class. The type provider API takes the untyped version, but you can convert back to the untyped version either by calling the <code>Raw</code> property on the typed expression or just by using it to help construct an expression which contains the typed expression but which is untyped itself using the <code>Expr</code> classes.</p>

<p>In the code below, notice the use of <code>&lt;@ ... @&gt;</code> and <code>%</code> rather than <code>&lt;@@ ... @@&gt;</code> and <code>%%</code> to work with typed expressions rather than untyped.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">GD</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Collections</span><span class="p">.</span><span class="nn">Generic</span><span class="p">.</span><span class="nc">Dictionary</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">,</span><span class="kt">string</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">dictExpr</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">gdVar</span> <span class="o">=</span> <span class="nc">Var</span><span class="o">(</span><span class="s2">&quot;gd&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">GD</span><span class="o">&gt;)</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">gdExpr</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Expr</span><span class="p">.</span><span class="nc">Var</span> <span class="n">gdVar</span> <span class="o">|&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Cast</span><span class="o">&lt;</span><span class="nc">GD</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="c1">// Expr.Cast forces this to be a typed expression</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">addValue</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Expr</span><span class="p">.</span><span class="nc">Let</span><span class="o">(</span><span class="n">gdVar</span><span class="o">,</span> <span class="o">&lt;@</span> <span class="nc">GD</span><span class="bp">()</span> <span class="o">@&gt;,</span> <span class="o">&lt;@</span> <span class="o">%</span><span class="n">gdExpr</span><span class="o">.[</span><span class="s2">&quot;one&quot;</span><span class="o">]</span> <span class="o">&lt;-</span> <span class="s2">&quot;the number one&quot;</span> <span class="o">@&gt;)</span>
</span><span class='line'>    <span class="c1">// the line above fails without typed expressions</span>
</span></code></pre></td></tr></table></div></figure>


<p>With that out of the way, we&rsquo;re good to go. The type provider below is a simple wrapper around a string, string dictionary. It looks like this in use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">MyType</span> <span class="o">=</span> <span class="nn">DictProvider</span><span class="p">.</span><span class="nc">ParaProvider</span><span class="o">&lt;</span><span class="s2">&quot;name1, name2&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">thing</span> <span class="o">=</span> <span class="nc">MyType</span><span class="o">(</span><span class="s2">&quot;1&quot;</span><span class="o">,</span><span class="s2">&quot;2&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">thing</span><span class="o">.</span><span class="n">name1</span> <span class="c1">// &quot;1&quot;</span>
</span><span class='line'><span class="n">thing</span><span class="o">.</span><span class="n">name2</span> <span class="c1">// &quot;2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">thing</span><span class="o">.</span><span class="n">name1</span> <span class="o">&lt;-</span> <span class="s2">&quot;not one. Muhahahaha!&quot;</span>
</span><span class='line'><span class="n">thing</span><span class="o">.</span><span class="n">name2</span> <span class="o">&lt;-</span> <span class="s2">&quot;that&#39;s why you shouldn&#39;t make things mutable&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">thing</span><span class="o">.</span><span class="n">name1</span> <span class="c1">// &quot;not one. Muhahahaha!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll get different properties depending which strings you supply as parameters.</p>

<p>Here&rsquo;s the source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">DictProvider</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">GD</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Collections</span><span class="p">.</span><span class="nn">Generic</span><span class="p">.</span><span class="nc">Dictionary</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">,</span> <span class="kt">string</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">DictionaryProvider</span><span class="bp">()</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;DictProvider&quot;</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">createType</span> <span class="n">typeName</span> <span class="o">(</span><span class="n">parameters</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="c1">// We&#39;ll get our property names by just splitting</span>
</span><span class='line'>    <span class="c1">// our single parameter on commas</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">propNames</span> <span class="o">=</span>
</span><span class='line'>      <span class="o">(</span><span class="n">parameters</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:?&gt;</span> <span class="kt">string</span><span class="o">).</span><span class="nc">Split</span> <span class="sc">&#39;,&#39;</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="nc">Trim</span><span class="bp">()</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Each of our properties has setter code to set the value in the dict with the</span>
</span><span class='line'>    <span class="c1">// name of the property, and getter code with gets the same value</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">aProp</span> <span class="n">name</span> <span class="o">=</span>
</span><span class='line'>      <span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>        <span class="n">name</span><span class="o">,</span>
</span><span class='line'>        <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>        <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">false</span><span class="o">,</span>
</span><span class='line'>        <span class="nc">GetterCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="o">(%%</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]:</span><span class="nc">GD</span><span class="o">).[</span><span class="n">name</span><span class="o">]</span> <span class="o">@@&gt;),</span>
</span><span class='line'>        <span class="nc">SetterCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="o">(%%</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]:</span><span class="nc">GD</span><span class="o">).[</span><span class="n">name</span><span class="o">]</span> <span class="o">&lt;-</span> <span class="o">(%%</span><span class="n">args</span><span class="o">.[</span><span class="mi">1</span><span class="o">]:</span><span class="kt">string</span><span class="o">)</span> <span class="o">@@&gt;))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Here we set the type to be erased to as &quot;GD&quot; (our type alias for a dictionary)</span>
</span><span class='line'>    <span class="c1">// If we want to hide the normal dictionary methods, we could use:</span>
</span><span class='line'>    <span class="c1">// &#39;myType.HideObjectMethods &lt;- true&#39;</span>
</span><span class='line'>    <span class="c1">// But here we&#39;ll just let people use the type as a dictionary as well.</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">myType</span> <span class="o">=</span>
</span><span class='line'>      <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="n">typeName</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">GD</span><span class="o">&gt;)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Make sure we add all the properties to the object.</span>
</span><span class='line'>    <span class="n">propNames</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">propName</span> <span class="o">-&gt;</span> <span class="n">aProp</span> <span class="n">propName</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">ofArray</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">myType</span><span class="o">.</span><span class="nc">AddMembers</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// We&#39;ll want a constructor that takes as many parameters as we have</span>
</span><span class='line'>    <span class="c1">// properties, as we&#39;ll want to set the value in the dictionary of our</span>
</span><span class='line'>    <span class="c1">// properties during construction. If we don&#39;t, trying to use the properties</span>
</span><span class='line'>    <span class="c1">// will result in a key not found exception.</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">cstorParams</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">propNames</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">propName</span> <span class="o">-&gt;</span> <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="n">propName</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;))</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">ofArray</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Here&#39;s the constructor code where we set each property in turn.</span>
</span><span class='line'>    <span class="c1">// Notice how the fold keeps on building up a larger let expression,</span>
</span><span class='line'>    <span class="c1">// adding a set value line at the top of the expression each time through.</span>
</span><span class='line'>    <span class="c1">// Our initial state (a line with only the dictionary variable on) is always</span>
</span><span class='line'>    <span class="c1">// left last, so this is what will be returned from the constructor.</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">cstorCode</span> <span class="o">=</span>
</span><span class='line'>      <span class="k">fun</span> <span class="o">(</span><span class="n">args</span> <span class="o">:</span> <span class="nc">Expr</span> <span class="kt">list</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">dictionaryVar</span> <span class="o">=</span> <span class="nc">Var</span><span class="o">(</span><span class="s2">&quot;dictionary&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">GD</span><span class="o">&gt;)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">dictionary</span> <span class="o">:</span> <span class="nc">Expr</span><span class="o">&lt;</span><span class="nc">GD</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">dictionaryVar</span> <span class="o">|&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Var</span> <span class="o">|&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Cast</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">setValues</span> <span class="o">=</span>
</span><span class='line'>          <span class="n">args</span>
</span><span class='line'>          <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">propNames</span>
</span><span class='line'>          <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">fold</span> <span class="o">(</span><span class="k">fun</span> <span class="n">state</span> <span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">arg</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">&lt;@</span> <span class="o">(%</span><span class="n">dictionary</span><span class="o">).[</span><span class="n">name</span><span class="o">]</span> <span class="o">&lt;-</span> <span class="o">(%%</span><span class="n">arg</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span>
</span><span class='line'>               <span class="o">%</span><span class="n">state</span> <span class="o">@&gt;)</span> <span class="o">&lt;@</span> <span class="o">%</span><span class="n">dictionary</span> <span class="o">@&gt;</span>
</span><span class='line'>        <span class="nn">Expr</span><span class="p">.</span><span class="nc">Let</span><span class="o">(</span><span class="n">dictionaryVar</span><span class="o">,</span> <span class="o">&lt;@</span> <span class="nc">GD</span><span class="bp">()</span> <span class="o">@&gt;,</span> <span class="n">setValues</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Build the constructor out of our helpers</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">cstor</span> <span class="o">=</span>
</span><span class='line'>      <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="n">cstorParams</span><span class="o">,</span> <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="n">cstorCode</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// And make sure you add it to the class!</span>
</span><span class='line'>    <span class="n">myType</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">cstor</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">myType</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">provider</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;ParaProvider&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">parameters</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">[</span><span class="nc">ProvidedStaticParameter</span><span class="o">(</span><span class="s2">&quot;PropNames&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'>    <span class="n">provider</span><span class="o">.</span><span class="nc">DefineStaticParameters</span><span class="o">(</span><span class="n">parameters</span><span class="o">,</span> <span class="n">createType</span><span class="o">)</span>
</span><span class='line'>    <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">provider</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type Providers Live - the Movie]]></title>
    <link href="http://blog.mavnn.co.uk/type-providers-live-the-movie/"/>
    <updated>2016-02-29T21:10:51+00:00</updated>
    <id>http://blog.mavnn.co.uk/type-providers-live-the-movie</id>
    <content type="html"><![CDATA[<p>I recently gave a live streamed tutorial on building type providers, which I&rsquo;ve embedded below. Apologies for the sound; apparently Google Hangouts added a feature I was unaware of until after the stream started which mutes your microphone whenever you type.</p>

<p>Fortunately I think enough was preserved to be useful, and (amazingly!) all of the demonstrations actually worked.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/pXT0li6zxKQ" frameborder="0" allowfullscreen></iframe>


<p>If you&rsquo;d like to try things out for yourself, there&rsquo;s a github repository at <a href="https://github.com/mavnn/CambridgeTypeProvider">https://github.com/mavnn/CambridgeTypeProvider</a> which contains 6 individual fsx files, one for each new feature added to the type provider.</p>

<p>There&rsquo;s a bunch of other type provider information scattered around this blog, if you&rsquo;re interested just click <a href="http://blog.mavnn.co.uk/blog/categories/typeprovider/">the &ldquo;typeprovider&rdquo; tag</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EmParsec Embedded Parser Library]]></title>
    <link href="http://blog.mavnn.co.uk/emparsec-embedded-parser-library/"/>
    <updated>2016-01-18T12:53:11+00:00</updated>
    <id>http://blog.mavnn.co.uk/emparsec-embedded-parser-library</id>
    <content type="html"><![CDATA[<blockquote><p>You can find EmParsec on GitHub: <a href="https://github.com/mavnn/EmParsec">https://github.com/mavnn/EmParsec</a></p></blockquote>

<p>Type providers, by their very nature, tend to access data external to the .net ecosystem. It can also be very awkward technically to make use of dependencies during the actual type generation process.</p>

<p>This is rather a pity, because accessing all of that external data is much nicer and easier when you have a decent parser to do it with. And F# has very, very nice parser support via the <a href="http://www.quanttec.com/fparsec/">FParsec</a> library. Instead, many (most?) type providers end up creating mini-one shot parsers which can be a bit slow to write and don&rsquo;t tend to have features that come for free in a more complete solution such as nice error reporting.</p>

<p>Writing yet an other parser (YAOP) this week I decided that enough was enough. What I needed was a shared resource that people could pool improvements for that could be easily embedded in projects like type providers were it isn&rsquo;t desirable (or sometimes possible) to take external binary dependencies.</p>

<p>So I built it.</p>

<!-- more -->


<p>EmParsec is a single file parser combinator &ldquo;library&rdquo;, inspired by both FParsec library and <a href="http://fsharpforfunandprofit.com/posts/understanding-parser-combinators/">Scott&rsquo;s excellent series on building parser combinators</a>.</p>

<p>It consists of a single fs file that can be loaded in the editor of your choice without any requirement for a project file or similar. When you want to use it, you can just reference it as a <a href="https://fsprojects.github.io/Paket/github-dependencies.html">Paket GitHub dependency</a> (which you&rsquo;ll be wanting to do for the ProvidedTypes.fs file if you&rsquo;re creating a type provider anyway) or even just copy the file across.</p>

<p>If you are compiling EmParsec into a larger project, it marks itself as &ldquo;internal&rdquo; so that you don&rsquo;t pollute the end users name space, and so that if two projects you reference have embedded different versions of EmParsec there are no collisions.</p>

<h2>How do I use it?</h2>

<p>So, you&rsquo;ve added EmParsec.fs to your project (manually or with Paket) and now you&rsquo;re wondering how to use it. Let&rsquo;s build some simple examples.</p>

<h3>Matching an exact string</h3>

<p>Let&rsquo;s start with something simple: what if I just want to match a string?</p>

<p>Parser combinator libraries allow you to combine parsers from simpler parsers (hence the name), but in this case <code>pstring</code> (the &lsquo;p&rsquo; is there to avoid clashing with the existing <code>string</code> function) is provided for us by EmParsec.</p>

<p>Let&rsquo;s try it out!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">EmParsec</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">thingParser</span> <span class="o">=</span> <span class="n">pstring</span> <span class="s2">&quot;thing&quot;</span>
</span><span class='line'><span class="c1">// When you enter this line, F# give a &quot;Value restriction&quot; error.</span>
</span><span class='line'><span class="c1">// You can either mark thingParser as type UParser&lt;string&gt;, or</span>
</span><span class='line'><span class="c1">// use the parser with run as below and the error will disappear.</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="n">thingParser</span> <span class="s2">&quot;thing&quot;</span>
</span><span class='line'><span class="c1">// val it : Choice&lt;string,string&gt; = Choice1Of2 &quot;thing&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="n">thingParser</span> <span class="s2">&quot;th1ng&quot;</span>
</span><span class='line'><span class="c1">// val it : Choice&lt;string,string&gt; =</span>
</span><span class='line'><span class="c1">//   Choice2Of2</span>
</span><span class='line'><span class="c1">//     &quot;Parser &lt;string thing&gt; failed at line 0 column 2</span>
</span><span class='line'><span class="c1">// Unexpected [&#39;1&#39;]</span>
</span><span class='line'><span class="c1">// th1ng</span>
</span><span class='line'><span class="c1">//   ^&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not bad! It even marks the unexpected character in the error output.</p>

<p>Unfortunately:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">run</span> <span class="n">thingParser</span> <span class="s2">&quot;thing and more&quot;</span>
</span><span class='line'><span class="c1">// val it : Choice&lt;string,string&gt; = Choice1Of2 &quot;thing&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That probably isn&rsquo;t the behaviour you were hoping for. There&rsquo;s still input left after the parser has finished, but that isn&rsquo;t being seen as an error. EmParsec includes the <code>eof</code> parser for just this type of occasion &ndash; a parser that checks the input is exhausted.</p>

<p>So we want a parser that parses &ldquo;thing&rdquo; and then ends.</p>

<p>Let&rsquo;s go:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">thingParser2</span> <span class="o">=</span> <span class="n">andThen</span> <span class="o">(</span><span class="n">pstring</span> <span class="s2">&quot;thing&quot;</span><span class="o">)</span> <span class="n">eof</span>
</span><span class='line'><span class="c1">// normally written</span>
</span><span class='line'><span class="k">let</span> <span class="n">thingParser2&#39;</span> <span class="o">=</span> <span class="n">pstring</span> <span class="s2">&quot;thing&quot;</span> <span class="o">.&gt;&gt;.</span> <span class="n">eof</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="n">thingParser2</span> <span class="s2">&quot;thing&quot;</span>
</span><span class='line'><span class="c1">// val it : Choice&lt;(string * unit),string&gt; = Choice1Of2 (&quot;thing&quot;, null)</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="n">thingParser2</span> <span class="s2">&quot;th1ng&quot;</span>
</span><span class='line'><span class="c1">// val it : Choice&lt;(string * unit),string&gt; =</span>
</span><span class='line'><span class="c1">//   Choice2Of2</span>
</span><span class='line'><span class="c1">//     &quot;Parser (&lt;string thing&gt; andThen &lt;end&gt;) failed at line 0 column 2</span>
</span><span class='line'><span class="c1">// Unexpected [&#39;1&#39;]</span>
</span><span class='line'><span class="c1">// th1ng</span>
</span><span class='line'><span class="c1">//   ^&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="n">thingParser2</span> <span class="s2">&quot;thing and more&quot;</span>
</span><span class='line'><span class="c1">// val it : Choice&lt;(string * unit),string&gt; =</span>
</span><span class='line'><span class="c1">//   Choice2Of2</span>
</span><span class='line'><span class="c1">//     &quot;Parser (&lt;string thing&gt; andThen &lt;end&gt;) failed at line 0 column 5</span>
</span><span class='line'><span class="c1">// Unexpected input remaining &#39; and more&#39;</span>
</span><span class='line'><span class="c1">// thing and more</span>
</span><span class='line'><span class="c1">//      ^&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s more like it. The only issue now is that we&rsquo;ve combined two parser, so we&rsquo;re getting back a tuple of two results.</p>

<p>A simple tweak tells EmParsec to throw away the unit result returned by <code>eof</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">improvedThingParser</span> <span class="o">=</span> <span class="n">pstring</span> <span class="s2">&quot;thing&quot;</span> <span class="o">.&gt;&gt;</span> <span class="n">eof</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="n">improvedThingParser</span> <span class="s2">&quot;thing&quot;</span>
</span><span class='line'><span class="c1">// val it : Choice&lt;string,string&gt; = Choice1Of2 &quot;thing&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;Impressive,&rdquo; I hear you say: &ldquo;You can parse static strings!&rdquo;</p>

<h3>Parsing a simple template language</h3>

<p>You have a point. Let&rsquo;s tackle a simple template language. You know the kind of thing:</p>

<p><code>Welcome {name}! Please spend money here.</code></p>

<p>That kind of thing. I&rsquo;m going to start building up a set of helper parsers for this, applying some type annotations both to make the example code clearer and to avoid the value restriction errors that crop up until you actually use the parsers (those occur because these parsers can carry generic user state, but we&rsquo;re not going to go into using that here).</p>

<p>We have two &ldquo;types&rdquo; of token that can exist in our template language: values to be replaced, and text to be preserved. Let&rsquo;s start by creating a union type to contain our parse results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">TemplatePart</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Text</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Value</span> <span class="k">of</span> <span class="kt">string</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, we&rsquo;ll have a parser that will parse individual characters which are <em>not</em> an opening bracket:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">notOpenBracket</span> <span class="o">:</span> <span class="nc">UParser</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">satisfy</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span> <span class="o">&lt;&gt;</span> <span class="kt">char</span> <span class="sc">&#39;{&#39;</span><span class="o">)</span> <span class="s2">&quot;not open bracket&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>satisfy</code> is a function built into EmParsec which takes a predicate for whether or not it will consume the next character in the input stream. The final string argument is a name for the parser, which will be used in error messages.</p>

<p>Then we&rsquo;ll use that parser to create one that consumes as many &ldquo;not open bracket&rdquo; characters as it can, combines them into a string and then counts that string as a <code>Text</code> part.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">textParser</span> <span class="o">:</span> <span class="nc">UParser</span><span class="o">&lt;</span><span class="nc">TemplatePart</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">many1</span> <span class="n">notOpenBracket</span>
</span><span class='line'>  <span class="o">|&gt;&gt;</span> <span class="o">(</span><span class="k">fun</span> <span class="n">charList</span> <span class="o">-&gt;</span>
</span><span class='line'>         <span class="n">charList</span>
</span><span class='line'>         <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="kt">string</span>
</span><span class='line'>         <span class="o">|&gt;</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>         <span class="o">|&gt;</span> <span class="nc">Text</span><span class="o">)</span>
</span><span class='line'>  <span class="o">&lt;?&gt;</span> <span class="s2">&quot;&lt;text parser&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a new function here and a couple of new operators (all taken from FParsec, by the way). <code>|&gt;&gt;</code> is a map operator; it allows you to transform the result of a parser and then rewrap everything back up into a new parser. This is really at the heart of the power of parser combinator libraries.</p>

<p>The <code>&lt;?&gt;</code> operator is much simpler: it allows you to name a parser rather than its name being some combination of the parsers it&rsquo;s built of.</p>

<p>The <code>many1</code> function says &ldquo;match one or more instances of the parser that follows&rdquo;. There is also a <code>many</code>, which matches 0 or more repeats.</p>

<p>So that&rsquo;s good &ndash; we can capture the text in between our replacable values. Let&rsquo;s go with a parser for the bracketed value names next!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">valueName</span> <span class="o">:</span> <span class="nc">UParser</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">many1</span> <span class="o">(</span><span class="n">satisfy</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span> <span class="o">&lt;&gt;</span> <span class="sc">&#39;}&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="ow">not</span> <span class="o">&lt;|</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Char</span><span class="p">.</span><span class="nc">IsWhiteSpace</span> <span class="n">c</span><span class="o">))</span> <span class="s2">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|&gt;&gt;</span> <span class="o">(</span><span class="k">fun</span> <span class="n">charList</span> <span class="o">-&gt;</span> <span class="n">charList</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="kt">string</span> <span class="o">|&gt;</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">openValue</span> <span class="o">:</span> <span class="nc">UParser</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">pchar</span> <span class="sc">&#39;{&#39;</span> <span class="o">.&gt;&gt;.</span> <span class="n">spaces</span>
</span><span class='line'>  <span class="o">|&gt;&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">closeValue</span> <span class="o">:</span> <span class="nc">UParser</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">spaces</span> <span class="o">.&gt;&gt;.</span> <span class="n">pchar</span> <span class="sc">&#39;}&#39;</span>
</span><span class='line'>  <span class="o">|&gt;&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">value</span> <span class="o">:</span> <span class="nc">UParser</span><span class="o">&lt;</span><span class="nc">TemplatePart</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">between</span> <span class="n">openValue</span> <span class="n">closeValue</span> <span class="n">valueName</span>
</span><span class='line'>  <span class="o">|&gt;&gt;</span> <span class="nc">Value</span>
</span><span class='line'>  <span class="o">&lt;?&gt;</span> <span class="s2">&quot;&lt;value parser&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we now have parsers for white space and our &ldquo;valueName&rdquo; (which we are saying must be at least one character long, and can consist of any character which is not whitespace or a closing curly bracket). We can then use pchar (&ldquo;parse char&rdquo;) and whitespace to allow for minor variations in syntax (some people like <code>{name}</code>, others like <code>{ name }</code>).</p>

<p>Finally we build our value parser, using the <code>between</code> function, which does pretty much what you&rsquo;d expect: it takes an opening parser, a closing parser, and captures what&rsquo;s in between with third parser.</p>

<p>Our final step is just to combine our parsers for value and text sections. We want to capture &ldquo;many&rdquo; of one or the other, until we run out of input. We&rsquo;ll put an explicit <code>eof</code> on there as well, otherwise things like (for example) an unclosed <code>}</code> at the end of the string will not show up as an error &ndash; the parser will just stop at the character before the opening <code>{</code> as the last matching input.</p>

<p>Our final parser introduces the <code>&lt;|&gt;</code> (orElse) operator, and looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">template</span> <span class="o">:</span> <span class="nc">UParser</span><span class="o">&lt;</span><span class="nc">TemplatePart</span> <span class="kt">list</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">many</span> <span class="o">(</span><span class="n">value</span> <span class="o">&lt;|&gt;</span> <span class="n">textParser</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.&gt;&gt;</span> <span class="n">eof</span>
</span><span class='line'>  <span class="o">&lt;?&gt;</span> <span class="s2">&quot;&lt;template parser&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s try it out!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Text</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">showTemplate</span> <span class="n">values</span> <span class="n">parts</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">folder</span> <span class="o">(</span><span class="n">sb</span> <span class="o">:</span> <span class="nc">StringBuilder</span><span class="o">)</span> <span class="n">part</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">part</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Text</span> <span class="n">s</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">sb</span><span class="o">.</span><span class="nc">Append</span> <span class="n">s</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Value</span> <span class="n">v</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">defaultArg</span> <span class="o">(</span><span class="nn">Map</span><span class="p">.</span><span class="n">tryFind</span> <span class="n">v</span> <span class="n">values</span><span class="o">)</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="n">sb</span><span class="o">.</span><span class="nc">Append</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">sb</span> <span class="o">=</span> <span class="nn">List</span><span class="p">.</span><span class="n">fold</span> <span class="n">folder</span> <span class="o">(</span><span class="nc">StringBuilder</span><span class="bp">()</span><span class="o">)</span> <span class="n">parts</span>
</span><span class='line'>  <span class="n">sb</span><span class="o">.</span><span class="nc">ToString</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">values</span> <span class="o">=</span> <span class="nc">Map</span> <span class="o">[</span> <span class="s2">&quot;name&quot;</span><span class="o">,</span> <span class="s2">&quot;bob&quot;</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">run&#39;</span> <span class="n">parser</span> <span class="n">str</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">run</span> <span class="n">parser</span> <span class="n">str</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="k">function</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">Choice1Of2</span> <span class="n">success</span> <span class="o">-&gt;</span> <span class="n">showTemplate</span> <span class="n">values</span> <span class="n">success</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">Choice2Of2</span> <span class="n">fail</span> <span class="o">-&gt;</span> <span class="n">failwithf</span> <span class="s2">&quot;Parsing failed!</span><span class="se">\n</span><span class="s2">%s&quot;</span> <span class="n">fail</span>
</span></code></pre></td></tr></table></div></figure>


<p>A couple of helpers: <code>showTemplate</code> knows how to build up a string from a list of template parts and a value map, <code>run'</code> is just a simple wrapper around <code>run</code> that throws if parsing is not successful.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">ex1</span> <span class="o">=</span> <span class="s2">&quot;Welcome {name}! Please spend money here!&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="n">ex2</span> <span class="o">=</span> <span class="s2">&quot;hello { name } thing&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">run&#39;</span> <span class="n">template</span> <span class="n">ex1</span>
</span><span class='line'><span class="c1">// val it : string = &quot;Welcome bob! Please spend money here!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">run&#39;</span> <span class="n">template</span> <span class="n">ex2</span>
</span><span class='line'><span class="c1">// val it : string = &quot;hello bob thing&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">ex3</span> <span class="o">=</span> <span class="s2">&quot;Hello, { name }! How about {</span>
</span><span class='line'><span class="s2"> date:alreadyrendered?</span>
</span><span class='line'><span class="s2">}? &lt;- That should be left blank, but parse as valid.&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">run&#39;</span> <span class="n">template</span> <span class="n">ex3</span>
</span><span class='line'><span class="c1">// val it : string =</span>
</span><span class='line'><span class="c1">//   &quot;Hello, bob! How about ? &lt;- That should be left blank, but parse as valid.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally our templates in action. You can see that even with a simple parser like this, it&rsquo;s already reaching a complexity that would be painful to match with a hand rolled creation.</p>

<p>If you want to know more about parser combinators, and especially how to use them to create recursive grammars, do check out the <a href="http://www.quanttec.com/fparsec/">FParsec documentation</a> which is excellent. It is also more complete and <em>much</em> more performant than EmParsec.</p>

<p>But if you need a small, single file parser where performance is not the primary concern &ndash; maybe EmParsec is your friend. Anyone who wants to join in making it better is more than welcome! Of particular note is that EmParsec does not yet support controlling when backtracking does or doesn&rsquo;t happen (it will always backtrack) which can make for some pretty confusing error messages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angels From the Realms of Glory]]></title>
    <link href="http://blog.mavnn.co.uk/angels-from-the-realms-of-glory/"/>
    <updated>2015-12-19T12:00:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/angels-from-the-realms-of-glory</id>
    <content type="html"><![CDATA[<blockquote><p>An angel of the Lord appeared to them, and the glory of the Lord shone around them, and they were terrified. <ref><a href="https://www.biblegateway.com/passage/?search=luke+2:9&version=NIV" title="Luke 2:9">Luke 2:9</a></ref></p></blockquote>

<p>It&rsquo;s that time of year again, where the F# community get together to source a collection of weird, wonderful and occasionally useful blog posts on life, the universe and sometimes Christmas.</p>

<p>As mentioned in last years post, I like to go back to the source when it comes to advent posts, so lets dive back into the book of Luke (and learn about agent based programming as we go).</p>

<!-- more -->


<h3>The plan</h3>

<p>We&rsquo;re going to simulate the angelic choir as they sing for the shepherds, although with a
couple of minor limitations. One is I don&rsquo;t feel like dealing with cross platform audio issues
(and don&rsquo;t think I could do the voices justice anyway&hellip;) and the other is that I can&rsquo;t draw
for toffee.</p>

<p>So we&rsquo;re going to simulate a view of the angels from a long way away out of earshot.</p>

<p>The final result should end up looking something like this (your results may vary depending
on console colour scheme, but I&rsquo;d suggest dark background for the best effect!):</p>

<p><img src="http://blog.mavnn.co.uk/images/angels1.gif"/></p>

<h3>Step 1: atomic writes to the console</h3>

<p>If you&rsquo;ve tried to use the <code>System.Console</code> namespace in .net, you&rsquo;ll have discovered a few
things about it. The biggest problem we want to deal with, is that writing a character in colour
to the console is not atomic.</p>

<p>You have to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Set the cursor to the position you want to write</span>
</span><span class='line'><span class="nn">Console</span><span class="p">.</span><span class="nc">SetCursorPosition</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span>
</span><span class='line'><span class="c1">// Change the foreground colour to the colour you want</span>
</span><span class='line'><span class="nn">Console</span><span class="p">.</span><span class="nc">ForegroundColor</span> <span class="o">&lt;-</span> <span class="n">c</span>
</span><span class='line'><span class="c1">// Write the character</span>
</span><span class='line'><span class="nn">Console</span><span class="p">.</span><span class="nc">Write</span> <span class="o">(</span><span class="kt">string</span> <span class="n">m</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In async code, different threads doing this at the same time will mix these operations up,
as there&rsquo;s no way to know what an other thread is doing with the cursor while you try and
set up your own write.</p>

<p>For this we&rsquo;re going to set up our first agent: the console agent. It will be responsible
for all writes to the screen in our program.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">ConsoleColour</span><span class="o">|)</span> <span class="n">i</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="k">then</span>
</span><span class='line'>    <span class="nn">ConsoleColor</span><span class="p">.</span><span class="nc">Black</span>
</span><span class='line'>  <span class="k">elif</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">15</span> <span class="k">then</span>
</span><span class='line'>    <span class="nn">ConsoleColor</span><span class="p">.</span><span class="nc">White</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">enum</span> <span class="n">i</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">console</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span>
</span><span class='line'>    <span class="k">fun</span> <span class="n">agent</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="k">let</span> <span class="k">rec</span> <span class="n">inner</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">let</span><span class="o">!</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="nc">ConsoleColour</span> <span class="n">c</span><span class="o">,</span> <span class="n">m</span> <span class="o">:</span> <span class="kt">char</span><span class="o">)</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
</span><span class='line'>          <span class="nn">Console</span><span class="p">.</span><span class="nc">SetCursorPosition</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span>
</span><span class='line'>          <span class="nn">Console</span><span class="p">.</span><span class="nc">ForegroundColor</span> <span class="o">&lt;-</span> <span class="n">c</span>
</span><span class='line'>          <span class="nn">Console</span><span class="p">.</span><span class="nc">Write</span> <span class="o">(</span><span class="kt">string</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>          <span class="k">return</span><span class="o">!</span> <span class="n">inner</span> <span class="bp">()</span> <span class="o">}</span>
</span><span class='line'>      <span class="n">inner</span> <span class="bp">()</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">console</span><span class="o">.</span><span class="nn">Error</span><span class="p">.</span><span class="nc">Add</span><span class="o">(</span><span class="k">fun</span> <span class="n">e</span> <span class="o">-&gt;</span> <span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="n">e</span><span class="o">.</span><span class="nc">Message</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>(|ConsoleColour|)</code> construct is what&rsquo;s called an active pattern. With it, we can pattern
match on any integer and be guaranteed to get a valid ConsoleColor enum out. It also spells
&ldquo;colour&rdquo; correctly :D.</p>

<p>Then we start a <code>MailboxProcessor</code> (the default name for an agent in F#). This agent listens
for messages which consist of: an x coordinate, a y coordinate, an int for colour and a character
to write. The overall agent is implemented as an async block and so will not block a thread while
waiting for messages &ndash; but it will guarantee that it will not start processing the next message
until the current one is finished.</p>

<p>Hey presto! We can now safely write to the console from any thread simply by calling <code>console.Post.</code></p>

<p>We&rsquo;ll try it out by creating some random stationary angels.</p>

<p>First, we&rsquo;ll initialize some infinite sequences of random numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">seedx</span><span class="o">,</span> <span class="n">seedy</span><span class="o">,</span> <span class="n">seedc</span> <span class="o">=</span> <span class="mi">100</span><span class="o">,</span> <span class="mi">150</span><span class="o">,</span> <span class="mi">200</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">randX</span> <span class="o">=</span> <span class="nc">Random</span><span class="o">(</span><span class="n">seedx</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">randY</span> <span class="o">=</span> <span class="nc">Random</span><span class="o">(</span><span class="n">seedy</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">randC</span> <span class="o">=</span> <span class="nc">Random</span><span class="o">(</span><span class="n">seedc</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">randSeq</span> <span class="o">(</span><span class="n">rand</span> <span class="o">:</span> <span class="nc">Random</span><span class="o">)</span> <span class="n">min&#39;</span> <span class="n">max&#39;</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">Seq</span><span class="p">.</span><span class="n">unfold</span> <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">rand</span><span class="o">.</span><span class="nc">Next</span><span class="o">(</span><span class="n">min&#39;</span><span class="o">,</span> <span class="n">max&#39;</span><span class="o">),</span> <span class="bp">()</span><span class="o">))</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">xSeq</span> <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randX</span> <span class="n">xZero</span> <span class="o">(</span><span class="n">width</span> <span class="o">+</span> <span class="n">xZero</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">ySeq</span> <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randY</span> <span class="n">yZero</span> <span class="o">(</span><span class="n">height</span> <span class="o">+</span> <span class="n">yZero</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">cSeq</span> <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randC</span> <span class="mi">0</span> <span class="mi">15</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we&rsquo;ll wrap the write in an async method, and draw our angels across the screen concurrently;
each angel will wait 50 milliseconds per unit across the x axis to give a nice staggered appearance.</p>

<p>You can find a full listing in <a href="https://github.com/mavnn/advent2015/blob/master/advent1.fsx">advent1.fsx</a>. Running it should give you something like this:</p>

<p><img src="http://blog.mavnn.co.uk/images/angels2.gif"/></p>

<blockquote><p>But the angel said to them, “Do not be afraid. I bring you good news that will cause great joy for all the people. Today in the town of David a Savior has been born to you; he is the Messiah, the Lord. This will be a sign to you: You will find a baby wrapped in cloths and lying in a manger.” <ref><a href="https://www.biblegateway.com/passage/?search=luke+2:10-12&version=NIV" title="Luke 2:10-12">Luke 2:10-12</a></ref></p></blockquote>

<h2>Step 2: Add event loop</h2>

<p>Onwards! Time to make our angels move. Following on with the theme, we&rsquo;re going to make an agent
responsible for ticking off each &lsquo;loop&rsquo; of events.</p>

<p>We&rsquo;ll add some safety to our console agent to make sure that writes outside the console don&rsquo;t
cause us issues:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">width</span>  <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">WindowWidth</span>
</span><span class='line'><span class="k">let</span> <span class="n">height</span> <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">WindowHeight</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">xZero</span>  <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">WindowLeft</span>
</span><span class='line'><span class="k">let</span> <span class="n">yZero</span>  <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">WindowTop</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">ConsoleColour</span><span class="o">|)</span> <span class="n">i</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="k">then</span>
</span><span class='line'>    <span class="nn">ConsoleColor</span><span class="p">.</span><span class="nc">Black</span>
</span><span class='line'>  <span class="k">elif</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">15</span> <span class="k">then</span>
</span><span class='line'>    <span class="nn">ConsoleColor</span><span class="p">.</span><span class="nc">White</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">enum</span> <span class="n">i</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">X</span><span class="o">|)</span> <span class="n">x</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">xZero</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">xZero</span>
</span><span class='line'>  <span class="k">elif</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="n">width</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">width</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">x</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">Y</span><span class="o">|)</span> <span class="n">y</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">yZero</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">yZero</span>
</span><span class='line'>  <span class="k">elif</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="n">height</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">height</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">y</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">console</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span>
</span><span class='line'>    <span class="k">fun</span> <span class="n">agent</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="k">let</span> <span class="k">rec</span> <span class="n">inner</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">let</span><span class="o">!</span> <span class="o">(</span><span class="nc">X</span> <span class="n">x</span><span class="o">,</span> <span class="nc">Y</span> <span class="n">y</span><span class="o">,</span> <span class="nc">ConsoleColour</span> <span class="n">c</span><span class="o">,</span> <span class="n">m</span> <span class="o">:</span> <span class="kt">char</span><span class="o">)</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
</span><span class='line'>          <span class="nn">Console</span><span class="p">.</span><span class="nc">SetCursorPosition</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span>
</span><span class='line'>          <span class="nn">Console</span><span class="p">.</span><span class="nc">ForegroundColor</span> <span class="o">&lt;-</span> <span class="n">c</span>
</span><span class='line'>          <span class="nn">Console</span><span class="p">.</span><span class="nc">Write</span> <span class="o">(</span><span class="kt">string</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>          <span class="k">return</span><span class="o">!</span> <span class="n">inner</span> <span class="bp">()</span> <span class="o">}</span>
</span><span class='line'>      <span class="n">inner</span> <span class="bp">()</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">console</span><span class="o">.</span><span class="nn">Error</span><span class="p">.</span><span class="nc">Add</span><span class="o">(</span><span class="k">fun</span> <span class="n">e</span> <span class="o">-&gt;</span> <span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="n">e</span><span class="o">.</span><span class="nc">Message</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the use of the X and Y active patterns to enforce our domain constraints on the underlying
.net type.</p>

<p>We&rsquo;ll also have some types for keeping track of an angels position and velocity.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Vector2</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">{</span> <span class="n">x</span> <span class="o">:</span> <span class="kt">float</span><span class="o">;</span> <span class="n">y</span> <span class="o">:</span> <span class="kt">float</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">member</span> <span class="o">(+)</span> <span class="o">({</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x1</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y1</span> <span class="o">},</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x2</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y2</span> <span class="o">})</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x1</span> <span class="o">+</span> <span class="n">x2</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y1</span> <span class="o">+</span> <span class="n">y2</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">member</span> <span class="o">(-)</span> <span class="o">({</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x1</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y1</span> <span class="o">},</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x2</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y2</span> <span class="o">})</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x1</span> <span class="o">-</span> <span class="n">x2</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y1</span> <span class="o">-</span> <span class="n">y2</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">member</span> <span class="nc">Abs</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x1</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y1</span> <span class="o">}</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">x1</span> <span class="o">*</span> <span class="n">x1</span> <span class="o">+</span> <span class="n">y1</span> <span class="o">*</span> <span class="n">y1</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">sqrt</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">AngelInfo</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">{</span> <span class="nc">Position</span> <span class="o">:</span> <span class="nc">Vector2</span>
</span><span class='line'>    <span class="nc">Velocity</span> <span class="o">:</span> <span class="nc">Vector2</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we&rsquo;ve defined + and &ndash; on a two element vector, and a helper function to calculate the vectors
magnitude.</p>

<p>Now we&rsquo;re ready to set up our event loop agent. I&rsquo;m going to call mine <code>ping</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">AngelMessage</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Init</span> <span class="k">of</span> <span class="nc">AsyncReplyChannel</span><span class="o">&lt;</span><span class="nc">AngelInfo</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Next</span> <span class="k">of</span> <span class="nc">AngelInfo</span> <span class="kt">list</span> <span class="o">*</span> <span class="nc">AsyncReplyChannel</span><span class="o">&lt;</span><span class="nc">AngelInfo</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">ping</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span>
</span><span class='line'>    <span class="k">fun</span> <span class="n">agent</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="k">let</span> <span class="k">rec</span> <span class="n">inner</span> <span class="o">(</span><span class="n">angels</span> <span class="o">:</span> <span class="nc">MailboxProcessor</span><span class="o">&lt;</span><span class="nc">AngelMessage</span><span class="o">&gt;</span> <span class="kt">list</span><span class="o">)</span> <span class="n">infos</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Ask the angels where they will be next</span>
</span><span class='line'>          <span class="k">let</span><span class="o">!</span> <span class="n">newInfos</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">angels</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">angel</span> <span class="o">-&gt;</span> <span class="n">angel</span><span class="o">.</span><span class="nc">PostAndAsyncReply</span> <span class="o">(</span><span class="k">fun</span> <span class="n">r</span> <span class="o">-&gt;</span> <span class="nc">Next</span><span class="o">(</span><span class="n">infos</span><span class="o">,</span> <span class="n">r</span><span class="o">)))</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Parallel</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">let</span> <span class="n">newInfos</span> <span class="o">=</span> <span class="n">newInfos</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">ofArray</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Erase old locations</span>
</span><span class='line'>          <span class="k">do</span><span class="o">!</span>
</span><span class='line'>            <span class="n">infos</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="n">p</span> <span class="o">}</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">setAsync</span> <span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">.</span><span class="n">x</span><span class="o">)</span> <span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">.</span><span class="n">y</span><span class="o">)</span> <span class="mi">0</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Parallel</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Ignore</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Draw new locations</span>
</span><span class='line'>          <span class="k">do</span><span class="o">!</span>
</span><span class='line'>            <span class="n">newInfos</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="n">p</span> <span class="o">}</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">setAsync</span> <span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">.</span><span class="n">x</span><span class="o">)</span> <span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">.</span><span class="n">y</span><span class="o">)</span> <span class="mi">15</span> <span class="sc">&#39;*&#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Parallel</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Ignore</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">do</span><span class="o">!</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Sleep</span> <span class="mi">100</span>
</span><span class='line'>          <span class="k">return</span><span class="o">!</span> <span class="n">inner</span> <span class="n">angels</span> <span class="n">newInfos</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">init</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Wait for angels to be passed in</span>
</span><span class='line'>          <span class="k">let</span><span class="o">!</span> <span class="o">(</span><span class="n">msg</span> <span class="o">:</span> <span class="nc">MailboxProcessor</span><span class="o">&lt;</span><span class="nc">AngelMessage</span><span class="o">&gt;</span> <span class="kt">list</span><span class="o">)</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">let</span><span class="o">!</span> <span class="n">infos</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">msg</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">angel</span> <span class="o">-&gt;</span> <span class="n">angel</span><span class="o">.</span><span class="nc">PostAndAsyncReply</span> <span class="nc">Init</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Parallel</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">return</span><span class="o">!</span> <span class="n">inner</span> <span class="n">msg</span> <span class="o">(</span><span class="n">infos</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">ofArray</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="n">init</span> <span class="bp">()</span>
</span><span class='line'>    <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This agent is a bit more chunky. If you look down to the end of the body, you&rsquo;ll see it starts
by calling <code>init</code>. This method is responsible for waiting for the initial list of angels that
will populate our night sky. The angels themselves will be agents that listen for the AngelMessage
type.</p>

<p><code>init</code> sends an <code>Init</code> message to each angel, asking it for it&rsquo;s initial position and velocity.
The message consists solely of a reply channel which the angel will use to pass back the information.</p>

<p>Once all the angels have reported in, we pass control to the recursive inner loop. On each round
through, the <code>ping</code> agent asks every angel where it&rsquo;s moving to. It then writes spaces to every square on the console that held an angel last
tick, and finally draws the new positions of every angel.</p>

<p>And most of our infrastructure is in place! Let&rsquo;s test it with a collection of angels that will
start with a random position and velocity and move in a straight line for a while.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">xSeq</span>  <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randX</span> <span class="n">xZero</span> <span class="o">(</span><span class="n">width</span> <span class="o">+</span> <span class="n">xZero</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">ySeq</span>  <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randY</span> <span class="n">yZero</span> <span class="o">(</span><span class="n">height</span> <span class="o">+</span> <span class="n">yZero</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">vxSeq</span> <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randX</span> <span class="o">-</span><span class="mi">5</span> <span class="mi">5</span>
</span><span class='line'><span class="k">let</span> <span class="n">vySeq</span> <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randY</span> <span class="o">-</span><span class="mi">5</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">createAngel</span> <span class="n">logic</span> <span class="n">angelInfo</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span>
</span><span class='line'>    <span class="k">fun</span> <span class="n">agent</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="k">let</span> <span class="k">rec</span> <span class="n">inner</span> <span class="n">currentInfo</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">let</span><span class="o">!</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
</span><span class='line'>          <span class="k">return</span><span class="o">!</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">Init</span> <span class="n">r</span> <span class="o">-&gt;</span>
</span><span class='line'>              <span class="n">r</span><span class="o">.</span><span class="nc">Reply</span> <span class="n">currentInfo</span>
</span><span class='line'>              <span class="n">inner</span> <span class="n">currentInfo</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">Next</span> <span class="o">(</span><span class="n">infos</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>              <span class="k">let</span> <span class="n">newInfo</span> <span class="o">=</span> <span class="n">logic</span> <span class="n">currentInfo</span> <span class="n">infos</span>
</span><span class='line'>              <span class="n">r</span><span class="o">.</span><span class="nc">Reply</span> <span class="n">newInfo</span>
</span><span class='line'>              <span class="n">inner</span> <span class="n">newInfo</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="n">inner</span> <span class="n">angelInfo</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">angels</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="o">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">xSeq</span> <span class="n">ySeq</span><span class="o">)</span> <span class="o">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">vxSeq</span> <span class="n">vySeq</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">10</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span>
</span><span class='line'>      <span class="o">(</span><span class="k">fun</span> <span class="o">((</span><span class="n">px</span><span class="o">,</span> <span class="n">py</span><span class="o">),</span> <span class="o">(</span><span class="n">vx</span><span class="o">,</span> <span class="n">vy</span><span class="o">))</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">px</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">py</span> <span class="o">};</span> <span class="nc">Velocity</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">vx</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">py</span> <span class="o">}})</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="n">createAngel</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">c</span> <span class="k">with</span> <span class="nc">Position</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="nc">Position</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="nc">Velocity</span> <span class="o">}))</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toList</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Start the whole thing off</span>
</span><span class='line'><span class="n">ping</span><span class="o">.</span><span class="nc">Post</span> <span class="n">angels</span>
</span><span class='line'>
</span><span class='line'><span class="nn">Console</span><span class="p">.</span><span class="nc">ReadLine</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="nn">Console</span><span class="p">.</span><span class="nc">ForegroundColor</span> <span class="o">&lt;-</span> <span class="nn">ConsoleColor</span><span class="p">.</span><span class="nc">White</span>
</span><span class='line'><span class="nn">Console</span><span class="p">.</span><span class="nc">CursorVisible</span> <span class="o">&lt;-</span> <span class="bp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each of our angels knows how to report its initial state, and how to apply a function called <code>logic</code> to it&rsquo;s previous state to generate the new position. For testing, the <code>logic</code> we&rsquo;re passing in is just to add its velocity to it&rsquo;s current position each time its asked.</p>

<p>Full listing is in <a href="https://github.com/mavnn/advent2015/blob/master/advent2.fsx">advent2.fsx</a>, and running it should give us something like this:</p>

<p><img src="http://blog.mavnn.co.uk/images/angels3.gif"/></p>

<blockquote><p>Suddenly a great company of the heavenly host appeared with the angel, praising God and saying,</p>

<p>“Glory to God in the highest heaven,
   and on earth peace to those on whom his favor rests.” <ref><a href="https://www.biblegateway.com/passage/?search=luke+2:13-14&version=NIV" title="Luke 2:13-14">Luke 2:13-14</a></ref></p></blockquote>

<h3>Adding some dancing</h3>

<p>But! Angels in straight lines doesn&rsquo;t sound much fun. We&rsquo;ll make our angels a bit more interesting
by implementing a simple <a href="https://en.wikipedia.org/wiki/Boids">boid</a> variant.</p>

<p>First we&rsquo;ll add the ability to specify a colour as part of our angel info (check the full listing for details). We&rsquo;ll also expand the vectors to implement multiplication, division and a magnitude limit.</p>

<p>Then we can add a <code>logic</code> module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Logic</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">private</span> <span class="n">surrounding</span> <span class="n">radius</span> <span class="o">(</span><span class="n">us</span> <span class="o">:</span> <span class="nc">AngelInfo</span><span class="o">)</span> <span class="o">(</span><span class="n">others</span> <span class="o">:</span> <span class="nc">AngelInfo</span> <span class="kt">list</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">others</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="nn">Vector2</span><span class="p">.</span><span class="n">abs</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="nc">Position</span> <span class="o">-</span> <span class="n">us</span><span class="o">.</span><span class="nc">Position</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">radius</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="k">private</span> <span class="n">desiredVel</span> <span class="n">angels</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">angels</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">fold</span>
</span><span class='line'>        <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">i</span><span class="o">)</span> <span class="n">angel</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="o">(</span><span class="n">angel</span><span class="o">.</span><span class="nc">Velocity</span> <span class="o">+</span> <span class="n">v</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">))</span> <span class="o">({</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.},</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="k">fun</span> <span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">i</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">i</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">x</span> <span class="o">/</span> <span class="kt">float</span> <span class="n">i</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">y</span> <span class="o">/</span> <span class="kt">float</span> <span class="n">i</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="k">private</span> <span class="n">avoid</span> <span class="n">this</span> <span class="n">angels</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">dodge</span> <span class="n">v</span> <span class="o">=</span>
</span><span class='line'>      <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span> <span class="o">/</span> <span class="n">v</span><span class="o">.</span><span class="n">x</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="o">.</span>
</span><span class='line'>        <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span> <span class="o">/</span> <span class="n">v</span><span class="o">.</span><span class="n">y</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="o">.</span> <span class="o">}</span> <span class="o">*</span> <span class="o">(</span><span class="nn">List</span><span class="p">.</span><span class="n">length</span> <span class="n">angels</span> <span class="o">|&gt;</span> <span class="kt">float</span><span class="o">)</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">angels</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="bp">[]</span> <span class="o">|</span> <span class="o">[_]</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">angels</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">angel</span> <span class="o">-&gt;</span> <span class="n">angel</span><span class="o">.</span><span class="nc">Position</span> <span class="o">-</span> <span class="n">this</span><span class="o">.</span><span class="nc">Position</span><span class="o">)</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">reduce</span> <span class="o">(+)</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="n">dodge</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">boid</span> <span class="n">midpoint</span> <span class="n">friendRadius</span> <span class="n">dodgeRadius</span> <span class="n">maxAcc</span> <span class="n">maxVel</span> <span class="n">this</span> <span class="n">angels</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">groupVel</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">surrounding</span> <span class="n">friendRadius</span> <span class="n">this</span> <span class="n">angels</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="n">desiredVel</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nn">Vector2</span><span class="p">.</span><span class="n">limit</span> <span class="n">maxVel</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">avoidCollision</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">surrounding</span> <span class="n">dodgeRadius</span> <span class="n">this</span> <span class="n">angels</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="n">avoid</span> <span class="n">this</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nn">Vector2</span><span class="p">.</span><span class="n">limit</span> <span class="n">maxVel</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">towardsMiddle</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">midpoint</span> <span class="o">-</span> <span class="n">this</span><span class="o">.</span><span class="nc">Position</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nn">Vector2</span><span class="p">.</span><span class="n">limit</span> <span class="n">maxVel</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">acceleration</span> <span class="o">=</span>
</span><span class='line'>      <span class="o">(</span><span class="n">groupVel</span> <span class="o">*</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span> <span class="o">+</span> <span class="n">avoidCollision</span> <span class="o">*</span> <span class="mi">2</span><span class="o">.</span> <span class="o">+</span> <span class="n">towardsMiddle</span><span class="o">)</span>
</span><span class='line'>      <span class="o">/</span> <span class="mi">3</span><span class="o">.</span>
</span><span class='line'>    <span class="o">{</span> <span class="n">this</span> <span class="k">with</span> <span class="nc">Position</span> <span class="o">=</span> <span class="n">this</span><span class="o">.</span><span class="nc">Position</span> <span class="o">+</span> <span class="n">this</span><span class="o">.</span><span class="nc">Velocity</span>
</span><span class='line'>                <span class="nc">Velocity</span> <span class="o">=</span> <span class="o">(</span><span class="n">this</span><span class="o">.</span><span class="nc">Velocity</span> <span class="o">+</span> <span class="n">acceleration</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="nn">Vector2</span><span class="p">.</span><span class="n">limit</span> <span class="n">maxVel</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">stationary</span> <span class="n">this</span> <span class="o">_</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="n">this</span> <span class="k">with</span> <span class="nc">Velocity</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span> <span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing super exciting here individually &ndash; we have methods for discovering other angels nearby
(<code>surrounding</code>), the average velocity of a group of angels (<code>desiredVel</code>) and a rough guess
at not running into a group of nearby angels (<code>avoid</code>). All could probably be improved!</p>

<p>Putting it all together, the <code>boid</code> method calculates the acceleration the angel would &ldquo;like&rdquo; to
have to follow all if its rules fully, and then limits that by a specified maximum acceleration.
I played with the weighting of the rules a bit to get something that looked kind of nice, and also
decided to make my life easier by aiming cohesion towards the middle of the screen rather than the
middle of the flock.</p>

<p>Generating our angels is now just a case of partially applying boid with the parameters of our
choice:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">angels</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">Seq</span><span class="p">.</span><span class="n">zip3</span> <span class="o">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">xSeq</span> <span class="n">ySeq</span><span class="o">)</span> <span class="o">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">vxSeq</span> <span class="n">vySeq</span><span class="o">)</span> <span class="n">cSeq</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">40</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span>
</span><span class='line'>      <span class="o">(</span><span class="k">fun</span> <span class="o">((</span><span class="n">px</span><span class="o">,</span> <span class="n">py</span><span class="o">),</span> <span class="o">(</span><span class="n">vx</span><span class="o">,</span> <span class="n">vy</span><span class="o">),</span> <span class="n">c</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>       <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">px</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">py</span> <span class="o">}</span>
</span><span class='line'>         <span class="nc">Velocity</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">vx</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">vy</span> <span class="o">}</span>
</span><span class='line'>         <span class="nc">Colour</span>   <span class="o">=</span> <span class="n">c</span> <span class="o">})</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="n">createAngel</span> <span class="o">(</span><span class="nn">Logic</span><span class="p">.</span><span class="n">boid</span> <span class="n">midpoint</span> <span class="mi">10</span><span class="o">.</span> <span class="mi">1</span><span class="o">.</span> <span class="mi">0</span><span class="o">.</span><span class="mi">3</span> <span class="mi">1</span><span class="o">.))</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">append</span>
</span><span class='line'>      <span class="o">[(</span><span class="n">createAngel</span>
</span><span class='line'>         <span class="nn">Logic</span><span class="p">.</span><span class="n">stationary</span> <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="n">midpoint</span>
</span><span class='line'>                            <span class="nc">Velocity</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span> <span class="o">}</span>
</span><span class='line'>                            <span class="nc">Colour</span>   <span class="o">=</span> <span class="mi">15</span> <span class="o">})]</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toList</span>
</span></code></pre></td></tr></table></div></figure>


<p>The ones in listing <a href="https://github.com/mavnn/advent2015/blob/master/advent3.fsx">advent3.fsx</a> give something reasonably nice, looking like:</p>

<p><img src="http://blog.mavnn.co.uk/images/angels4.gif"/></p>

<p>One word of warning: there&rsquo;s a bug in the avoidance which I haven&rsquo;t had a chance to track down,
so if you add too many angels they&rsquo;ll all push each other into the top left corner. Oops.</p>

<p>And that&rsquo;s all for now. I hope you enjoyed this brief dive into agent based programming,
and how we can use agents to separate responsibility and protect against unwanted race conditions.</p>

<p>As you can see, this framework allows easy modification of angel logic, and in fact allows for
every angel to have its own implementation without much added complexity &ndash; as long as it replies to
the same messages.</p>

<p>Happy Christmas, and God bless.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Annoucing @mavnn Ltd]]></title>
    <link href="http://blog.mavnn.co.uk/annoucing-at-mavnn-ltd/"/>
    <updated>2015-12-07T10:23:19+00:00</updated>
    <id>http://blog.mavnn.co.uk/annoucing-at-mavnn-ltd</id>
    <content type="html"><![CDATA[<p>As I hinted in the last post, new (and to me) exciting things are afoot. I&rsquo;m very pleased
to announce the formation of <a href="http://mavnn.co.uk">@mavnn ltd</a>!</p>

<h3>That&rsquo;s great, but what is it going to do?</h3>

<p>I&rsquo;m glad you asked! @mavnn ltd is the continuation of a lot of the things I&rsquo;ve come to care most about over my years in software development: building reliable, maintainable and well crafted code and teaching others to do the same.</p>

<p>You can check out the web page for more details, but basically there&rsquo;s three streams to what the company will be providing:</p>

<ul>
<li>Building code that works</li>
<li>Offering consultancy on how your team can build better software with less friction (especially around automating build, deployment and testing)</li>
<li>Giving training in skills that will allow teams to build solid software using functional programming techniques and thinking</li>
</ul>


<h3>What are doing already?</h3>

<p>I&rsquo;m glad you asked that too! Stream one of the company (&ldquo;Building code that works&rdquo;) is already well under way &ndash; we&rsquo;re very pleased to say that @mavnn ltd&rsquo;s first customer is <a href="https://github.com/logibit">Logibit</a>, where I&rsquo;m helping Henrik and Mikko build out the <a href="https://qvitoo.com/">Qvitoo</a> platform.</p>

<p>Although it&rsquo;s always nice as a small company to have contracts, we&rsquo;re particularly pleased to be working with Logibit: firstly because they&rsquo;re great people to work with &ndash; you don&rsquo;t need to work for them to find that out, just get involved in any of the myriad <a href="http://suave.io/">open</a> <a href="https://github.com/Albacore/albacore">source</a> <a href="https://github.com/logary/logary">projects</a> they&rsquo;re involved in!</p>

<p>Secondly, as a company they embody the things that @mavnn stands for: leveraging the ideas behind functional programming in deeply practical ways to build software that solves real world problems, and does so exactly as designed.</p>

<h3>Can I hire you?</h3>

<p>Yes! To avoid disappointment, though, I should make it clear that we have some ongoing contractual agreements and so will not be accepting ongoing full time contracts for the foreseeable future.</p>

<p>Training, consultancy, ongoing part time and short term full time contracts are all up for grabs though &ndash; including remotely and in some cases internationally as evidenced by our co-operation with Logibit. <a href="http://mavnn.co.uk/#contacts">Contact us to find out more</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginnings and Endings]]></title>
    <link href="http://blog.mavnn.co.uk/beginnings-and-endings/"/>
    <updated>2015-11-26T12:02:10+00:00</updated>
    <id>http://blog.mavnn.co.uk/beginnings-and-endings</id>
    <content type="html"><![CDATA[<p>There&rsquo;s the normal mix of excitement and sadness as I announce that today is my last day with my current employers, <a href="http://www.15below.com">15below</a>.</p>

<p>Sadness because the people here are great and I&rsquo;ve learned an unbelievable amount while working here. Excitement because there&rsquo;s
exciting things happening for the future. What are these brave new vistas? Well, that will have to wait for next week.</p>

<p>But for now, it&rsquo;s time for a brief thank you and review of what I&rsquo;m leaving.</p>

<p>Thanks 15below for:</p>

<ul>
<li>being an incredibly flexible, generous &amp; family friendly employer</li>
<li>Lots and lots of learning from existing code, conversations, other people delivering internal training, <a href="https://twitter.com/15below_travel/status/340475764677951488">letting me invite external speakers</a>, and the rest</li>
<li>releasing some open source, even while in an &ldquo;enterprise&rdquo; market: <a href="https://github.com/15below/">github</a></li>
<li>letting me <a href="http://blog.mavnn.co.uk/keeping-up-with-the-latest-hammer/">coordinate the internal developer education</a></li>
<li>sponsoring a <a href="http://blog.mavnn.co.uk/functional-programming-in-an-imperitive-world/">bunch</a> <a href="http://blog.mavnn.co.uk/sdd-conf-2015/">of</a>
<a href="http://blog.mavnn.co.uk/lambdacon-2015/">conference</a> speaking (there&rsquo;s more!)</li>
<li>trusting me to convert the build from msbuild to <a href="https://github.com/fsharp/FAKE">FAKE</a> and kick start the journey to automated deployment (which was a slow and painful one in msbuild world&hellip;)</li>
<li>picking solid, generous people <a href="https://www.facebook.com/15below/posts/829520247132711">as staff</a> &ndash; that&rsquo;s just one example from many, and the company often matches the giving of the staff</li>
</ul>


<p>I&rsquo;m hoping my last piece of work here, converting our main product repository to use <a href="http://fsprojects.github.io/Paket/">Paket</a> rather than nuget for dependency management is a gift that will keep on giving to the rest of the devs; here&rsquo;s to many more years of 15below bringing tech to the travel industry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EasyNetQ Process Management]]></title>
    <link href="http://blog.mavnn.co.uk/easynetq-process-management/"/>
    <updated>2015-10-05T12:23:02+01:00</updated>
    <id>http://blog.mavnn.co.uk/easynetq-process-management</id>
    <content type="html"><![CDATA[<blockquote><p>TL;DR: I wrote a EasyNetQ aware process manager library. Read down for some examples, and leave feedback if you think anything should change before it&rsquo;s released.</p></blockquote>

<p><a href="http://easynetq.com/">EasyNetQ</a> is a nice little .net client library for RabbitMQ. Originally designed for introducing Rabbit (and the concepts of a bus based architecture)
to a company and programmers who hadn&rsquo;t previously used them before, it uses conventions to set up exchanges and queues &ndash; basing them on the names of the .net types that are
being sent and subscribe to.</p>

<p>For example (from the EasyNetQ homepage):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">bus</span><span class="p">.</span><span class="n">Publish</span><span class="p">&lt;</span><span class="n">MyMessage</span><span class="p">&gt;(</span><span class="n">message</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will publish a message of type &ldquo;MyMessage&rdquo;. Generally there&rsquo;s no need to actually specify the type here, C# will infer it for you, but it makes the example clearer.</p>

<p>Other services can subscribe to &ldquo;MyMessage&rdquo; like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">bus</span><span class="p">.</span><span class="n">Subscribe</span><span class="p">&lt;</span><span class="n">MyMessage</span><span class="p">&gt;(</span><span class="s">&quot;my_subscription_id&quot;</span><span class="p">,</span> <span class="n">msg</span> <span class="p">=&gt;</span>
</span><span class='line'>      <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">Text</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>If multiple services use the same subscription id, they will all connect to the same queue on the Rabbit server. This means in practice they will round-robin receipt of
messages, allowing for easy horizontal scalability. Subscribers with a different subscription ID will create a new queue behind the scenes and so a copy of the message will
be routed to both subscription IDs.</p>

<p>At this point, the only real point of coupling between subscribers and publishers is the need to share a dll with your &ldquo;contract types&rdquo; &ndash; the types that are going to be
used for publishing and subscribing.</p>

<p>This immediately gives you a lot of the ground work you need to start creating a message based system. But there is one big hole, which it&rsquo;s harder to fill than you might
think.</p>

<p>The hole is that at some point you&rsquo;re going to want to start building processes on top of your message based services which glue together some kind of long running
work flow which requires information from several other components.</p>

<p>Let&rsquo;s start with a simple example &ndash; we&rsquo;ll assume we have a email sending system. It has a bus based service that knows how to grab some data from somewhere;
a service that stores email templates; a service that knows how to render the data and template together; and finally an email sender.</p>

<p>Triggering the services might look a bit like this (if you&rsquo;re working in F#):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">{</span> <span class="nn">StoreModel</span><span class="p">.</span><span class="nc">CorrelationId</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">;</span> <span class="nc">Model</span> <span class="o">=</span> <span class="n">model</span> <span class="o">}</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">{</span> <span class="nn">StoreTemplate</span><span class="p">.</span><span class="nc">CorrelationId</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">;</span> <span class="nc">Name</span> <span class="o">=</span> <span class="s2">&quot;mytemplate&quot;</span><span class="o">;</span> <span class="nc">Template</span> <span class="o">=</span> <span class="n">template</span> <span class="o">}</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">{</span> <span class="nn">RequestRender</span><span class="p">.</span><span class="nc">CorrelationId</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">;</span> <span class="nc">TemplateId</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="nc">ModelId</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">}</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">{</span> <span class="nn">SendEmail</span><span class="p">.</span><span class="nc">CorrelationId</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">;</span> <span class="nc">Content</span> <span class="o">=</span> <span class="s2">&quot;Hello world!&quot;</span><span class="o">;</span> <span class="nc">EmailAddress</span> <span class="o">=</span> <span class="s2">&quot;me@example.com&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s fantastic; only, you&rsquo;ll notice the values for each step are hard coded. Obviously, we need to subscribe to the messages we&rsquo;re expecting to be published in response
to these commands. We&rsquo;d better subscribe to the responses &ndash; in fact, we&rsquo;d better subscribe to everything before we start publishing, otherwise we might start getting responses
back before we&rsquo;re listening for them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Subscribers</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Subscribe</span><span class="o">&lt;</span><span class="nc">RenderComplete</span><span class="o">&gt;</span> <span class="o">(</span><span class="s2">&quot;Process&quot;</span><span class="o">,</span> <span class="k">fun</span> <span class="n">r</span> <span class="o">-&gt;</span> <span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="n">r</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Subscribe</span><span class="o">&lt;</span><span class="nc">ModelStored</span><span class="o">&gt;</span> <span class="o">(</span><span class="s2">&quot;Process&quot;</span><span class="o">,</span> <span class="k">fun</span> <span class="n">ms</span> <span class="o">-&gt;</span> <span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="n">ms</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Subscribe</span><span class="o">&lt;</span><span class="nc">TemplateStored</span><span class="o">&gt;</span> <span class="o">(</span><span class="s2">&quot;Process&quot;</span><span class="o">,</span> <span class="k">fun</span> <span class="n">ts</span> <span class="o">-&gt;</span> <span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="n">ts</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Subscribe</span><span class="o">&lt;</span><span class="nc">EmailSent</span><span class="o">&gt;</span> <span class="o">(</span><span class="s2">&quot;Process&quot;</span><span class="o">,</span> <span class="k">fun</span> <span class="n">es</span> <span class="o">-&gt;</span> <span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="n">es</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Senders</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">{</span> <span class="nn">StoreModel</span><span class="p">.</span><span class="nc">CorrelationId</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">;</span> <span class="nc">Model</span> <span class="o">=</span> <span class="n">model</span> <span class="o">}</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">{</span> <span class="nn">StoreTemplate</span><span class="p">.</span><span class="nc">CorrelationId</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">;</span> <span class="nc">Name</span> <span class="o">=</span> <span class="s2">&quot;mytemplate&quot;</span><span class="o">;</span> <span class="nc">Template</span> <span class="o">=</span> <span class="n">template</span> <span class="o">}</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">{</span> <span class="nn">RequestRender</span><span class="p">.</span><span class="nc">CorrelationId</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">;</span> <span class="nc">TemplateId</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="nc">ModelId</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">}</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">{</span> <span class="nn">SendEmail</span><span class="p">.</span><span class="nc">CorrelationId</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">;</span> <span class="nc">Content</span> <span class="o">=</span> <span class="s2">&quot;Hello world!&quot;</span><span class="o">;</span> <span class="nc">EmailAddress</span> <span class="o">=</span> <span class="s2">&quot;me@example.com&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, that&rsquo;s great. What now?</p>

<p>Well: as is common in a message based system we&rsquo;re passing a correlation ID into the service we&rsquo;re sending a request to, and part of the contract is that the triggered response will
have the same correlation ID. So we need some way to link a correlation ID back to a specific business process &ndash; a state store. But that needs to be safe for horizontal scaling.
We also need to wire up all the various stages in our process to know which other message to publish next. And it would be good if storing the template and model data happened concurrently,
because we&rsquo;re message based and why not? And finally, the client only wants the email sent if we can generate it within 15 seconds. Did we not mention that?</p>

<p>EasyNetQ provides one way of dealing with this, by allowing for what it calls a request/response pattern. But we found out the hard way that this still suffers from a few problems:
at a practical level, it doesn&rsquo;t scale very well for services that need to handle a lot of requests. On a conceptual level it assumes that the service that issued the request will
be around to process the response. That&rsquo;s an assumption that we really don&rsquo;t want if we&rsquo;re using a message bus to help us provide high availability.</p>

<p>So after several rounds of consultation within the company, I&rsquo;ve written a library to help write process managers over the top of EasyNetQ, following the EasyNetQ conventions but
meeting the needs we&rsquo;ve discovered.</p>

<p>The code is available on github at <a href="https://github.com/15below/EasyNetQ.ProcessManager">https://github.com/15below/EasyNetQ.ProcessManager</a> ; if you want to run the examples you&rsquo;ll need a few db bits set up (see the README) and a
SMTP server (I recommend the excellent <a href="https://papercut.codeplex.com/">PaperCut</a> as a simple and convenient development SMTP server).</p>

<blockquote><p>Please note: if you&rsquo;ve looked at this article before, the code below has changed after a <a href="https://twitter.com/BlythMeister">a colleague of mine</a> suggested much better method names for certain operations&hellip;</p></blockquote>

<p>Back to the world of C#; first we&rsquo;ll need an actual ProcessManager object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">rabbitConnString</span> <span class="p">=</span> <span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="s">&quot;rabbit connection&quot;</span><span class="p">];</span>
</span><span class='line'><span class="kt">var</span> <span class="n">sqlConnString</span> <span class="p">=</span> <span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="s">&quot;sql connection&quot;</span><span class="p">];</span>
</span><span class='line'><span class="kt">var</span> <span class="n">bus</span> <span class="p">=</span> <span class="n">RabbitHutch</span><span class="p">.</span><span class="n">CreateBus</span><span class="p">(</span><span class="n">rabbitConnString</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">active</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SqlActiveStore</span><span class="p">(</span><span class="n">sqlConnString</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">store</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SqlStateStore</span><span class="p">(</span><span class="n">sqlConnString</span><span class="p">,</span> <span class="k">new</span> <span class="n">Serializer</span><span class="p">());</span>
</span><span class='line'><span class="kt">var</span> <span class="n">pm</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ProcessManager</span><span class="p">(</span><span class="k">new</span> <span class="n">EasyNetQPMBus</span><span class="p">(</span><span class="n">bus</span><span class="p">),</span> <span class="s">&quot;Process&quot;</span><span class="p">,</span> <span class="n">active</span><span class="p">,</span> <span class="n">store</span><span class="p">);</span>
</span><span class='line'><span class="n">Workflow</span><span class="p">.</span><span class="n">Configure</span><span class="p">(</span><span class="n">pm</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously, most of this would normally be covered with an IoC container. So, the bus is probably pretty obvious, and <code>"Process"</code> is our subscription ID for any subscriptions we make
&ndash; but what are the <code>SqlActiveStore</code> and <code>SqlStateStore</code>?</p>

<p>The active store is a component that will store the list of correlation IDs a process is waiting for, and which handlers to connect them to. Out of the box you get a
memory based version (fast, good for testing, not horizontally scalable for hopefully obvious reasons) and an SQL Server based version.</p>

<p>The state store, as you might have guessed, stores state for your workflow. Again both memory and SQL based implementations are provided, with the SQL implementation guaranteed to be not
just thread safe, but &ldquo;process safe&rdquo;. One thing you do have to provide yourself is a serializer that knows how to serialize any work flow state objects you want stored.</p>

<p>Finally, and most interesting: let&rsquo;s see what&rsquo;s in <code>Workflow.Configure(pm)</code>. Let&rsquo;s take the file that actually configures our workflow, and break it down into sections (I&rsquo;ll chop some boilerplate out, full file at the end).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Runtime.Serialization</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">EasyNetQ.ProcessManager</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Messenger.Messages.Email</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Messenger.Messages.Render</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Messenger.Messages.Store</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>All the standard bits &ndash; we&rsquo;ll need access to the various message types and the ProcessManager name space.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[DataContract]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">WorkflowState</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">WorkflowState</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">WorkflowState</span><span class="p">(</span><span class="kt">int?</span> <span class="n">modelId</span><span class="p">,</span> <span class="kt">int?</span> <span class="n">contentTemplateId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">emailContent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">emailAddress</span><span class="p">,</span> <span class="kt">int?</span> <span class="n">addressTemplateId</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ModelId</span> <span class="p">=</span> <span class="n">modelId</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ContentTemplateId</span> <span class="p">=</span> <span class="n">contentTemplateId</span><span class="p">;</span>
</span><span class='line'>        <span class="n">EmailContent</span> <span class="p">=</span> <span class="n">emailContent</span><span class="p">;</span>
</span><span class='line'>        <span class="n">EmailAddress</span> <span class="p">=</span> <span class="n">emailAddress</span><span class="p">;</span>
</span><span class='line'>        <span class="n">AddressTemplateId</span> <span class="p">=</span> <span class="n">addressTemplateId</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">    [DataMember]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int?</span> <span class="n">ModelId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int?</span> <span class="n">ContentTemplateId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int?</span> <span class="n">AddressTemplateId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">EmailContent</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">EmailAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This object will store the state of our work flow. As you might guess, it starts off empty and steps in the work flow will gradually fill in the gaps as
they receive information back from the remote services. The basic flow of the process we&rsquo;re creating is to store a model (piece of data), an address template
and a content template. We&rsquo;ll render an address once we have both address template and model IDs, and the content once we have both content template and model ID.</p>

<p>After both rendering jobs have finished, we&rsquo;ll send an email to the address, with the content. Note that our object does <em>not</em> need any awareness of which
instance of the work flow it&rsquo;s storing information for &ndash; the ProcessManager will handle that for us.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Workflow</span>
</span><span class='line'><span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s have a class to group all of our work flow logic together in one place. This isn&rsquo;t in anyway required by ProcessManager, but it&rsquo;s definitely recommended to
allow people to work out what on earth your project manager actually does.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ModelStoredCheckRenderContentKey</span> <span class="p">=</span> <span class="s">&quot;ModelStoredCheckRenderContentKey&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ModelStoredCheckRenderAddressKey</span> <span class="p">=</span> <span class="s">&quot;ModelStoredCheckRenderAddress&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ContentTemplateStoredCheckRenderContentKey</span> <span class="p">=</span> <span class="s">&quot;ContentTemplateStoredCheckRenderContent&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">AddressTemplateStoredCheckRenderAddressKey</span> <span class="p">=</span> <span class="s">&quot;AddressTemplateStoredCheckRenderAddress&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ContentRenderedCheckSendEmailKey</span> <span class="p">=</span> <span class="s">&quot;ContentRenderedCheckSendEmail&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">AddressRenderedCheckSendEmailKey</span> <span class="p">=</span> <span class="s">&quot;AddressRenderedCheckSendEmail&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll be specifying in each of our work flow steps which callbacks we&rsquo;re expecting to be fired when response messages are received. Because these callbacks may not
happen in the same process (ProcessManager is horizontally scalable by design), callbacks are referred to by a string mapping. These get used in several places, so
it&rsquo;s probably worth recording them all as <code>const</code>s to avoid typos.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">Start</span><span class="p">(</span><span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">model</span><span class="p">,</span> <span class="kt">string</span> <span class="n">contentTemplate</span><span class="p">,</span> <span class="kt">string</span> <span class="n">addressTemplate</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">modelCid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">contentCid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">addressCid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>        <span class="n">Out</span><span class="p">.</span><span class="n">Empty</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="k">new</span> <span class="n">StoreModel</span><span class="p">(</span><span class="n">modelCid</span><span class="p">,</span> <span class="n">model</span><span class="p">),</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">ModelStored</span><span class="p">&gt;(</span><span class="n">modelCid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">ModelStoredCheckRenderContentKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span> <span class="s">&quot;TimeOut&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">ModelStored</span><span class="p">&gt;(</span><span class="n">modelCid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">ModelStoredCheckRenderAddressKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span> <span class="s">&quot;TimeOut&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="k">new</span> <span class="n">StoreTemplate</span><span class="p">(</span><span class="n">contentCid</span><span class="p">,</span> <span class="s">&quot;content template&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">contentTemplate</span><span class="p">),</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">TemplateStored</span><span class="p">&gt;(</span><span class="n">contentCid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">ContentTemplateStoredCheckRenderContentKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span>
</span><span class='line'>                <span class="s">&quot;TimeOut&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="k">new</span> <span class="n">StoreTemplate</span><span class="p">(</span><span class="n">addressCid</span><span class="p">,</span> <span class="s">&quot;address template&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">addressTemplate</span><span class="p">),</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">TemplateStored</span><span class="p">&gt;(</span><span class="n">addressCid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">AddressTemplateStoredCheckRenderAddressKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span>
</span><span class='line'>                <span class="s">&quot;TimeOut&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So: our <code>Start</code> method is where the real fun starts. It&rsquo;s <code>static</code>, as an instance of the work flow class makes very little sense as all state will be stored in the
state store. And basically all it does is set up our first set of expected requests (to <code>Send</code>) and continuations (to <code>Expect</code>).</p>

<p>All functions within a work flow must return an <code>Out</code> object. Here, we create our Out using its fluent builder API; first adding a request to send a <code>StoreModel</code>,
then hooking up two handlers to the response message we expect the store to send when it&rsquo;s done storing the model (there&rsquo;s no requirement for a specific message to trigger
only one continuation). But what are these <code>TimeSpan</code>s floating around everywhere?</p>

<p>Well, it turns out that RabbitMQ implements the idea of expiring messages. ProcessManager forces you to choose how long a message should stay available for before expiring,
to avoid creating situations where you build up unbounded backlogs of ancient messages that no longer have any relevance. For time critical processes such as ours, it also
means that we can put expectations on how long we expect a step to take. Here, we&rsquo;re saying: &ldquo;if the store doesn&rsquo;t accept the store model request within 4 seconds, do not
deliver it.&rdquo;</p>

<p>In a similar way, we must choose a timespan to process continuations within. Network issues or overloading of the ProcessManager itself might mean that the request is processed,
but by the time the continuation trigger message returns we&rsquo;ve already missed our processing window. In this example, we&rsquo;re specifying: &ldquo;if we don&rsquo;t receive a model stored message
within 5 seconds, do not process the continuation when (or if) it arrives; also, publish a time out message to be processed by a handler named TimeOut.&rdquo;</p>

<p>The rest of the method follows a similar pattern, setting up the requests to store content and address templates respectively, with the expected continuations.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">RenderContentIfReady</span><span class="p">(</span><span class="n">WorkflowState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(!</span><span class="n">state</span><span class="p">.</span><span class="n">ModelId</span><span class="p">.</span><span class="n">HasValue</span> <span class="p">||</span> <span class="p">!</span><span class="n">state</span><span class="p">.</span><span class="n">ContentTemplateId</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span> <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Ignore</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">cid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">renderContent</span> <span class="p">=</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">RequestRender</span><span class="p">(</span><span class="n">cid</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">ContentTemplateId</span><span class="p">.</span><span class="n">Value</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">ModelId</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>        <span class="n">Out</span><span class="p">.</span><span class="n">Empty</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">renderContent</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">RenderComplete</span><span class="p">&gt;(</span><span class="n">cid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">ContentRenderedCheckSendEmailKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span>
</span><span class='line'>                <span class="s">&quot;TimeOut&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">RenderAddressIfReady</span><span class="p">(</span><span class="n">WorkflowState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(!</span><span class="n">state</span><span class="p">.</span><span class="n">ModelId</span><span class="p">.</span><span class="n">HasValue</span> <span class="p">||</span> <span class="p">!</span><span class="n">state</span><span class="p">.</span><span class="n">AddressTemplateId</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span> <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Ignore</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">cid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">renderContent</span> <span class="p">=</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">RequestRender</span><span class="p">(</span><span class="n">cid</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">AddressTemplateId</span><span class="p">.</span><span class="n">Value</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">ModelId</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Empty</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">renderContent</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">RenderComplete</span><span class="p">&gt;(</span><span class="n">cid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">AddressRenderedCheckSendEmailKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&quot;TimeOut&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next up: a couple of private helper methods. These take our <code>WorkflowState</code> object from above and know whether we can start the two rendering processes yet.</p>

<p>Note the use of <code>Out.Ignore</code> if the state is not yet ready to trigger the next part of the work flow. <code>Ignore</code> is basically a way of marking this branch of the
work flow complete. This is different to <code>Out.End</code>, which we&rsquo;ll have a look at a bit later &ndash; and which ends all branches of the work flow.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">ModelStoredCheckRenderContent</span><span class="p">(</span><span class="n">ModelStored</span> <span class="n">ms</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">ModelId</span> <span class="p">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">ModelId</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">existing</span><span class="p">.</span><span class="n">ModelId</span> <span class="p">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">ModelId</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">RenderContentIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">ModelStoredCheckRenderAddress</span><span class="p">(</span><span class="n">ModelStored</span> <span class="n">ms</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">ModelId</span> <span class="p">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">ModelId</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">existing</span><span class="p">.</span><span class="n">ModelId</span> <span class="p">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">ModelId</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">RenderAddressIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">ContentTemplateStoredCheckRenderContent</span><span class="p">(</span><span class="n">TemplateStored</span> <span class="n">ts</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">ContentTemplateId</span> <span class="p">=</span> <span class="n">ts</span><span class="p">.</span><span class="n">TemplateId</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">existing</span><span class="p">.</span><span class="n">ContentTemplateId</span> <span class="p">=</span> <span class="n">ts</span><span class="p">.</span><span class="n">TemplateId</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">RenderContentIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">AddressTemplateStoredCheckRenderAddress</span><span class="p">(</span><span class="n">TemplateStored</span> <span class="n">ts</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">AddressTemplateId</span> <span class="p">=</span> <span class="n">ts</span><span class="p">.</span><span class="n">TemplateId</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">existing</span><span class="p">.</span><span class="n">AddressTemplateId</span> <span class="p">=</span> <span class="n">ts</span><span class="p">.</span><span class="n">TemplateId</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">RenderAddressIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>These four methods will be wired up to handle the four continuation options we created in our <code>Start</code> method.
Each is very similar: it is passed the triggering message and the state of <em>this</em> work flow, updates or creates the
state with the data it has received back, and then runs one of the private helpers we defined above.</p>

<p>Why can we not just Add, or just Update the state? Well &ndash; we published 3 requests which are being handled by 4
continuations. There are no guarantees what order these will be triggered in or that they won&rsquo;t be triggered simultaneously
on different threads or even on different machines. <code>AddOrUpdate</code> acts as a synchronization point for our work flow,
guaranteeing that the operation happening within it will be atomic.</p>

<p>We can apply similar logic to waiting for our two rendering jobs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">SendEmailIfReady</span><span class="p">(</span><span class="n">WorkflowState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">state</span><span class="p">.</span><span class="n">EmailContent</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Ignore</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">cid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">sendEmail</span> <span class="p">=</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">SendEmail</span><span class="p">(</span><span class="n">cid</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">EmailAddress</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">EmailContent</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Empty</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">sendEmail</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">EmailSent</span><span class="p">&gt;(</span><span class="n">cid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="s">&quot;EmailSent&quot;</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span> <span class="s">&quot;TimeOut&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">AddressRenderedCheckSendEmail</span><span class="p">(</span><span class="n">RenderComplete</span> <span class="n">rc</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">EmailAddress</span> <span class="p">=</span> <span class="n">rc</span><span class="p">.</span><span class="n">Content</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">existing</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">=</span> <span class="n">rc</span><span class="p">.</span><span class="n">Content</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">SendEmailIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">ContentRenderedCheckSendEmail</span><span class="p">(</span><span class="n">RenderComplete</span> <span class="n">rc</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">EmailContent</span> <span class="p">=</span> <span class="n">rc</span><span class="p">.</span><span class="n">Content</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">existing</span><span class="p">.</span><span class="n">EmailContent</span> <span class="p">=</span> <span class="n">rc</span><span class="p">.</span><span class="n">Content</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">SendEmailIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once they have both finished, and only once they have both finished, <code>SendEmailIfReady</code> will fire off a <code>SendEmail</code> request.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">EmailSent</span><span class="p">(</span><span class="n">EmailSent</span> <span class="n">es</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">WorkflowState</span><span class="p">&gt;().</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Email send success: {0}\nAddress: {1}\nContent: {2}&quot;</span><span class="p">,</span> <span class="n">es</span><span class="p">.</span><span class="n">Successful</span><span class="p">,</span> <span class="n">ws</span><span class="p">.</span><span class="n">EmailAddress</span><span class="p">,</span> <span class="n">ws</span><span class="p">.</span><span class="n">EmailContent</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">End</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally on our happy path, we&rsquo;re informed that an email has been sent. Here we mark the work flow as ended using <code>Out.End</code>. This will cancel
any outstanding continuations and remove the work flow state from the state store. ProcessManager <em>will not retain any information</em>
about the running of a work flow. If you require (and you probably do) any kind of logging or auditing it is your responsibility to
cover that within the handlers you write.</p>

<p>But all this only covers the happy path. What happens if we hit one of those time outs we&rsquo;ve been talking about?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">TimeOut</span><span class="p">(</span><span class="n">TimeOutMessage</span> <span class="n">to</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Time out waiting for: {0}&quot;</span><span class="p">,</span> <span class="n">to</span><span class="p">.</span><span class="n">TimedOutStep</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">End</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, in that case a <code>TimeOutMessage</code> will be published, and we can handle it appropriately. In this case, just printing out the fact the job timed out, and which step it was that didn&rsquo;t complete (one of the fields on the <code>TimeOutMessage</code> object).
As above, we explicitly <code>End</code> the work flow. No further continuations will be triggered beyond this point. One thing to bear in mind though: while a continuation
timeout guarantees the continuation will not fire after the <code>TimeSpan</code> has expired, there is <strong>no</strong> guarantee that the <code>TimeOutMessage</code> will be either published
or handled in any particular timescale. For example, if all your ProcessManager nodes go down; well you won&rsquo;t be publishing/handling any time outs until they&rsquo;re running
again.</p>

<p>Now we&rsquo;re ready to write our <code>Configure</code> method. Let&rsquo;s wire everything up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">ProcessManager</span> <span class="n">pm</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">stored</span> <span class="p">=&gt;</span> <span class="n">stored</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">ModelStored</span><span class="p">&gt;(</span><span class="n">ModelStoredCheckRenderContentKey</span><span class="p">,</span> <span class="n">ModelStoredCheckRenderContent</span><span class="p">),</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">ModelStored</span><span class="p">&gt;(</span><span class="n">ModelStoredCheckRenderAddressKey</span><span class="p">,</span> <span class="n">ModelStoredCheckRenderAddress</span><span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">stored</span> <span class="p">=&gt;</span> <span class="n">stored</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span><span class="p">[]</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">TemplateStored</span><span class="p">&gt;(</span><span class="n">ContentTemplateStoredCheckRenderContentKey</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ContentTemplateStoredCheckRenderContent</span><span class="p">),</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">TemplateStored</span><span class="p">&gt;(</span><span class="n">AddressTemplateStoredCheckRenderAddressKey</span><span class="p">,</span>
</span><span class='line'>            <span class="n">AddressTemplateStoredCheckRenderAddress</span><span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">complete</span> <span class="p">=&gt;</span> <span class="n">complete</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">RenderComplete</span><span class="p">&gt;(</span><span class="n">AddressRenderedCheckSendEmailKey</span><span class="p">,</span> <span class="n">AddressRenderedCheckSendEmail</span><span class="p">),</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">RenderComplete</span><span class="p">&gt;(</span><span class="n">ContentRenderedCheckSendEmailKey</span><span class="p">,</span> <span class="n">ContentRenderedCheckSendEmail</span><span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">sent</span> <span class="p">=&gt;</span> <span class="n">sent</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">EmailSent</span><span class="p">&gt;(</span><span class="s">&quot;EmailSent&quot;</span><span class="p">,</span> <span class="n">EmailSent</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">to</span> <span class="p">=&gt;</span> <span class="n">to</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">TimeOutMessage</span><span class="p">&gt;(</span><span class="s">&quot;TimeOut&quot;</span><span class="p">,</span> <span class="n">TimeOut</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The method takes our ProcessManager and starts adding processors to it. A processor knows how to extract a correlation ID from a specific message type, and an <code>IEnumerable</code> of mappings.
Each mapping tells the ProcessManager which method to fire based on a string Key (remember our <code>const</code>s from above?).</p>

<p>So, there you have it; a complete managed work flow on top of EasyNetQ with split and merge and time outs. The full work flow code file with out my commentary is below for those of you
who find that easier!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Runtime.Serialization</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">EasyNetQ.ProcessManager</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Messenger.Messages.Email</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Messenger.Messages.Render</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Messenger.Messages.Store</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">Process3</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">    [DataContract]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">WorkflowState</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="nf">WorkflowState</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="nf">WorkflowState</span><span class="p">(</span><span class="kt">int?</span> <span class="n">modelId</span><span class="p">,</span> <span class="kt">int?</span> <span class="n">contentTemplateId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">emailContent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">emailAddress</span><span class="p">,</span> <span class="kt">int?</span> <span class="n">addressTemplateId</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">ModelId</span> <span class="p">=</span> <span class="n">modelId</span><span class="p">;</span>
</span><span class='line'>            <span class="n">ContentTemplateId</span> <span class="p">=</span> <span class="n">contentTemplateId</span><span class="p">;</span>
</span><span class='line'>            <span class="n">EmailContent</span> <span class="p">=</span> <span class="n">emailContent</span><span class="p">;</span>
</span><span class='line'>            <span class="n">EmailAddress</span> <span class="p">=</span> <span class="n">emailAddress</span><span class="p">;</span>
</span><span class='line'>            <span class="n">AddressTemplateId</span> <span class="p">=</span> <span class="n">addressTemplateId</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">        [DataMember]</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">int?</span> <span class="n">ModelId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">        [DataMember]</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">int?</span> <span class="n">ContentTemplateId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">        [DataMember]</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">int?</span> <span class="n">AddressTemplateId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">        [DataMember]</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">EmailContent</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">        [DataMember]</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">EmailAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Workflow</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Callback keys</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ModelStoredCheckRenderContentKey</span> <span class="p">=</span> <span class="s">&quot;ModelStoredCheckRenderContentKey&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ModelStoredCheckRenderAddressKey</span> <span class="p">=</span> <span class="s">&quot;ModelStoredCheckRenderAddress&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ContentTemplateStoredCheckRenderContentKey</span> <span class="p">=</span> <span class="s">&quot;ContentTemplateStoredCheckRenderContent&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">AddressTemplateStoredCheckRenderAddressKey</span> <span class="p">=</span> <span class="s">&quot;AddressTemplateStoredCheckRenderAddress&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ContentRenderedCheckSendEmailKey</span> <span class="p">=</span> <span class="s">&quot;ContentRenderedCheckSendEmail&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">AddressRenderedCheckSendEmailKey</span> <span class="p">=</span> <span class="s">&quot;AddressRenderedCheckSendEmail&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">Start</span><span class="p">(</span><span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">model</span><span class="p">,</span> <span class="kt">string</span> <span class="n">contentTemplate</span><span class="p">,</span> <span class="kt">string</span> <span class="n">addressTemplate</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">modelCid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">contentCid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">addressCid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>                <span class="n">Out</span><span class="p">.</span><span class="n">Empty</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="k">new</span> <span class="n">StoreModel</span><span class="p">(</span><span class="n">modelCid</span><span class="p">,</span> <span class="n">model</span><span class="p">),</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">ModelStored</span><span class="p">&gt;(</span><span class="n">modelCid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">ModelStoredCheckRenderContentKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span> <span class="s">&quot;TimeOut&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">ModelStored</span><span class="p">&gt;(</span><span class="n">modelCid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">ModelStoredCheckRenderAddressKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span> <span class="s">&quot;TimeOut&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="k">new</span> <span class="n">StoreTemplate</span><span class="p">(</span><span class="n">contentCid</span><span class="p">,</span> <span class="s">&quot;content template&quot;</span><span class="p">,</span> <span class="n">contentTemplate</span><span class="p">),</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">TemplateStored</span><span class="p">&gt;(</span><span class="n">contentCid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">ContentTemplateStoredCheckRenderContentKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span>
</span><span class='line'>                        <span class="s">&quot;TimeOut&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="k">new</span> <span class="n">StoreTemplate</span><span class="p">(</span><span class="n">addressCid</span><span class="p">,</span> <span class="s">&quot;address template&quot;</span><span class="p">,</span> <span class="n">addressTemplate</span><span class="p">),</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">TemplateStored</span><span class="p">&gt;(</span><span class="n">addressCid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">AddressTemplateStoredCheckRenderAddressKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span>
</span><span class='line'>                        <span class="s">&quot;TimeOut&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">private</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">RenderContentIfReady</span><span class="p">(</span><span class="n">WorkflowState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(!</span><span class="n">state</span><span class="p">.</span><span class="n">ModelId</span><span class="p">.</span><span class="n">HasValue</span> <span class="p">||</span> <span class="p">!</span><span class="n">state</span><span class="p">.</span><span class="n">ContentTemplateId</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span> <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Ignore</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">cid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">renderContent</span> <span class="p">=</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">RequestRender</span><span class="p">(</span><span class="n">cid</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">ContentTemplateId</span><span class="p">.</span><span class="n">Value</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">ModelId</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>                <span class="n">Out</span><span class="p">.</span><span class="n">Empty</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">renderContent</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">RenderComplete</span><span class="p">&gt;(</span><span class="n">cid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">ContentRenderedCheckSendEmailKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span>
</span><span class='line'>                        <span class="s">&quot;TimeOut&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">private</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">RenderAddressIfReady</span><span class="p">(</span><span class="n">WorkflowState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(!</span><span class="n">state</span><span class="p">.</span><span class="n">ModelId</span><span class="p">.</span><span class="n">HasValue</span> <span class="p">||</span> <span class="p">!</span><span class="n">state</span><span class="p">.</span><span class="n">AddressTemplateId</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span> <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Ignore</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">cid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">renderContent</span> <span class="p">=</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">RequestRender</span><span class="p">(</span><span class="n">cid</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">AddressTemplateId</span><span class="p">.</span><span class="n">Value</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">ModelId</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Empty</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">renderContent</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">RenderComplete</span><span class="p">&gt;(</span><span class="n">cid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">AddressRenderedCheckSendEmailKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span>
</span><span class='line'>                    <span class="s">&quot;TimeOut&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">ModelStoredCheckRenderContent</span><span class="p">(</span><span class="n">ModelStored</span> <span class="n">ms</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">ModelId</span> <span class="p">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">ModelId</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">existing</span><span class="p">.</span><span class="n">ModelId</span> <span class="p">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">ModelId</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">RenderContentIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">ModelStoredCheckRenderAddress</span><span class="p">(</span><span class="n">ModelStored</span> <span class="n">ms</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">ModelId</span> <span class="p">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">ModelId</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">existing</span><span class="p">.</span><span class="n">ModelId</span> <span class="p">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">ModelId</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">RenderAddressIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">ContentTemplateStoredCheckRenderContent</span><span class="p">(</span><span class="n">TemplateStored</span> <span class="n">ts</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">ContentTemplateId</span> <span class="p">=</span> <span class="n">ts</span><span class="p">.</span><span class="n">TemplateId</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">existing</span><span class="p">.</span><span class="n">ContentTemplateId</span> <span class="p">=</span> <span class="n">ts</span><span class="p">.</span><span class="n">TemplateId</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">RenderContentIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">AddressTemplateStoredCheckRenderAddress</span><span class="p">(</span><span class="n">TemplateStored</span> <span class="n">ts</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">AddressTemplateId</span> <span class="p">=</span> <span class="n">ts</span><span class="p">.</span><span class="n">TemplateId</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">existing</span><span class="p">.</span><span class="n">AddressTemplateId</span> <span class="p">=</span> <span class="n">ts</span><span class="p">.</span><span class="n">TemplateId</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">RenderAddressIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">private</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">SendEmailIfReady</span><span class="p">(</span><span class="n">WorkflowState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">state</span><span class="p">.</span><span class="n">EmailContent</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Ignore</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">cid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">sendEmail</span> <span class="p">=</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">SendEmail</span><span class="p">(</span><span class="n">cid</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">EmailAddress</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">EmailContent</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Empty</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">sendEmail</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">EmailSent</span><span class="p">&gt;(</span><span class="n">cid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="s">&quot;EmailSent&quot;</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span> <span class="s">&quot;TimeOut&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">AddressRenderedCheckSendEmail</span><span class="p">(</span><span class="n">RenderComplete</span> <span class="n">rc</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">EmailAddress</span> <span class="p">=</span> <span class="n">rc</span><span class="p">.</span><span class="n">Content</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">existing</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">=</span> <span class="n">rc</span><span class="p">.</span><span class="n">Content</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">SendEmailIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">ContentRenderedCheckSendEmail</span><span class="p">(</span><span class="n">RenderComplete</span> <span class="n">rc</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">EmailContent</span> <span class="p">=</span> <span class="n">rc</span><span class="p">.</span><span class="n">Content</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">existing</span><span class="p">.</span><span class="n">EmailContent</span> <span class="p">=</span> <span class="n">rc</span><span class="p">.</span><span class="n">Content</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">SendEmailIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">EmailSent</span><span class="p">(</span><span class="n">EmailSent</span> <span class="n">es</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">WorkflowState</span><span class="p">&gt;().</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Email send success: {0}\nAddress: {1}\nContent: {2}&quot;</span><span class="p">,</span> <span class="n">es</span><span class="p">.</span><span class="n">Successful</span><span class="p">,</span> <span class="n">ws</span><span class="p">.</span><span class="n">EmailAddress</span><span class="p">,</span> <span class="n">ws</span><span class="p">.</span><span class="n">EmailContent</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">End</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">TimeOut</span><span class="p">(</span><span class="n">TimeOutMessage</span> <span class="n">to</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Time out waiting for: {0}&quot;</span><span class="p">,</span> <span class="n">to</span><span class="p">.</span><span class="n">TimedOutStep</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">End</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">ProcessManager</span> <span class="n">pm</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">stored</span> <span class="p">=&gt;</span> <span class="n">stored</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span> <span class="p">[]</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">ModelStored</span><span class="p">&gt;(</span><span class="n">ModelStoredCheckRenderContentKey</span><span class="p">,</span> <span class="n">ModelStoredCheckRenderContent</span><span class="p">),</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">ModelStored</span><span class="p">&gt;(</span><span class="n">ModelStoredCheckRenderAddressKey</span><span class="p">,</span> <span class="n">ModelStoredCheckRenderAddress</span><span class="p">)</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">stored</span> <span class="p">=&gt;</span> <span class="n">stored</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span><span class="p">[]</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">TemplateStored</span><span class="p">&gt;(</span><span class="n">ContentTemplateStoredCheckRenderContentKey</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">ContentTemplateStoredCheckRenderContent</span><span class="p">),</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">TemplateStored</span><span class="p">&gt;(</span><span class="n">AddressTemplateStoredCheckRenderAddressKey</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">AddressTemplateStoredCheckRenderAddress</span><span class="p">)</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">complete</span> <span class="p">=&gt;</span> <span class="n">complete</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span> <span class="p">[]</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">RenderComplete</span><span class="p">&gt;(</span><span class="n">AddressRenderedCheckSendEmailKey</span><span class="p">,</span> <span class="n">AddressRenderedCheckSendEmail</span><span class="p">),</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">RenderComplete</span><span class="p">&gt;(</span><span class="n">ContentRenderedCheckSendEmailKey</span><span class="p">,</span> <span class="n">ContentRenderedCheckSendEmail</span><span class="p">)</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">sent</span> <span class="p">=&gt;</span> <span class="n">sent</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">EmailSent</span><span class="p">&gt;(</span><span class="s">&quot;EmailSent&quot;</span><span class="p">,</span> <span class="n">EmailSent</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">to</span> <span class="p">=&gt;</span> <span class="n">to</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">TimeOutMessage</span><span class="p">&gt;(</span><span class="s">&quot;TimeOut&quot;</span><span class="p">,</span> <span class="n">TimeOut</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Suggestions, additions and questions welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extracting Information From MsBuild]]></title>
    <link href="http://blog.mavnn.co.uk/extracting-information-from-msbuild/"/>
    <updated>2015-08-07T14:45:28+01:00</updated>
    <id>http://blog.mavnn.co.uk/extracting-information-from-msbuild</id>
    <content type="html"><![CDATA[<p>Recently as part of some research into making a large (very large) solution build more efficient, I started looking into whether there&rsquo;s anyway of getting MsBuild to do
some of the donkey work for you. This is especially important in situations where you want to know what&rsquo;s being used/produced with this particular set of parameters.</p>

<p>Obviously dealing with every possible custom build target is out of scope, but you can get a surprisingly long way by taking advantage of some of the intermediate build
targets used within the MsBuild Common targets files (imported into every *proj file created by Visual Studio).</p>

<p>Create yourself a little file called something like <code>Analyse.proj</code>, and put the following in it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;Project</span> <span class="na">ToolsVersion=</span><span class="s">&quot;12.0&quot;</span> <span class="na">DefaultTargets=</span><span class="s">&quot;WriteStuff&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Import</span> <span class="na">Project=</span><span class="s">&quot;$(TargetProject)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Target</span> <span class="na">Name=</span><span class="s">&quot;WriteStuff&quot;</span> <span class="na">DependsOnTargets=</span><span class="s">&quot;ResolveReferences&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Message</span> <span class="na">Importance=</span><span class="s">&quot;high&quot;</span> <span class="na">Text=</span><span class="s">&quot;References::@(ReferencePath)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Message</span> <span class="na">Importance=</span><span class="s">&quot;high&quot;</span> <span class="na">Text=</span><span class="s">&quot;Compiles::@(BeforeCompile);@(Compile);@(AfterCompile)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Message</span> <span class="na">Importance=</span><span class="s">&quot;high&quot;</span> <span class="na">Text=</span><span class="s">&quot;Output::$(OutputPath)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Target&gt;</span>
</span><span class='line'><span class="nt">&lt;/Project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a mini-MsBuild project that imports an other project &ndash; the project you want to analyse. You can &ldquo;build&rdquo; this project like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>PS C:\DirectoryWithProj&gt; <span class="err">&amp;</span> &#39;C:\Program Files (x86)\MSBuild\12.0\Bin\SBuild&#39; .\Analyse.proj /nologo /p:TargetProject=./Fake.Shake.fsproj
</span><span class='line'>Build started 07/08/2015 15:05:27.
</span><span class='line'>Project &quot;C:\DirectoryWithProj\Analyse.proj&quot; on node 1 (default targ ets).
</span><span class='line'>WriteStuff:
</span><span class='line'>  References::C:\rip\Fake.Shake\packages\FAKE.Lib\lib\net451\FakeLib.dll;C:\rip
</span><span class='line'>  \Fake.Shake\packages\FSharp.Core\lib\net40\FSharp.Core.dll;C:\rip\Fake.Shake\
</span><span class='line'>  packages\FsPickler\lib\net45\FsPickler.dll;C:\rip\Fake.Shake\packages\Hopac\l
</span><span class='line'>  ib\net45\Hopac.Core.dll;C:\rip\Fake.Shake\packages\Hopac\lib\net45\Hopac.dll;
</span><span class='line'>  C:\rip\Fake.Shake\packages\Hopac\lib\net45\Hopac.Platform.dll;C:\Program File
</span><span class='line'>  s (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.1\mscorli
</span><span class='line'>  b.dll;C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFra
</span><span class='line'>  mework\v4.5.1\System.Core.dll;C:\Program Files (x86)\Reference Assemblies\Mic
</span><span class='line'>  rosoft\Framework\.NETFramework\v4.5.1\System.dll;C:\Program Files (x86)\Refer
</span><span class='line'>  ence Assemblies\Microsoft\Framework\.NETFramework\v4.5.1\System.Numerics.dll;
</span><span class='line'>  C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework
</span><span class='line'>  \v4.5.1\System.Runtime.Serialization.dll;C:\Program Files (x86)\Reference Ass
</span><span class='line'>  emblies\Microsoft\Framework\.NETFramework\v4.5.1\System.Xml.dll
</span><span class='line'>  Compiles::;Fake.Shake.Core.fs;Fake.Shake.Control.fs;Fake.Shake.DefaultRules.f
</span><span class='line'>  s;Fake.Shake.fs;
</span><span class='line'>  Output::bin\Debug\
</span><span class='line'>Done Building Project &quot;C:\DirectoryWithProj\Analyse.proj&quot; (default
</span><span class='line'>targets).
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Build succeeded.
</span><span class='line'>    0 Warning(s)
</span><span class='line'>    0 Error(s)
</span><span class='line'>
</span><span class='line'>Time Elapsed 00:00:00.12
</span></code></pre></td></tr></table></div></figure>


<p>And as you can see, whilst it&rsquo;s a bit ugly it generates a whole load of useful information for you about how <em>this</em> build with <em>these</em> properties will be built.</p>

<p>That&rsquo;s all for now!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming in an Imperative World]]></title>
    <link href="http://blog.mavnn.co.uk/functional-programming-in-an-imperitive-world/"/>
    <updated>2015-06-12T10:54:20+01:00</updated>
    <id>http://blog.mavnn.co.uk/functional-programming-in-an-imperitive-world</id>
    <content type="html"><![CDATA[<p>Yesterday was the <a href="https://skillsmatter.com/conferences/7036-functional-programming-exchange-2015#skillscasts">Functional Programming Exchange 2015</a> and this being SkillsMatter,
the videos are already up. It&rsquo;s a great place to talk from that point of view, with consistently excellent organisation.</p>

<p>I was talking on being a &ldquo;Functional Programmer in an Imperative World&rdquo;; the slides are embedded below, but for the full experience check out the video at the link above.</p>

<iframe src="http://blog.mavnn.co.uk//www.slideshare.net/slideshow/embed_code/key/cSlUuPevYKsSHL" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://blog.mavnn.co.uk//www.slideshare.net/mavnn/functional-programming-in-an-imperitive-world" title="Functional Programming in an Imperitive World" target="_blank">Functional Programming in an Imperitive World</a> </strong> from <strong><a href="http://blog.mavnn.co.uk//www.slideshare.net/mavnn" target="_blank">mavnn</a></strong> </div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Property Based Testing at SDD Conf 2015]]></title>
    <link href="http://blog.mavnn.co.uk/sdd-conf-2015/"/>
    <updated>2015-06-08T10:21:44+01:00</updated>
    <id>http://blog.mavnn.co.uk/sdd-conf-2015</id>
    <content type="html"><![CDATA[<p>So, nearly a month back now I had the fantastic opportunity to speak at this year&rsquo;s
<a href="http://sddconf.com/">Software, Design &amp; Development</a> at the Barbican on property based
testing &ndash; or more specifically, FsCheck.</p>

<!-- more -->


<p>It was a fun experience and a very different type of conference to the smaller, generally
open source community based events that I normally attend. There were a wide variety of
expert speakers, covering the whole range from people like myself presenting on potentially
useful but relatively unknown technology (in the enterprise world, at least &ndash;
property based testing is pretty well known in functional programming circles) through to
known industry names.</p>

<p>I won&rsquo;t go into the details of all the talks I attended as I was there for 3 days. But there
were a lot of good ideas on display ranging through sane naming (always worth watching
anything by <a href="https://twitter.com/KevlinHenney">Kevlin Henney</a> if you get a chance) to
project design (as opposed to project planning, probably more thoughts on that later) to
practical DDD examples in .net to the &ldquo;Zen of Architecture&rdquo;.</p>

<p>As a thank you
to <a href="https://twitter.com/kurt2001">Kurt Schelfthout</a> who wrote FsCheck, to spread further what
I think is an awesome concept and to give an idea
of some of the kind of things we do at <a href="http://www.15below.com/">15below</a> to any interested
developers I managed to arrange for the recording of my talk to be released publicly. It&rsquo;s
an unmanned camera, so you have a pretty good view of the slides with out having to see my
face at any point, which many people will see as an advantage! I strongly recommend full
screen viewing; there&rsquo;s a fair amount of code in the presentation.</p>

<iframe src="https://player.vimeo.com/video/129109178" width="100%" height="400" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p>If you want to play with the code from the demo yourself, it&rsquo;s available <a href="https://github.com/mavnn/SddConf2015">on Github</a>. The slides are also available <a href="http://sddconf.com/brands/sdd/library/Breaking_Your_Code_In_New_Exciting_Ways.pdf">as a PDF</a>.</p>

<p>Many thanks to the conference organisers <a href="http://www.yellowstonetechmedia.com/">Yellowstone TechMedia</a>, and I&rsquo;ll definitely be considering submitting talks/attending again next year.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serialization in .net]]></title>
    <link href="http://blog.mavnn.co.uk/serialization-in-net/"/>
    <updated>2015-05-21T16:11:28+01:00</updated>
    <id>http://blog.mavnn.co.uk/serialization-in-net</id>
    <content type="html"><![CDATA[<p>Leaving the confines of your own process&rsquo;s safe little memory space is always a potentially painful moment
when you&rsquo;re coding up an up. Whether it&rsquo;s receiving data from the outside world, passing a message over
RabbitMQ to an other in house service, or writing an audit trail that needs to be accessible for the next
20 years, there&rsquo;s a bunch of considerations that need to be taken into account when you hit the joys of
serialization and deserialization.</p>

<!-- more -->


<h2>Mirror, mirror on the wall</h2>

<p>First up on the list is whether or not to use reflection. For those of you who aren&rsquo;t aware, reflection
is a way of inspecting the properties of your .net code at runtime, and various serialization libraries
take advantage of this to try and make your life easier.</p>

<p>The best known example of this is <a href="http://www.newtonsoft.com/json">Json.NET</a> &ndash; which will take any .net
object and try and create a Json representation of it &ndash; or vice versa.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Product</span> <span class="n">product</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Product</span><span class="p">();</span>
</span><span class='line'><span class="n">product</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;Apple&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">product</span><span class="p">.</span><span class="n">Expiry</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="p">(</span><span class="m">2008</span><span class="p">,</span> <span class="m">12</span><span class="p">,</span> <span class="m">28</span><span class="p">);</span>
</span><span class='line'><span class="n">product</span><span class="p">.</span><span class="n">Sizes</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;Small&quot;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">string</span> <span class="n">json</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="n">SerializeObject</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
</span><span class='line'><span class="c1">// {</span>
</span><span class='line'><span class="c1">//   &quot;Name&quot;: &quot;Apple&quot;,</span>
</span><span class='line'><span class="c1">//   &quot;Expiry&quot;: &quot;2008-12-28T00:00:00&quot;,</span>
</span><span class='line'><span class="c1">//   &quot;Sizes&quot;: [</span>
</span><span class='line'><span class="c1">//     &quot;Small&quot;</span>
</span><span class='line'><span class="c1">//   ]</span>
</span><span class='line'><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a common technique, but it does have a few problems.</p>

<h3>Versioning</h3>

<p>The &ldquo;schema&rdquo; here is actually the underlying .net type that you are serializing &ndash; this can be great for
quick to implement communications between .net services which can share a &ldquo;messages&rdquo; dll with the type in.</p>

<p>Unfortunately, this also plays merry havoc in any scenario where your messages might persist
between versions of your messaging dll. Saving these objects to a document store for example, or trying to run two versions of a service at once (required for seamless deployment)
connected to a messaging bus.</p>

<p>Because .net will only allow you to have one version of an assembly loaded at once, you can&rsquo;t
easily build a way of deserializing the old format.</p>

<h3>Uglyness</h3>

<p>This might sound like a purely aesthetic consideration, and therefore beneath us
technical types but the result of automatic serialization is often ugly and strange
looking. And to be fair, it isn&rsquo;t normally a huge problem for as long as you&rsquo;re working
in a .net to .net scenario. But if, for example, you&rsquo;re writing an API to be consumed
from JavaScript your UI developers (which is probably still you, right?) will curse your
name forever more if you go this route. As well as this, as there&rsquo;s no schema, it&rsquo;s very
hard to tell in any other language whether the object you&rsquo;ve created will make it through
the deserialization process when it hits .net land again.</p>

<h3>Runtime failure</h3>

<p>That <code>JsonConvert.SerializeObject</code> method up there: it&rsquo;s generic. Which means it will
take any .net object you want to throw at it.</p>

<p>Unfortunately, the number of .net objects it can actually serialize is quite a bit more
restricted than &ldquo;any .net object you want to throw at it&rdquo;. And it has no way of telling
you that until run time, when it will just throw an exception, which can be pretty painful.</p>

<h3>When to use?</h3>

<p>Only use reflection based serialization in situations where you know the serialized
representation will be transient, and where you can test your serialization works at
runtime in advance. Additional, be very suspicious of using reflection based serialization
in any scenario where anything outside the .net ecosystem will need to access the data.</p>

<p>Typical scenarios:</p>

<ul>
<li>Caching</li>
<li>Inter-process communication in distributed systems</li>
<li>Message bus communications (only if you can guarantee the messages are transient)</li>
</ul>


<p>Avoid for:</p>

<ul>
<li>Permanent persistence</li>
<li>Defining APIs to be used from outside .net</li>
</ul>


<h3>Recommended implementation</h3>

<p>If you are doing reflection based serialization in .net, you want to use
<a href="https://nessos.github.io/FsPickler/">FsPickler</a>. It covers binary, json, bson and xml
serialization in a single library, is faster than Json.NET and successfully serializes
more types than Json.NET. What&rsquo;s not to like?</p>

<h2>Attribute all the things!</h2>

<p>As well as just trying to guess how to serialize things with reflection in .net,
there is also the <a href="https://msdn.microsoft.com/en-us/library/system.serializableattribute%28v=vs.110%29.aspx">Serializable</a> attribute that allows you to then serialize to a variety
of formats using the <code>System.Runtime.Serialization</code> name space. This a few advantages
over the raw reflection technique in theory (you can mark specific fields not to be serialized, for example) but to be blunt if you&rsquo;re going to go to this amount of effort you may
as well go for one of the safer options below.</p>

<h3>When to use?</h3>

<p>When you&rsquo;re using a Microsoft library that requires you to.</p>

<h2>Safety with (type) class</h2>

<p>If you happen to be working in F#, then <a href="https://msdn.microsoft.com/en-us/library/dd233203.aspx">member constraints</a> allow you to try a more flexible and type safe way of expressing
serialization &ndash; in exchange for a little more work.</p>

<p>As an example, the Chiron library allows you to do things like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">Chiron</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Chiron</span><span class="p">.</span><span class="nc">Operators</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">InnerRecord</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="nc">Start</span> <span class="o">:</span> <span class="nn">System</span><span class="p">.</span><span class="nc">DateTime</span>
</span><span class='line'>        <span class="nc">Id</span> <span class="o">:</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Guid</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">FromJson</span> <span class="o">(_</span> <span class="o">:</span> <span class="nc">InnerRecord</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">(</span><span class="k">fun</span> <span class="n">s</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="nc">Start</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span> <span class="nc">Id</span> <span class="o">=</span> <span class="n">i</span> <span class="o">})</span>
</span><span class='line'>        <span class="o">&lt;!&gt;</span> <span class="nn">Json</span><span class="p">.</span><span class="n">read</span> <span class="s2">&quot;startTime&quot;</span>
</span><span class='line'>        <span class="o">&lt;*&gt;</span> <span class="nn">Json</span><span class="p">.</span><span class="n">read</span> <span class="s2">&quot;identity&quot;</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">ToJson</span> <span class="n">innerRecord</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">Json</span><span class="p">.</span><span class="n">write</span> <span class="s2">&quot;startTime&quot;</span> <span class="n">innerRecord</span><span class="o">.</span><span class="nc">Start</span>
</span><span class='line'>        <span class="o">*&gt;</span> <span class="nn">Json</span><span class="p">.</span><span class="n">write</span> <span class="s2">&quot;identity&quot;</span> <span class="n">innerRecord</span><span class="o">.</span><span class="nc">Id</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">OuterRecord</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="nc">Name</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>        <span class="nc">Inner</span> <span class="o">:</span> <span class="nc">InnerRecord</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">FromJson</span> <span class="o">(_</span> <span class="o">:</span> <span class="nc">OuterRecord</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">(</span><span class="k">fun</span> <span class="n">n</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="nc">Name</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span> <span class="nc">Inner</span> <span class="o">=</span> <span class="n">i</span> <span class="o">})</span>
</span><span class='line'>        <span class="o">&lt;!&gt;</span> <span class="nn">Json</span><span class="p">.</span><span class="n">read</span> <span class="s2">&quot;name&quot;</span>
</span><span class='line'>        <span class="o">&lt;*&gt;</span> <span class="nn">Json</span><span class="p">.</span><span class="n">read</span> <span class="s2">&quot;inner&quot;</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">ToJson</span> <span class="n">outerRecord</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">Json</span><span class="p">.</span><span class="n">write</span> <span class="s2">&quot;name&quot;</span> <span class="n">outerRecord</span><span class="o">.</span><span class="nc">Name</span>
</span><span class='line'>        <span class="o">*&gt;</span> <span class="nn">Json</span><span class="p">.</span><span class="n">write</span> <span class="s2">&quot;inner&quot;</span> <span class="n">outerRecord</span><span class="o">.</span><span class="nc">Inner</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="nc">Name</span> <span class="o">=</span> <span class="s2">&quot;my object&quot;</span>
</span><span class='line'>  <span class="nc">Inner</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>            <span class="nc">Start</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nc">DateTime</span><span class="o">(</span><span class="mi">2015</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">21</span><span class="o">)</span>
</span><span class='line'>            <span class="nc">Id</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Json</span><span class="p">.</span><span class="n">serialize</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Json</span><span class="p">.</span><span class="n">format</span>
</span><span class='line'><span class="c1">// Your json goes here</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few interesting things to note here. Firstly, as you&rsquo;ve probably guessed, the magic
of telling Chiron how to serialize and deserialize things happens in the <code>ToJson</code> and
<code>FromJson</code> methods. What might not be so obvious is that if these methods are not
implemented with the correct signature, than <code>Json.serialize</code> will not compile when
fed the erroneous object. Which does wonders for eliminating run time errors!</p>

<p>Also, if you look carefully at the To and From methods you&rsquo;ll see that there&rsquo;s no need
for the fields in the Json and the .net object to have the same name. In fact, you can
apply what ever logic you want within them, allowing you to match a specific schema,
allow for different versions of the serialized data to be deserialized or just generally
make the serialized version prettier to use from other places.</p>

<p>You do, of course, have to actually write the From and To methods, which is definitely
more work. Having said that, it&rsquo;s not quite as bad as it sounds though: as you can see
from the <code>OuterRecord</code> type with it&rsquo;s <code>InnerRecord</code> field, and can nest the To and
From methods nicely &ndash; and the type system will check that your object is serializable
all the way down. Nice.</p>

<h3>When to use?</h3>

<p>Any time when you might have to persist data between versions, or process data during
the serialization/deserialization process &ndash; and you can specify your data types in F#.</p>

<h3>Recommended implementation</h3>

<p><a href="https://github.com/mausch/Fleece">Fleece</a> and <a href="https://github.com/xyncro/chiron/">Chiron</a>
both implement these techniques. Fleece is a more established library that has been tested
for longer, but I have had some performance issues with it in libraries with a lot of types
that implement To and From methods. Chiron is a little bit&hellip; cutting edge in age, but
has always been fast and reliable for me so far.</p>

<p>We currently use Fleece in one of our projects, and have provided some support to improving
the testing of Chiron as it looks like a hopeful alternative.</p>

<p>Edit: Eirik points out in the comments that FsPickler (mentioned above) also has a mechanism
for defining type safe (de)serialization <a href="http://nessos.github.io/FsPickler/tutorial.html#Picklers-and-Pickler-combinators">using Picklers</a>. I couldn&rsquo;t possibly guess where the library
got it&rsquo;s name.</p>

<h2>All the rest</h2>

<p>I&rsquo;m sure that there are other ways of tackling these problems &ndash; for example, for our
customer facing &ldquo;business&rdquo; APIs we&rsquo;re moving to specifying our API using hand crafted
XSD and WSDL files and then autogenerating code behind. This assumes, of course, you
have some reason to be using SOAP. But if you do, it works an awful lot better than
trying to autogenerate the schema from the code &ndash; a path that&rsquo;s lead me to worlds of
pain both as the consumer and producer of the schemas.</p>

<p>But the routes above are the most common paths that I&rsquo;ve come across as a .net developer
and I&rsquo;ve often discovered them being used in the &ldquo;wrong&rdquo; places. Retroactively having to
version reflection based APIs is a particular pain point that I&rsquo;d recommend avoiding if
you possibly can!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API Design Workshop]]></title>
    <link href="http://blog.mavnn.co.uk/api-design-workshop/"/>
    <updated>2015-05-07T15:35:51+01:00</updated>
    <id>http://blog.mavnn.co.uk/api-design-workshop</id>
    <content type="html"><![CDATA[<p>Designing an API is hard.</p>

<p>You want to actually apply the
<a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment">principle of least astonishment</a> &ndash;
but you&rsquo;re the person who wrote the code. You&rsquo;re unlikely to be astonished. So
you&rsquo;re trying to think how someone who didn&rsquo;t know what you know would think &ndash;
which is never an easy starting point!</p>

<p>Similarly, you&rsquo;re trying to create the
<a href="http://blog.codinghorror.com/falling-into-the-pit-of-success/">pit of success</a>
for users. Which means trying to make it <em>very hard</em> to do the wrong thing with
your API. Preferably, in strongly typed languages, this should include using the
type system to
<a href="http://fsharpforfunandprofit.com/posts/designing-with-types-making-illegal-states-unrepresentable/">make illegal states unrepresentable</a>
so that code that compiles is very likely to work.</p>

<p>In general, the core libraries for .net are not bad at API design, but there are
a few places where this isn&rsquo;t true. As an exercise, we at
<a href="http://www.15below.com/">15below</a> are going to take one of them, split into
teams and spend an hour or so seeing what alternatives we can come up with. Feel
free to follow along at home, and if you do give it a try ping me a code snippet
and I&rsquo;ll post it up with our internal attempts in a week or so.</p>

<!-- more -->


<h2>The API</h2>

<p>Lots of things can be represented as streams of data. Files, network
connections, compressed archives, chunks of memory&hellip; the list goes on.</p>

<p>So .net provides us with the <a href="https://msdn.microsoft.com/en-us/library/system.io.stream%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396"><code>System.IO.Stream</code> class</a>.</p>

<p>Which is great and all&hellip; except that not all streams are equal. For example,
your function might need write access to a stream, and not all streams are
writable. You can check easily enough, but the only way of flagging to the user
you need write access is via comments or naming conventions. The same is true
for requiring the ability to read from the stream or seek to specific locations
with in it.</p>

<h2>The challenge</h2>

<p>Have a look through the interface provided by <code>System.IO.Stream</code>. Create a
skeleton of an API that could implement the same functionality, be reasonably
easy to use and tries to make illegal states unrepresentable as much as
possible. Note: this API does <em>not</em> have to be functional.</p>

<p>Try adding a few example methods that make use of your API (hint: your design
will probably be better if you write these first).</p>

<p>Maybe you want to try using interfaces and
<a href="http://stackoverflow.com/questions/3663739/method-parameter-with-multiple-interface-restrictions">multiple interface constraints</a>. Or
you have some clever idea for representing things with
<a href="http://fsharpforfunandprofit.com/posts/discriminated-unions/">discriminated unions</a>. Or
maybe you just know that there&rsquo;s a better core library out there with a nicer
representation you can rip off whole sale! Who knows?</p>

<p>Post your work up somewhere it can be seen on the internet and ping me a link,
and we&rsquo;ll go over the submissions and write up a commentary over the next week
or two.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ecumenical APIs]]></title>
    <link href="http://blog.mavnn.co.uk/ecumenical-apis/"/>
    <updated>2015-05-06T10:44:16+01:00</updated>
    <id>http://blog.mavnn.co.uk/ecumenical-apis</id>
    <content type="html"><![CDATA[<p>One of the big sells of shared runtime functional languages such as F#, Scala
and Clojure is that you can carrying on using the surrounding library ecosystem
and your existing code. The different paradigm occasionally causes a little
pain, but there are plenty of blog posts about how to wrap OO interfaces in a
functionally friendly way.</p>

<p>This is not one of those blog posts. This is about making sure that your
colleagues who are consuming your shiny new code in an imperative language
(generally C# in my case) don&rsquo;t threaten to defenestrate you.</p>

<p>At <a href="http://15below.com">15below</a> we&rsquo;ve recently had need in some of our services
of taking a distributed lock between servers. There are many services available
designed for doing this, but after some deliberation we decided that we didn&rsquo;t
want to add a new piece of infrastructure purely for this one purpose. So
<a href="http://15below.github.io/Sproc.Lock">Sproc.Lock</a> was born: SQL Server based
distributed locking.</p>

<p>In this post, I&rsquo;m not going to talk about the design of the service. What I&rsquo;m
going to write about is how I engineered the API to be pleasent to use from both
C# and F#, giving a idiomatic interface from both languages.</p>

<!-- more -->


<h2>The original interface (F#)</h2>

<p>The F# interface was written first, and follows a pattern that will feel
immediately familiar to an F# programmer. Our lock can be of 3 types (global,
organisation or environment) and so we have a discriminated union (<code>Lock</code>)
representing these three options.</p>

<p>(I&rsquo;ve removed the implementations of the various bits to leave the shape of the
code clear)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">/// Type representing a Lock that has definitely been acquired. Locks are</span>
</span><span class='line'><span class="c1">/// IDisposable; disposing the lock will ensure it is released.</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Lock</span> <span class="o">=</span>
</span><span class='line'>     <span class="c1">/// A lock that applies globally across the lock server</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">Global</span> <span class="k">of</span> <span class="o">...</span>
</span><span class='line'>     <span class="c1">/// A lock scoped to a specific organisation</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">Organisation</span> <span class="k">of</span> <span class="o">...</span>
</span><span class='line'>     <span class="c1">/// A lock scoped to a particular environment belonging to a particular organisation</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">Environment</span> <span class="k">of</span> <span class="o">...</span>
</span><span class='line'>     <span class="c1">/// The LockId acquired. Useful in combination when getting one of a list of locks to determine which was free.</span>
</span><span class='line'>     <span class="k">member</span> <span class="n">lock</span><span class="o">.</span><span class="nc">LockId</span> <span class="o">=</span>
</span><span class='line'>         <span class="o">...</span>
</span><span class='line'>     <span class="c1">/// Disposing releases the lock</span>
</span><span class='line'>     <span class="k">member</span> <span class="n">lock</span><span class="o">.</span><span class="nc">Dispose</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>         <span class="o">...</span>
</span><span class='line'>     <span class="k">interface</span> <span class="nc">IDisposable</span> <span class="k">with</span>
</span><span class='line'>         <span class="c1">/// Disposing releases the lock</span>
</span><span class='line'>         <span class="k">member</span> <span class="n">lock</span><span class="o">.</span><span class="nc">Dispose</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">lock</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The lock is <code>IDisposable</code> to take advantage of .net&rsquo;s most common resource
management idiom. You can release a lock by disposing it.</p>

<p>Then, of course, when we try and acquire a lock we may or may not be able to &ndash;
the whole point of locks is that you cannot obtain them if someone else has
locked it already, after all.</p>

<p>So we have a second discriminated union (<code>LockResult</code>) wrapping the first,
with (again) three potential cases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">/// A type representing the possible results of attempting to acquire a lock.</span>
</span><span class='line'><span class="k">type</span> <span class="nc">LockResult</span> <span class="o">=</span>
</span><span class='line'>     <span class="c1">/// A lock was successfully acquired</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">Locked</span> <span class="k">of</span> <span class="nc">Lock</span>
</span><span class='line'>     <span class="c1">/// No lock was available</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">Unavailable</span>
</span><span class='line'>     <span class="c1">/// The attempt to acquire a lock caused an error in SQL Server</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">Error</span> <span class="k">of</span> <span class="kt">int</span>
</span><span class='line'>     <span class="c1">/// Disposing a lock result disposes the lock if it was acquired, and has no effect otherwise</span>
</span><span class='line'>     <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Dispose</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Locked</span> <span class="n">l</span> <span class="o">-&gt;</span> <span class="n">l</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Unavailable</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Error</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>     <span class="k">interface</span> <span class="nc">IDisposable</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Dispose</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, this is <code>IDisposable</code> so that you can just dispose of your overall
<code>LockResult</code> object which makes a lot of the code cleaner.</p>

<p>So: how do we get a <code>LockResult</code>? Well, we have a set of functions for getting
locks. Let&rsquo;s have a look at the skeleton of one of them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// val GetOrganisationLock : string -&gt; string -&gt; TimeSpan -&gt; string -&gt; LockResult</span>
</span><span class='line'><span class="k">let</span> <span class="nc">GetOrganisationLock</span> <span class="n">connString</span> <span class="n">organisation</span> <span class="o">(</span><span class="n">maxDuration</span> <span class="o">:</span> <span class="nc">TimeSpan</span><span class="o">)</span> <span class="n">lockIdentifier</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s this doing? Well, it&rsquo;s going to (try and) create a lock scoped to a
particular database and organisation with a particular ID, returning a
<code>LockResult</code>.</p>

<p>From an API design point of view, what&rsquo;s interesting here is the order of the
arguments. <a href="https://en.wikipedia.org/wiki/Currying">Currying</a> enables easy
partial application, and here it is very likely that the application will want
to take all locks from the same database (making the first parameter) and
reasonably likely that it will always want them scoped to the same organisation
(second parameter). This is a common pattern in languages that allow for easy
currying, and invariably a consumer of this library in F# will end up with a
partially applied helper function looking something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// val getLock : string -&gt; LockResult</span>
</span><span class='line'><span class="k">let</span> <span class="n">getLock</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">GetOrganisationLock</span> <span class="s2">&quot;myDbConnString&quot;</span> <span class="s2">&quot;OrgName&quot;</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMinutes</span> <span class="mi">5</span><span class="o">.)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also have a set of helper functions for common operations we might want to
carry out on locks, all of which take a higher order function as part of their
arguments. Let&rsquo;s have a look at <code>AwaitLock</code> which will wait for a lock to
become available for a specified length of time, rather then returning
immediately with an <code>Unavailable</code> result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// val AwaitLock : TimeSpan -&gt; (unit -&gt; LockResult) -&gt; LockResult</span>
</span><span class='line'><span class="k">let</span> <span class="nc">AwaitLock</span> <span class="o">(</span><span class="n">timeOut</span> <span class="o">:</span> <span class="nc">TimeSpan</span><span class="o">)</span> <span class="n">getLock</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Using it using the helper above:</span>
</span><span class='line'><span class="k">let</span> <span class="n">awaitMyLock</span> <span class="n">identifier</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">AwaitLock</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromSeconds</span> <span class="mi">2</span><span class="o">.)</span> <span class="o">(</span><span class="n">getLock</span> <span class="n">identifier</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we then want (say) to wait up to 2 seconds for one of a list of possible
locks to become available, we can then compose this function with the
<code>OneOfLocks</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// val OneOfLocks : (&#39;a -&gt; LockResult) -&gt; seq&lt;&#39;a&gt; -&gt; LockResult</span>
</span><span class='line'><span class="k">let</span> <span class="nc">OneOfLocks</span> <span class="n">getLock</span> <span class="n">lockIds</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Using it using await helper:</span>
</span><span class='line'><span class="k">let</span> <span class="n">pickLock</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">OneOfLocks</span> <span class="n">awaitMyLock</span> <span class="o">[</span><span class="s2">&quot;LockId1&quot;</span><span class="o">;</span><span class="s2">&quot;LockId2&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m sure the comments will disagree, but I&rsquo;m actually pretty happy with this as
an F# interface to this library. It&rsquo;s not strictly pure, but that&rsquo;s an option in
F#, and the combination of composable functions and careful choice of parameter
order make for concise and readable code.</p>

<p>So, we&rsquo;re done &ndash; right?</p>

<p>Unfortunately not. This code would be truely horrible to use from C#, and we
still use a lot of C# here &ndash; some of our (stranger?) developers even prefer
it. Why would it be so nasty?</p>

<ul>
<li>Consuming discriminated unions from C# is verbose to the point of unusable</li>
<li>Partial application is a pain in C#, and no one wants to repeat the connection
string everytime they want a lock</li>
<li>Function composition is possible in C# but is not idiomatic and may make the
capabilities of the library unclear</li>
</ul>


<h2>API Take 2: the &ldquo;OO&rdquo; namespace</h2>

<p>In thinking about the kind of API I would expect for a locking library in C#, a
few things immediately sprang to mind:</p>

<ul>
<li>I would expect some kind of configurable provider object or factory</li>
<li>Out of flow returns are normally signalled by exceptions</li>
<li>Function composition only for more unusual calling options</li>
</ul>


<p>Wrapping the functional API turned out to be reasonably simple. A couple of
custom exception types and the <code>OOise</code> method later (I love that function
name, even if I say so myself) we can easily wrap our functional API in
something that makes sense in C# land &ndash; they either return an acquired,
<code>IDisposable</code> lock or throw.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">/// Exception thrown by ``LockProvider`` if none of the specified locks are available.</span>
</span><span class='line'><span class="k">type</span> <span class="nc">LockUnavailableException</span> <span class="o">(</span><span class="n">message</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Exception</span><span class="o">(</span><span class="n">message</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// Exception thrown by ``LockProvider`` if a lock request errors on SQL Server.</span>
</span><span class='line'><span class="c1">/// ``LockErrorCode`` is the SQL error response.</span>
</span><span class='line'><span class="k">type</span> <span class="nc">LockRequestErrorException</span> <span class="o">(</span><span class="n">errorCode</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Exception</span><span class="o">(</span><span class="n">sprintf</span> <span class="s2">&quot;Error code: %d&quot;</span> <span class="n">errorCode</span><span class="o">)</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nn">Data</span><span class="p">.</span><span class="nc">Add</span><span class="o">(</span><span class="n">box</span> <span class="s2">&quot;ErrorCode&quot;</span><span class="o">,</span> <span class="n">box</span> <span class="n">errorCode</span><span class="o">)</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">LockErrorCode</span>
</span><span class='line'>        <span class="k">with</span> <span class="n">get</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="nn">Data</span><span class="p">.</span><span class="err">[&quot;</span><span class="nc">ErrorCode</span><span class="s2">&quot;] |&gt; unbox&lt;int&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">let private OOise lockId getLock =</span>
</span><span class='line'><span class="s2">    match getLock lockId with</span>
</span><span class='line'><span class="s2">    | Locked l -&gt; l</span>
</span><span class='line'><span class="s2">    | Unavailable -&gt; raise &lt;| LockUnavailableException(sprintf &quot;</span><span class="nc">Lock</span> <span class="o">%</span><span class="n">s</span> <span class="n">was</span> <span class="n">unavailable</span><span class="o">.</span><span class="s2">&quot; lockId)</span>
</span><span class='line'><span class="s2">    | Error i -&gt; raise &lt;| LockRequestErrorException i</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, a simple <code>LockProvider</code> class allows for all the normal patterns we&rsquo;ve
come to know (and in some cases love) such as dependency injection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">LockProvider</span> <span class="o">(</span><span class="n">connString</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">GlobalLock</span> <span class="o">(</span><span class="n">lockId</span><span class="o">,</span> <span class="n">maxDuration</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="nc">GetGlobalLock</span> <span class="n">connString</span> <span class="n">maxDuration</span> <span class="o">|&gt;</span> <span class="nc">OOise</span> <span class="n">lockId</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">OrganisationLock</span> <span class="o">(</span><span class="n">lockId</span><span class="o">,</span> <span class="n">organisation</span><span class="o">,</span> <span class="n">maxDuration</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="c1">// Rest of the implementations snipped</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">EnvironmentLock</span> <span class="o">(</span><span class="n">lockId</span><span class="o">,</span> <span class="n">organisation</span><span class="o">,</span> <span class="n">environment</span><span class="o">,</span> <span class="n">maxDuration</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">AwaitGlobalLock</span> <span class="o">(</span><span class="n">lockId</span><span class="o">,</span> <span class="n">maxDuration</span><span class="o">,</span> <span class="n">timeOut</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">AwaitOrganisationLock</span> <span class="o">(</span><span class="n">lockId</span><span class="o">,</span> <span class="n">organisation</span><span class="o">,</span> <span class="n">maxDuration</span><span class="o">,</span> <span class="n">timeOut</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">AwaitEnvironmentLock</span> <span class="o">(</span><span class="n">lockId</span><span class="o">,</span> <span class="n">organisation</span><span class="o">,</span> <span class="n">environment</span><span class="o">,</span> <span class="n">maxDuration</span><span class="o">,</span> <span class="n">timeOut</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="c1">/// Build a ``System.Func`` that returns a lock based on lockId and provide a list of lockIds.</span>
</span><span class='line'>    <span class="c1">/// If any of the locks are available, it will pick one of the available locks at random.</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">OneOf</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">t</span><span class="o">&gt;</span> <span class="o">(</span><span class="n">getLock</span> <span class="o">:</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Func</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">t</span><span class="o">,</span> <span class="nc">Lock</span><span class="o">&gt;,</span> <span class="n">lockIds</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="c1">/// Build a ``System.Func`` that returns a lock based on lockId and provide a list of lockIds.</span>
</span><span class='line'>    <span class="c1">/// If any of the locks are available, it will pick one of the available locks at random.</span>
</span><span class='line'>    <span class="c1">/// If none are available it will wait until one is, or ``timeOut`` has passed.</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">AwaitOneOf</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">t</span><span class="o">&gt;</span> <span class="o">(</span><span class="n">getLock</span> <span class="o">:</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Func</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">t</span><span class="o">,</span> <span class="nc">Lock</span><span class="o">&gt;,</span> <span class="n">lockIds</span><span class="o">,</span> <span class="n">timeOut</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, by the time we get to the <code>OneOf</code> members, we&rsquo;re pretty much
forced into taking higher order functions to avoid a combinatorial explosion of
members (not that that always seems to deter OO API designers&hellip;). Other than
that, I think we&rsquo;re left with an API which will immediately make sense to a C#
developer: you can new up a <code>LockProvider</code>, you have a specified list of
exception types to expect, and you can easily intellisense your way around all
of the available options.</p>

<p>Our C# consuming code ends up looking a bit like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Sproc.Lock.OO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">MyApp</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Thing</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">DoLockRequiringWork</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">provider</span> <span class="p">=</span> <span class="k">new</span> <span class="n">LockProvider</span><span class="p">(</span><span class="s">&quot;sql connection string&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">try</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">lock2</span> <span class="p">=</span> <span class="n">provider</span><span class="p">.</span><span class="n">GlobalLock</span><span class="p">(</span><span class="s">&quot;MyAppLock&quot;</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromMinutes</span><span class="p">(</span><span class="m">5.0</span><span class="p">)))</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// If I get here, I have a lock!</span>
</span><span class='line'>                    <span class="c1">// Doing stuff!</span>
</span><span class='line'>                <span class="p">}</span> <span class="c1">// Lock released when Disposed</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">catch</span> <span class="p">(</span><span class="n">LockUnavailableException</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="c1">// Could not get the lock</span>
</span><span class='line'>                <span class="k">throw</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">catch</span> <span class="p">(</span><span class="n">LockRequestErrorException</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="c1">// Getting the lock threw an error</span>
</span><span class='line'>                <span class="k">throw</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the very different parameter order, placing the parameters that change most
frequently at the beginning of the list as you would normally expect in C#. This
makes a surprisingly large difference to how easy the code is to consume.</p>

<p>Again: quite nice, if I do say so myself.</p>

<p>So there you have it &ndash; want to play nicely the whole .net ecosystem? Be
kind to your consumers, and build them an ecumenical API!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LambdaCon 2015]]></title>
    <link href="http://blog.mavnn.co.uk/lambdacon-2015/"/>
    <updated>2015-04-01T10:30:00+01:00</updated>
    <id>http://blog.mavnn.co.uk/lambdacon-2015</id>
    <content type="html"><![CDATA[<p>This weekend I had the honour of speaking at <a href="http://www.lambdacon.org/">LambdaCon</a>. My own talk I&rsquo;ll be writing some separate posts on in the future, but I also wanted to jot down some notes on the conference before the memory faded.</p>

<!-- more -->


<h3>The night before</h3>

<p>Friday night kicked off with a round of meeting online friends in person: <a href="https://twitter.com/map_it">Manuel</a>, <a href="https://twitter.com/TRikace">Riccardo</a>, <a href="https://twitter.com/robertoaloi">Roberto</a>, <a href="https://twitter.com/theburningmonk">Yan</a>, <a href="https://twitter.com/old_sound">Alvero</a>, Chris (sorry, no link!) and I all managed to end up at the same place at the same time and kick off the functional goodness with some awesome pasta and nice wine. As it was described on twitter afterwards:</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p><a href="https://twitter.com/robertoaloi">@robertoaloi</a> <a href="https://twitter.com/LambdaCon">@LambdaCon</a> It&#39;s been fun :) That&#39;s how every language fight should be settled! With tortellini, tagliatelle and red wine.</p>&mdash; Manuel Paccagnella (@map_it) <a href="https://twitter.com/map_it/status/582284940538171392">March 29, 2015</a></blockquote>


<script async src="http://blog.mavnn.co.uk//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>If you ever get a chance to meet up with any of these people and chat code, craftsmanship or childcare in Sweden then I strongly recommend you take the opportunity.</p>

<h3>The conference itself</h3>

<p>After a brief introductory talk explaining how things would work and a couple of schedule changes, we were off. The organisation was first class for a conference in it&rsquo;s first year, and my hats off to all the people at LambdaCon for getting that right out of the box. They looked a little frazzled, but everything seemed to work!</p>

<h4>Session 1: Fun with categories &ndash; Milewski</h4>

<p>This was an amazing talk: Milewski&rsquo;s talk used examples from C++ and pictures of pigs to explain basic category theory, and how these concepts are useful for solving practical programming problems. He then moved onto building a writer monad for logging audit data in a banking application in C++. If you are either new to functional programming or you work with people who are not functional programmers, this talk should go to the top of your watch list as soon as the video is
available.</p>

<h4>Session 2: It&rsquo;s the type theory baby! &ndash; Finelli</h4>

<p>Unfortunately, this was my one disappointment of the day. The ideas in Finelli&rsquo;s talk are fascinating, but the talk was based much more heavily than I had realised on the paper <a href="http://r.duckduckgo.com/l/?kh=-1&amp;uddg=http%3A%2F%2Fhomepages.inf.ed.ac.uk%2Fwadler%2Fpapers%2Fpropositions-as-types%2Fpropositions-as-types.pdf">propositions as types</a> (pdf) which I have read most of. Finelli was not a bad speaker, but Wadler is a master of the writing art and on this one I&rsquo;d recommend just grabbing the paper.</p>

<p>Also, it was probably a bit rude to define &ldquo;type system&rdquo; to exclude dynamic and unityped languages at a conference with Erlang and Clojure speakers! :D</p>

<h4>Session 3: Persisting persistent data structures &ndash; Newton</h4>

<p>This was me; I&rsquo;ll leave others to comment!</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Eventsourcing from domain modeling to persistence with <a href="https://twitter.com/hashtag/fsharp?src=hash">#fsharp</a> <a href="https://twitter.com/hashtag/suave?src=hash">#suave</a> and <a href="https://twitter.com/GetEventStore">@GetEventStore</a> by <a href="https://twitter.com/mavnn">@mavnn</a> <a href="http://t.co/PQegdVfdRQ">pic.twitter.com/PQegdVfdRQ</a></p>&mdash; Enrico Sada (@enricosada) <a href="https://twitter.com/enricosada/status/581798670510743552">March 28, 2015</a></blockquote>


<script async src="http://blog.mavnn.co.uk//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>The only thing I will say is that I should have <strong>really</strong> had a wrap up slide to summarize the key points and signal to everyone that the talk had actually finished. That would probably have been better than a momentary awkward silence.</p>

<h4>Lunch</h4>

<p>It would be hard to swing a cat (a nice English expression for you) in Bologna without hitting a high quality food supplier, so not surprisingly lunch was pretty good. So was (also not surprisingly!) the coffee during the coffee breaks, accompanied by both sweet and savoury snacks.</p>

<p>Conversation was good, and new contacts were made.</p>

<h4>Session 4: Generic polymorphism on steroids &ndash; Sacerdoti Coen</h4>

<p>Like the initial keynote, this talk would have been worth the price of admission alone. A different and fascinating approach to solving the Expression Problem in OCaml using polymorphic union case constructors. I can&rsquo;t wait for the video of this one to contrast and compare the details of the technique with Active Patterns in F# &ndash; two totally different solutions to the same problem.</p>

<h4>Session 5: Actor Model in F# and Akka.net &ndash; Terrell</h4>

<p>A good solid introduction to Akka.net, Akka and the actor model in general. Solid presentation, some really nice demos and a lot to go away and look up about supervision and routing&hellip;</p>

<p>Riccardo is touring Europe and presenting this talk in a number of different places including Prague, London, and probably others. Check it out if you get a chance.</p>

<h4>Session 6: Rust now and then &ndash; Percoco</h4>

<p>As I&rsquo;ve mentioned before, when I&rsquo;m at a conference I always like to attend at least one session that is on a subject I don&rsquo;t yet know much about and that isn&rsquo;t something I&rsquo;m immediately likely to use.</p>

<p>This was the session; I&rsquo;ve heard of rust a few times but never had a chance to look into it. Flavio gave an entertaining and very informative introduction to Rust &ndash; plenty of good stuff to trigger ideas and look into in the future.</p>

<h4>Session 7: TDD as in Type-Directed Development</h4>

<p>Awesome slides, domain modelling, entertaining presentation, property based testing, practical applications of propositions as types&hellip; I lost track of the good stuff in this talk and again, it&rsquo;ll be well worth grabbing a copy of the video to show to non-functional programmers to explain <em>why</em> we rant about all these things. Clément Delafargue rounded out my day nicely.</p>

<h4>Closing keynote</h4>

<p>Unfortunately I&rsquo;ll be waiting for the video of this with the rest of you, as train times didn&rsquo;t allow me to stay for the wrap up.</p>

<h3>Conclusion</h3>

<p>All in all, LambdaCon was a thoroughly enjoyable day: huge congratulations to <a href="http://www.coderstug.org/">Coders TUG</a> for all the hard work and effort and for all the sponsors that kept the conference at such an affordable price. I&rsquo;m very much hoping they&rsquo;ll do more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing ProvidedType.fs by Example]]></title>
    <link href="http://blog.mavnn.co.uk/testing-providedtype-dot-fs/"/>
    <updated>2015-02-16T12:12:56+00:00</updated>
    <id>http://blog.mavnn.co.uk/testing-providedtype-dot-fs</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/fsprojects/FSharp.TypeProviders.StarterPack">Type Provider Starter Pack</a> was designed with two purposes initially. Firstly, to be a canonical repository for the ProvidedTypes files which provide a source file based API for creating type providers. And secondly, to be a set of tutorials and examples for people wanting to dip their toes into building type providers for the first time.</p>

<p>To be honest, it&rsquo;s not been doing a complete job of either:</p>

<ul>
<li>I think most people are using it as the source of ProvidedTypes.fs and .fsi now days, but it didn&rsquo;t provide any infrastructure or testing for progressing the library.</li>
<li>The &ldquo;examples&rdquo; were limited to a link to my <a href="http://blog.mavnn.co.uk/type-providers-from-the-ground-up/">tutorial on building type providers</a></li>
</ul>


<p>Today, that&rsquo;s changed. And I need your help!</p>

<h3>Testing ProvidedTypes</h3>

<p>Once I started thinking about it, it became clear that the code needed for basic type provider examples, and the code needed to test ProvidedTypes.fs were basically identical.</p>

<p>So I implemented a system for compiling and testing example .fsx scripts within the Starter Pack repository.</p>

<p>Want to help out? As long as you have some basic git and F# knowledge, it&rsquo;s easy!</p>

<!-- more -->


<h4>Fork the repository and pull down a clone</h4>

<h4>Add an example to the <code>/examples</code> directory</h4>

<p>Structure the example as below and save it as an .fsx file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">#</span><span class="k">if</span> <span class="nc">INTERACTIVE</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;../src/ProvidedTypes.fsi&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;../src/ProvidedTypes.fs&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">BasicProvider</span> <span class="o">(</span><span class="n">config</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;StaticProperty.Provided&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">createTypes</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">myType</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;MyType&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">myProp</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;MyProperty&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span> <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>                                        <span class="nc">GetterCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;Hello world&quot;</span> <span class="o">@@&gt;))</span>
</span><span class='line'>        <span class="n">myType</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">myProp</span><span class="o">)</span>
</span><span class='line'>        <span class="o">[</span><span class="n">myType</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="n">createTypes</span><span class="bp">()</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span> <span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>#if INTERACTIVE</code> block at the top will allow you to write your example in Visual Studio, without us requiring a separate project for each example provider.</p>

<h4>Add a set of tests in a .fsx script in the <code>/examples</code> directory</h4>

<p>The test file for the example above looks like this, and again should be saved as an .fsx file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">#</span><span class="k">if</span> <span class="nc">INTERACTIVE</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;../packages/Nunit.Runners/tools/nunit.framework.dll&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;../test/StaticProperty.dll&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">NUnit</span><span class="p">.</span><span class="nc">Framework</span>
</span><span class='line'><span class="k">open</span> <span class="nn">StaticProperty</span><span class="p">.</span><span class="nc">Provided</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Test</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="o">``</span><span class="nc">Static</span> <span class="n">property</span> <span class="n">should</span> <span class="n">have</span> <span class="n">been</span> <span class="n">created</span><span class="o">``</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Assert</span><span class="p">.</span><span class="nc">AreEqual</span><span class="o">(</span><span class="s2">&quot;Hello world&quot;</span><span class="o">,</span> <span class="nn">MyType</span><span class="p">.</span><span class="nc">MyProperty</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the two #r references at the top. Remember what you choose to call the dll!</p>

<h4>Hooking up the examples so they get built and tested</h4>

<p>The main build file is where the magic happens &ndash; <a href="https://github.com/fsprojects/FSharp.TypeProviders.StarterPack/blob/master/build.fsx">build.fsx</a> in the root directory.</p>

<p>Squirrelled away in there is a target called <code>Examples</code>. It&rsquo;s contents look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">examples</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="nc">Name</span> <span class="o">=</span> <span class="s2">&quot;StaticProperty&quot;</span>
</span><span class='line'>            <span class="nc">ProviderSourceFiles</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;StaticProperty.fsx&quot;</span><span class="o">]</span>
</span><span class='line'>            <span class="nc">TestSourceFiles</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;StaticProperty.Tests.fsx&quot;</span><span class="o">]</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="nc">Name</span> <span class="o">=</span> <span class="s2">&quot;ErasedWithConstructor&quot;</span>
</span><span class='line'>            <span class="nc">ProviderSourceFiles</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;ErasedWithConstructor.fsx&quot;</span><span class="o">]</span>
</span><span class='line'>            <span class="nc">TestSourceFiles</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;ErasedWithConstructor.Tests.fsx&quot;</span><span class="o">]</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">testNunitDll</span> <span class="o">=</span> <span class="n">testDir</span> <span class="o">@@</span> <span class="s2">&quot;nunit.framework.dll&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="nn">File</span><span class="p">.</span><span class="nc">Exists</span> <span class="n">testNunitDll</span> <span class="k">then</span>
</span><span class='line'>        <span class="nn">File</span><span class="p">.</span><span class="nc">Delete</span> <span class="n">testNunitDll</span>
</span><span class='line'>    <span class="nn">File</span><span class="p">.</span><span class="nc">Copy</span> <span class="o">(</span><span class="n">nunitDir</span> <span class="o">@@</span> <span class="s2">&quot;nunit.framework.dll&quot;</span><span class="o">,</span> <span class="n">testNunitDll</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">fromExampleDir</span> <span class="n">filenames</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">filenames</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">filename</span> <span class="o">-&gt;</span> <span class="n">exampleDir</span> <span class="o">@@</span> <span class="n">filename</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">examples</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">example</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="c1">// Compile type provider</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">output</span> <span class="o">=</span> <span class="n">testDir</span> <span class="o">@@</span> <span class="n">example</span><span class="o">.</span><span class="nc">Name</span> <span class="o">+</span> <span class="s2">&quot;.dll&quot;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">setOpts</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">def</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">def</span> <span class="k">with</span> <span class="nc">Output</span> <span class="o">=</span> <span class="n">output</span><span class="o">;</span> <span class="nc">FscTarget</span> <span class="o">=</span> <span class="nn">FscTarget</span><span class="p">.</span><span class="nc">Library</span> <span class="o">}</span>
</span><span class='line'>        <span class="nc">Fsc</span> <span class="n">setOpts</span> <span class="o">(</span><span class="nn">List</span><span class="p">.</span><span class="n">concat</span> <span class="o">[</span><span class="n">pt</span><span class="o">;</span><span class="n">fromExampleDir</span> <span class="n">example</span><span class="o">.</span><span class="nc">ProviderSourceFiles</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Compile test dll</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">setTestOpts</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">def</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">{</span> <span class="n">def</span> <span class="k">with</span>
</span><span class='line'>                <span class="nc">Output</span> <span class="o">=</span> <span class="n">testDir</span> <span class="o">@@</span> <span class="n">example</span><span class="o">.</span><span class="nc">Name</span> <span class="o">+</span> <span class="s2">&quot;.Tests.dll&quot;</span>
</span><span class='line'>                <span class="nc">FscTarget</span> <span class="o">=</span> <span class="nn">FscTarget</span><span class="p">.</span><span class="nc">Library</span>
</span><span class='line'>                <span class="nc">References</span> <span class="o">=</span> <span class="o">[</span><span class="n">output</span><span class="o">;</span><span class="n">nunitDir</span> <span class="o">@@</span> <span class="s2">&quot;nunit.framework.dll&quot;</span><span class="o">]</span> <span class="o">}</span>
</span><span class='line'>        <span class="nc">Fsc</span> <span class="n">setTestOpts</span> <span class="o">(</span><span class="n">fromExampleDir</span> <span class="n">example</span><span class="o">.</span><span class="nc">TestSourceFiles</span><span class="o">)</span>
</span><span class='line'>    <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will need to add your example to the <code>examples</code> list at the top of the target. <code>Name</code> is the name of the dll that will be produced for your type provider. <code>ProviderSourceFiles</code> is the fsx file with your type provider example code. And <code>TestSourceFiles</code> is the code of your tests.</p>

<p>If you check further down, the call to the compiler to compile your provider will automatically prepend the ProvidedTypes files, so there&rsquo;s no need to list those. And the call to the compiler to run your tests will have references added for the provider you just built and <code>nunit.framework.dll</code>.</p>

<p>So what are you waiting for? Get writing some examples!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Good Developer CVs (Résumés)]]></title>
    <link href="http://blog.mavnn.co.uk/good-developer-cvs/"/>
    <updated>2015-02-12T15:31:49+00:00</updated>
    <id>http://blog.mavnn.co.uk/good-developer-cvs</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been reviewing a number of CVs from developers of varying experience recently, and wanted to get a few notes out there about what to do (and <strong>not</strong> do) on your CV if you want to get noticed.</p>

<p>Well, by me at least. Your mileage may vary with other reviewers! But &ndash; remember that you&rsquo;re interviewing the company as much as they&rsquo;re interviewing you. Hopefully this advice will get you more interest from the kind of companies you <strong>want</strong> to work for, even if it doesn&rsquo;t get you through the enterprise HR screen quite as often.</p>

<p>I&rsquo;ll start with the postives, and then go onto some things it&rsquo;s best to avoid.</p>

<h3>Make yourself stand out!</h3>

<p>Looking from the outside (at least, from the job descriptions!), <a href="http://15below.com">15below</a> probably looks like a Microsoft shop. That&rsquo;s because it is &ndash; all of our new code is written in MS supported .net languages, we use SQL Server as our primary data store, WebApi, ASP.net MVC, etc.</p>

<p>But! One of the things that makes us who we are is that we&rsquo;ve deliberately hired outside the box, especially for senior developer roles. I have professional Python experience, use F# by preference and run my personal computers on Linux. Three of us use Vim (or at least VsVim). One of us used to write C++ code for nuclear reactors (the testing is strong in that one). My colleagues tweet about Erlang, code for fun in Idris and steal ideas liberally from all these places to make 15below
the kind of place it is. Not all of it makes it into production code, but even there you&rsquo;ll find technologies like RabbitMQ that don&rsquo;t show up that often in the Microsoft world.</p>

<p>If you tailor your CV to what it looks like we prefer, you immediately sink to almost invisibility. &ldquo;Oh, an other developer with 5+ years C# experience who knows T-SQL and knows to buzzword Scrum onto the CV.&rdquo; To be clear: that&rsquo;s not a bad thing to have on your CV. It shouldn&rsquo;t be the only thing on your CV.</p>

<h3>Show me the codez</h3>

<p>This isn&rsquo;t essential, and you may not be able to depending on your previous employment. But if you can link to some previous code you&rsquo;ve written (even a website where you can say &ldquo;I wrote the JavaScript for this one&rdquo;) you&rsquo;ll immediately gain a boost towards an interview. We&rsquo;ll still give you the technical test, because unfortunately there are people who are stupid enough to try and pass off others work as their own (and it is stupid &ndash; you will get yourself burnt trying that). But
you&rsquo;re
much more likely to get to the interview stage. This is a particularly useful piece of advice for those of you just coming out of university. Can you link to your final year project? A hobby project? Your github account? If the code is good, you&rsquo;re instantly up there competing with candidates who on paper have years of experience over you.</p>

<p>Whether you show us code in advance or not, we will ask you to write something trivial during the interview. We&rsquo;ll make it as unscary as we can, but unfortunately enough people have come to us who cannot actually write code that we feel we have very little choice about this step. If you&rsquo;re nervous about this kind of thing, I would seriously suggest getting in a practice session or two with friends before getting to an interview for a development post. And be very, very wary of a company that
doesn&rsquo;t ask you to demonstrate you can actually code.</p>

<h3>Don&rsquo;t bother me with trivia, especially if it makes you look bad</h3>

<p>Been out of school for more than 5 years? I couldn&rsquo;t give two figs about your grades. Unless you explicitly list the fact that you achieved a C and 3 E&rsquo;s at AS level. That gives me pause for thought. It&rsquo;s not a make or break thing, but no need to cut your own chances.</p>

<h3>Don&rsquo;t fluff up your management skills (unless you want to be a manager)</h3>

<p>We&rsquo;ve been very borderline about interviewing several candidates because it was completely unclear from their CVs whether they actually <em>write any code</em>. Oh, it says &ldquo;experienced C# software engineer&rdquo; at the top of the CV, but if you look at the description of their last job it&rsquo;s all about &ldquo;Team Leader&rdquo;, &ldquo;Mentor&rdquo;, &ldquo;SCRUM master&rdquo;&hellip; Again, none of that&rsquo;s bad (well &ndash; maybe SCRUM master is a bit dubious) but we&rsquo;re not a Local Council where the only way of being &ldquo;Senior&rdquo; is to have
management responsibility. We&rsquo;re hiring developers, and while we&rsquo;ll expect a senior developer to be a good communicator we&rsquo;re not expecting them to be graduates of Atlassian University. If you want to get into people management, it&rsquo;s a fine career path. If you want to be a developer, highlight your development skills.</p>

<h3>Don&rsquo;t give in depth technical examples that give me the fear</h3>

<p>We got a CV from someone who had recently written a desktop application that used every multithreading techniques. Really? All of them? In one app? An interesting design decision.</p>

<p>Fortunately for my curiosity, he proceeded to list every multithreading techniques:</p>

<ul>
<li>ManualResetEvent</li>
<li>BackgroundWorker</li>
<li>Manual Dispatch</li>
</ul>


<p>In 2015 this is not the way to highlight your expertise in writing asynchronous and concurrent reliable, maintainable code. If someone wrote code like this within the company, the code review would immediately result in some pair programming on &ldquo;here&rsquo;s all the easier, more reliable ways you could have done this.&rdquo; From an applicant applying for a senior role it&rsquo;s an instant fail.</p>

<p>The problem is not here that someone didn&rsquo;t know how to write concurrent code: not every developer has reason to have learnt those skills. The problem is using a subject where you have very little expertise to try and boost your technical credentials.</p>

<p>Three things to take away here:</p>

<ol>
<li>Don&rsquo;t claim to be an expert on something unless you&rsquo;re certain that you actually are.</li>
<li>Did something in a previous job in a way you wouldn&rsquo;t now? List the result, not the detail of the technique</li>
<li>If you need ManualResetEvent you&rsquo;re probably doing something very wrong</li>
</ol>


<h3>Don&rsquo;t try and out Agile us</h3>

<p>Yes, yes, we say we&rsquo;re an agile company. But frankly, a lot of stuff that people call agile is a complete waste of time, and other things we just can&rsquo;t do because we spend a lot of time working with customers who are <em>not</em> agile. At all. So, we do 15below agile. It&rsquo;s a nice shorthand to give you a good idea of how we generally work. And agile being as dispersed an idea as it is, that&rsquo;s going to be true of pretty much any company that says it&rsquo;s agile.</p>

<p>So be wary getting too carried away on your &ldquo;agility&rdquo;. Again, don&rsquo;t claim to be expert if you&rsquo;re not: &ldquo;we had a morning meeting everyday&rdquo;, as one of our candidates noted in his agile experience. And you&rsquo;re going to make me very wary if you try and come across as being an agile zealot &ndash; not because agile is bad, but because whatever it is you&rsquo;re a zealot about, it&rsquo;s not going to be &ldquo;15below agile&rdquo;. And life&rsquo;s too short for getting into arguments about that kind of thing.</p>

<hr />

<p>So, there you have. My own personal list of things that increase or decrease your chances that I&rsquo;ll recommend you&rsquo;re interviewed.</p>

<p>If you think that you&rsquo;d be interested in working for the type of company that uses this type of criteria&hellip; well, oddly enough we&rsquo;re hiring at the moment. Ping me or drop a note through to <a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#111;&#x3a;&#106;&#x6f;&#x62;&#115;&#x40;&#x31;&#53;&#98;&#x65;&#x6c;&#x6f;&#119;&#46;&#x63;&#111;&#109;&#46;">&#106;&#x6f;&#x62;&#x73;&#x40;&#x31;&#53;&#98;&#x65;&#x6c;&#111;&#119;&#x2e;&#x63;&#111;&#109;&#x2e;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RX Solutions]]></title>
    <link href="http://blog.mavnn.co.uk/rx-solutions/"/>
    <updated>2015-02-09T14:15:45+00:00</updated>
    <id>http://blog.mavnn.co.uk/rx-solutions</id>
    <content type="html"><![CDATA[<p>This post contains solutions to the <a href="http://blog.mavnn.co.uk/exploring-reactive-extensions/">Reactive Extensions practical</a> post.</p>

<!--more-->


<p>The base program looks like this (as in the previous post):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Reactive</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Reactive.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">ReactiveTester.Shared</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">EventTester</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Handler</span><span class="p">(</span><span class="n">Tuple</span><span class="p">&lt;</span><span class="n">Guid</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">tuple</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0} - {1}&quot;</span><span class="p">,</span> <span class="n">tuple</span><span class="p">.</span><span class="n">Item1</span><span class="p">,</span> <span class="n">tuple</span><span class="p">.</span><span class="n">Item2</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Error</span><span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">err</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">OpenStandardError</span><span class="p">();</span>
</span><span class='line'>            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">writer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">StreamWriter</span><span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">Console</span><span class="p">.</span><span class="n">OutputEncoding</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">writer</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0}&quot;</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Nice docs (although Java): http://reactivex.io/RxJava/javadoc/rx/Observable.html</span>
</span><span class='line'>            <span class="c1">// The challenge:</span>
</span><span class='line'>            <span class="c1">// The ChangeReceiver will fire an event every time a change is received.</span>
</span><span class='line'>            <span class="c1">// Events can be:</span>
</span><span class='line'>            <span class="c1">// &quot;Ignore!&quot; -&gt; don&#39;t do anything</span>
</span><span class='line'>            <span class="c1">// &quot;Change!&quot; -&gt; send notification to staff and customers</span>
</span><span class='line'>            <span class="c1">// &quot;StaffOnly!&quot; -&gt; send notification to staff</span>
</span><span class='line'>            <span class="c1">// &quot;CustomerOnly!&quot; -&gt; send notification to customer only</span>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="c1">// Staff must be notified within 3 seconds.</span>
</span><span class='line'>            <span class="c1">// Customers most be notified between 5 and 7 seconds.</span>
</span><span class='line'>            <span class="n">using</span><span class="p">(</span><span class="kt">var</span> <span class="n">pub</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ChangeReceiver</span><span class="p">(</span><span class="s">&quot;tcp://*:5555&quot;</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Listening...&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">var</span> <span class="n">staffSender</span> <span class="p">=</span> <span class="k">new</span> <span class="n">NotificationSender</span><span class="p">(</span><span class="s">&quot;tcp://localhost:5556&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">customerSender</span> <span class="p">=</span> <span class="k">new</span> <span class="n">NotificationSender</span><span class="p">(</span><span class="s">&quot;tcp://localhost:5557&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">var</span> <span class="n">obs</span> <span class="p">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">FromEventPattern</span><span class="p">&lt;</span><span class="n">Tuple</span><span class="p">&lt;</span><span class="n">Guid</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;&gt;(</span><span class="n">pub</span><span class="p">,</span> <span class="s">&quot;ChangeRecieved&quot;</span><span class="p">).</span><span class="n">Select</span><span class="p">(</span><span class="n">ep</span> <span class="p">=&gt;</span> <span class="n">ep</span><span class="p">.</span><span class="n">EventArgs</span><span class="p">);</span>
</span><span class='line'>                <span class="n">obs</span><span class="p">.</span><span class="n">Subscribe</span><span class="p">&lt;</span><span class="n">Tuple</span><span class="p">&lt;</span><span class="n">Guid</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;&gt;(</span><span class="n">Handler</span><span class="p">);</span>
</span><span class='line'>                <span class="n">obs</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item1</span><span class="p">).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">guid</span> <span class="p">=&gt;</span> <span class="n">customerSender</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">guid</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">//var err = Observable.FromEventPattern&lt;Exception&gt;(pub, &quot;OnError&quot;).Select(ep =&gt; ep.EventArgs);</span>
</span><span class='line'>                <span class="c1">//err.Subscribe&lt;Exception&gt;(Error);</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">pub</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Closing down.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>None of the teams bothered with helper methods or anything refined like that &ndash; they only had about 40 minutes to produce anything it all. So, in each of the following cases, replace line 50 in the original code block with the submitted solution.</p>

<h3>Attempt 1:</h3>

<p>Simple, readable and minimalistic, our first contenders went with this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">obs</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">t</span><span class="p">=&gt;</span><span class="n">t</span><span class="p">.</span><span class="n">Item2</span> <span class="p">==</span> <span class="s">&quot;StaffOnly!&quot;</span> <span class="p">||</span> <span class="n">t</span><span class="p">.</span><span class="n">Item2</span> <span class="p">==</span> <span class="s">&quot;Change!&quot;</span><span class="p">).</span><span class="n">Select</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item1</span><span class="p">).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">guid</span> <span class="p">=&gt;</span> <span class="n">staffSender</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">guid</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">obs</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">t</span><span class="p">=&gt;</span><span class="n">t</span><span class="p">.</span><span class="n">Item2</span> <span class="p">==</span> <span class="s">&quot;CustomerOnly!&quot;</span> <span class="p">||</span> <span class="n">t</span><span class="p">.</span><span class="n">Item2</span> <span class="p">==</span> <span class="s">&quot;Change!&quot;</span><span class="p">).</span><span class="n">Delay</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">)).</span><span class="n">Select</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item1</span><span class="p">).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">guid</span> <span class="p">=&gt;</span> <span class="n">customerSender</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">guid</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, staff are notified immediately on either a <code>StaffOnly!</code> or <code>Change!</code> event &ndash; while customer events are delayed 5 seconds.</p>

<h3>Attempt 2:</h3>

<p>Group 2 played with RX&rsquo;s <code>GroupBy</code> method, which creates an Observable of Observables &ndash; each one of which only gets events that match the partitioning function.</p>

<p>Interesting stuff, although probably slightly overkill with 4 pre-known options.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">obs</span><span class="p">.</span><span class="n">GroupBy</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Item2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">o</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Item2</span> <span class="p">==</span> <span class="s">&quot;StaffOnly!&quot;</span> <span class="p">||</span> <span class="n">x</span><span class="p">.</span><span class="n">Item2</span> <span class="p">==</span> <span class="s">&quot;Change!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Item1</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">staffSender</span><span class="p">.</span><span class="n">Send</span><span class="p">);</span>
</span><span class='line'>        <span class="n">o</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Item2</span> <span class="p">==</span> <span class="s">&quot;CustomerOnly!&quot;</span> <span class="p">||</span> <span class="n">x</span><span class="p">.</span><span class="n">Item2</span> <span class="p">==</span> <span class="s">&quot;Change!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item1</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Delay</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">6</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">customerSender</span><span class="p">.</span><span class="n">Send</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>It also still does the job fine.</p>

<h3>Attempt 3:</h3>

<p>With high points on pragmatism and clarity, group 3 just went with the absolute simplest solution. Just have 4 separate observables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">obs</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item2</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="s">&quot;StaffOnly!&quot;</span><span class="p">)).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">staffOnly</span> <span class="p">=&gt;</span> <span class="n">staffSender</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">staffOnly</span><span class="p">.</span><span class="n">Item1</span><span class="p">));</span>
</span><span class='line'><span class="n">obs</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item2</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="s">&quot;CustomerOnly!&quot;</span><span class="p">)).</span><span class="n">Delay</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">)).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">customerOnly</span> <span class="p">=&gt;</span> <span class="n">customerSender</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">customerOnly</span><span class="p">.</span><span class="n">Item1</span><span class="p">));</span>
</span><span class='line'><span class="n">obs</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item2</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="s">&quot;Change!&quot;</span><span class="p">)).</span><span class="n">Delay</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">)).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">customerSender</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">Item1</span><span class="p">));</span>
</span><span class='line'><span class="n">obs</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item2</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="s">&quot;Change!&quot;</span><span class="p">)).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">staffSender</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">Item1</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s obviously much more to RX than you can learn in a single 1 hour practical session, but hopefully this gives you a feel and (if you followed along) takes away some of the fear of trying out this useful part of the .net ecosystem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring Reactive Extensions]]></title>
    <link href="http://blog.mavnn.co.uk/exploring-reactive-extensions/"/>
    <updated>2015-02-09T13:01:36+00:00</updated>
    <id>http://blog.mavnn.co.uk/exploring-reactive-extensions</id>
    <content type="html"><![CDATA[<p>The <a href="http://rx.codeplex.com/">Reactive Extensions</a> project is &ldquo;a library for composing asynchronous and event-based programs using observable sequences and LINQ-style query operators&rdquo;. That doesn&rsquo;t immediately give most people an intuitive grasp of exactly what it is &ndash; but it&rsquo;s a useful addition to the toolset so we put together a practical for people to experiment with.</p>

<p>At it&rsquo;s simplest, RX (as it&rsquo;s called&hellip; the Nuget package you&rsquo;re looking for is <a href="https://www.nuget.org/packages/Rx-Main">Rx-Main</a>, obviously!) allows you to create an <code>IObservable</code> object which you can then&hellip; erm&hellip; observe.</p>

<!--more-->


<p><code>IObservable</code> objects can, in turn, be observed by other <code>IObservable</code>s via a series of extension methods, and they will react when the original observable publishes a change. Hence &ldquo;Reactive Extensions&rdquo;. These extensions include all the normal Linq like things you&rsquo;ve come to know and expect in .net (<code>.Where</code> for filtering, <code>.Select</code> for mapping, etc) and also a selection of time based extensions which are the real meat of the reactive programming model. Things like <code>.Delay</code>, which
holds changes for a period of time before passing them on to subscribers. Or <code>.Throttle</code>, which throttles how quickly events can be passed through, and throws away events that are occurring too rapidly.</p>

<p>The best explanation of the various methods I&rsquo;ve seen is actually the <a href="http://reactivex.io/RxJava/javadoc/">reactivex.io javadocs</a>, which have diagram pictorially depicting the effect of each method. Although it&rsquo;s for Java, the method names are the same. For example, the <a href="http://reactivex.io/RxJava/javadoc/">sample method</a> comes with the following diagram:</p>

<p><img src="https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.s.png" alt="Sample method image" /></p>

<p>It shows quite nicely that sample will pick the last event of each interval (if there are any), and publish on only that.</p>

<p>The final part of the puzzle, once you&rsquo;ve done all your filtering, mapping, delaying and sampling is to hook up a Publish callback on your final <code>IObservable</code>.</p>

<p>Let&rsquo;s get to the example code!</p>

<h3>The scenario</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Reactive</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Reactive.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">ReactiveTester.Shared</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">EventTester</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Handler</span><span class="p">(</span><span class="n">Tuple</span><span class="p">&lt;</span><span class="n">Guid</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">tuple</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0} - {1}&quot;</span><span class="p">,</span> <span class="n">tuple</span><span class="p">.</span><span class="n">Item1</span><span class="p">,</span> <span class="n">tuple</span><span class="p">.</span><span class="n">Item2</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Error</span><span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">err</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">OpenStandardError</span><span class="p">();</span>
</span><span class='line'>            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">writer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">StreamWriter</span><span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">Console</span><span class="p">.</span><span class="n">OutputEncoding</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">writer</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0}&quot;</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Nice docs (although Java): http://reactivex.io/RxJava/javadoc/rx/Observable.html</span>
</span><span class='line'>            <span class="c1">// The challenge:</span>
</span><span class='line'>            <span class="c1">// The ChangeReceiver will fire an event every time a change is received.</span>
</span><span class='line'>            <span class="c1">// Events can be:</span>
</span><span class='line'>            <span class="c1">// &quot;Ignore!&quot; -&gt; don&#39;t do anything</span>
</span><span class='line'>            <span class="c1">// &quot;Change!&quot; -&gt; send notification to staff and customers</span>
</span><span class='line'>            <span class="c1">// &quot;StaffOnly!&quot; -&gt; send notification to staff</span>
</span><span class='line'>            <span class="c1">// &quot;CustomerOnly!&quot; -&gt; send notification to customer only</span>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="c1">// Staff must be notified within 3 seconds.</span>
</span><span class='line'>            <span class="c1">// Customers most be notified between 5 and 7 seconds.</span>
</span><span class='line'>            <span class="n">using</span><span class="p">(</span><span class="kt">var</span> <span class="n">pub</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ChangeReceiver</span><span class="p">(</span><span class="s">&quot;tcp://*:5555&quot;</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Listening...&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">var</span> <span class="n">staffSender</span> <span class="p">=</span> <span class="k">new</span> <span class="n">NotificationSender</span><span class="p">(</span><span class="s">&quot;tcp://localhost:5556&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">customerSender</span> <span class="p">=</span> <span class="k">new</span> <span class="n">NotificationSender</span><span class="p">(</span><span class="s">&quot;tcp://localhost:5557&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">var</span> <span class="n">obs</span> <span class="p">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">FromEventPattern</span><span class="p">&lt;</span><span class="n">Tuple</span><span class="p">&lt;</span><span class="n">Guid</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;&gt;(</span><span class="n">pub</span><span class="p">,</span> <span class="s">&quot;ChangeRecieved&quot;</span><span class="p">).</span><span class="n">Select</span><span class="p">(</span><span class="n">ep</span> <span class="p">=&gt;</span> <span class="n">ep</span><span class="p">.</span><span class="n">EventArgs</span><span class="p">);</span>
</span><span class='line'>                <span class="n">obs</span><span class="p">.</span><span class="n">Subscribe</span><span class="p">&lt;</span><span class="n">Tuple</span><span class="p">&lt;</span><span class="n">Guid</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;&gt;(</span><span class="n">Handler</span><span class="p">);</span>
</span><span class='line'>                <span class="n">obs</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item1</span><span class="p">).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">guid</span> <span class="p">=&gt;</span> <span class="n">customerSender</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">guid</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">//var err = Observable.FromEventPattern&lt;Exception&gt;(pub, &quot;OnError&quot;).Select(ep =&gt; ep.EventArgs);</span>
</span><span class='line'>                <span class="c1">//err.Subscribe&lt;Exception&gt;(Error);</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">pub</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Closing down.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The challenge was to complete the C# program above.</p>

<p>Want to follow along at home? The <a href="https://github.com/mavnn/RX-Practical">example code is on github</a>. Mind out &ndash; it&rsquo;s a bit big, as I included all of the binaries to get people going faster. The file in question is in the <code>EventTester</code> project as <code>Program.cs</code>.</p>

<p>The other program in the project (<code>ReactiveTester</code>) is test server. Right click on the solution, &ldquo;Set StartUp projects&rdquo; to run both on start up and hit <code>F5</code>. You should get two consoles pop up, something like this:</p>

<p><img src="http://blog.mavnn.co.uk/images/Reactive1.PNG" alt="/images/Reactive1.PNG" /></p>

<p>What&rsquo;s going on here? Well, as company <a href="http://15below.com">15below</a> deal with travel passenger communications, so the example stays close to home. The &ldquo;server&rdquo; (ReactiveTester, on the right) is masquerading as both an IROP (irregular operations, i.e. your flight has been cancelled due to insufficient chicken sarnies) system and as the staff and travellers who need to be told about events that are happening.</p>

<p>We&rsquo;re skipping any business logic identifying event types here, so for our purposes there are 4 types of events the system can issue.</p>

<ul>
<li>&ldquo;Ignore!&rdquo; &ndash;> we don&rsquo;t care about these</li>
<li>&ldquo;Change!&rdquo; &ndash;> both staff and travellers should be told about these</li>
<li>&ldquo;StaffOnly!&rdquo; &ndash;> only staff need to know about these ones</li>
<li>&ldquo;CustomerOnly!&rdquo; &ndash;> staff don&rsquo;t care about these, only tell the customer</li>
</ul>


<p>Our C# program then has a <code>ChangeReceiver</code> type that fires an event when a change is received, and a <code>NotificationSender</code> type it can use to send notifications out with. In reality, these go back to <code>ReactiveTester</code> that will then tell you if the notification arrived within the allowed window for either customer or staff.</p>

<p>The practical kicked off with the code at the state above. As you can see at line 48 we&rsquo;ve hooked up an observable object to the ChangeReceiver&rsquo;s ChangeReceived event &ndash; now we can observe events. We&rsquo;ve then hooked up a subscriber that fires the <code>Handler</code> method (line 14) which prints all changes to the command line. And a second subscriber that first maps the identifier/message tuple to the identifier and then sends a customer notification.</p>

<p>But wait&hellip;! Our test server keeps on saying &ldquo;Customer: early&rdquo;? And &ldquo;No guid xxx found&rdquo;? What gives?</p>

<p>Well&hellip; most travel companies are very keen for their staff to know about service alterations before customers. So the requirements we&rsquo;ve been given are that staff should be notified within 3 seconds &ndash; but customers only between 5 and 7 seconds. (In real life, these timings would probably be in minutes, obviously).</p>

<p>And the missing guid warnings are because the customers only care about some of the event types (see above). And, of course, the staff aren&rsquo;t getting any notifications at all, so their always complaining about them being late.</p>

<p>Your mission, should you choose to accept it: make everyone happy!</p>

<p>We had 3 teams take up the challenge; I&rsquo;ve posted their solutions in <a href="http://blog.mavnn.co.uk/rx-solutions/">a separate solutions post</a> to avoid accidental spoilers :)</p>

<p>P.S. A couple of people were interested in how the server worked. It&rsquo;s my very first attempt at writing both <a href="https://github.com/Hopac/Hopac">Hopac</a> and <a href="https://github.com/zeromq/fszmq">fszmq</a> (an F# zeromq wrapper library). I&rsquo;m hugely impressed by both, but wouldn&rsquo;t recommend my code in that repository as an introduction to either!</p>
]]></content>
  </entry>
  
</feed>
