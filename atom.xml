<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mavnn's blog]]></title>
  <link href="http://blog.mavnn.co.uk/atom.xml" rel="self"/>
  <link href="http://blog.mavnn.co.uk/"/>
  <updated>2013-12-12T09:59:53+00:00</updated>
  <id>http://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Type Providers from the Ground Up]]></title>
    <link href="http://blog.mavnn.co.uk/type-providers-from-the-ground-up/"/>
    <updated>2013-12-05T11:28:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/type-providers-from-the-ground-up</id>
    <content type="html"><![CDATA[<p>In the ground tradition of blog posts as both documentation and augmented memory, I&rsquo;ve just added our first <a href="http://blogs.msdn.com/b/dsyme/archive/2013/01/30/twelve-type-providers-in-pictures.aspx">Type Provider</a> to the code base. Time to write up the details before a) I forget them and b) anyone else needs to modify the code.</p>

<p>So, first things first. Before we get to the actual problem space at hand, let&rsquo;s try and provide a type. Any type&hellip;</p>

<p>1) Create yourself a new Visual Studio F# library project (2012 or up should work).</p>

<p>2) Add <a href="https://raw.github.com/fsharp/FSharp.Data/master/src/CommonProviderImplementation/ProvidedTypes.fs">ProvidedTypes.fs</a> and <a href="https://raw.github.com/fsharp/FSharp.Data/master/src/CommonProviderImplementation/ProvidedTypes.fsi">ProvidedTypes.fsi</a> to the project as the first couple of files. These are provided as code files rather than as compiled dlls due to complications with security and AppDomains when referencing dlls in the type provider assembly. For now just add them in &ndash; you really don&rsquo;t want to be re-creating the code in there by hand.</p>

<p>3) Replace the contents of Library1.fs with something like this:</p>

<div><script src='https://gist.github.com/mavnn/7803991.js?file=Part1.fs'></script>
<noscript><pre><code>module Mavnn.Blog.TypeProvider

open ProviderImplementation.ProvidedTypes
open Microsoft.FSharp.Core.CompilerServices

[&lt;TypeProvider&gt;]
type MavnnProvider (config : TypeProviderConfig) as this =
    inherit TypeProviderForNamespaces ()

[&lt;assembly:TypeProviderAssembly&gt;]
do ()</code></pre></noscript></div>


<p>So, that&rsquo;s great and it builds. We have a type provider class and an assembly that knows it&rsquo;s a type providing assembly. Unfortunately, it doesn&rsquo;t actually provide any types yet. Let&rsquo;s try it.</p>

<!--more-->


<p>Update Library1.fs in your solution with something that looks like this, and then we&rsquo;ll run through what&rsquo;s going on, and how to test it.</p>

<div><script src='https://gist.github.com/mavnn/7803991.js?file=Part2.fs'></script>
<noscript><pre><code>module Mavnn.Blog.TypeProvider

open ProviderImplementation.ProvidedTypes
open Microsoft.FSharp.Core.CompilerServices
open System.Reflection

[&lt;TypeProvider&gt;]
type MavnnProvider (config : TypeProviderConfig) as this =
    inherit TypeProviderForNamespaces ()

    let ns = &quot;Mavnn.Blog.TypeProvider.Provided&quot;
    let asm = Assembly.GetExecutingAssembly()

    let createTypes () =
        let myType = ProvidedTypeDefinition(asm, ns, &quot;MyType&quot;, Some typeof&lt;obj&gt;)
        let myProp = ProvidedProperty(&quot;MyProperty&quot;, typeof&lt;string&gt;, IsStatic = true, 
                                        GetterCode = (fun args -&gt; &lt;@@ &quot;Hello world&quot; @@&gt;))
        myType.AddMember(myProp)
        [myType]

    do
        this.AddNamespace(ns, createTypes())

[&lt;assembly:TypeProviderAssembly&gt;]
do ()</code></pre></noscript></div>


<p>First things first &ndash; it looks like it should provide a class with a static property, but how do we test it?</p>

<p>It turns out it&rsquo;s harder than it looks. If you reference your brand new type provider in Visual Studio, that instance of Visual Studio will promptly lock the dll file. Which means you can&rsquo;t recompile it. So referencing the dll from within the instance of Visual Studio you&rsquo;re using to develop it is a no go.</p>

<p>Fire up a second copy of Visual Studio (you went for the extra RAM option on your hardware, yes?) and create an F# project in it. Add an fsx file that looks something like this:</p>

<div><script src='https://gist.github.com/mavnn/7803991.js?file=Part3.fsx'></script>
<noscript><pre><code>#r @&quot;../../Mavnn.Blog.TypeProvider/Mavnn.Blog.TypeProvider/bin/Debug/Mavnn.Blog.TypeProvider.dll&quot;

open Mavnn.Blog.TypeProvider.Provided

// Type `MyType.MyProperty` on next line down.</code></pre></noscript></div>


<p>Start typing, and&hellip; hurrah! Intellisense on your new, provided type with static property. Evaluate the script in F# interactive for one of the longest &ldquo;Hello World&rdquo; programs you&rsquo;ve ever seen.</p>

<p><em>You will need to close this instance of Visual Studio every time you want to recompile the type provider.</em></p>

<h2>What&rsquo;s going on here?</h2>

<p>We&rsquo;re declaring a new namespace and detecting the current assembly so we can inject things into it. During our initializing for the type provider, we then add that namespace to the assembly (<code>this.AddNamespace(...)</code>) along with a type created in the slightly (at the moment) misnamed <code>createTypes</code> method.</p>

<p>In <code>createTypes</code> we&rsquo;re first creating a type (<code>MyType</code>) which will be a direct member of the namespace we&rsquo;re creating (we&rsquo;ll get onto nested types shortly), then we&rsquo;re creating a static property and adding it to the type. <code>AddNamespace</code> takes a list of types, so will add the one we have to a list and pass it back.</p>

<p><code>MyType</code>&rsquo;s underlying representation in the CLR has been defined as <code>obj</code>, which means that if you try and access it in a non-F# language it will appear to the compiler as an <code>object</code>.</p>

<p>All well and good&hellip; except for the rather bizarre <code>&lt;@@ ... @@&gt;</code> syntax in our static property. Obviously, in some way it&rsquo;s creating a get method for the property that returns <code>"Hello world"</code>, but how does it do it?</p>

<p>This syntax represents a <a href="http://msdn.microsoft.com/en-us/library/dd233212.aspx">code quotation</a>, and rather than being compiled into your program it will compile to an object that represents an expression.</p>

<p>Did that make your brain hurt? Mine too&hellip; I&rsquo;m not going to go into quotations in great detail here (partly as I don&rsquo;t understand them well enough!) but we&rsquo;ll need to cover a couple of basics.</p>

<p>To give you a flavour, the quotation <code>&lt;@@ 1 + 2 @@&gt;</code> compiles to <code>Quotations.Expr = Call (None, op_Addition, [Value (1), Value (2)])</code>. Not very exciting so far, but how about:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let addI i =
</span><span class='line'>    &lt;@@ 1 + (%%i) @@&gt;</span></code></pre></td></tr></table></div></figure>


<p>This gives a function of <code>Expr -&gt; Expr</code>, and now we can do things like <code>let add2 = addI &lt;@@ 2 @@&gt;</code> (gives <code>val add2 : Expr = Call (None, op_Addition, [Value (1), Value (2)])</code>) or <code>let add2MultipliedByX x = addI &lt;@@ 2 * x @@&gt;</code> (gives <code>val add2MultipliedByX : x:int -&gt; Expr</code>) and what we get back is effectively the AST of the first F# expression with the second spliced in to evaluate as you will. So in our <code>GetterCode</code> above, we are actually providing the AST that will be compiled into the <code>get_MyPropertyMethod</code> of the type when it is created.</p>

<p>The second thing that you need to know about quotations for current purposes is that the thing evaluating them may or may not be able to handle the F# expression you&rsquo;ve created. Which again we&rsquo;ll get back to in a moment!</p>

<p>So far, our type isn&rsquo;t very exciting. You can&rsquo;t even construct an instance of it. Let&rsquo;s see what we can do about that, with a replacement <code>createTypes</code> method:</p>

<div><script src='https://gist.github.com/mavnn/7803991.js?file=Part4.fs'></script>
<noscript><pre><code>    let createTypes () =
        let myType = ProvidedTypeDefinition(asm, ns, &quot;MyType&quot;, Some typeof&lt;obj&gt;)
        let myProp = ProvidedProperty(&quot;MyProperty&quot;, typeof&lt;string&gt;, IsStatic = true, 
                                        GetterCode = fun args -&gt; &lt;@@ &quot;Hello world&quot; @@&gt;)
        myType.AddMember(myProp)

        let ctor = ProvidedConstructor([], InvokeCode = fun args -&gt; &lt;@@ &quot;My internal state&quot; :&gt; obj @@&gt;)
        myType.AddMember(ctor)

        let ctor2 = ProvidedConstructor(
                        [ProvidedParameter(&quot;InnerState&quot;, typeof&lt;string&gt;)],
                        InvokeCode = fun args -&gt; &lt;@@ (%%(args.[0]):string) :&gt; obj @@&gt;)
        myType.AddMember(ctor2)

        let innerState = ProvidedProperty(&quot;InnerState&quot;, typeof&lt;string&gt;,
                            GetterCode = fun args -&gt; &lt;@@ (%%(args.[0]) :&gt; obj) :?&gt; string @@&gt;)
        myType.AddMember(innerState)

        [myType]
</code></pre></noscript></div>


<p>Now we can construct our type (in two ways, no less). As the underlying CLR type is an <code>object</code> we can store pretty much anything as the internal representation of an instance of our type. The <code>InvokeCode</code> parameter of the constructors needs to return a quotation that will return the internal representation of the object when it&rsquo;s evaluated. We&rsquo;re going to return a string (which we need to cast to an obj), and using the splicing syntax above we can inject the parameters of the constructor into the quotation (for the constructor which has a parameter).</p>

<p>Similarly, we also add a property (notice that we&rsquo;re not setting it to be a static property this time). Because this property is not static, the first item in the <code>args</code> Array is the instance of the type itself (similar to the way that you define an extension method). So we can splice that into our method quotation (remembering to cast it from <code>obj</code> to <code>string</code>) and expose the underlying state of the object for all the world to see.</p>

<p>And now you can do things like this:</p>

<div><script src='https://gist.github.com/mavnn/7803991.js?file=Part5.fsx'></script>
<noscript><pre><code>// Your path may vary...
#r @&quot;../../Mavnn.Blog.TypeProvider/Mavnn.Blog.TypeProvider/bin/Debug/Mavnn.Blog.TypeProvider.dll&quot;

open Mavnn.Blog.TypeProvider.Provided

let thing = MyType()
let thingInnerState = thing.InnerState

let thing2 = MyType(&quot;Some other text&quot;)
let thing2InnerState = thing2.InnerState

// val thing : Mavnn.Blog.TypeProvider.Provided.MyType = &quot;My internal state&quot;
// val thingInnerState : string = &quot;My internal state&quot;
// val thing2 : Mavnn.Blog.TypeProvider.Provided.MyType = &quot;Some other text&quot;
// val thing2InnerState : string = &quot;Some other text&quot;</code></pre></noscript></div>


<h2>And the point is?</h2>

<p>Well &ndash; this is great, except the perceptive among you will have noticed that we&rsquo;re just generating a static type here. We could have just declared it using normal syntax.</p>

<p>So let&rsquo;s try going a step further. Let&rsquo;s say that we have some Json definitions of graph nodes types, each with a defined set of input and output &ldquo;ports&rdquo;. All of these graph bits are given to us as a Json array, and each Node type and port has a Guid identifier and a friendly name.</p>

<p>Our input JSON looks something like this:</p>

<div><script src='https://gist.github.com/mavnn/7803991.js?file=Part6.json'></script>
<noscript><pre><code>[
   {
      &quot;Id&quot;:{
         &quot;Name&quot;:&quot;Simple&quot;,
         &quot;UniqueId&quot;:&quot;0ab82262-0ad3-47d3-a026-615b84352822&quot;
      },
      &quot;Ports&quot;:[
         {
            &quot;Id&quot;:{
               &quot;Name&quot;:&quot;Input&quot;,
               &quot;UniqueId&quot;:&quot;4b69408e-82d2-4c36-ab78-0d2327268622&quot;
            },
            &quot;Type&quot;:&quot;input&quot;
         },
         {
            &quot;Id&quot;:{
               &quot;Name&quot;:&quot;Output&quot;,
               &quot;UniqueId&quot;:&quot;92ae5a96-6900-4d77-832f-d272329f8a90&quot;
            },
            &quot;Type&quot;:&quot;output&quot;
         }
      ]
   },
   {
      &quot;Id&quot;:{
         &quot;Name&quot;:&quot;Join&quot;,
         &quot;UniqueId&quot;:&quot;162c0981-4370-4db3-8e3f-149f13c001da&quot;
      },
      &quot;Ports&quot;:[
         {
            &quot;Id&quot;:{
               &quot;Name&quot;:&quot;Input1&quot;,
               &quot;UniqueId&quot;:&quot;c0fea7ff-456e-4d4e-b5a4-9539ca134344&quot;
            },
            &quot;Type&quot;:&quot;input&quot;
         },
         {
            &quot;Id&quot;:{
               &quot;Name&quot;:&quot;Input2&quot;,
               &quot;UniqueId&quot;:&quot;4e93c3b1-11bc-422a-91b8-e53204368714&quot;
            },
            &quot;Type&quot;:&quot;input&quot;
         },
         {
            &quot;Id&quot;:{
               &quot;Name&quot;:&quot;Output&quot;,
               &quot;UniqueId&quot;:&quot;fb54728b-9602-4220-ba08-ad160d92d5a4&quot;
            },
            &quot;Type&quot;:&quot;output&quot;
         }
      ]
   },
   {
      &quot;Id&quot;:{
         &quot;Name&quot;:&quot;Split&quot;,
         &quot;UniqueId&quot;:&quot;c3e44941-9182-41c3-921c-863a82097ba8&quot;
      },
      &quot;Ports&quot;:[
         {
            &quot;Id&quot;:{
               &quot;Name&quot;:&quot;Input&quot;,
               &quot;UniqueId&quot;:&quot;0ec2537c-3346-4503-9f5a-d0bb49e9e431&quot;
            },
            &quot;Type&quot;:&quot;input&quot;
         },
         {
            &quot;Id&quot;:{
               &quot;Name&quot;:&quot;Output1&quot;,
               &quot;UniqueId&quot;:&quot;77b5a50c-3d11-4a67-b14d-52d6246e78c5&quot;
            },
            &quot;Type&quot;:&quot;output&quot;
         },
         {
            &quot;Id&quot;:{
               &quot;Name&quot;:&quot;Output2&quot;,
               &quot;UniqueId&quot;:&quot;d4d1e928-5347-4d51-be54-8650bdfe9bac&quot;
            },
            &quot;Type&quot;:&quot;output&quot;
         }
      ]
   }
]</code></pre></noscript></div>


<p>We&rsquo;ll let someone else deal with the parsing &ndash; add a Nuget reference to <code>Newtonsoft.Json</code> to your type provider, and let&rsquo;s have a third reprise of <code>createTypes</code>.</p>

<p>First, we&rsquo;ll need some classes to deserialize the Json into. Out of the box Newtonsoft doesn&rsquo;t do a great job on F# core classes (although that&rsquo;s changing), so for the moment we&rsquo;ll create some classic OO style mutable types:</p>

<div><script src='https://gist.github.com/mavnn/7803991.js?file=Part7.fs'></script>
<noscript><pre><code>type Id () =
    member val UniqueId = Guid() with get, set
    member val Name = &quot;&quot; with get, set

type Port () =
    member val Id = Id() with get, set
    member val Type = &quot;&quot; with get, set

type Node () =
    member val Id = Id() with get, set
    member val Ports = Collections.Generic.List&lt;Port&gt;() with get, set
</code></pre></noscript></div>


<p>(Don&rsquo;t worry though, these aren&rsquo;t what we&rsquo;ll actually expose as the main interface.)</p>

<p>Turning our Json into the our new CLR types is straight forward:</p>

<div><script src='https://gist.github.com/mavnn/7803991.js?file=Part8.fs'></script>
<noscript><pre><code>let nodes =
    JsonConvert.DeserializeObject&lt;seq&lt;Node&gt;&gt;(IO.File.ReadAllText(@&quot;c:\Temp\Graph.json&quot;))
</code></pre></noscript></div>


<p>Now the interesting part. To build a graph out of these nodes, we need to be able to do a few things.</p>

<p>Firstly, we need to be able to build a specific instance of a node type: which <code>Split</code> node is this?</p>

<p>Let&rsquo;s help ourselves out by having a concrete type as an the underlying type for our instances:</p>

<div><script src='https://gist.github.com/mavnn/7803991.js?file=Part9.fs'></script>
<noscript><pre><code>type nodeInstance =
    {
        Node : Node
        InstanceId : Id
        Config : string
    }
</code></pre></noscript></div>


<p>And then constructing a more specific type with a constructor for each node type we&rsquo;ve read from the Json:</p>

<div><script src='https://gist.github.com/mavnn/7803991.js?file=Part10.fs'></script>
<noscript><pre><code>let nodeType = ProvidedTypeDefinition(asm, ns, node.Id.Name, Some typeof&lt;nodeInstance&gt;)
let ctor = ProvidedConstructor(
            [
                ProvidedParameter(&quot;Name&quot;, typeof&lt;string&gt;)
                ProvidedParameter(&quot;UniqueId&quot;, typeof&lt;Guid&gt;)
                ProvidedParameter(&quot;Config&quot;, typeof&lt;string&gt;)
            ],
            InvokeCode = fun [name;unique;config] -&gt; &lt;@@ NodeInstance.create (GetNode id) (%%name:string) (%%unique:Guid) (%%config:string) @@&gt;)
</code></pre></noscript></div>


<p>So now we can construct (look back at the json) a <code>Simple</code> node instance by using <code>let simple = Simple("simpleInstance", Guid.NewGuid(),"MyConfig")</code>. And it already has our <code>InstanceId</code>, <code>Config</code> and <code>Node</code> properties from the underlying type.</p>

<p>Good progress &ndash; but we don&rsquo;t have a nice way of representing the inputs and outputs? We want to be able to write some kind of connection builder function afterwards that won&rsquo;t allow you to connect to outputs to each other, or similar silliness, so we&rsquo;re going to need separate types for inputs and outputs.</p>

<div><script src='https://gist.github.com/mavnn/7803991.js?file=Part11.fs'></script>
<noscript><pre><code>// Check out the excellent article at F# for Fun and Profit
// on using single case Discriminated Unions for data modelling
// http://fsharpforfunandprofit.com/posts/designing-with-types-single-case-dus/

type InputPort = | InputPort of Guid
type OutputPort = | OutputPort of Guid
</code></pre></noscript></div>


<p>And finally, we&rsquo;ll update our node creation function to add two subtypes to each node type called <code>Inputs</code> and <code>Outputs</code>, and then create properties on those objects to represent each port. Our full type creation for a node now looks something like this:</p>

<div><script src='https://gist.github.com/mavnn/7803991.js?file=Part12.fs'></script>
<noscript><pre><code>let addInputPort (inputs : ProvidedTypeDefinition) (port : Port) =
    let port = ProvidedProperty(
                    port.Id.Name, 
                    typeof&lt;InputPort&gt;, 
                    GetterCode = fun args -&gt; 
                        let id = port.Id.UniqueId.ToString()
                        &lt;@@ GetPort id @@&gt;)
    inputs.AddMember(port)

let addOutputPort (outputs : ProvidedTypeDefinition) (port : Port) =
    let port = ProvidedProperty(
                    port.Id.Name, 
                    typeof&lt;OutputPort&gt;, 
                    GetterCode = fun args -&gt; 
                        let id = port.Id.UniqueId.ToString()
                        &lt;@@ GetPort id @@&gt;)
    outputs.AddMember(port)

let addPorts inputs outputs (portList : seq&lt;Port&gt;) =
    portList
    |&gt; Seq.iter (fun port -&gt; 
                    match port.Type with
                    | &quot;input&quot; -&gt; addInputPort inputs port
                    | &quot;output&quot; -&gt; addOutputPort outputs port
                    | _ -&gt; failwithf &quot;Unknown port type for port %s/%s&quot; port.Id.Name (port.Id.UniqueId.ToString()))

let createNodeType id (node : Node) =
    let nodeType = ProvidedTypeDefinition(asm, ns, node.Id.Name, Some typeof&lt;nodeInstance&gt;)
    let ctor = ProvidedConstructor(
                [
                    ProvidedParameter(&quot;Name&quot;, typeof&lt;string&gt;)
                    ProvidedParameter(&quot;UniqueId&quot;, typeof&lt;Guid&gt;)
                    ProvidedParameter(&quot;Config&quot;, typeof&lt;string&gt;)
                ],
                InvokeCode = fun [name;unique;config] -&gt; &lt;@@ NodeInstance.create (GetNode id) (%%name:string) (%%unique:Guid) (%%config:string) @@&gt;)
    nodeType.AddMember(ctor)

    let outputs = ProvidedTypeDefinition(&quot;Outputs&quot;, Some typeof&lt;obj&gt;)
    let outputCtor = ProvidedConstructor([], InvokeCode = fun args -&gt; &lt;@@ obj() @@&gt;)
    outputs.AddMember(outputCtor)
    outputs.HideObjectMethods &lt;- true

    let inputs = ProvidedTypeDefinition(&quot;Inputs&quot;, Some typeof&lt;obj&gt;)
    let inputCtor = ProvidedConstructor([], InvokeCode = fun args -&gt; &lt;@@ obj() @@&gt;)
    inputs.AddMember(inputCtor)
    inputs.HideObjectMethods &lt;- true
    addPorts inputs outputs node.Ports

    // Add the inputs and outputs types of nested types under the Node type
    nodeType.AddMembers([inputs;outputs])

    // Now add some instance properties to expose them on a node instance.
    let outputPorts = ProvidedProperty(&quot;OutputPorts&quot;, outputs, [],
                        GetterCode = fun args -&gt; &lt;@@ obj() @@&gt;)
    let inputPorts = ProvidedProperty(&quot;InputPorts&quot;, inputs, [],
                        GetterCode = fun args -&gt; &lt;@@ obj() @@&gt;)

    nodeType.AddMembers([inputPorts;outputPorts])

    nodeType
</code></pre></noscript></div>


<p>Leaving only one final mystery. What are the <code>GetPort</code> and <code>GetNode</code> methods &ndash; and why am I using them in the quotations rather than just using something like <code>&lt;@@ node @@&gt;</code>?</p>

<p>Well, if you remember I mentioned earlier that the evaluation of a quotation is limited by the implementation of the evaluator used. The type provider files you included right at the beginning contain an evaluator that turn a quotation into IL instructions &ndash; but, it doesn&rsquo;t include support for literals of custom types. In fact, if you check in <a href="https://github.com/fsharp/FSharp.Data/blob/master/src/CommonProviderImplementation/ProvidedTypes.fs#L1876">the relevant part of ProvidedTypes.fs</a> you&rsquo;ll see that it&rsquo;s actually quite prescriptive.</p>

<p>So, what we do is we build a couple of private helper methods that know how to find the correct port or node from one of the types that is allowed &ndash; in this case, a <code>string</code>:</p>

<div><script src='https://gist.github.com/mavnn/7803991.js?file=Part13.fs'></script>
<noscript><pre><code>let private nodes = JsonConvert.DeserializeObject&lt;seq&lt;Node&gt;&gt;(IO.File.ReadAllText(@&quot;c:\Temp\Graph.json&quot;))
                    |&gt; Seq.map (fun n -&gt; n.Id.UniqueId.ToString(), n)
                    |&gt; Map.ofSeq

let private GetNode id =
    nodes.[id]

let private ports =
    nodes
    |&gt; Map.toSeq
    |&gt; Seq.map (fun (_, node) -&gt; node.Ports)
    |&gt; Seq.concat
    |&gt; Seq.map (fun p -&gt; p.Id.UniqueId.ToString(), p)
    |&gt; Map.ofSeq

let private GetPort id =
    ports.[id]</code></pre></noscript></div>


<p>So, there you have it. A complete, working type provider that uses meta data supplied in Json format to create CLR types. Lots of things still to be added for production ready code (delayed loading, handling multiple ports with the same names, not hard coding the filename, etc).</p>

<p><img src="http://blog.mavnn.co.uk/images/typeprovider.png" alt="Winning..." /></p>

<p>The full code for this post is available on <a href="https://github.com/mavnn/Mavnn.Blog.TypeProvider">GitHub</a>.</p>

<p>Any questions or corrections, fire away. As mentioned, this is very much the first time I&rsquo;ve used type providers &ndash; but even this level of usage is providing a goodly amount of value for us.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To Infinity and Beyond]]></title>
    <link href="http://blog.mavnn.co.uk/to-infinity/"/>
    <updated>2013-10-31T07:41:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/to-infinity</id>
    <content type="html"><![CDATA[<p>So, a couple of weeks ago I went to the Brighton Functional Programmers meet up. It was a fun night, and at one point I ended up live coding in front of a room of functional programmers trying to give examples of lazy and strict evaluation.</p>

<p>The canonical go to tool for the job, is of course the infinite sequence and being stared at by a bunch of people and having syntax highlighting but no compiler, the first thing my brain pulled out of the air was this:</p>

<div><script src='https://gist.github.com/mavnn/7246744.js?file=Part1.fs'></script>
<noscript><pre><code>let ones =
    seq {
        while true do
            yield 1
    }
// seq [1; 1; 1; 1; ...]</code></pre></noscript></div>


<p>Which prompted one of the people attending (hi <a href="https://twitter.com/milessabin">Miles!</a>) to comment &ldquo;let&rsquo;s see that in Haskell without the bizarre looping generator&rdquo;. Roughly &ndash; I&rsquo;m slightly paraphrasing here given the couple of weeks in between. He has a bit of a point, this isn&rsquo;t the most functional looking sequence generator in the world, and it looks like quite a lot of code to just generate a lot of ones.</p>

<p>As always in these situations, I had of course thought of several other alternatives before I even reached my chair, so I thought I&rsquo;d have a quick survey of them and their advantages and disadvantages.</p>

<p>My first thought was that I&rsquo;d missed the obvious and succinct option of just generating a range. In F# (as in Haskell) the 1 .. 10 notation generates a list of the integers from 1 to 10. Unfortunately:</p>

<div><script src='https://gist.github.com/mavnn/7246744.js?file=Part2.fs'></script>
<noscript><pre><code>// Can't do this, unfortunately
// seq { 1 .. }
//
// or this:
// seq { 1 .. 0 .. 2 }
//
// Which I thought might be a nice hack.
</code></pre></noscript></div>


<p>Unlike Haskell, you can&rsquo;t have an unbounded range, nor can you set the &ldquo;step&rdquo; to zero to just keep on generating the same number. So you&rsquo;re limited to generating very big, but definitely not infinite sequences:</p>

<div><script src='https://gist.github.com/mavnn/7246744.js?file=Part3.fs'></script>
<noscript><pre><code>let notInfiniteOrOnes = seq { 1 .. System.Int32.MaxValue }
// seq [1; 2; 3; 4; ...]

let notInfinite = seq { for _ in 1 .. System.Int32.MaxValue -&gt; 1 }
// seq [1; 1; 1; 1; ...]
</code></pre></noscript></div>


<p>But hey! We&rsquo;re in functional world. So if we can&rsquo;t use sneaky built in syntax constructs, the next obvious choice is a recursive function:</p>

<div><script src='https://gist.github.com/mavnn/7246744.js?file=Part4.fs'></script>
<noscript><pre><code>let ones' =
    let rec gen () =
        seq {
            yield 1
            yield! gen ()
        }
    gen ()
// seq [1; 1; 1; 1; ...]
</code></pre></noscript></div>


<p>This is definitely infinite, and definitely functional in style. Bit verbose, of course, but it least it won&rsquo;t stack overflow as F# implements tail call recursion. It&rsquo;s verbose, but it does also have its advantages. It&rsquo;s trivial to pass things round in the recursive function (previous values from the sequence, etc) making this a very flexible way of generating sequences.</p>

<p>And, of course, let&rsquo;s not ignore the standard library. The <code>Seq</code> module gives us a couple of methods designed specifically for generating (potentially) infinite sequences.</p>

<p><code>Seq.initInfinite</code> just takes a function that returns a sequence value based on the index of that value:</p>

<div><script src='https://gist.github.com/mavnn/7246744.js?file=Part5.fs'></script>
<noscript><pre><code>let ones'' = Seq.initInfinite (fun _ -&gt; 1)
// seq [1; 1; 1; 1; ...]
</code></pre></noscript></div>


<p>As long as a simple mapping from index to value exists, this is both clear and concise. In theory, of course, it also suffers from the same issue as my range generators above: if your index exceeds the valid size of an Int32 you&rsquo;re out of luck.</p>

<p><code>Seq.unfold</code> may seem less intuitive, but in my mind is the more flexible and powerful solution. I tend to come across examples where it&rsquo;s easier to generate a sequence based on either some state or the previous term than by index, and that&rsquo;s exactly what unfold allows you to do:</p>

<div><script src='https://gist.github.com/mavnn/7246744.js?file=Part6.fs'></script>
<noscript><pre><code>let ones''' = Seq.unfold (fun _ -&gt; Some (1, ())) ()
// seq [1; 1; 1; 1; ...]
</code></pre></noscript></div>


<p>It will also happily generate sequences forever if your generating function allows.</p>

<p>So, how does it actually work? Let&rsquo;s look at a (slightly) more complex example that actually makes use of some state:</p>

<div><script src='https://gist.github.com/mavnn/7246744.js?file=Part7.fs'></script>
<noscript><pre><code>let moreInterestingUnfold =
    Seq.unfold
        (fun state -&gt;
            Some (state, state + 1)) 1
// seq [1; 2; 3; 4; ...]
</code></pre></noscript></div>


<p>What&rsquo;s going on here then? Well, <code>unfold</code> takes two arguments. The first is a function that takes a &lsquo;State and returns an Option&lt;&rsquo;T * &#8216;State>. In our simple example above, both &#8216;State and &rsquo;T are of type <code>int</code> but there&rsquo;s no requirement for them to be of the same type. If at any point the function returns <code>None</code>, the sequence ends. In our example, we always return <code>Some</code>, so our sequence is infinite (at least until it runs out of integers) and we&rsquo;re return a tuple of two values &ndash; the first of which will be used as the next term in the sequence, and the second which will become the new state.</p>

<p>The second argument to <code>unfold</code> is the starting state. In our case, this means the number that will be the first term in the sequence, and then we&rsquo;ll add one to it each time.</p>

<p>Let&rsquo;s round this out with an example that uses different types for the state and the terms of the sequence, which will hopefully now make some sense:</p>

<div><script src='https://gist.github.com/mavnn/7246744.js?file=Part8.fs'></script>
<noscript><pre><code>type Time =
    {
        Hour : int
        Minute : int
    }

let addMinute time =
    match time with
    | { Hour = 23; Minute = 59 } -&gt;
        { Hour = 0; Minute = 0 }
    | { Minute = 59 } -&gt;
        { Hour = time.Hour + 1; Minute = 0 }
    | _ -&gt;
        { Hour = time.Hour; Minute = time.Minute + 1 }

let unfold' =
    Seq.unfold
        (fun state -&gt;
            Some (sprintf &quot;%02d:%02d&quot; state.Hour state.Minute, addMinute state)
            ) { Hour = 22; Minute = 59 }
// seq [&quot;23:59&quot;; &quot;00:00&quot;; &quot;00:01&quot;; &quot;00:02&quot;; ...]
</code></pre></noscript></div>


<p>I&rsquo;m sure that you&rsquo;ve always needed a convenient way of cycling through every minute of the day repeatedly, with a nice readable string representation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing F# to Experienced Developers]]></title>
    <link href="http://blog.mavnn.co.uk/introducing-f-number-to-experienced-developers/"/>
    <updated>2013-10-14T12:30:00+01:00</updated>
    <id>http://blog.mavnn.co.uk/introducing-f-number-to-experienced-developers</id>
    <content type="html"><![CDATA[<p>So, as a follow up to <a href="" title="http://blog.mavnn.co.uk/teaching-f-number-to-c-number-devs/">this post</a> I&rsquo;m in the final stages of preparing a presentation for this Friday introducing an audience of (mostly) fairly experienced developers to F# and F# syntax. The main reason for this is to get a number of people up to speed enough on reading F# that they can have a better experience at <a href="" title="http://skillsmatter.com/event/scala/progressive-f-tutorials-2013">the Progressive F# Tutorials</a> at the end of the month. So the aim here isn&rsquo;t to get people fully autonomous and writing code <em>right now</em>, but to allow them to read the bulk of the example code in the tutorials and follow what&rsquo;s going on.</p>

<p>The general approach I&rsquo;ve gone for is to set up a Git repository that has a series of tagged snap shots I can check out as I work through the concepts I&rsquo;m planning to cover. This will enable me to actually demonstrate and run pieces of code, answer questions and make live modifications and then always jump back to a known starting point for the next section of the talk. Given the people involved have all done some .net development and I don&rsquo;t need to cover things like Visual Studio usage and projects, all of the code is contained in a single Program.fs file in a console app. I&rsquo;ve included the snapshot of the file from each tagged commit below, with a brief overview of what I&rsquo;m planning to introduce before skipping to the next snapshot.</p>

<p>With a full screen Visual Studio editing session, I should be able to make the code large enough to be visible and reasonably rapidly guide people to the areas where the code has changed.</p>

<p>A combination of the excellent <a href="http://papercut.codeplex.com/">PaperCut</a> project and a local &lsquo;http request to email&rsquo; service pretending to be an SMS sender, we should be able to see messages being generated by the code as we go along.</p>

<p>After the session, I&rsquo;m planning to mention <a href="" title="https://github.com/ChrisMarinos/FSharpKoans">Chris Marinos&#8217; koans</a> and <a href="" title="http://www.tryfsharp.org/">Try F#</a> (especially given that Rachel Reese is <a href="http://skillsmatter.com/podcast/scala/try-f-from-zero-to-data-science">running a session</a> at the tutorials for those who are going).</p>

<p>Please note that these are up here for comment and suggestions at this point &ndash; I&rsquo;ll be pushing up the actual Git repository and a screencast (I hope) after the event. The code is designed to be a prop for the talk rather than an independent resource &ndash; for that I&rsquo;d always point people to the koans/Try F# first.</p>

<p>So, show me the codez:</p>

<!--more-->


<h2>Tag &lsquo;1&rsquo;</h2>

<p>Nothing too exciting here :). This is just a place holder while giving the introduction, although I will also point out the lack of required boiler plate compared to C#.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part1.fs'></script>
<noscript><pre><code>// Let's send an email!
</code></pre></noscript></div>


<h2>Tag &lsquo;2&rsquo;</h2>

<p>Introduce the <code>open</code> keyword, <code>let</code> for value assignment, and give people a feel that they&rsquo;re not completely leaving their nice safe .net world behind.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part2.fs'></script>
<noscript><pre><code>// Let's send an email!

open System.Net.Mail

// We only use the 'new' keyword here because SmtpClient is disposable
let smtpClient = new SmtpClient(&quot;smtp.local&quot;)

// And given it's disposable, we should really dispose of it...
smtpClient.Dispose()</code></pre></noscript></div>


<h2>Tag &lsquo;3&rsquo;</h2>

<p>Talk about functions, show parameter application, introduce the pipe operator.</p>

<p>Some discussion about type inference will probably happen here.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part3.fs'></script>
<noscript><pre><code>open System.Net.Mail

let smtpClient = new SmtpClient(&quot;smtp.local&quot;)

// This is a function
let sendMessage client message =
    // We'd better do something here to actually
    // send a message...
    printfn &quot;I haven't sent a mail message!&quot;
    ()

sendMessage smtpClient &quot;My message&quot;

smtpClient.Dispose()

// And we'll add this so we can see the output
// before it disappears
System.Console.ReadLine() |&gt; ignore
// This line would be the same as writing:
//
// ignore (System.Console.Readline())
//
// but you have to admit that this is a bit 
// more readable</code></pre></noscript></div>


<h2>Tag &lsquo;4&rsquo;</h2>

<p>Introduce the <code>use</code> keyword, show property assignment with <code>&lt;-</code>.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part4.fs'></script>
<noscript><pre><code>open System.Net.Mail

let smtpClient = new SmtpClient(&quot;smtp.local&quot;)

let sendMessage client message =
    (* Because we used 'use' this will get
    disposed at the end of the declaring
    scope *)
    use mailMessage = new MailMessage(&quot;me@example.com&quot;, &quot;you@example.com&quot;)
    (* This is have you assign a parameter *)
    mailMessage.Subject &lt;- &quot;Message subject&quot;
    mailMessage.Body &lt;- message
    smtpClient.Send mailMessage
    printfn &quot;I've sent a mail message!&quot;

sendMessage smtpClient &quot;My message&quot;

smtpClient.Dispose()
System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>


<h2>Tag &lsquo;5&rsquo;</h2>

<p>List syntax and introduce the <code>Seq</code> module. Example of currying.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part5.fs'></script>
<noscript><pre><code>open System.Net.Mail

let smtpClient = new SmtpClient(&quot;smtp.local&quot;)

let sendMessage client message =
    use mailMessage = new MailMessage(&quot;me@example.com&quot;, &quot;you@example.com&quot;)
    mailMessage.Subject &lt;- &quot;Message subject&quot;
    mailMessage.Body &lt;- message
    smtpClient.Send mailMessage
    printfn &quot;I've sent a mail message!&quot;

(* But really, what you want computers for
is doing the same thing lots of times... *)
let myMessages =
    [
        &quot;My first message&quot;
        &quot;My second message&quot;
        &quot;My third and final message&quot;
    ]

myMessages
|&gt; Seq.iter (sendMessage smtpClient)
(* Let's have some vindaloo with that map *)

smtpClient.Dispose()
System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>


<h2>Tag &lsquo;6&rsquo;</h2>

<p>An async workflow. Turns out that <code>SmtpClient</code> is not as clean for that as you would hope &ndash; it&rsquo;s async send methods don&rsquo;t appear to be thread safe (wait, what?) and even the relatively recent looking <code>SendMailAsync</code> method returns a <code>Task</code> rather than a <code>Task&lt;'T&gt;</code>. Having said that, it shows that even in less than ideal circumstances, you can leverage the <code>async</code> stuff even when interfacing with older .net code from other languages.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part6.fs'></script>
<noscript><pre><code>open System.Net.Mail


(* But really, what you want computers for
is doing the same thing lots of times... 
at the same time! *)
let sendMessage message =
    async {
        // Move the client inside because...
        // have _you_ checked if it's thread safe?
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = new MailMessage(&quot;me@example.com&quot;, &quot;you@example.com&quot;)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- message
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }

let myMessages =
    [
        &quot;My first message&quot;
        &quot;My second message&quot;
        &quot;My third and final message&quot;
    ]

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>


<h2>Tag &lsquo;7&rsquo;</h2>

<p>Tuples! Showing both construction and deconstruction syntax. Also discuss that this is how we pass multiple parameters to methods on classes.</p>

<p>In the live coding for this one, I&rsquo;ll make sure to demonstrate adding and removing brackets in different places.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part7.fs'></script>
<noscript><pre><code>open System.Net.Mail

let sendMessage messageDetails =
    async {
        let address, body = messageDetails
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = new MailMessage(&quot;me@example.com&quot;, address)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- body
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }


(* But we probably don't want to send all of these
to the same person. *)
let myMessages =
    [
        &quot;first@example.com&quot;, &quot;My first message&quot;
        &quot;secord@example.com&quot;, &quot;My second message&quot;
        &quot;third@example.com&quot;, &quot;My third and final message&quot;
    ]

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>


<h2>Tag &lsquo;8&rsquo;</h2>

<p>Record syntax.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part8.fs'></script>
<noscript><pre><code>open System.Net.Mail

(* How about if I want to pass lots of different bits
of information in? *)
type messageDetails =
    {
        toAddress : string
        fromAddress : string
        body : string
    }

let sendMessage messageDetails =
    async {
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = 
            new MailMessage(
                messageDetails.fromAddress,
                messageDetails.toAddress)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- messageDetails.body
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }

let myMessages =
    [
        { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My first message&quot; }
        { toAddress = &quot;second@example.com&quot;; fromAddress = &quot;personal@example.com&quot;; body = &quot;My second message&quot; }
        { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My third message&quot; }
    ]

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>


<h2>Tag &lsquo;9&rsquo;</h2>

<p>Use discriminated unions for modeling business inputs. In this case, building a MessageDetails class that can contain the details of either an email or an SMS send request.</p>

<p>Also has a 2nd, maybe slightly more idiomatic implementation of an async workflow.</p>

<p>I&rsquo;m hoping to get at least this far in the session. The rest of it would be nice, but if we get here then I&rsquo;ll be happy I&rsquo;ve covered at least the basics.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part9.fs'></script>
<noscript><pre><code>open System.IO
open System.Net
open System.Net.Mail

(* But some people have given us mobile
numbers rather than email addresses *)
type EmailDetails =
    {
        toAddress : string
        fromAddress : string
        body : string
    }

type SmsDetails =
    {
        toNumber : string
        fromNumber : string
        message : string
    }

type MessageDetails =
    | Email of EmailDetails
    | Sms of SmsDetails

let sendEmail messageDetails =
    async {
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = 
            new MailMessage(
                messageDetails.fromAddress,
                messageDetails.toAddress)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- messageDetails.body
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }

let sendSms messageDetails =
    async {
        let http = HttpWebRequest.Create(&quot;http://sms.local&quot;) :?&gt; HttpWebRequest
        http.Method &lt;- &quot;POST&quot;
        let messagePayload =
            sprintf
                &quot;To: %s\nFrom: %s\nMessage: %s&quot;
                messageDetails.toNumber
                messageDetails.fromNumber
                messageDetails.message
        using 
            (http.GetRequestStream())
            (fun stream -&gt; 
                use sw = new StreamWriter(stream)
                sw.Write(messagePayload))
        let! response = http.GetResponseAsync() |&gt; Async.AwaitTask
        if (response :?&gt; HttpWebResponse).StatusCode &lt;&gt; HttpStatusCode.OK then
            failwith &quot;Http request failed!&quot;
        printfn &quot;I've sent an SMS!&quot;
    }

let sendMessage message =
    match message with
    | Email details -&gt; sendEmail details
    | Sms details -&gt; sendSms details

let myMessages =
    [
        Email { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My first message&quot; }
        Email { toAddress = &quot;second@example.com&quot;; fromAddress = &quot;personal@example.com&quot;; body = &quot;My second message&quot; }
        Email { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My third message&quot; }
        Sms { toNumber = &quot;+447777123123&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms&quot; }
        Sms { toNumber = &quot;+447777123124&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms x2&quot; }
        Sms { toNumber = &quot;+447777123123&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms x3&quot; }
    ]

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>


<h2>Tag &lsquo;10&rsquo;</h2>

<p>Validation with Active patterns.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part10.fs'></script>
<noscript><pre><code>open System.IO
open System.Net
open System.Net.Mail

type EmailDetails =
    {
        toAddress : string
        fromAddress : string
        body : string
    }

type SmsDetails =
    {
        toNumber : string
        fromNumber : string
        message : string
    }

type MessageDetails =
    | Email of EmailDetails
    | Sms of SmsDetails

(* But what if some people have given us invalid data?

Our SMS sender requires full numbers with national
codes - let's add some validation! *)
let (|ValidSmsRequest|InvalidSmsRequest|) details =
    // Hmm. Bananas. My favourite.
    let regex = System.Text.RegularExpressions.Regex(@&quot;^\+\d\d&quot;)
    if regex.IsMatch(details.toNumber) &amp;&amp; regex.IsMatch(details.fromNumber) then
        ValidSmsRequest details
    else
        InvalidSmsRequest &quot;You must include the +xx country prefix on mobile numbers.&quot;

let sendEmail messageDetails =
    async {
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = 
            new MailMessage(
                messageDetails.fromAddress,
                messageDetails.toAddress)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- messageDetails.body
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }

(* We've moved the SMS post logic into this method
without change - no validation here.

We've marked it private so no one else can call it
by mistake *)
let private postSms messageDetails =
    async {
        let http = HttpWebRequest.Create(&quot;http://sms.local&quot;) :?&gt; HttpWebRequest
        http.Method &lt;- &quot;POST&quot;
        let messagePayload =
            sprintf
                &quot;To: %s\nFrom: %s\nMessage: %s&quot;
                messageDetails.toNumber
                messageDetails.fromNumber
                messageDetails.message
        using 
            (http.GetRequestStream())
            (fun stream -&gt; 
                use sw = new StreamWriter(stream)
                sw.Write(messagePayload))
        let! response = http.GetResponseAsync() |&gt; Async.AwaitTask
        if (response :?&gt; HttpWebResponse).StatusCode &lt;&gt; HttpStatusCode.OK then
            failwith &quot;Http request failed!&quot;
        printfn &quot;I've sent an SMS!&quot;
    }

(* And this is where we do our validation *)
let sendSms messageDetails =
    match messageDetails with
    | ValidSmsRequest details -&gt; postSms details
    | InvalidSmsRequest error -&gt; async { printfn &quot;Sms sending error: %s&quot; error }

let sendMessage message =
    match message with
    | Email details -&gt; sendEmail details
    | Sms details -&gt; sendSms details

let myMessages =
    [
        Email { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My first message&quot; }
        Email { toAddress = &quot;second@example.com&quot;; fromAddress = &quot;personal@example.com&quot;; body = &quot;My second message&quot; }
        Email { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My third message&quot; }
        Sms { toNumber = &quot;+447777123123&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms&quot; }
        Sms { toNumber = &quot;+447777123124&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms x2&quot; }
        Sms { toNumber = &quot;+447777123123&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms x3&quot; }
        Sms { toNumber = &quot;447777123123&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;I won't be sent!&quot; }
        Sms { toNumber = &quot;+447777123123&quot;; fromNumber = &quot;+ab7888321321&quot;; message = &quot;Neither will I!&quot; }
        Sms { toNumber = &quot;Bob&quot;; fromNumber = &quot;+ab7888321321&quot;; message = &quot;..and I definitely won't!&quot; }
    ]

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>


<h2>Tag &lsquo;11&rsquo;</h2>

<p>The extra credit section! I very much doubt I&rsquo;ll get this far in a one hour session, but if I do this is just some fun playing with type providers. Also covers randomness such as:</p>

<ul>
<li>generating infinite sequences using <code>seq</code> expressions</li>
<li>double back tick identifiers</li>
<li>pattern matching with guards</li>
<li>a bit more of a workout of the <code>Seq</code> module</li>
<li>we can have a lot of discussion of lazy evaluation, because this code is just insanely broken without it</li>
</ul>


<div><script src='https://gist.github.com/mavnn/6973457.js?file=part11.fs'></script>
<noscript><pre><code>open System
open System.IO
open System.Net
open System.Net.Mail
open System.Text.RegularExpressions

type EmailDetails =
    {
        toAddress : string
        fromAddress : string
        body : string
    }

type SmsDetails =
    {
        toNumber : string
        fromNumber : string
        message : string
    }

type MessageDetails =
    | Email of EmailDetails
    | Sms of SmsDetails

let (|ValidSmsRequest|InvalidSmsRequest|) details =
    let regex = Regex(@&quot;^\+\d\d&quot;)
    if regex.IsMatch(details.toNumber) &amp;&amp; regex.IsMatch(details.fromNumber) then
        ValidSmsRequest details
    else
        InvalidSmsRequest &quot;You must include the +xx country prefix on mobile numbers.&quot;

let sendEmail messageDetails =
    async {
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = 
            new MailMessage(
                messageDetails.fromAddress,
                messageDetails.toAddress)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- messageDetails.body
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }

let private postSms messageDetails =
    async {
        let http = HttpWebRequest.Create(&quot;http://sms.local&quot;) :?&gt; HttpWebRequest
        http.Method &lt;- &quot;POST&quot;
        let messagePayload =
            sprintf
                &quot;To: %s\nFrom: %s\nMessage: %s&quot;
                messageDetails.toNumber
                messageDetails.fromNumber
                messageDetails.message
        using 
            (http.GetRequestStream())
            (fun stream -&gt; 
                use sw = new StreamWriter(stream)
                sw.Write(messagePayload))
        let! response = http.GetResponseAsync() |&gt; Async.AwaitTask
        if (response :?&gt; HttpWebResponse).StatusCode &lt;&gt; HttpStatusCode.OK then
            failwith &quot;Http request failed!&quot;
        printfn &quot;I've sent an SMS!&quot;
    }

let sendSms messageDetails =
    match messageDetails with
    | ValidSmsRequest details -&gt; postSms details
    | InvalidSmsRequest error -&gt; async { printfn &quot;Sms sending error: %s&quot; error }

let sendMessage message =
    match message with
    | Email details -&gt; sendEmail details
    | Sms details -&gt; sendSms details
    
(* And now for something completely different...

Let's send a bunch of actors and celebrities a selection 
of astronomical data. Because, you know. Why not?

If you're running this code at home, you'll need
to install the nuget package from the packages.config
file *)
open FSharp.Data
let FreebaseKey =
    let rec getKey (dir : DirectoryInfo) =
        match dir.EnumerateFiles(&quot;freebase.key&quot;) with
        | files when Seq.isEmpty files -&gt; getKey (dir.Parent)
        | files -&gt; (Seq.head files).OpenText().ReadToEnd().Trim()
    let dir = DirectoryInfo(Directory.GetCurrentDirectory())
    getKey dir

type FreebaseProvider = FreebaseDataProvider&lt;Key=&quot;api key goes here&quot;&gt;

let freebase = FreebaseProvider.GetDataContext()

(* If you don't have an api key you can delete lines
88 to the end of this comment, and uncomment the line below.

It will limit how many times you can run the program
before it starts throwing authentication errors,
though - there's a fairly strict rate limit. *)
//let freebase = FreebaseData.GetDataContext()

let actors =
    freebase.``Arts and Entertainment``.Film.``Film actors``
    |&gt; Seq.filter (fun a -&gt; not &lt;| Seq.isEmpty a.``Film performances``)
    (* You get a (virtual) cookie if you can work out
    why I've added the filter below *)
    |&gt; Seq.filter (fun a -&gt; 
        (a.``Film performances`` |&gt; Seq.head)
            .Film.Name.[0 .. 0]
        |&gt; Regex(&quot;[a-zA-Z]&quot;).IsMatch)
    |&gt; Seq.filter (fun a -&gt; not &lt;| Seq.isEmpty a.``Country of nationality``)
    |&gt; Seq.take 20

let encode (str : string) =
    let clean = Regex(&quot;\W&quot;)
    clean.Replace(str, &quot;-&quot;)

let emailAddresses =
    seq { for actor in actors -&gt; 
            let name = actor.Name |&gt; encode
            let domain =
                (actor.``Film performances`` |&gt; Seq.head).Film.Name
                |&gt; encode
            let countryCode =
                match (actor.``Country of nationality`` |&gt; Seq.head).``ISO Alpha 2`` with
                | alpha when Seq.isEmpty alpha -&gt;
                    &quot;com&quot;
                | alpha when (Seq.head alpha).ToLower() = &quot;us&quot; -&gt;
                    &quot;com&quot;
                | alpha -&gt; sprintf &quot;co.%s&quot; &lt;| (Seq.head alpha).ToLower()
            sprintf &quot;%s@%s.%s&quot;
                name
                domain
                countryCode }

(* We're going to need 20 planets for our 20 celebrities,
so we'll repeat the planets as many times as we need *)
let planets =
    seq {
        while true do
            yield! freebase.``Science and Technology``.Astronomy.Planets
    }

let messages =
    seq { for planet in planets -&gt;
            sprintf &quot;&quot;&quot;Hi there!
We thought you might be interested to know that:

The planet %s has:
%d moons!
An average orbital velocity of %Am/s!

And is also known as:
%s

Regards,

Astro
                &quot;&quot;&quot;
                planet.Name
                (planet.``Orbited by`` |&gt; Seq.length)
                planet.``Average Orbital Speed``
                (planet.``Also known as`` |&gt; String.concat &quot;, &quot;) }

let combineAddressAndMessage (address, message) =
    Email {
        toAddress = address
        fromAddress = &quot;astro@random.org&quot;
        body = message
    }

let myMessages =
    Seq.zip emailAddresses messages
    |&gt; Seq.map combineAddressAndMessage

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being a priest and programming]]></title>
    <link href="http://blog.mavnn.co.uk/being-a-priest-and-programming/"/>
    <updated>2013-09-29T20:19:00+01:00</updated>
    <id>http://blog.mavnn.co.uk/being-a-priest-and-programming</id>
    <content type="html"><![CDATA[<blockquote><p>But you are a chosen people, a royal priesthood, a holy nation, God’s special possession, that you may declare the praises of him who called you out of darkness into his wonderful light. <a href="http://www.biblegateway.com/passage/?search=1%20Peter+2:9&amp;version=NIV">(1 Peter 2:9)</a></p></blockquote>

<p>Warning: this post may contain theology and other non-programming related
material. You have been warned&hellip;</p>

<p><a href="http://hrbc.org.uk">Our church</a> started a new sermon series last week, and as the
sermon was going on various other bits and pieces came together in my mind, and
I knew that I was going to have to at least try and get them down in writing or
they were going to run around my head for the next few days.</p>

<p>It comes up regularly for us as Christians that God isn&rsquo;t small enough to be
contained to Sunday mornings &ndash; he wants a larger part of our lives than that,
in fact the central part. But the idea of worshipping God with your whole
life often begins to get a bit weird when you actually stop and think about it.
Worship (&lsquo;to assign worth to something&rsquo;) is not a strange idea to any of us,
although we might not use that language &ndash; I&rsquo;m sure you can all think of a
respected author, favourite footballer or awe inspiring musician. And if you
buy into the whole Christian idea of who and what God is (infinitely powerful
and awesomely loving, perfect judge who offers grace, amazing sense of humour)
then the idea that a Christian is going to worship God also shouldn&rsquo;t seem that
strange.</p>

<p>But with your whole life? There&rsquo;s <a href="http://biblia.com/bible/esv/Romans%2012.1%E2%80%932">no doubt</a>
<a href="http://www.biblegateway.com/passage/?search=Deuteronomy+6&amp;version=NIV">biblically</a>
or in the teachings of both <a href="http://www.desiringgod.org/resource-library/sermons/all-of-life-as-worship">Christian teachers</a>
and <a href="http://www.jewfaq.org/prayer/shema.htm">Jewish tradition</a> that this is
precisely what is expected of us. But&hellip; when you write computer code as a day
job, what does that actually mean?</p>

<p>And then it struck me. It means being a <a href="https://people.gnome.org/~michael/">Michael Meeks</a> or a <a href="https://twitter.com/jonskeet/status/8423111419">Jon Skeet</a>. Probably not in the
specific details &ndash; I&rsquo;ve not met either of them personally, but in the attitude
they show to life and the people around them. If you&rsquo;re not in the programming
field (probably, if you don&rsquo;t happen to be in a similar area of the programming
field to me&hellip;) you&rsquo;re not likely to have heard of them. But they&rsquo;ve both
developed an enormous amount of respect in a field that is frequently full of
highly opinionated staunch atheists while being openly professing Christians.</p>

<p>So we wrap round to where we started &ndash; the idea from 1 Peter of
all Christians being priests. (I&rsquo;m not using the term here in the catholic
sense, so bear with me&hellip;). This comes up a lot when people relate one of the
core Christian doctrines &ndash; that people who have come into a relation with
Christ can come directly to God without an intermediary. But that wasn&rsquo;t the only
role of priests in the Old Testament. Yes, they were the only people who could
enter God&rsquo;s presence&hellip; but they weren&rsquo;t only going there for themselves. They
<em>were</em> the intermediaries, &lsquo;introducing&rsquo; others to God&rsquo;s presence, carrying
blessings from God to them and petitions from them to God.</p>

<p>Jon and Michael are dedicated to
what they do, they are good at it and they are &lsquo;graceful&rsquo;. In the sense that
they treat the people around them with respect and as professionals, teaching
and helping without regard to the others faith and without forcing argument and
discussion where it&rsquo;s not wanted. Both are obviously willing to talk to people
who want to (Michael even links to a fun page on <a href="http://christianthinktank.com/objedex.html">Christian Think Tank</a> for those who are
interested), but there isn&rsquo;t a pressure there.</p>

<p>And maybe that&rsquo;s what some small part of everyday worship looks like; I can&rsquo;t help feeling that by
being respectable (in the sense of, worthy of some respect) and making the fact
of their faith public, people like Jon and Michael have been doing their bit to
draw others closer to this God I worship. They&rsquo;ve caused a doubt and a second
look at what faith really means in the mind of those who would otherwise live
in an atheist bubble, carelessly dismissing the idea of God as the ramblings of
the obviously stupid and insane. Because these men are clearly neither.</p>

<p>This is encouraging to me, and I hope to a lot of out there who go to work, work hard
and tell people that you made it to church this Sunday. Because if you look
around you&rsquo;ll probably begin to see these people around you, the Jons and Michaels
who are making a difference just by living a life based on Christ&rsquo;s in the everyday.</p>

<p>And guess what? If you&rsquo;re a Christian, letting people know without pressure and
getting your coding/plumbing/teaching/building/etc. done you&rsquo;re probably making a difference
too. You might be the last to see
it, but I&rsquo;m sure others do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing classic OO style code in F#]]></title>
    <link href="http://blog.mavnn.co.uk/implementing-classic-oo-style-code-in-f-number/"/>
    <updated>2013-09-24T14:21:00+01:00</updated>
    <id>http://blog.mavnn.co.uk/implementing-classic-oo-style-code-in-f-number</id>
    <content type="html"><![CDATA[<p>As part of writing up notes for introducing F# as a programming language to experienced C# devs I was looking for examples
of heavily OO code being implemented in F#. Then I realised that I&rsquo;d written at least one suitable example myself.</p>

<p>In the <a href="" title="https://github.com/mavnn/NuGetPlus">NuGetPlus project</a> I needed to implement a ProjectSystem class that was almost a direct copy of the MSBuildProjectSystem in the NuGet commandline client.</p>

<p>So without further ado, F# and then C# versions of a class with inheritance and which implements several interfaces.</p>

<!--more-->


<p>The <a href="" title="https://github.com/mavnn/NuGetPlus/blob/master/NuGetPlus.Core/ProjectSystem.fs">ProjectSystem class from NuGetPlus</a>:</p>

<div><script src='https://gist.github.com/mavnn/6684569.js?file=fsharp.fs'></script>
<noscript><pre><code>[&lt;AutoOpen&gt;]
module NuGetPlus.ProjectSystem

open System
open System.IO
open System.Collections.Generic
open System.Reflection
open Microsoft.Build.Evaluation
open NuGet

let TryGetProject projectFile = 
    ProjectCollection.GlobalProjectCollection.GetLoadedProjects(projectFile) 
    |&gt; Seq.tryFind(fun p -&gt; p.FullPath = projectFile)

type ProjectSystem(projectFile : string) = 
    inherit PhysicalFileSystem(Path.GetDirectoryName(projectFile))
    
    let project = 
        match TryGetProject projectFile with
        | Some project -&gt; project
        | None -&gt; Project(projectFile)
    
    let projectName = Path.GetFileNameWithoutExtension &lt;| project.FullPath
    let framework = 
        new Runtime.Versioning.FrameworkName(project.GetPropertyValue
                                                 (&quot;TargetFrameworkMoniker&quot;))
    
    let GetReferenceByName name =
        project.GetItems(&quot;Reference&quot;)
        |&gt; Seq.filter
               (fun i -&gt; 
                   i.EvaluatedInclude.StartsWith
                       (name, StringComparison.OrdinalIgnoreCase))
        |&gt; Seq.tryFind
               (fun i -&gt; 
                   AssemblyName(i.EvaluatedInclude)
                       .Name.Equals(name, StringComparison.OrdinalIgnoreCase))

    let GetReferenceByPath path = 
        let name = Path.GetFileNameWithoutExtension path
        GetReferenceByName name
    
    interface IProjectSystem with
        member x.TargetFramework with get () = framework
        member x.ProjectName with get () = projectName
        
        member x.AddReference(path, stream) = 
            let fullPath = PathUtility.GetAbsolutePath(x.Root, path)
            let relPath = 
                PathUtility.GetRelativePath(project.FullPath, fullPath)
            let includeName = Path.GetFileNameWithoutExtension fullPath
            project.AddItem
                (&quot;Reference&quot;, includeName, [|KeyValuePair(&quot;HintPath&quot;, relPath)|]) 
            |&gt; ignore
            project.Save()
        
        member x.AddFrameworkReference name = 
            project.AddItem(&quot;Reference&quot;, name) |&gt; ignore
            project.Save()
        
        member x.ReferenceExists path = 
            match GetReferenceByName path with
            | Some _ -&gt; true
            | None -&gt; false
        
        member x.RemoveReference path = 
            match GetReferenceByPath path with
            | Some i -&gt; 
                project.RemoveItem(i) |&gt; ignore
                project.Save()
            | None -&gt; ()
        
        member x.IsSupportedFile path = true
        member x.ResolvePath path = path
        member x.IsBindingRedirectSupported with get () = true
        
        member x.AddImport((targetPath : string), location) = 
            if project.Xml.Imports = null 
               || project.Xml.Imports 
                  |&gt; Seq.forall
                         (fun import -&gt; 
                             not 
                             &lt;| targetPath.Equals
                                    (import.Project, 
                                     StringComparison.OrdinalIgnoreCase)) then 
                project.Xml.AddImport(targetPath) |&gt; ignore
                project.ReevaluateIfNecessary()
                project.Save()
        
        member x.RemoveImport(targetPath : string) = 
            match project.Xml.Imports 
                  |&gt; Seq.tryFind
                         (fun import -&gt; 
                             targetPath.Equals
                                 (import.Project, 
                                  StringComparison.OrdinalIgnoreCase)) with
            | None -&gt; ()
            | Some i -&gt; 
                project.Xml.RemoveChild(i)
                project.ReevaluateIfNecessary()
                project.Save()
        
        member x.FileExistsInProject(path : string) = 
            project.Items 
            |&gt; Seq.exists
                   (fun i -&gt; 
                       i.EvaluatedInclude.Equals
                           (path, StringComparison.OrdinalIgnoreCase) 
                       &amp;&amp; (String.IsNullOrEmpty(i.ItemType) 
                           || i.ItemType.[0] &lt;&gt; '_'))
    
    interface IPropertyProvider with
        member x.GetPropertyValue name = project.GetPropertyValue(name) :&gt; obj</code></pre></noscript></div>


<p>and the <a href="" title="http://nuget.codeplex.com/SourceControl/latest#src/CommandLine/Common/MSBuildProjectSystem.cs">MSBuildProjectSystem class from NuGet</a>:</p>

<div><script src='https://gist.github.com/mavnn/6684569.js?file=csharp.cs'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Versioning;
using Microsoft.Build.Evaluation;

namespace NuGet.Common
{
    public class MSBuildProjectSystem : PhysicalFileSystem, IMSBuildProjectSystem
    {
        public MSBuildProjectSystem(string projectFile)
            : base(Path.GetDirectoryName(projectFile))
        {
            Project = GetProject(projectFile);
        }

        public bool IsBindingRedirectSupported
        {
            get
            {
                return true;
            }
        }

        private Project Project
        {
            get;
            set;
        }

        public void AddFrameworkReference(string name)
        {
            // No-op
        }

        public void AddReference(string referencePath, Stream stream)
        {
            string fullPath = PathUtility.GetAbsolutePath(Root, referencePath);
            string relativePath = PathUtility.GetRelativePath(Project.FullPath, fullPath);
            // REVIEW: Do we need to use the fully qualified the assembly name for strong named assemblies?
            string include = Path.GetFileNameWithoutExtension(fullPath);

            Project.AddItem(&quot;Reference&quot;,
                            include,
                            new[] { 
                                    new KeyValuePair&lt;string, string&gt;(&quot;HintPath&quot;, relativePath)
                                });
        }

        public dynamic GetPropertyValue(string propertyName)
        {
            return Project.GetPropertyValue(propertyName);
        }

        public bool IsSupportedFile(string path)
        {
            return true;
        }

        public string ProjectName
        {
            get
            {
                return Path.GetFileNameWithoutExtension(Project.FullPath);
            }
        }

        public bool ReferenceExists(string name)
        {
            return GetReference(name) != null;
        }

        public void RemoveReference(string name)
        {
            ProjectItem assemblyReference = GetReference(name);
            if (assemblyReference != null)
            {
                Project.RemoveItem(assemblyReference);
            }
        }

        private IEnumerable&lt;ProjectItem&gt; GetItems(string itemType, string name)
        {
            return Project.GetItems(itemType).Where(i =&gt; i.EvaluatedInclude.StartsWith(name, StringComparison.OrdinalIgnoreCase));
        }

        public ProjectItem GetReference(string name)
        {
            name = Path.GetFileNameWithoutExtension(name);
            return GetItems(&quot;Reference&quot;, name)
                .FirstOrDefault(
                    item =&gt;
                    new AssemblyName(item.EvaluatedInclude).Name.Equals(name, StringComparison.OrdinalIgnoreCase));
        }

        public FrameworkName TargetFramework
        {
            get
            {
                string moniker = GetPropertyValue(&quot;TargetFrameworkMoniker&quot;);
                if (String.IsNullOrEmpty(moniker))
                {
                    return null;
                }
                return new FrameworkName(moniker);
            }
        }

        public string ResolvePath(string path)
        {
            return path;
        }

        public void Save()
        {
            Project.Save();
        }

        public bool FileExistsInProject(string path)
        {
            // some ItemTypes which starts with _ are added by various MSBuild tasks for their own purposes
            // and they do not represent content files of the projects. Therefore, we exclude them when checking for file existence.
            return Project.Items.Any(
                i =&gt; i.EvaluatedInclude.Equals(path, StringComparison.OrdinalIgnoreCase) &amp;&amp; 
                     (String.IsNullOrEmpty(i.ItemType) || i.ItemType[0] != '_'));
        }

        private static Project GetProject(string projectFile)
        {
            return ProjectCollection.GlobalProjectCollection.GetLoadedProjects(projectFile).FirstOrDefault() ?? new Project(projectFile);
        }

        public void AddImport(string targetPath, ProjectImportLocation location)
        {
            if (targetPath == null)
            {
                throw new ArgumentNullException(&quot;targetPath&quot;);
            }

            // adds an &lt;Import&gt; element to this project file.
            if (Project.Xml.Imports == null ||
                Project.Xml.Imports.All(import =&gt; !targetPath.Equals(import.Project, StringComparison.OrdinalIgnoreCase)))
            {
                Project.Xml.AddImport(targetPath);
                NuGet.MSBuildProjectUtility.AddEnsureImportedTarget(Project, targetPath);
                Project.ReevaluateIfNecessary();
                Project.Save();
            }
        }

        public void RemoveImport(string targetPath)
        {
            if (targetPath == null)
            {
                throw new ArgumentNullException(&quot;targetPath&quot;);
            }

            if (Project.Xml.Imports != null)
            {
                // search for this import statement and remove it
                var importElement = Project.Xml.Imports.FirstOrDefault(
                    import =&gt; targetPath.Equals(import.Project, StringComparison.OrdinalIgnoreCase));

                if (importElement != null)
                {
                    Project.Xml.RemoveChild(importElement);
                    NuGet.MSBuildProjectUtility.RemoveEnsureImportedTarget(Project, targetPath);
                    Project.ReevaluateIfNecessary();
                    Project.Save();
                }
            }
        }
    }
}
</code></pre></noscript></div>


<p>I can&rsquo;t honestly remember if they do exactly the same thing, but they are pretty similar and implement the same interfaces and inheritance. As you can see, while F#&rsquo;s focus is being functional it will support OO code just fine, which is very useful indeed when you need to interop with .NET code from other languages and coding styles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teaching F# to C# Devs]]></title>
    <link href="http://blog.mavnn.co.uk/teaching-f-number-to-c-number-devs/"/>
    <updated>2013-09-17T11:12:00+01:00</updated>
    <id>http://blog.mavnn.co.uk/teaching-f-number-to-c-number-devs</id>
    <content type="html"><![CDATA[<p>So, in a fit of enthusiasm my boss bought 15 tickets to the <a href="" title="http://skillsmatter.com/event/scala/progressive-f-tutorials-2013">London Progressive F# Tutorials</a> when he saw the early birds pricing (did I mention it&rsquo;s nice working here?). Several of the people who have been assigned tickets have asked to go largely because they are new to F#, so I&rsquo;ve been asked to put together a starter session to teach them the basics. I&rsquo;ve tried this <a href="" title="http://blog.mavnn.co.uk/an-introduction-to-f-screencast-and-pdf-slide">once before</a> and it was a fairly successful session (F# was adopted as a official supported language in the company partly due to feedback following it). But it was still pretty rough around the edges, and as normal with these things, you always want to do them better the next time round&hellip;</p>

<p>So, with a target audience of curious, experienced C# devs I&rsquo;m wondering about the best approach. The initial session needs to fit in an hour, although I can do individual follow ups afterwards.</p>

<p>My current thinking is to take a block of C# code (smtp sender?) that is fairly straight forward but &lsquo;production ready&rsquo; in the sense that it includes error handling, logging, etc. Then do a straight re-write in F# live coding. And then start refactoring to more idiomatic F# as we go along.</p>

<p>Features I feel would be important to cover:</p>

<ul>
<li>Basic syntax (let, functions, if &hellip; then, etc)</li>
<li>Common idioms (|>, Seq.map)</li>
<li>At least one computational expression (probably an error handling one; simpler than async in some ways)</li>
<li>Several examples of using the match statements</li>
<li>&hellip;which probably means at least one DU, possibly for error handling</li>
<li>Records and { &hellip; with &hellip; } expressions</li>
</ul>


<p>I&rsquo;ve got a week or two to prepare, so what I&rsquo;m really hoping for at this point is suggestions and ideas from people for how to improve this as a session idea, things that threw you when you first started writing F# you think should be covered, whether you think this is a stupid idea for a session from the concept up, etc. Once the session is completed I&rsquo;ll be posting the slides and hopefully a screen cast of it as I did last time for use by <a href="" title="http://fsharp.org">fsharp.org</a>.</p>

<p>Suggestions on the piece of C# code to translate would also be appreciated &ndash; either in terms of ideas of the type of code, or actual open source code that would serve as a code starting point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FsCheck - Breaking your code in new and exciting ways]]></title>
    <link href="http://blog.mavnn.co.uk/fscheck-breaking-your-code-in-new-and-exciting-ways/"/>
    <updated>2013-07-12T11:55:00+01:00</updated>
    <id>http://blog.mavnn.co.uk/fscheck-breaking-your-code-in-new-and-exciting-ways</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/fsharp/FsCheck">FsCheck</a> is a property based testing library for .net. Based on <a href="http://book.realworldhaskell.org/read/testing-and-quality-assurance.html">QuickCheck</a> and <a href="https://github.com/rickynils/scalacheck">scalacheck</a> it can be easily called from any .net language.</p>

<p>But what is property based testing? It&rsquo;s a technique that allows us to define &lsquo;properties&rsquo; for our code, and then let the library try and find input values that break these properties. Let&rsquo;s take an example and see what happens.</p>

<h3>The Brief</h3>

<p>I&rsquo;ve been tasked with writing the backend of a public facing endpoint. Customers can pass user defined input into the endpoint, and we&rsquo;ll add it to their &lsquo;booking&rsquo;. Once they have called the service once with any particular input, we should ignore any further calls with the same value.</p>

<p>Previous architectural decisions mean that we are storing the bookings as XML documents.</p>

<p>(Why yes, I do know this is slightly contrived. Thank you for asking. Hopefully though, you should begin to see similarities to real scenarios you&rsquo;ve coded against.)</p>

<h3>What can we get out of this?</h3>

<p>Well, as well as any normal exploratory unit tests we may decide to write (which I&rsquo;ll ignore for this article to keep things succinct) we can determine a few properties that should always hold true in the brief above:</p>

<ul>
<li>Repeatedly calling the code with the same input xml document and the same input text should always give us the same result. I.E., the code should be idempotent.</li>
<li>Our code should never remove nodes from the XML. The result document will always be the same or longer than the original.</li>
<li>The input is supplied by the customer. It&rsquo;s about as trustworthy as a hungry stoat on speed.</li>
</ul>


<h3>Let&rsquo;s get started</h3>

<p>Let&rsquo;s start off with the core &lsquo;business logic&rsquo; function of this code. We&rsquo;ll ignore for this post how the input gets to the function, and how the document is persisted. It&rsquo;s signature (F# style) will be:</p>

<pre><code>val AddEnhancement :
  xDoc:System.Xml.Linq.XDocument -&gt; input:string -&gt; System.Xml.Linq.XDocument
</code></pre>

<p>After referencing <code>System.Xml</code> and <code>System.Xml.Linq</code>, our first, very naive, attempt at the implementation looks like this:</p>

<div><script src='https://gist.github.com/mavnn/5983701.js?file=Part1.fs'></script>
<noscript><pre><code>let AddEnhancement (xDoc : XDocument) (input : string) =
    xDoc.Root.Add(XElement(XName.Get &quot;Enhancement&quot;, input))
    xDoc</code></pre></noscript></div>


<p>We know this isn&rsquo;t right &ndash; it&rsquo;s blatantly not idempotent. So let&rsquo;s try and get our failing test.</p>

<p>Although FsCheck does expose a set of NUnit plugin attributes, for this blog post I&rsquo;m just going to run the tests via a console app. So; add a new F# console app to your solution, add references to <code>System.Xml</code>, <code>System.Xml.Linq</code> and your library project then grab FsCheck (it&rsquo;s on NuGet) and we&rsquo;ll see what we can do.</p>

<p>First, we&rsquo;ll need to add a property that we want to test. A property is simply a function that takes a data type FsCheck knows how to generate, and returns a bool. FsCheck knows how to generate strings, so our idempotence property looks something like this:</p>

<div><script src='https://gist.github.com/mavnn/5983701.js?file=Part2.fs'></script>
<noscript><pre><code>open FsCheck
open DevEd.FsCheck
open System.Xml.Linq

let baseDoc = &quot;&lt;root /&gt;&quot;

let ``Add enhancement must be idompotent`` input =
    let xml1 = XDocument.Parse baseDoc
    let xml2 = XDocument.Parse baseDoc
    (AddEnhancement xml1 input).ToString() =
        (AddEnhancement (AddEnhancement xml2 input) input).ToString()</code></pre></noscript></div>


<p>Looking good. How do we run it? Just add this to the end of the file:</p>

<div><script src='https://gist.github.com/mavnn/5983701.js?file=Part3.fs'></script>
<noscript><pre><code>Check.Quick ``Add enhancement must be idompotent``

System.Console.ReadLine() |&gt; ignore</code></pre></noscript></div>


<p>And hey presto:</p>

<p><img src="http://blog.mavnn.co.uk/images/FsCheck1.png" alt="&quot;&quot; broke my code :(" /></p>

<p>Failing test. Interestingly (and if you check the documents, not coincidently), FsCheck has found the &lsquo;simplest&rsquo; possible failure case: <code>""</code>. Of course, it was helped on this occasion by the fact it was also the first input it tried.</p>

<p>So; let&rsquo;s add some checking to <code>AddEnhancement</code> to make sure we don&rsquo;t re-add the same input more than once.</p>

<div><script src='https://gist.github.com/mavnn/5983701.js?file=Part4.fs'></script>
<noscript><pre><code>let AddEnhancement (xDoc : XDocument) (input : string) =
    if 
        xDoc.Root.Elements(XName.Get &quot;Enhancement&quot;)
        |&gt; Seq.exists (fun e -&gt; e.Value = input)
        |&gt; not then
            xDoc.Root.Add(XElement(XName.Get &quot;Enhancement&quot;, input))
    xDoc
</code></pre></noscript></div>


<p>And re-run the test and&hellip; oops.</p>

<div><script src='https://gist.github.com/mavnn/5983701.js?file=Part5.txt'></script>
<noscript><pre><code>System.ArgumentException was unhandled by user code
  HResult=-2147024809
  Message=' ', hexadecimal value 0x18, is an invalid character.
  Source=System.Xml
  StackTrace:
       at System.Xml.XmlEncodedRawTextWriter.InvalidXmlChar(Int32 ch, Char* pDst, Boolean entitize)
       at System.Xml.XmlEncodedRawTextWriter.WriteElementTextBlock(Char* pSrc, Char* pSrcEnd)
       at System.Xml.XmlEncodedRawTextWriter.WriteString(String text)
       at System.Xml.XmlEncodedRawTextWriterIndent.WriteString(String text)
       at System.Xml.XmlWellFormedWriter.WriteString(String text)
       at System.Xml.Linq.ElementWriter.WriteElement(XElement e)
       at System.Xml.Linq.XElement.WriteTo(XmlWriter writer)
       at System.Xml.Linq.XContainer.WriteContentTo(XmlWriter writer)
       at System.Xml.Linq.XNode.GetXmlString(SaveOptions o)
       at System.Xml.Linq.XNode.ToString()
       at Program.Add enhancement must be idompotent(String input) in C:\Users\michael.newton\documents\visual studio 2012\Projects\DevEd.FsCheck\TestRunner\Program.fs:line 10
       at Program.clo@13.Invoke(String input) in C:\Users\michael.newton\documents\visual studio 2012\Projects\DevEd.FsCheck\TestRunner\Program.fs:line 13
       at FsCheck.Testable.evaluate[a,b](FSharpFunc`2 body, a a)
  InnerException: 
</code></pre></noscript></div>


<p>And this is where the full power of FsCheck starts becoming apparent. I know my input is untrusted, so I&rsquo;ve told it to generate <em>any</em> string. And it believed me, and has created an input string that breaks <code>System.Xml.XmlEncodedRawTextWriter.WriteElementTextBlock</code>. This is not a unit test I would have thought to write myself, as I&rsquo;d managed to miss that the fact that <a href="http://blog.mark-mclaren.info/2007/02/invalid-xml-characters-when-valid-utf8_5873.html">not all utf-8 characters are valid in utf-8 encoded xml</a>. In fact, it took me more than a few minutes to work out why it was throwing.</p>

<p>At this point FsCheck has revealed to us that our initial brief is actually incomplete; we&rsquo;ve told the customer that we&rsquo;re willing to accept utf-8 strings as input, but our storage mechanism doesn&rsquo;t support all utf-8 strings. To even get FsCheck to run, we&rsquo;ll have to decide on an error handling strategy &ndash; and importantly, it will have to be a strategy that still fulfils the initial properties specified (unless we decide that what we&rsquo;ve discovered so fundamentally breaks our initial assumptions that they need to be re-visited).</p>

<p>This is a toy project so I&rsquo;m going to bail slightly on this one: I&rsquo;m going to assume that invalid values just add an error node with a &lsquo;cleaned&rsquo; version of the input which could then be reviewed by a human at a later date. This has the advantage that it still fulfils all of our properties above.</p>

<p>Fortunately for us, in .NET 4.0 and above there is a function in the <code>System.Xml</code> namespace called <code>XmlConvert.IsXmlChar</code> which does roughly what you would expect from the name. Let&rsquo;s add an invalid character filter, and an active pattern to tell us if any characters have been removed:</p>

<div><script src='https://gist.github.com/mavnn/5983701.js?file=Part6.fs'></script>
<noscript><pre><code>let filterInvalidChars (input : string) =
    input
    |&gt; Seq.filter (fun c -&gt; XmlConvert.IsXmlChar c)
    |&gt; Seq.map string
    |&gt; String.concat &quot;&quot;    

let (|ValidXml|InvalidXml|) str =
    let filtered = filterInvalidChars str
    if String.length filtered = String.length str then
        ValidXml str
    else
        InvalidXml filtered
</code></pre></noscript></div>


<p>Now we can amend <code>AddEnhancement</code> to add enhancement nodes for valid XML text or an error node for sanitized invalid XML text:</p>

<div><script src='https://gist.github.com/mavnn/5983701.js?file=Part7.fs'></script>
<noscript><pre><code>let AddEnhancement (xDoc : XDocument) (input : string) =
    match input with
    | ValidXml text -&gt;
        if xDoc.Root.Elements(XName.Get &quot;Enhancement&quot;) |&gt; Seq.exists(fun enhance -&gt; enhance.Value = text) then
            None
        else
            Some &lt;| XElement(XName.Get &quot;Enhancement&quot;, text)
    | InvalidXml text -&gt;
        if xDoc.Root.Elements(XName.Get &quot;Error&quot;) |&gt; Seq.exists(fun error -&gt; error.Value = text) then
            None
        else
            Some &lt;| XElement(XName.Get &quot;Error&quot;, text)</code></pre></noscript></div>


<p>And when we run FsCheck again:</p>

<p><img src="http://blog.mavnn.co.uk/images/FsCheck2.png" alt="Hurrah!" /></p>

<p>Excellent stuff.</p>

<p>As a bonus extra, I&rsquo;ve included below a somewhat expanded version of the test code. Remember I said that FsCheck already knows how to generate strings? Unfortunately it doesn&rsquo;t know how to generate XML out of the box, but I was pleasantly surprised how quick and easy it was to write a naive XML generator. It generates <a href="https://gist.github.com/mavnn/5976004#file-example-xml">XML like this</a>. Also, check out the <code>CheckAll</code> function used at the end which allows you to build and run &lsquo;property classes&rsquo; to group families of properties together.</p>

<p>And, of course, per the specification, it checks that the 3rd property above holds true (that adding enhancements never reduces the size of the document).</p>

<div><script src='https://gist.github.com/mavnn/5983701.js?file=Part8.fs'></script>
<noscript><pre><code>module FsCheck.Examples.Tests

open FsCheck
open DevEd.FsCheck
open System.Xml.Linq

let baseDocText = &quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;root /&gt;
&quot;&quot;&quot;

type XmlTree = 
    | NodeName of string
    | Container of string * List&lt;XmlTree&gt;

let nodeNames = 
    [&quot;myNode&quot;;
     &quot;myOtherNode&quot;;
     &quot;someDifferentNode&quot;]

let tree = 
    let rec tree' s = 
        match s with
        | 0 -&gt; Gen.map NodeName (Gen.elements nodeNames)
        | n when n &gt; 0 -&gt; 
            let subtrees = 
                Gen.sized &lt;| fun s -&gt; 
                    Gen.resize (s
                                |&gt; float
                                |&gt; sqrt
                                |&gt; int) (Gen.listOf(tree'(n / 2)))
            Gen.oneof 
                [Gen.map NodeName (Gen.elements nodeNames);
                 
                 Gen.map2 (fun name contents -&gt; Container(name, contents)) 
                     (Gen.elements nodeNames) subtrees]
        | _ -&gt; invalidArg &quot;s&quot; &quot;Size most be positive.&quot;
    Gen.sized tree'

let treeToXDoc xmlTree = 
    let rec inner currentNode children = 
        let childMatch child = 
            match child with
            | NodeName name -&gt; XElement(XName.Get name)
            | Container(name, contents) -&gt; 
                let element = XElement(XName.Get name)
                inner element contents
        currentNode.Add(List.map childMatch children |&gt; List.toArray)
        currentNode
    match xmlTree with
    | NodeName name -&gt; XDocument(XElement(XName.Get name))
    | Container(name, contents) -&gt; 
        let doc = XDocument(XElement(XName.Get name))
        inner doc.Root contents |&gt; ignore
        doc

type XmlGenerator() = 
    static member XmlTree() = 
        { new Arbitrary&lt;XmlTree&gt;() with
              member x.Generator = tree
              member x.Shrinker t = 
                  match t with
                  | NodeName _ -&gt; Seq.empty
                  | Container(name, contents) -&gt; 
                      match contents with
                      | [] -&gt; seq { yield NodeName name }
                      | c -&gt; 
                          seq { 
                              for n in c -&gt; n } }

type XmlUpdaterProperties() = 
    static member ``AddEnhancement is idempotent``(data : string) = 
        ((AddEnhancement &lt;| AddEnhancement (XDocument.Parse baseDocText) data) data)
            .ToString() = (AddEnhancement (XDocument.Parse baseDocText) data)
            .ToString()
    static member ``AddEnhancement is idempotent on different xml structures``(xmlDoc : XmlTree, 
                                                                           data : string) = 
        (AddEnhancement (treeToXDoc xmlDoc) data).ToString() = (AddEnhancement (AddEnhancement (treeToXDoc xmlDoc) data) data)
            .ToString()
    static member ``AddEnhancement never reduces the number of nodes`` (xmlDoc : XmlTree, data : string) =
        Seq.length ((treeToXDoc xmlDoc).DescendantNodes()) = Seq.length ((AddEnhancement (treeToXDoc xmlDoc) data).DescendantNodes())

Arb.register&lt;XmlGenerator&gt;() |&gt; ignore
Check.QuickAll&lt;XmlUpdaterProperties&gt;()
System.Console.ReadLine() |&gt; ignore</code></pre></noscript></div>


<p>Thanks for reading this far. If you want to play yourself, a full copy of the example code is <a href="https://github.com/mavnn/DevEd.FsCheck">on GitHub</a> with an MIT license.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful find: a decent Windows console]]></title>
    <link href="http://blog.mavnn.co.uk/useful-find-a-decent-windows-console/"/>
    <updated>2013-07-09T16:12:00+01:00</updated>
    <id>http://blog.mavnn.co.uk/useful-find-a-decent-windows-console</id>
    <content type="html"><![CDATA[<p>New machine, new Octopress set up. On Windows, no less.</p>

<p>So let&rsquo;s hope a blog post actually appears!</p>

<p>Just in case it does, I&rsquo;ll include a useful piece of side
info &ndash; a actually decent Windows console called ConEmu.</p>

<p>I&rsquo;ll leave you with <a href="http://www.hanselman.com/blog/ConEmuTheWindowsTerminalConsolePromptWeveBeenWaitingFor.aspx">Scott Hanselman&rsquo;s excellent review</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding Hygiene: Moving from project references to NuGet dependencies]]></title>
    <link href="http://blog.mavnn.co.uk/coding-hygiene-moving-from-project-references-to-nuget-dependencies/"/>
    <updated>2013-03-08T17:08:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/coding-hygiene-moving-from-project-references-to-nuget-dependencies</id>
    <content type="html"><![CDATA[<p>So, first post with the new blogging engine. Let&rsquo;s see how it goes.</p>

<p>Our code base at <a href="http://15below.com">15below</a> started it&rsquo;s life a fair
while ago, well before any form of .NET package management became
practical. Because of that, we ended up building a lot of code in
&lsquo;lockstep&rsquo; with project references in code as there was no sensible way
of taking versioned binary dependencies.</p>

<p>That&rsquo;s fine and all, but it encourages bad code hygiene: rather than
having sharply defined contracts between components, if you&rsquo;ve got them
all open in the same solution it becomes far too tempting to just nudge
changes around as it&rsquo;s convenient at the time. Changes can infect other
pieces of code, and the power of automatic refactoring across the entire
solution becomes intoxicating.</p>

<p>The result? It becomes very hard to do incremental builds (or
deployments, for that matter). This in turn makes for a long feed back
cycle between making a change, and being able to see it rolled out to a
testing environment.</p>

<p>So as part of the ongoing refactoring that any long lived code base needs to
keep it maintainable and under control, we&rsquo;ve embarked on the process of
splitting our code down into more logically separated repositories that
reference each other via NuGet. This will require us to start being much
more disciplined in our <a href="http://semver.org">semantic versioning</a> than we
have been in the past, but will also allow us to build and deploy
incrementally and massively reduce our feed back times.</p>

<p>As part of splitting out the first logical division (I&rsquo;d like to say
<a href="http://en.wikipedia.org/wiki/Domain-driven_design">domain</a> but we&rsquo;re
not there yet!), I created the new repository and got the included
assemblies up and building on TeamCity. It was only then (stupidly) that
I realised that we had several hundred project references to these
assemblies in our code. There was no way I was going to update them all
by hand, so after a few hours development we now have a script for
idempotently updating a project reference in a [cs|vb|fs]proj file to a
NuGet reference. It does require you to do one update manually first;
especially with assemblies that are strongly signed, I chickened out of
trying to generate the reference nodes that needed to be added
automatically. The script also makes sure that you end up with a
packages.config file with the project that includes the new dependency.</p>

<p>It should be noted that this script has only seen minimal testing, was
coded up for one time use and does not come with a warranty of any kind!
Use at your own risk, and once you understand what it&rsquo;s doing. But for
all that, I hope you find it useful.</p>

<div><script src='https://gist.github.com/mavnn/5983379.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Throttling the level of concurrency in F#]]></title>
    <link href="http://blog.mavnn.co.uk/throttling-the-level-of-concurrency-in-f/index.html"/>
    <updated>2013-02-15T00:00:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/throttling-the-level-of-concurrency-in-f/throttling-the-level-of-concurrency-in-f</id>
    <content type="html"><![CDATA[<div>Async.Parallel |&gt; Async.RunSynchronously is great for running a load of stuff in parallel in F#, as long as you don&#39;t mind them all running at the same time.</div><p /><div>Often, though, you want to map across a sequence and run functions on the elements in parallel, but with a limit to how many are being processed concurrently. Whether you&#39;re doing something CPU heavy and there&#39;s no point running more than the number of processors on the box, or whether you know that you&#39;ll swamp a remote server if you just dump all of your connections on it at once, this issue comes up surprisingly often.</div> <p /><div>As a first stab, you might be tempted to do something like this (if you think like I do):</div><p /><div><script src="https://gist.github.com/4961072.js"></script><br /> </div><p /><div>In a word: don&#39;t. The contention in the Semaphore make this enormously inefficient with even a few hundred tasks.</div><p /><div>In the end, the simplest  implementation I could come up with that didn&#39;t involve dragging in external dependencies was the following:</div> <p /><div><script src="https://gist.github.com/4961056.js"></script><br /></div><p /><div>If anyone has a simpler implementation, leave a comment and let me know!</div> 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fake Part 2: Build and test]]></title>
    <link href="http://blog.mavnn.co.uk/fake-part-2-build-and-test/index.html"/>
    <updated>2013-02-13T00:00:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/fake-part-2-build-and-test/fake-part-2-build-and-test</id>
    <content type="html"><![CDATA[<p>The introduction to this series can be found at <a href="http://blog.mavnn.co.uk/getting-started-with-fake-an-introduction-tag">http://blog.mavnn.co.uk/getting-started-with-fake-an-introduction-tag</a> or just check out my Fake tag.</p>
<p><strong>The scenario</strong></p>
<p>So, you&#8217;ve written your brave new F# 3.0 solution, and now you want to build, test and package it with a shared build setup between your CI environment (which, of course, doesn&#8217;t have Visual Studio installed) and your developer&#8217;s machines.</p>
<p><span style="font-size: 13px;">Hopefully this will walk you through most of the potential pitfalls you might find along the way.</span></p>
<p><span style="font-size: 13px;">This post has been written using an actual build.fsx script that we use for a utility project at <a href="http://15below.com" title="15below" target="_blank">15below</a>. We&#8217;re hiring, so if you&#8217;re interested in this kind of thing, drop me a line.</span></p>
<p><strong><span style="font-size: 13px;">Set up</span></strong></p>
<p><span style="font-size: 13px;">There is no installer for the F# 3 compiler, so we&#8217;re going to be playing some games to support building on a TeamCity build agent without VS 2012 installed.</span></p>
<p><span style="font-size: 13px;">The script assumes a few things about your repository:</span></p>
<p>&nbsp;</p>
<ul>
<li><span style="font-size: 13px;">a tools directory with the same NuGet and FSharp directories as at <a href="https://github.com/fsharp/FAKE/tree/develop/tools">https://github.com/fsharp/FAKE/tree/develop/tools</a> (basically a recent nuget.exe in one, and a recent build of the open source F# compiler project in the other)</span></li>
<li><span style="font-size: 13px;">a tools/FAKE directory with a recent build of FAKE (I prefer to have a known version checked into git, but you can read instructions on how to bootstrap it via nuget at <a href="http://www.navision-blog.de/blog/2009/04/01/getting-started-with-fake-a-f-sharp-make-tool/)">http://www.navision-blog.de/blog/2009/04/01/getting-started-with-fake-a-f-sha&#8230;</a></span></li>
</ul>
<p>&nbsp;</p>
<p><span style="font-size: 13px;">From here on down is just a heavily commented build.fsx file. I was going to use FSharp.Formatting to nicely format this, but unfortunately the combination of FSharp.Formatting itself and Posterous have defeated me. Something to play with more at a later date.</span></p>
<p><span style="font-size: 13px;"><script src="https://gist.github.com/4944580.js"></script></span></p>
<p><span style="font-size: 13px;">Hopefully this example will give you a start on using FAKE in real projects.</span></p>
<p><span style="font-size: 13px;">In future posts I&#8217;d like to address some of the more esoteric bits and pieces we&#8217;ve been using FAKE for, such as building Octopus deployment packages, running integration tests (with full setup and database deployment) and running unit tests in parallel. Stay tuned&#8230;</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A short interlude into adaptive polling]]></title>
    <link href="http://blog.mavnn.co.uk/a-short-interlude-into-adaptive-polling-tag-f/index.html"/>
    <updated>2013-01-22T00:00:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/a-short-interlude-into-adaptive-polling-tag-f/a-short-interlude-into-adaptive-polling-tag-f</id>
    <content type="html"><![CDATA[<span style="font-family: arial,sans-serif; font-size: 13px;">Your windows service is watching an email inbox.</span><p /> <span style="font-family: arial,sans-serif; font-size: 13px;">How often should it poll?</span><p /><span style="font-family: arial,sans-serif; font-size: 13px;">Once every 5 minutes? Every 10? Then of course you realise that it should be different for every customer&#8230; or maybe every mailbox. You need more config!</span>
<p />
<div>Or not.<p /><span style="font-family: arial,sans-serif; font-size: 13px;">The real answer, of course, is something completely different: it&nbsp;</span><span style="font-family: arial,sans-serif; font-size: 13px;">should poll a lot when a lot of emails are arriving, and not very much&nbsp;</span><span style="font-family: arial,sans-serif; font-size: 13px;">when they aren&#8217;t.</span><p /> <span style="font-family: arial,sans-serif; font-size: 13px;">It took a lot longer than it should have done to get my maths brain&nbsp;</span><span style="font-family: arial,sans-serif; font-size: 13px;">back on, but with the help of my wife I eventually settled on this&nbsp;</span><span style="font-family: arial,sans-serif; font-size: 13px;">code for deciding the intervals between polls:</span><p /> 
<div><script src="https://gist.github.com/4595744.js"></script></div>
<p />
<div>The &#8216;i&#8217; in this function is the number of times we&#8217;ve polled since the last time a new email was received (if one is received, we reset i to 0).</div>
<p />
<div>If you plot this out on a graph, you get something that looks like this:</div>
<p />
<div><img src="http://www.wolframalpha.com/share/img?i=d41d8cd98f00b204e9800998ecf8427ehd954rh40i&amp;f=HBQTQYZYGY4TOM3CGRSGMMBWGAYDCM3DGYZGMOBWGFRDANDCMUZAaaaa" alt="" /></div>
<p />
<div>(You can play with the shape of the graph at Wolfram|Alpha if you&#8217;re feeling really geeky :) -&nbsp;<a href="http://www.wolframalpha.com/share/clip?f=d41d8cd98f00b204e9800998ecf8427ehd954rh40i">http://www.wolframalpha.com/share/clip?f=d41d8cd98f00b204e9800998ecf8427ehd954rh40i</a>&nbsp;).</div>
<p />
<div>This gives us very aggressive polling for the first few minutes after discovering an email, then dropping off rapidly to close to the one every ten minutes mark that I decided was a reasonable background polling rate.</div>
<p />
<div>It&#8217;s not truly adaptive in the machine learning sense, but it gives a very good first cut that is an awful lot better than any fixed value could be.</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Corrected Error Handling Computational Expression]]></title>
    <link href="http://blog.mavnn.co.uk/corrected-error-handling-computational-expres/index.html"/>
    <updated>2013-01-18T00:00:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/corrected-error-handling-computational-expres/corrected-error-handling-computational-expres</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been wanting to write code like this in F#, and know that any
exceptions within a bound expression in an audit { } block will not
only get caught, but that an external auditing service will get
notified that the operation has failed.</p>

<p><script src="https://gist.github.com/4565937.js"></script></p>

<p>Unfortunately, it turns out my code in my post on error handling
( <a href="http://blog.mavnn.co.uk/playing-with-error-handling-strategies">http://blog.mavnn.co.uk/playing-with-error-handling-strategies</a> ) was
flawed in its ability to handle errors. The irony has not escaped me.</p>

<p>The issue is with the eager evaluation of arguments to the TryFinally
method of the builder. If it takes you a while to work out what that
means, don&rsquo;t worry: it took me about 2 days to wrap my head round it
and work out how to correct the code to make it behave as I would have
expected.</p>

<p>To make things work correctly, the type returned by the computational
expression pretty much has to be a deferred function of some kind.</p>

<p>So, the Interface, now renamed IAuditBuilder, gains a couple of helper
functions and becomes:</p>

<p><script src="https://gist.github.com/4565812.js"></script></p>

<p>The implementation of the TestAuditBuilder (only logs to console on
error) becomes:</p>

<p><script src="https://gist.github.com/4565838.js"></script></p>

<p>So: many thanks to Johann Deneux for patiently pointing out to me what
the flaw in the original code was. I hope this example of a lazy
computational expression is useful to other starting out down this
rabbit hole of monadic weirdness. At least the resulting code looks
pretty nice and readable now that the builder is fixed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In Which Our Intrepid Author De-sugars a Monad by Hand]]></title>
    <link href="http://blog.mavnn.co.uk/in-which-our-intrepid-author-de-sugars-a-mona/index.html"/>
    <updated>2013-01-16T00:00:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/in-which-our-intrepid-author-de-sugars-a-mona/in-which-our-intrepid-author-de-sugars-a-mona</id>
    <content type="html"><![CDATA[<p>In my previous post ( <a href="http://blog.mavnn.co.uk/playing-with-error-handling-strategies">http://blog.mavnn.co.uk/playing-with-error-handling-strategies</a> ), Johann Deneux asked me whether my implementation of TryFinally actually worked. <p /> TD;LR: It works. But thank you Johann for making me check!</p>
<p>Editted TD;LR: It&#8217;s broken, but not for the reason I thought. See the comments for details, and corrected code here&nbsp;<a href="http://blog.mavnn.co.uk/corrected-error-handling-computational-expres">http://blog.mavnn.co.uk/corrected-error-handling-computational-expres</a><p /> This gave me a bit of a pause, as it&#8217;s actually an implementation I took from another source. One I trust, but it was still embarrassing to realise I couldn&#8217;t answer this question with full confidence as I didn&#8217;t quite understand the code myself. <p /> In the end (especially given I&#8217;m planning to actually use this code in production at some point), I decided to go the whole hog and de-sugar a couple of simple versions of the computational expression. <p /> So, first, the audit monad as used in my example code from the last post with just a simple let binding: <p /> <script src="https://gist.github.com/4550342.js"></script><p /> This raised my confidence slightly - the code I&#8217;d written did what I expected. But, what happened when I tried to bind a disposable resource using use! rather than let!? Time for the moment of truth: <p /> <script src="https://gist.github.com/4550496.js"></script><p /> So there you have it. The code does actually behave as expected, protecting the use of the disposable resource and ensuring it&#8217;s disposal. And I can breath easy that my code is doing what I thought it should be. Hopefully this will also serve as a useful example for anyone else starting out on the happy road of using computational expressions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with error handling strategies]]></title>
    <link href="http://blog.mavnn.co.uk/playing-with-error-handling-strategies/index.html"/>
    <updated>2013-01-14T00:00:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/playing-with-error-handling-strategies/playing-with-error-handling-strategies</id>
    <content type="html"><![CDATA[<p>Taking a break from Fake for a moment (I&#8217;ll get back to it, I promise!) <p /> Note: this post assumes a basic understanding of computation expressions in F#; if you&#8217;re looking for a primer on them,&nbsp;<a href="http://en.wikibooks.org/wiki/F_Sharp_Programming/Computation_Expressions">http://en.wikibooks.org/wiki/F_Sharp_Programming/Computation_Expressions</a> <br />is a good place to start.</p>
<p>Note 2: the code in this post is actually broken if you use a use! or try finally block within your audit block. Check out&nbsp;<a href="http://blog.mavnn.co.uk/corrected-error-handling-computational-expres" style="font-size: 13px;">http://blog.mavnn.co.uk/corrected-error-handling-computational-expres</a>&nbsp;for the corrected code.</p>
<p><br />I had a series of small services I needed to add error handling to today to polish them up from nice clean prototype to production ready status. <p /> Thinking about the joys of re-implementing the same error handling strategy in each of them, it occurred to me that this was exactly the kind of thing that computational expressions were built for. But my requirements went a bit further than just log the error and continue: each of these services contain critical locations where if a error occurred, we didn&#8217;t just want it logged locally, but we wanted (in some cases) an alert sent to a remote auditing* server. <p /> Of course, mocking out the auditing service for testing is a bit of a pain in the backside, and how auditing is achieved shouldn&#8217;t really be the responsibility of these services anyway. <p /> So, I decided to experiment with a builder interface. <p /> Meet the IErrorHandlerBuilder interface: <p /> <script src="https://gist.github.com/4533440.js"></script><p /> Should look awfully familiar if you&#8217;ve recently checked out the msdn page on computational expressions: <a href="http://msdn.microsoft.com/en-us/library/dd233182.aspx">http://msdn.microsoft.com/en-us/library/dd233182.aspx</a> (except, you know, mine has the right signatures; that might want to be fixed at some point). <p /> How do we use it? <p /> Well, first we need an implementation. In fact, let&#8217;s have two. Our first candidate, the AuditBuilder, takes an unhealthy number of dependencies that (in turn) take an unhealthy number of dependencies that you almost certainly want to supply from an IoC container. <p /> <script src="https://gist.github.com/4533554.js"></script><p /> What does it do? Well, basically if any bound function throws it logs the error via log4net and our in house audit server and then returns None. Otherwise it returns Some result from the computation. Obviously, if a computation further up the chain has already thrown we already have a None and we just pass it along. TryFinally and Using are implemented to make sure that you can still use disposable resources as you would expect within the expression. <p /> Our second candidate is the TestErrorBuilder: <p /> <script src="https://gist.github.com/4533560.js"></script><p /> This is almost identical to the implementation above, except that it takes no dependencies at all and if there is an error it just logs to the console via printfn. Very useful for debugging - you might even want a unit test version that logs nothing, depending on your unit tests. <p /> And now, our preparation is complete. How do we use our new toy, you ask? <p /> Something like this: <p /> <script src="https://gist.github.com/4533619.js"></script><p /> This little service persists interesting email messages to a document store, and sends the contents back to you when you request them. If an email is not persisted, or a request for an email fails, we want a remote alert to be triggered in production. Both the persist and content requests are handled as RabbitMq messages (using the EasyNetQ client). <p /> So in the message handler callbacks, declare an audit { } block and let! bind our message. Then we simply pass that bound message on to a handling function or object and return the resulting value, safe in the knowledge that our hosting program will have supplied an appropriate IErrorHandlerBuilder for our current purposes. The beauty of all of this is that the service object does not need to know what the error handling strategy is, and the objects/functions doing the work do not need to worry about error handling at all. <p /> This technique is especially useful in situations where you are making use of asynchronous programming techniques such as agents and you really don&#8217;t want a single failure taking out your whole agent or async expression. If for some reason it&#8217;s important to your code what the error is, as well as knowing it&#8217;s been handled, it would be easy to modify this technique to return a Choice or custom MaybeError discriminated union that you could pull the exception out of later. <p /> It would also be helpful for managing things like SQL connections with multiple retry attempts: for testing you may not want that kind of complexity and you could pass in a simpler strategy builder, while testing your robust, multiple retry computational builder for use in actual deployed environments (test or production). <p /> And, of course, just knowing that builder interfaces are possible raises up a whole new world of possibilities. <p /> As always, I tend to write about stuff that is fresh and new to me (i.e. not fully considered and maybe fatally flawed). Comments and suggestions welcome. <p /> * To avoid any confusion, I should note that the word audit is used loosely in this blog post, with a meaning more related to a namespace within our code than the normal meaning of the word &#8216;audit&#8217;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Fake - an introduction]]></title>
    <link href="http://blog.mavnn.co.uk/getting-started-with-fake-an-introduction-tag/index.html"/>
    <updated>2013-01-09T00:00:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/getting-started-with-fake-an-introduction-tag/getting-started-with-fake-an-introduction-tag</id>
    <content type="html"><![CDATA[<blockquote><p>This is the first post in what will be a series about how we moved to
using <a href="https://github.com/fsharp/FAKE">Fake</a> for our build and testing
at <a href="http://15below.com">15below</a>. Feel free to follow along for the
ride. It&rsquo;s partly there as a way of keeping the full development group
within the company informed of what&rsquo;s going on, so it will get pretty
detailed and gritty in the later sections, but we decided that there
wasn&rsquo;t anything too company specific in here. So we&rsquo;re sharing it with
you all&hellip;</p></blockquote>

<p>At my current employer, we have a wide range of code all the way from
automatically translated vb6 (to vb.net) to brand spanking new F# and
C#. At the end of the day though, everything runs on .net 4.0
(currently).</p>

<p>With the newer components, we could in theory be building and testing
them independently: messaging based and developed in a TDD style they
tend to have an existing test harness around them and be easy to add
further tests to if it proves necessary.</p>

<p>The legacy code on the other hand, is a bit of a different matter.
It&rsquo;s still in the code base because it works. We know it works,
because customers are using it and getting value from it. The bits
that didn&rsquo;t, or looked like they were getting flaky, are the bits that
have been refactored as we went along. But they are old enough that
what is now considered basic testing hygiene was still a little more
than a twinkle in Kent Beck&rsquo;s eye. (Ok, ok, so the book had been
released. But it wasn&rsquo;t exactly considered common best practice yet).
So until the refactoring work is complete, we&rsquo;re stuck with a system
where the only feasible way of testing some aspects of it is to
actually deploy it somewhere and run some jobs through.</p>

<p>So what does this all have to do with Fake?</p>

<p>Well, basically our continuous integration was getting out of control.
To get the level of functionality and control we needed, we were
ending up with somewhere in the region of 500 lines of re-entrant,
recursive MsBuild scripts. I seriously considered starting the
alt.ms.build.die.die.die newsgroup. A full build on a developer&rsquo;s
machine could take upwards of 45 minutes. Even more painfully, as the
refactoring continued we ended up with TeamCity build configurations
tightly coupled to specific versions of our software, and it was
becoming clear that the whole CI system was going to rapidly collapse
under it&rsquo;s own weight unless things changed.</p>

<p>We needed a solution.</p>

<p>It had to be:</p>

<ul>
<li>Powerful. Programming in MsBuild is&hellip; not fun. Xml is for data.</li>
<li>Storable in git along with our source code.</li>
<li>.net based. We&rsquo;re a .net shop, and our specialist knowledge is .net;
rake wasn&rsquo;t going to cut it. We also didn&rsquo;t want the management
overhead of even more tooling on the build agents.</li>
<li>In active development.</li>
<li>Preferably open source, so even if external development stopped we
could continue to maintain it.</li>
</ul>


<p>As both the company F# evangelist and one of the two people doing most
of the CI work, I was very interested to hear about Fake, especially
after having a chance to chat to it&rsquo;s author (<a href="https://twitter.com/sforkmann">Steffen
Forkmann</a>) and having it recommended by
Don Syme (who wrote F#).</p>

<p>It met all of the criteria above. It&rsquo;s scripts are full F# &ndash; a
language fully supported by Microsoft within it&rsquo;s flagship Visual
Studio product. The scripts can easily be stored in git. It&rsquo;s actively
being worked on, and accepting contributions as a fully open source
product.</p>

<p>Time to give it a try.</p>

<p>Next post: how to set up your &ldquo;HelloWorld.fsx&rdquo; Fake script with your
source, with all the niceties like intellisense that you would want.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[St. Lambda and the T-shirt of Extra Geek]]></title>
    <link href="http://blog.mavnn.co.uk/st-lambda-and-the-t-shirt-of-extra-geek/index.html"/>
    <updated>2013-01-04T00:00:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/st-lambda-and-the-t-shirt-of-extra-geek/st-lambda-and-the-t-shirt-of-extra-geek</id>
    <content type="html"><![CDATA[<p>Possibly my geekiest self Birthday present ever: the #NOOO! manifesto (<a href="http://notonlyoo.org">http://notonlyoo.org</a>) t-shirt, personalized with membership number (and a !).</p> <p>I&#39;m not exactly a fashion model, but I was asked for pictures, so there you go. My wife also appears to have decided I needed to be backlit for the St. Lambda effect&#8230;</p> <p>Given the nature of the manifesto (&#39;Options over nulls&#39;) I was especially amused to see note the fact that whatever software they&#39;re using for the packing skips handles blank lines incorrectly and print &#39;null&#39; instead. Check the back text confirmation in the third picture.</p> <p><img src="http://blog.mavnn.co.uk/images/IMAG0232-1.jpg" alt="St. Lambda and the T-shirt of Extra Geek" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dealing with grief]]></title>
    <link href="http://blog.mavnn.co.uk/losing-an-unborn-child/index.html"/>
    <updated>2012-12-23T00:00:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/losing-an-unborn-child/losing-an-unborn-child</id>
    <content type="html"><![CDATA[<div>About 2 weeks ago, our unborn child died. We found out on Thursday (20/12/2012).</div>
<p />
<div>I&#8217;ve written this as a blog post: I&#8217;m not sure why, as I&#8217;m not sure that I&#8217;ll ever publish it. But if I do, and you&#8217;re normally here to read the technobabble, and you don&#8217;t care about the emotional stuff, the sentence above is probably all you need to know. One of the reasons this might get published is that I really don&#8217;t want to have to tell everyone about it in person.</div>
<p />
<div>As of Thursday morning, all seemed to be going well with the pregnancy. &nbsp;That morning was the primary school play; the afternoon was the midwife &#8216;just in case&#8217; check.</div>
<p />
<div>Roll back one: there is a medical history here that meant this was considered a high risk pregnancy. Hence the regular checks. &nbsp;</div>
<p />
<div>School finished at lunch for the last day before the Christmas break, and we were out of the &#8216;danger zone&#8217; first 12 weeks, so older brother went along with Mamma to hear the heart beat. There wasn&#8217;t one. I&#8217;m working from home, and it&#8217;s nearly dinner time, so we grab some food and all 3 of us go to the hospital. There&#8217;s no one who can provide child care on such short notice even if we want it, and there is absolutely zero chance I&#8217;m sending my wife on her own.</div>
<p />
<div>Roll back two: we already knew that at this point (~15 weeks into the pregnancy) it&#8217;s not always possible to hear the heart beat with the equipment available to the midwife. But she had managed to hear the heartbeat 2 weeks earlier. So I&#8217;m worried, but still hoping that this is hassle rather than something actually having gone wrong.</div>
<p />
<div>Aside: Maternity triage is a strange place, directly attached to the maternity ward. So you sit and wait (not a massive amount of time in the grand scheme of things) watching the really heavily pregnant people right at the end of the process go past. This is a strange, and not especially comforting experience. For bonus points I suspect a lot of the people who&#8217;s pregnancies have gone smoothly don&#8217;t even know what the triage area is. You get some strange looks sitting there with someone who obviously isn&#8217;t ready to give birth; as if as a man you need the reason to be there of someone giving birth or else you&#8217;re some kind of weird alien invader into the space.</div>
<p />
<div>The doctor who saw us was thorough, sympathetic and direct. It&#8217;s pretty obvious from the ultra sound that things are not good; even as a layman I&#8217;ve seen enough scans that it&#8217;s immediately apparent the baby isn&#8217;t alive. The only thing the doctor can add is that it isn&#8217;t recent; there are signs that I wouldn&#8217;t have spotted that the baby had been dead for some time.</div>
<p />
<div>&#8212;&#8212;&#8212;&#8212;</div>
<p />
<div>We spent Friday in hospital dealing with the medical side of the process which was harrowing but complete. My wife&#8217;s physical health is fine apart from tiredness and soreness that seem to be steadily returning to normal. My family and my work were both fantastic: I work in the same office as my brother at the moment, and they had no problem with both of us just disappearing. He stayed with our son (along with my parents and niece for a good chunk of the day) while we were at hospital. I&#8217;m amazingly grateful for the flexibility and availability of people: it was brought home to me even further when my Dad at one point, as an aside, checked if I&#8217;d been able to get time off to be at the hospital and I realised that when my parents went through a very similar experience in the 70s that probably was not a given.</div>
<p />
<div>So&#8230; physically that&#8217;s it. Done. Of course, in reality, it&#8217;s not that simple. &nbsp;When my grandfather passed away, I learnt something pretty important about myself, that has stayed with me ever since: I can freely mix joy and sorrow in life in ways that most people seem to find hard, or even distasteful. I&#8217;m not sure if this is a gift, or a minor insanity, but it&#8217;s definitely very helpful as life doesn&#8217;t tend to come in nice discriminated good and bad packages. So here I am, in mourning while celebrating advent. Frequently in tears (lesson number 2 from grandfather passing away: I realised I needed to learn to cry. It took a long time to learn), yet genuinely looking forward to going to the candle lit carols with the family. Feeling the heart ache of this person I&#8217;ll never know while checking out my son&#8217;s Christmas present that just arrived in the post. &nbsp;Wondering how I&#8217;m ever going to put this stuff into words, whilst making fun of myself across the internet as I try to drink my espresso with salt instead of sugar (by mistake, obviously&#8230;). &nbsp;And it&#8217;s hard, because it&#8217;s all real; but it doesn&#8217;t feel it. In the same way that when you find out that there&#8217;s a child on the way, there&#8217;s always a bit of a feel of unreality to it (you don&#8217;t know what they&#8217;re going to be like, there&#8217;s no signs of the pregnancy yet, etc), when you find out that they&#8217;re not on the way that feels pretty unreal too. &nbsp;Except that it&#8217;s not: they&#8217;re really gone, and we really got to see them, and when the sadness comes it&#8217;s not unreal at all.</div>
<p />
<div>It&#8217;s a mix of bereavement and the opportunity not taken. The sadness of a missing loved one mixed with the &#8216;what if&#8217; of not pushing the open door. Because however much you know there&#8217;s nothing that you could have done, this is still someone you were the guardian of. Even if you couldn&#8217;t guard them yet: I don&#8217;t feel guilt, as if I should have saved them. But it does feel as if&#8230; something. &nbsp;As if there should have been an option I could have taken to protect them. I&#8217;m at peace that there wasn&#8217;t: but not that there shouldn&#8217;t have been. &nbsp;And there&#8217;s a whole medley of other things flying around as well: how awesome my immediate family have been, with my 5 year old doing everything he knows how to offer support and be as considerate as he knows how. My incredible wife, who somehow impossibly has managed to let herself start grieving without falling apart. My family who have stepped in and mostly just been available, and just done what we asked without trying to &#8216;save the day&#8217; or take over.</div>
<p />
<div>And a special shout out to the new church. They have been wonderful as a safe place, and a comfort and a source of peace. No one&#8217;s tried to fix it, or tell us it&#8217;s all ok. No one has tried to step in and be the hero. &nbsp;But they&#8217;ve been with us, and prayed with us. They dropped off flowers at the flat while we were still at the hospital. They took me off the rota I was due to be on for Sunday before I had to ask (I didn&#8217;t get the message in time so asked anyway, but hey ho!). &nbsp;They came and *actually spoke to us* about things. No prying, no pushing just the honest &#8220;how are you doing?&#8221; that actually expects an answer. With discretion, and care, but they made sure that as many people as possible who had known we were expecting knew the news without us having to go to everyone and tell them. And they came to both of us, not just my wife; just to make sure that I wasn&#8217;t being ignored just because I&#8217;m &#8216;the man&#8217;.</div>
<p />
<div>Two things in particular I&#8217;ll treasure for a long time out of all of this. One is my wife saying on the way to church that after the service she was going to seek out two particular ladies and ask them to pray with and support her: and at the end of the service the two of them being there before she had a chance to stand up. &nbsp;And the pastor, who had been ill in the morning and so hadn&#8217;t heard the news. We saw him before the evening carols, and he asked my wife how things were going. &nbsp;She told him, and with the service about to start, and about 400 people waiting for him he just stopped, grabbed us in a hug and cried (while praying for us). It was, I think, the single most therapeutic thing anyone has ever done for me.</div>
<p />
<div>So I cry, and smile. And I mean them both.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anyone Using FsCheck for Business Code?]]></title>
    <link href="http://blog.mavnn.co.uk/anyone-using-fscheck-for-business-code/index.html"/>
    <updated>2012-12-13T00:00:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/anyone-using-fscheck-for-business-code/anyone-using-fscheck-for-business-code</id>
    <content type="html"><![CDATA[<p>Libraries like FsCheck ( <a href="http://fscheck.codeplex.com/">http://fscheck.codeplex.com/</a> ) and  Pex always capture my imagination as fantastically clever and potentially useful tools. Along with things like strong type systems and code contacts they especially appeal to my long buried mathematical background.</p> <p>Unfortunately, and probably because of said mathematical background, I sometimes struggle to think of ways to use them outside of maths and science problems. If I&#39;m working on a maths library or I decide I want to write a sorting algorithm, trivially easy sanity checks of things like whether a function is cummutative or associative are immediately useful.</p> <p>If I&#39;m writing a service that polls an email address for bounced emails and out of office replies&#8230; I don&#39;t know. It feels like there should be things they can help me with: after all, over the years I&#39;ve decided the strong type system is helpful even for this side of things, so surely the QuickCheck/proof side of things should be to. But the amount of work it requires to set up the test generators for complex data types (and then trying to formalize the acceptance criteria without just writing the actual implementation!) feels so large compared to the size of the project that I can never justify the time to actually use the tools.</p> <p>So I&#39;m left wondering: am I missing something? Is there a whole new level of treating ease and vigour I&#39;m missing out on just because I don&#39;t have the imagination and experience to make good use of the tools right there in front of me? </p> <p>Or are these tools only really useful in their own narrow field? </p> <p>I suspect the middle ground; for the moment ideas are avoiding me in droves. Any good open source examples out there of these tools in use for the kind of &#39;business&#39; code that most of us spend most of our time writing? </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strange errors from the F# compiler]]></title>
    <link href="http://blog.mavnn.co.uk/strange-errors-from-the-f-compiler/index.html"/>
    <updated>2012-11-23T00:00:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/strange-errors-from-the-f-compiler/strange-errors-from-the-f-compiler</id>
    <content type="html"><![CDATA[I found a new error, yesterday:<p /><div>    <i class="" style="font-style: normal; background-color: rgb(245,245,245); font-family: Menlo,Bitstream Vera Sans Mono,Courier New,Courier,monospace; font-size: 12px; line-height: 16.78333282470703px; color: rgb(196,112,3);">error FS0192: internal error: null: GetTRefType</i></div> <p /><div>It showed up when I tried to run a .fsx script that referenced NuGet.Core 2.1.0, but only when the script was run on Windows Server 2008 R2. Windows 7 x64? No problems. Windows Server 2003/8 x86? No problems.<br /> </div><p /><div>2008 R2? Bam. Every time.</div><p /><div>A bit of trial of error discovered two things:</div><p /><div>The error went away if I referenced NuGet.Core 2.2.0 alpha 4<br /></div><p /><div>And the minimal error case is pretty minimal:</div><p /><div><script src="https://gist.github.com/4136322.js"></script></div><p /><div>Looking at the NuGet.Core source ( <a href="http://nuget.codeplex.com/SourceControl/changeset/view/5b6d7e16b19c#src%2fCore%2fSemanticVersion.cs">http://nuget.codeplex.com/SourceControl/changeset/view/5b6d7e16b19c#src%2fCore%2fSemanticVersion.cs</a> ) the only thing that might be a relevant change that I can see is a simplification of some custom GetHashCode logic.</div> <p /><div>Raising the interesting question of why there is custom GetHashCode logic in the first place, and how the heck did they get it to cause internal F# compiler errors anyway? And why did it only fail on that one specific version of Windows?</div> <p /><div>All very strange. Hopefully 2.2.0 will be a full release before we want to start using this technique for in our production code! </div>
]]></content>
  </entry>
  
</feed>
