<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mavnn's blog]]></title>
  <link href="https://blog.mavnn.co.uk/atom.xml" rel="self"/>
  <link href="https://blog.mavnn.co.uk/"/>
  <updated>2017-12-04T15:17:56+00:00</updated>
  <id>https://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Going Down the Property Based Testing Rabbit Hole]]></title>
    <link href="https://blog.mavnn.co.uk/going-down-the-property-based-testing-rabbit-hole/"/>
    <updated>2017-11-10T15:28:47+00:00</updated>
    <id>https://blog.mavnn.co.uk/going-down-the-property-based-testing-rabbit-hole</id>
    <content type="html"><![CDATA[<p>Image, if you will, a card game.</p>

<p>(Don&#39;t worry, there&#39;s code later. Lots of code.)</p>

<p>It&#39;s not a complex card game; it&#39;s a quick and fun game designed to represent over the top martial arts combat in the style of Hong Kong cinema or a beat &#39;em up game.</p>

<p>Each player has a deck of cards which represent their martial art; different arts are differently weighted in their card distribution. These cards come in four main types:</p>

<h3>1 Normal cards</h3>

<p>A &quot;normal&quot; card comes in one of four suits:</p>

<ul>
<li>Punch</li>
<li>Kick</li>
<li>Throw</li>
<li>Defend</li>
</ul>

<p>They also carry a numerical value between 1 and 10, which represents both how &quot;fast&quot; they are and (except for defend cards) how much damage they do. A Defend card can never determine damage.</p>

<h3>2 Special Attack cards</h3>

<p>The fireballs, whirling hurricane kicks and mighty mega throws of the game. A special attack card lists two suits: one to use for the speed of the final attack, and one for the damage. This allows you to play 3 cards together to create an attack which is fast yet damaging.</p>

<h3>3 Combo Attack cards</h3>

<p>A flurry of blows! Combo cards also list two suits: one for speed, and one for the &quot;follow up&quot; flurry. This allows you to play 3 cards together, one of which determines the speed of the attack while the other adds to the total damage. For example, if you play a Punch/Kick Combo with a Punch 3 and a Kick 7 you end up with a speed 3, damage 10 attack.</p>

<h3>4 Knockdown cards</h3>

<p>You can combine a knockdown card with any other valid play to create an action that will &quot;knockdown&quot; your opponent.</p>

<h2>The code</h2>

<p>(This is an <em>example</em> of property based testing; if you need an <em>introduction</em> first, check out <a href="https://blog.mavnn.co.uk/fscheck-breaking-your-code-in-new-and-exciting-ways/">Breaking Your Code in New and Exciting Ways</a> or the <a href="https://blog.mavnn.co.uk/sdd-conf-2015/">the video version</a>)</p>

<p>There are of course other rules to the game; but let&#39;s assume for a moment we&#39;re coding this game up in F#. We&#39;ve defined a nice domain model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">BlackBelt</span><span class="p">.</span><span class="nn">Domain</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Suit</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Punch</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Kick</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Throw</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Defend</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">NormalCard</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Suit</span> <span class="o">:</span> <span class="nc">Suit</span>
</span><span class='line'>      <span class="nc">Value</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ComboCard</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">SpeedSuit</span> <span class="o">:</span> <span class="nc">Suit</span>
</span><span class='line'>      <span class="nc">FollowUpSuit</span> <span class="o">:</span> <span class="nc">Suit</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">SpecialAttackCard</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">SpeedSuit</span> <span class="o">:</span> <span class="nc">Suit</span>
</span><span class='line'>      <span class="nc">DamageSuit</span> <span class="o">:</span> <span class="nc">Suit</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Card</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Normal</span> <span class="k">of</span> <span class="nc">NormalCard</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Combo</span> <span class="k">of</span> <span class="nc">ComboCard</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Special</span> <span class="k">of</span> <span class="nc">SpecialAttackCard</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Knockdown</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Action</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Speed</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">Damage</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">Suit</span> <span class="o">:</span> <span class="nc">Suit</span>
</span><span class='line'>      <span class="nc">Knockdown</span> <span class="o">:</span> <span class="kt">bool</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">PlayerId</span> <span class="o">=</span> <span class="nc">PlayerId</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Player</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Name</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nc">Id</span> <span class="o">:</span> <span class="nc">PlayerId</span>
</span><span class='line'>      <span class="nc">Deck</span> <span class="o">:</span> <span class="nc">Card</span> <span class="kt">list</span>
</span><span class='line'>      <span class="nc">Stance</span> <span class="o">:</span> <span class="nc">Card</span> <span class="kt">list</span>
</span><span class='line'>      <span class="nc">Health</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">WaitingFor</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Attack</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Counter</span> <span class="k">of</span> <span class="nc">PlayerId</span> <span class="o">*</span> <span class="nc">Action</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">StanceCard</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Game</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">GameId</span> <span class="o">:</span> <span class="nc">Guid</span>
</span><span class='line'>      <span class="nc">Player1</span> <span class="o">:</span> <span class="nc">Player</span>
</span><span class='line'>      <span class="nc">Player2</span> <span class="o">:</span> <span class="nc">Player</span>
</span><span class='line'>      <span class="nc">TurnOf</span> <span class="o">:</span> <span class="nc">PlayerId</span>
</span><span class='line'>      <span class="nc">WaitingFor</span> <span class="o">:</span> <span class="nc">WaitingFor</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And now we want to write a function that takes the rules for playing cards above, and turns a <code>Card list</code> into an <code>Action option</code> (telling you if the list is a valid play, and what action will result if it is).</p>

<p>This function is pretty critical to the overall game play, and may well also be used for validating input in the UI so getting it right will make a big difference to the experience of playing the game.</p>

<p>So we&#39;re going to property test our implementation in every which way we can think of&#8230;</p>

<p>First step: make yourself a placeholder version of the function to reference in your tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">BlackBelt</span><span class="p">.</span><span class="nn">Domain</span><span class="p">.</span><span class="nc">Logic</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">toAction</span> <span class="n">cards</span> <span class="o">=</span> <span class="nc">None</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, let&#39;s start adding properties. All of the rest goes in a single file, but I&#39;m going to split it up with some commentary as we go.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">BlackBelt</span><span class="p">.</span><span class="nn">Tests</span><span class="p">.</span><span class="nc">Logic</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">Expecto</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Expecto</span><span class="p">.</span><span class="nc">ExpectoFsCheck</span>
</span><span class='line'><span class="k">open</span> <span class="nc">FsCheck</span>
</span><span class='line'><span class="k">open</span> <span class="nn">BlackBelt</span><span class="p">.</span><span class="nn">Domain</span><span class="p">.</span><span class="nc">Logic</span>
</span><span class='line'><span class="k">open</span> <span class="nn">BlackBelt</span><span class="p">.</span><span class="nn">Domain</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">allSuitsBut</span> <span class="n">suit</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">[</span><span class="nc">Punch</span><span class="o">;</span><span class="nc">Kick</span><span class="o">;</span><span class="nc">Throw</span><span class="o">;</span><span class="nc">Defend</span><span class="o">]</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="o">((&lt;&gt;)</span> <span class="n">suit</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">elements</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We need a custom generator here as only some</span>
</span><span class='line'><span class="c1">// values are valid</span>
</span><span class='line'><span class="k">type</span> <span class="nc">DomainArbs</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">NormalCard</span><span class="bp">()</span> <span class="o">:</span> <span class="nc">Arbitrary</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">suit</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">Suit</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">value</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>                <span class="o">{</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">suit</span>
</span><span class='line'>                  <span class="nc">Value</span> <span class="o">=</span> <span class="n">value</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">fromGen</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">SpecialAttackCard</span><span class="bp">()</span> <span class="o">:</span> <span class="nc">Arbitrary</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">damageSuit</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="nc">Defend</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">speedSuit</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">Suit</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>                <span class="o">{</span> <span class="nc">SpeedSuit</span> <span class="o">=</span> <span class="n">speedSuit</span>
</span><span class='line'>                  <span class="nc">DamageSuit</span> <span class="o">=</span> <span class="n">damageSuit</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">fromGen</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">ComboCard</span><span class="bp">()</span> <span class="o">:</span> <span class="nc">Arbitrary</span><span class="o">&lt;</span><span class="nc">ComboCard</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">speedSuit</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="nc">Defend</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">followupSuit</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="nc">Defend</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>                <span class="o">{</span> <span class="nc">SpeedSuit</span> <span class="o">=</span> <span class="n">speedSuit</span>
</span><span class='line'>                  <span class="nc">FollowUpSuit</span> <span class="o">=</span> <span class="n">followupSuit</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">fromGen</span>
</span></code></pre></td></tr></table></div></figure>

<p>We&#39;ll start off with a few general purpose bits for generating random types in our domain. I haven&#39;t gone the whole hog in making illegal states unrepresentable here, so we need to constrain a few things (like the fact that cards only have values from 1 to 10, and that you can&#39;t combo into a defend card for extra damage).</p>

<p>Now: let&#39;s start generating potential plays of cards. Our properties will be interested in whether a particular play is valid or invalid, and we will want to know what the resulting <code>Action</code> should be for valid plays.</p>

<p>So we define a union to create instances of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">GeneratedAction</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ValidAction</span> <span class="k">of</span> <span class="nc">Card</span> <span class="kt">list</span> <span class="o">*</span> <span class="nc">Action</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">InvalidAction</span> <span class="k">of</span> <span class="nc">Card</span> <span class="kt">list</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now let&#39;s add all of the valid actions we can think of.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeNormalAction</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">cards</span> <span class="o">=</span> <span class="o">[</span><span class="nc">Normal</span> <span class="n">normal</span><span class="o">]</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">{</span> <span class="nc">Speed</span> <span class="o">=</span> <span class="n">normal</span><span class="o">.</span><span class="nc">Value</span>
</span><span class='line'>              <span class="nc">Damage</span> <span class="o">=</span>
</span><span class='line'>                  <span class="k">if</span> <span class="n">normal</span><span class="o">.</span><span class="nc">Suit</span> <span class="o">=</span> <span class="nc">Defend</span> <span class="k">then</span>
</span><span class='line'>                      <span class="mi">0</span>
</span><span class='line'>                  <span class="k">else</span>
</span><span class='line'>                      <span class="n">normal</span><span class="o">.</span><span class="nc">Value</span>
</span><span class='line'>              <span class="nc">Suit</span> <span class="o">=</span> <span class="n">normal</span><span class="o">.</span><span class="nc">Suit</span>
</span><span class='line'>              <span class="nc">Knockdown</span> <span class="o">=</span> <span class="bp">false</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cards</span><span class="o">,</span> <span class="n">action</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>So; a normal card on it&#39;s own is always a valid play, the only thing we need to watch out for is that a Defend card causes no damage.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeComboAttack</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">comboCard</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">ComboCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal1</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal2</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">cards</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">[</span> <span class="nc">Normal</span> <span class="o">{</span> <span class="n">normal1</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">comboCard</span><span class="o">.</span><span class="nc">SpeedSuit</span> <span class="o">}</span>
</span><span class='line'>              <span class="nc">Normal</span> <span class="o">{</span> <span class="n">normal2</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">comboCard</span><span class="o">.</span><span class="nc">FollowUpSuit</span> <span class="o">}</span>
</span><span class='line'>              <span class="nc">Combo</span> <span class="n">comboCard</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">attack</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">{</span> <span class="nc">Speed</span> <span class="o">=</span>
</span><span class='line'>                  <span class="k">if</span> <span class="n">comboCard</span><span class="o">.</span><span class="nc">SpeedSuit</span> <span class="o">=</span> <span class="n">comboCard</span><span class="o">.</span><span class="nc">FollowUpSuit</span> <span class="k">then</span>
</span><span class='line'>                      <span class="n">min</span> <span class="n">normal1</span><span class="o">.</span><span class="nc">Value</span> <span class="n">normal2</span><span class="o">.</span><span class="nc">Value</span>
</span><span class='line'>                  <span class="k">else</span>
</span><span class='line'>                      <span class="n">normal1</span><span class="o">.</span><span class="nc">Value</span>
</span><span class='line'>              <span class="nc">Damage</span> <span class="o">=</span> <span class="n">normal1</span><span class="o">.</span><span class="nc">Value</span> <span class="o">+</span> <span class="n">normal2</span><span class="o">.</span><span class="nc">Value</span>
</span><span class='line'>              <span class="nc">Suit</span> <span class="o">=</span> <span class="n">comboCard</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>              <span class="nc">Knockdown</span> <span class="o">=</span> <span class="bp">false</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cards</span><span class="o">,</span> <span class="n">attack</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here we&#39;ll generate the combo card and two other cards, and then we&#39;ll override the suit of the two normal cards to ensure they&#39;re legal to be played with the combo card.</p>

<p>There&#39;s a quirk here (which in reality I noticed after trying to run these tests). If the two suits are the same, the fast card should determine the speed regardless of &quot;order&quot;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeSpecialAttack</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">specialCard</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">damageValue</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">speedValue</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">damageValue</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">cards</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">[</span> <span class="nc">Normal</span> <span class="o">{</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">SpeedSuit</span><span class="o">;</span> <span class="nc">Value</span> <span class="o">=</span> <span class="n">speedValue</span> <span class="o">}</span>
</span><span class='line'>              <span class="nc">Normal</span> <span class="o">{</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">DamageSuit</span><span class="o">;</span> <span class="nc">Value</span> <span class="o">=</span> <span class="n">damageValue</span> <span class="o">}</span>
</span><span class='line'>              <span class="nc">Special</span> <span class="n">specialCard</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">attack</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">{</span> <span class="nc">Speed</span> <span class="o">=</span> <span class="n">speedValue</span>
</span><span class='line'>              <span class="nc">Damage</span> <span class="o">=</span> <span class="n">damageValue</span>
</span><span class='line'>              <span class="nc">Suit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>              <span class="nc">Knockdown</span> <span class="o">=</span> <span class="bp">false</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cards</span><span class="o">,</span> <span class="n">attack</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Special attack cards have an additional constraint: playing a high value speed card with a low value damage card would actually <em>disadvantage</em> the player, and so is not considered a valid play.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeKnockdownAttack</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">cards</span><span class="o">,</span> <span class="n">baseAttack</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">Gen</span><span class="p">.</span><span class="n">oneof</span> <span class="o">[</span> <span class="n">makeNormalAction</span>
</span><span class='line'>                        <span class="n">makeComboAttack</span>
</span><span class='line'>                        <span class="n">makeSpecialAttack</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">cards</span> <span class="o">=</span> <span class="nc">Knockdown</span><span class="o">::</span><span class="n">cards</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">attack</span> <span class="o">=</span> <span class="o">{</span> <span class="n">baseAttack</span> <span class="k">with</span> <span class="nc">Knockdown</span> <span class="o">=</span> <span class="bp">true</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cards</span><span class="o">,</span> <span class="n">attack</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here we make use of the generators we&#39;ve constructed above to create a Knockdown action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeValidAction</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">validAction</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">Gen</span><span class="p">.</span><span class="n">oneof</span> <span class="o">[</span> <span class="n">makeNormalAction</span>
</span><span class='line'>                        <span class="n">makeComboAttack</span>
</span><span class='line'>                        <span class="n">makeSpecialAttack</span>
</span><span class='line'>                        <span class="n">makeKnockdownAttack</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="nc">ValidAction</span> <span class="n">validAction</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Which allows us to write a <code>ValidAction</code> generator.</p>

<p>Now, more interesting is trying to generate plays which are not valid. We&#39;re not trusting the UI to do any validation here, so let&#39;s just come up with everything we can think of&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">multipleNormal</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">let</span><span class="o">!</span> <span class="n">first</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">let</span><span class="o">!</span> <span class="n">normals</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">nonEmptyListOf</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">first</span><span class="o">::</span><span class="n">normals</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="nc">Normal</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>More than one normal card with out another card to combine them is out.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">incompleteComboOrSpecial</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">special</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">Gen</span><span class="p">.</span><span class="n">oneof</span> <span class="o">[</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">map</span> <span class="nc">Combo</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">ComboCard</span><span class="o">&gt;</span>
</span><span class='line'>                        <span class="nn">Gen</span><span class="p">.</span><span class="n">map</span> <span class="nc">Special</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">other</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">[</span><span class="n">special</span><span class="o">;</span> <span class="n">other</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>A combo or special card always requires precisely two normal cards to be a valid play; so here, we only generate one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">onlyKnockdown</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Gen</span><span class="p">.</span><span class="n">constant</span> <span class="o">[</span><span class="nc">Knockdown</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>A combo card can only be played as part of an otherwise valid play, and isn&#39;t allowed on it&#39;s own.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">unmatchedSpeedCombo</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">combo</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">ComboCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal1</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal2</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched1</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">combo</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched2</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">combo</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n1</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal1</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched1</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n2</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal2</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched2</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">[</span><span class="nc">Combo</span> <span class="n">combo</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n1</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n2</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">unmatchedSpeedSpecial</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">special</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal1</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal2</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched1</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">special</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched2</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">special</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n1</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal1</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched1</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n2</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal2</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched2</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">[</span><span class="nc">Special</span> <span class="n">special</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n1</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n2</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">unmatchedDamageCombo</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">combo</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">ComboCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal1</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal2</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched1</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">combo</span><span class="o">.</span><span class="nc">FollowUpSuit</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched2</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">combo</span><span class="o">.</span><span class="nc">FollowUpSuit</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n1</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal1</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched1</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n2</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal2</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched2</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">[</span><span class="nc">Combo</span> <span class="n">combo</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n1</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n2</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">unmatchedDamageSpecial</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">special</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal1</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal2</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched1</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">special</span><span class="o">.</span><span class="nc">DamageSuit</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched2</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">special</span><span class="o">.</span><span class="nc">DamageSuit</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n1</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal1</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched1</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n2</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal2</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched2</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">[</span><span class="nc">Special</span> <span class="n">special</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n1</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n2</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>There&#39;s lots of ways to combine three cards which are not valid combos or specials. Here we use are <code>allSuitsBut</code> helper function to always play just the wrong cards compared to what&#39;s needed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">swappedSpecial</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">specialCard</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">SpeedSuit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">DamageSuit</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">[</span><span class="nc">Special</span> <span class="n">specialCard</span><span class="o">]</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">speedValue</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">damageValue</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">speedValue</span><span class="o">)</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">cards</span> <span class="o">=</span>
</span><span class='line'>                <span class="o">[</span> <span class="nc">Normal</span> <span class="o">{</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">SpeedSuit</span><span class="o">;</span> <span class="nc">Value</span> <span class="o">=</span> <span class="n">speedValue</span> <span class="o">}</span>
</span><span class='line'>                  <span class="nc">Normal</span> <span class="o">{</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">DamageSuit</span><span class="o">;</span> <span class="nc">Value</span> <span class="o">=</span> <span class="n">damageValue</span> <span class="o">}</span>
</span><span class='line'>                  <span class="nc">Special</span> <span class="n">specialCard</span> <span class="o">]</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">cards</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And here we create special attacks which are slower than they are damaging. If the speed and damage suit are the same, the cards could be used either way around to create a valid action, so instead we just return the Special card on it&#39;s own without companions to form a different invalid play.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeInvalidAction</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">invalidAction</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">Gen</span><span class="p">.</span><span class="n">oneof</span> <span class="o">[</span> <span class="n">multipleNormal</span>
</span><span class='line'>                        <span class="n">incompleteComboOrSpecial</span>
</span><span class='line'>                        <span class="n">onlyKnockdown</span>
</span><span class='line'>                        <span class="n">unmatchedSpeedCombo</span>
</span><span class='line'>                        <span class="n">unmatchedSpeedSpecial</span>
</span><span class='line'>                        <span class="n">unmatchedDamageCombo</span>
</span><span class='line'>                        <span class="n">unmatchedDamageSpecial</span>
</span><span class='line'>                        <span class="n">swappedSpecial</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="nc">InvalidAction</span> <span class="n">invalidAction</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>There&#39;s more that could be added here, but I decided that was enough to keep me going for the moment and so added my invalid action generator here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">ActionArbs</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">GeneratedAction</span><span class="bp">()</span> <span class="o">:</span> <span class="nc">Arbitrary</span><span class="o">&lt;</span><span class="nc">GeneratedAction</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span><span class="o">!</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">oneof</span> <span class="o">[</span>
</span><span class='line'>                        <span class="n">makeValidAction</span>
</span><span class='line'>                        <span class="n">makeInvalidAction</span>
</span><span class='line'>                    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">fromGen</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">actionConfig</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nn">FsCheckConfig</span><span class="p">.</span><span class="n">defaultConfig</span> <span class="k">with</span>
</span><span class='line'>        <span class="n">arbitrary</span> <span class="o">=</span> <span class="o">[</span><span class="n">typeof</span><span class="o">&lt;</span><span class="nc">DomainArbs</span><span class="o">&gt;</span>
</span><span class='line'>                     <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">ActionArbs</span><span class="o">&gt;]</span> <span class="o">}</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Tests</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="n">toAction</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">testPropertyWithConfig</span> <span class="n">actionConfig</span> <span class="s2">&quot;toAction function&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="n">action</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">action</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">ValidAction</span> <span class="o">(</span><span class="n">cards</span><span class="o">,</span> <span class="n">action</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(</span><span class="n">toAction</span> <span class="n">cards</span><span class="o">)</span> <span class="o">(</span><span class="nc">Some</span> <span class="n">action</span><span class="o">)</span> <span class="s2">&quot;Is an action&quot;</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">InvalidAction</span> <span class="n">cards</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">isNone</span> <span class="o">(</span><span class="n">toAction</span> <span class="n">cards</span><span class="o">)</span> <span class="s2">&quot;Is not an attack&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Finally, I wired up the generators and defined the single property this function should obey: it should return the correct action for a valid play, or <code>None</code> if the play is erroneous.</p>

<h2>The wrap</h2>

<p>Hopefully this is a useful example for those of you using property based tests of how you can encode business logic into them: although this looks like a lot of code, creating even single examples of each of these cases would have been nearly as long and far less effective in testing.</p>

<p>It does tend to lead to a rather iterative approach to development, where as your code starts working for some of the use cases, you begin to notice errors in or missing cases you need to generate, which helps you find more edges cases in your code and round the circle you go again.</p>

<p>If you want, you&#39;re very welcome to take this code to use as a coding Kata - but be warned, it&#39;s not as simple a challenge as you might expect from the few paragraphs at the top of the post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All Saints' Day Sale]]></title>
    <link href="https://blog.mavnn.co.uk/all-saints-day-sale/"/>
    <updated>2017-11-01T09:01:10+00:00</updated>
    <id>https://blog.mavnn.co.uk/all-saints-day-sale</id>
    <content type="html"><![CDATA[<blockquote>
<p>TL;DR: 10% off <a href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/">Building Solid Systems in F#</a> until 7th November 2017</p>
</blockquote>

<p>Lots of people these days seem to like giving Halloween sales, but historically and theologically, Halloween is really just the precursor to the real celebration: <a href="https://en.wikipedia.org/wiki/All_Saints%27_Day">All Saints&#39; Day</a>.</p>

<p>So in the interest of getting the details right, we&#39;re having an All Saints&#39; Day sale, starting today for 7 days. It&#39;s already live, get your 10% off <a href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/">your tickets</a> now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RouteMaster : Master Your Messaging Routes]]></title>
    <link href="https://blog.mavnn.co.uk/routemaster-master-your-messaging-routes/"/>
    <updated>2017-10-27T16:25:53+01:00</updated>
    <id>https://blog.mavnn.co.uk/routemaster-master-your-messaging-routes</id>
    <content type="html"><![CDATA[<p>I&#39;m very pleased to announce the release of an initial alpha of <a href="https://github.com/RouteMasterIntegration/RouteMaster">RouteMaster</a>.</p>

<p>What is it? Well, I&#39;ll let the README speak for itself:</p>

<blockquote>
<p>RouteMaster is a .NET library for writing stateful workflows on top of a message bus. It exists to make the implementation of long running business processes easy in event driven systems.</p>
</blockquote>

<p>There is also example code in the repository so you can see what things are starting to look like.</p>

<p>For those of you following along, this will sound awfully familiar; that&#39;s because RouteMaster is the outcome of my decision to rebuild a <a href="https://blog.mavnn.co.uk/process-management-in-easynetq/">Process Manager</a> for EasyNetQ. The first cut of that was imaginatively called &quot;EasyNetQ.ProcessManager&quot;, but I decided to rename it for three main reasons:</p>

<ul>
<li>On re-reading <a href="http://www.enterpriseintegrationpatterns.com/">Enterprise Integration Patterns</a>, it occurred to me that RouteMaster was an enabler for many of the other patterns as well as the &quot;Process Manager&quot;</li>
<li>The message bus RouteMaster uses is provided as an interface; the main dll has no dependency on EasyNetQ at all</li>
<li>The previous EasyNetQ.ProcessManager is still available as a Nuget package supplied by my previous employer, and they have both the moral and legal rights to the package given I wrote the original on their time</li>
</ul>

<p>A pre-emptive few FAQs:</p>

<h3>Is this ready to use?</h3>

<p>No, not yet. I&#39;m out of time I can afford to spend on it right now, get in touch if you can/want to fund future development.</p>

<p>If you want to play, the code as provided does run and all of the process tests pass.</p>

<h3>Urgh! All the examples are F#!?</h3>

<p>Yes, but there is a C# friendly API in the works. See the first question :)</p>

<h3>What infrastructure do I need to run this?</h3>

<p>At the moment, I&#39;m using EasyNetQ (over RabbitMQ) and PostgreSQL (via Marten) for transport and storage respectively.</p>

<h3>What about things like NServiceBus and MassTransit?</h3>

<p>In some ways they fall in a similar space to RouteMaster, but with a different philosophy. Just as EasyNetQ is a focused library that supplies only part of the functionality you&#39;d find in these larger solutions, RouteMaster is designed to work with your chosen transport abstraction not replace it.</p>

<h2>Ask not what your RouteMaster can do for you, but what you can do for your RouteMaster!</h2>

<p>I&#39;d really like feedback, ideas, use cases and suggestions - leave comments here or ping an issue onto the repository. If you&#39;re feeling really brave and can try and actually experiment with it, but at the moment I&#39;m mostly hoping for concrete use cases and, well, funding.</p>

<p>Quite a few people over the years have hit my website searching for an EasyNetQ process manager, and others have asked me if it&#39;s still available. I&#39;d like to hear from as many of you as possible to build the tightest, simplest solution which will do the job.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[POSTing to Freya]]></title>
    <link href="https://blog.mavnn.co.uk/posting-to-freya/"/>
    <updated>2017-10-25T15:52:57+01:00</updated>
    <id>https://blog.mavnn.co.uk/posting-to-freya</id>
    <content type="html"><![CDATA[<p>I&#39;ve written about how nice Freya is as a library, but documentation is still a little light on the ground.</p>

<p>So here&#39;s a minimal implementation of a &quot;microservice&quot; Freya API, starting from which dotnet commands to run to install the Freya template, through to a running web service.</p>

<p>Make sure you have an up to date .NET Core SDK installed, and grab yourself the handy dandy Freya template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dotnet new -i <span class="s2">&quot;Freya.Template::*&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then create yourself a directory and go into it. The following command will set up a brand new Freya project using kestrel as the underlying webserver, and Hopac (rather than F# Async) for concurrency. Alternatively, you can leave both the options off and you&#39;ll get Freya running on Suave with standard Async.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dotnet new freya --framework kestrel --concurrency hopac
</span></code></pre></td></tr></table></div></figure>

<p>Your project should run at this point; <code>dotnet run</code> will spin up a webserver on port 5000 which will give a 404 at the root and text responses on /hello and /hello/name paths.</p>

<p>Api.fs is where all the magic of configuring Freya happens - KestrelInterop.fs contains boilerplate for making sure Routing information passes correctly between Kestrel and Freya, and Program.fs just starts Kestrel with our Freya API as an OWIN app.</p>

<h3>Adding JSON</h3>

<p>So, this is great and all, but we&#39;re building a microservice aren&#39;t we? That normally means JSON (or at least something more structured than plain text!).</p>

<p>Let&#39;s change things up so that as well as supplying the name to greet in the route, we can POST JSON with a name field to the /hello end point.</p>

<p>To respond in JSON, we need a Freya <code>Represent</code> record. We&#39;re sending a result with a fixed structure, so we don&#39;t need a serialization library or anything, we&#39;ll just construct the JSON by hand. Stick this near the top of Api.fs:</p>

<!-- more -->

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Text</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Text</span><span class="p">.</span><span class="nc">RegularExpressions</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">representGreeting</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">before</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;{ </span><span class="se">\&quot;</span><span class="s2">greeting</span><span class="se">\&quot;</span><span class="s2">: </span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">after</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2"> }&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">extremeSanifier</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">RegularExpressions</span><span class="p">.</span><span class="nc">Regex</span><span class="o">(</span><span class="s2">&quot;[^a-z0-9 ]&quot;</span><span class="o">,</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">Compiled</span> <span class="o">|||</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">IgnoreCase</span><span class="o">)</span>
</span><span class='line'>    <span class="k">fun</span> <span class="n">name</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">safeNameBytes</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">extremeSanifier</span><span class="o">.</span><span class="nc">Replace</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span>
</span><span class='line'>        <span class="o">{</span> <span class="nc">Description</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">{</span> <span class="nc">Charset</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">Charset</span><span class="p">.</span><span class="nc">Utf8</span>
</span><span class='line'>              <span class="nc">Encodings</span> <span class="o">=</span> <span class="nc">None</span>
</span><span class='line'>              <span class="nc">MediaType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span>
</span><span class='line'>              <span class="nc">Languages</span> <span class="o">=</span> <span class="nc">None</span> <span class="o">}</span>
</span><span class='line'>          <span class="nc">Data</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">concat</span> <span class="o">[</span><span class="n">before</span><span class="o">;</span><span class="n">safeNameBytes</span><span class="o">;</span><span class="n">after</span><span class="o">]</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>So here we&#39;re defining an HTTP representation of a response, including media type and other important information.</p>

<p>Aside: why do we return a lambda at the end rather than making representGreeting itself a function? That&#39;s so that we don&#39;t want to rebuild the two byte arrays and the regex every time we call the function.</p>

<p>We also need to be able to read incoming JSON. Well, all we want is a string so lets just check that there&#39;s an &#39;&quot;&#39; at the beginning and end&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">grabString</span> <span class="o">(</span><span class="n">bodyStream</span> <span class="o">:</span> <span class="o">#</span><span class="nc">Stream</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">use</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamReader</span><span class="o">(</span><span class="n">bodyStream</span><span class="o">)</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">reader</span><span class="o">.</span><span class="nc">ReadToEnd</span><span class="bp">()</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">str</span> <span class="k">when</span> <span class="n">str</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="o">.[</span><span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">&lt;|</span> <span class="n">str</span><span class="o">.</span><span class="nc">Substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nc">None</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we can start hooking up the actual root that we want. We need to make some additions to <code>helloMachine</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">helloMachine</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freyaMachine</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// methods [GET; HEAD; OPTIONS]</span>
</span><span class='line'>        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">;</span> <span class="nc">POST</span><span class="o">]</span>
</span><span class='line'>        <span class="n">acceptableMediaTypes</span> <span class="o">[</span><span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span><span class="o">]</span>
</span><span class='line'>        <span class="n">handleOk</span> <span class="n">sayHello</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Magically our endpoint now knows not only that we accept POSTs, but it will end the correct error code if the media type of the POST is not set to JSON.</p>

<p>We also need to update <code>sayHello</code> and <code>name</code>; we&#39;ll extract the method of the request and choose logic for working out the name and creating the response respectively.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">name_</span> <span class="o">=</span> <span class="nn">Route</span><span class="p">.</span><span class="n">atom_</span> <span class="s2">&quot;name&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="n">method_</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">method_</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">name</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">nameO</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">body_</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">map</span> <span class="n">grabString</span>
</span><span class='line'>            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">name_</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">match</span> <span class="n">nameO</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">name</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="s2">&quot;World&quot;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">representResponse</span> <span class="n">greeting</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">representGreeting</span> <span class="n">greeting</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nn">Represent</span><span class="p">.</span><span class="n">text</span> <span class="n">greeting</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And that&#39;s everything we should need. Firing up <a href="https://www.getpostman.com/">PostMan</a> we can find out that posting an empty body gets a 500 (we should probably handle that, looks like the request stream can be null), firing in a string with no media type header gets back a &quot;415 Unsupported Media Type&quot; (did you know that off hand?) and a POST with a correct body (i.e., starts and ends with a &#39;&quot;&#39;) gets us back:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span> <span class="nt">&quot;greeting&quot;</span><span class="p">:</span> <span class="s2">&quot;Hello michael&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>So there you have it. Adding a POST endpoint to Freya.</p>

<h3>Appendix</h3>

<p>Here is the complete Api.fs for you to follow along, with open statements moved to the top of the file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Api</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Text</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Text</span><span class="p">.</span><span class="nc">RegularExpressions</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nc">Core</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Machines</span><span class="p">.</span><span class="nc">Http</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Types</span><span class="p">.</span><span class="nc">Http</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Routers</span><span class="p">.</span><span class="nn">Uri</span><span class="p">.</span><span class="nc">Template</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">representGreeting</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">before</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;{ </span><span class="se">\&quot;</span><span class="s2">greeting</span><span class="se">\&quot;</span><span class="s2">: </span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">after</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2"> }&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">extremeSanifier</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">RegularExpressions</span><span class="p">.</span><span class="nc">Regex</span><span class="o">(</span><span class="s2">&quot;[^a-z0-9 ]&quot;</span><span class="o">,</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">Compiled</span> <span class="o">|||</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">IgnoreCase</span><span class="o">)</span>
</span><span class='line'>    <span class="k">fun</span> <span class="n">name</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">safeNameBytes</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">extremeSanifier</span><span class="o">.</span><span class="nc">Replace</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span>
</span><span class='line'>        <span class="o">{</span> <span class="nc">Description</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">{</span> <span class="nc">Charset</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">Charset</span><span class="p">.</span><span class="nc">Utf8</span>
</span><span class='line'>              <span class="nc">Encodings</span> <span class="o">=</span> <span class="nc">None</span>
</span><span class='line'>              <span class="nc">MediaType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span>
</span><span class='line'>              <span class="nc">Languages</span> <span class="o">=</span> <span class="nc">None</span> <span class="o">}</span>
</span><span class='line'>          <span class="nc">Data</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">concat</span> <span class="o">[</span><span class="n">before</span><span class="o">;</span><span class="n">safeNameBytes</span><span class="o">;</span><span class="n">after</span><span class="o">]</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">grabString</span> <span class="o">(</span><span class="n">bodyStream</span> <span class="o">:</span> <span class="o">#</span><span class="nc">Stream</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">use</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamReader</span><span class="o">(</span><span class="n">bodyStream</span><span class="o">)</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">reader</span><span class="o">.</span><span class="nc">ReadToEnd</span><span class="bp">()</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">str</span> <span class="k">when</span> <span class="n">str</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="o">.[</span><span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">&lt;|</span> <span class="n">str</span><span class="o">.</span><span class="nc">Substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nc">None</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">name_</span> <span class="o">=</span> <span class="nn">Route</span><span class="p">.</span><span class="n">atom_</span> <span class="s2">&quot;name&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="n">method_</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">method_</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">name</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">nameO</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">body_</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">map</span> <span class="n">grabString</span>
</span><span class='line'>            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">name_</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">match</span> <span class="n">nameO</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">name</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="s2">&quot;World&quot;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">representResponse</span> <span class="n">greeting</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">representGreeting</span> <span class="n">greeting</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nn">Represent</span><span class="p">.</span><span class="n">text</span> <span class="n">greeting</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">sayHello</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span><span class="o">!</span> <span class="n">representResponse</span> <span class="o">(</span><span class="n">sprintf</span> <span class="s2">&quot;Hello, %s!&quot;</span> <span class="n">name</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">helloMachine</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freyaMachine</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// methods [GET; HEAD; OPTIONS]</span>
</span><span class='line'>        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">;</span> <span class="nc">POST</span><span class="o">]</span>
</span><span class='line'>        <span class="n">acceptableMediaTypes</span> <span class="o">[</span><span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span><span class="o">]</span>
</span><span class='line'>        <span class="n">handleOk</span> <span class="n">sayHello</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">root</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freyaRouter</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">resource</span> <span class="s2">&quot;/hello{/name}&quot;</span> <span class="n">helloMachine</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Workflow Alpha]]></title>
    <link href="https://blog.mavnn.co.uk/workflow-alpha/"/>
    <updated>2017-10-09T21:33:36+01:00</updated>
    <id>https://blog.mavnn.co.uk/workflow-alpha</id>
    <content type="html"><![CDATA[<p><img src="https://blog.mavnn.co.uk/images/WorkflowAlpha.png" alt="Log of workflow test running"></p>

<p><strong>It&#39;s alive!</strong> The process manager code I&#39;ve been reconstructing (see <a href="https://blog.mavnn.co.uk/process-management-in-easynetq/">Intro</a> and the <a href="https://blog.mavnn.co.uk/an-in-memory-message-bus-in-100-lines-or-less/">in memory test bus</a>) is slowly starting to take some shape.</p>

<p>As you can see, it comes with nice (<a href="https://github.com/logary/logary#using-logary-in-a-library">no dependency</a>) logging out of the box and it is async all the way down to the underlying transport.</p>

<p>This is still at the underlying plumbing phase in many ways: the code to construct a workflow like this is currently a boilerplate covered ugly mess - but it&#39;s all boilerplate which has been deliberately designed to allow powerful APIs to be built over the top.</p>

<p>Next up: a nice sleek API for creating &quot;pipeline&quot; workflows more easily. Then the real fun starts - pleasant to use abstractions over fork/join semantics&#8230;</p>

<p><em>Interested in seeing faster progress on this project? Drop <a href="mailto://us@mavnn.co.uk">us@mavnn.co.uk</a> a line to talk sponsorship.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kubernetes for the Masses]]></title>
    <link href="https://blog.mavnn.co.uk/kubernetes-for-the-masses/"/>
    <updated>2017-09-29T11:54:37+01:00</updated>
    <id>https://blog.mavnn.co.uk/kubernetes-for-the-masses</id>
    <content type="html"><![CDATA[<p>As part of <a href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/">a two day training course</a> I&#39;m going to be putting together a bunch of material on how to run .NET Core code on kubernetes.</p>

<p>It will include things like:</p>

<ul>
<li>Setting up CI/automated builds</li>
<li>Configuring ingress points (including ssl via self updating Let&#39;s Encrypt certs)</li>
<li>Monitoring and metrics of the running system</li>
</ul>

<p>If you&#39;d have any interest in this material as a separate module (which wouldn&#39;t be F# specific), do get in touch. I&#39;d reckon it will become a one day course, either in house or hosted.</p>

<p>As an aside, once the material has been battle tested a few times, I will also be putting together a &quot;base&quot; deployment repository - although it will have fair warning that Kubernetes is really still the kind of thing that requires you to understand it before you start pushing things onto it, not just cutting and pasting someone else&#39;s config.</p>

<p>After all, you&#39;re the one who&#39;s going to get the phone call at 03:00&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming in the Wild]]></title>
    <link href="https://blog.mavnn.co.uk/functional-programming-in-the-wild/"/>
    <updated>2017-09-18T11:49:58+01:00</updated>
    <id>https://blog.mavnn.co.uk/functional-programming-in-the-wild</id>
    <content type="html"><![CDATA[<p>Last week was the annual <a href="https://skillsmatter.com/conferences/8268-progressive-dot-net-2017">Progressive .Net</a> conference, hosted at <a href="https://skillsmatter.com">SkillsMatter</a>.</p>

<p>It was a bit of a strange conference for me; I was invited to speak, and very much enjoyed meeting up with everyone but I also had a bunch of other work I needed to get done. That means that unlike some other conferences I won&#39;t be able to give much speaker feedback!</p>

<p>However, there were a few sessions I managed to pay some attention to and some thoughts about my own that I&#39;d like to record - so here goes!</p>

<!-- more -->

<h2><a href="https://skillsmatter.com/skillscasts/10458-pilot-decision-management#video">Pilot Decision Making for Beginners</a></h2>

<p><a href="https://twitter.com/CliffordAgius">Clifford Agnius</a> is an airline pilot and .net developer who gave a really nice talk on how to make decisions - whether you need to make them <strong>right now</strong> (hint: practice in advance) or whether you need to decide on a plan.</p>

<p>It was tempting to just nod along and go &quot;oh, that&#39;s just common sense&quot; - until it strikes you that codified, pre-agreed common sense is pretty spectacularly valuable.</p>

<h2><a href="https://skillsmatter.com/skillscasts/10670-have-i-got-dot-net-for-you">Have I got .NET for You</a></h2>

<p>&quot;Have I got .NET for You&quot; was fun, and <a href="https://twitter.com/dylanbeattie">Dylan Beattie</a> is a very silly boy.</p>

<h2>A Practical Introduction to Functional Programming with F#</h2>

<p>This was me; no video I&#39;m afraid, as it was a 3 hour practical session.</p>

<p>I was really pleased by the turn out for this - I&#39;m guessing there were 30-40 people there (anyone who actually counted, feel free to correct me!).</p>

<p><img src="https://blog.mavnn.co.uk/images/crowd_view.jpg" alt="View of the room filling up"></p>

<p>I had to make a rather quick swerve in the presentation of the topic right at the beginning, as I had been expecting a group most of whom had tried F# and wanted to learn more about functional programming - while I actually got a group where only 3 people had even looked at F# who wanted to learn about functional programming!</p>

<p>After walking people through the first couple of exercises to get the basic syntax down, people seemed to be off and flying (SkillsMatter has a good coffee supply):</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">At <a href="https://twitter.com/hashtag/prognet?src=hash">#prognet</a> trying to turn coffee into F# with <a href="https://twitter.com/mavnn">@mavnn</a> think I need more coffee&#8230;</p>&mdash; Clifford Agius (@CliffordAgius) <a href="https://twitter.com/CliffordAgius/status/908645096622522368">September 15, 2017</a></blockquote>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">Mind being blown learning f# from <a href="https://twitter.com/mavnn">@mavnn</a> at <a href="https://twitter.com/hashtag/ProgNET?src=hash">#ProgNET</a>. May need more coffee!</p>&mdash; Steve Gordon (@stevejgordon) <a href="https://twitter.com/stevejgordon/status/908635653675585536">September 15, 2017</a></blockquote>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">Awesome F# tutorial by <a href="https://twitter.com/mavnn">@mavnn</a> <a href="https://twitter.com/hashtag/ProgNet?src=hash">#ProgNet</a></p>&mdash; Salman Iqbal (@SoulmanIqbal) <a href="https://twitter.com/SoulmanIqbal/status/908638281201537024">September 15, 2017</a></blockquote>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">Intro to <a href="https://twitter.com/hashtag/fsharp?src=hash">#fsharp</a> at <a href="https://twitter.com/hashtag/ProgNET?src=hash">#ProgNET</a> &#8230;I&#39;m getting &quot;loads of stuff is inferred for free&quot;..very nice! <a href="https://t.co/t7eoivAeU2">pic.twitter.com/t7eoivAeU2</a></p>&mdash; Abbie Davis (@abbie_davis_000) <a href="https://twitter.com/abbie_davis_000/status/908628569001267200">September 15, 2017</a></blockquote>

<script async src="https://blog.mavnn.co.uk//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Mind being blown is a good thing, right?</p>

<p>All in all, much fun was had by all (I think).</p>

<h2>The Web that Never Was</h2>

<p>Dylan&#39;s final key note was a alternative history of the web, a combination of (real) good ideas that were dropped due to the vagaries of history and application of 20-20 hindsight.</p>

<p>Apart from being entertaining, it was also thought provoking for anyone designing software today.</p>

<p>Also: Dylan is still a very silly boy.</p>

<p>At time of writing the recording of this hadn&#39;t been published, but I suspect it will appear shortly.</p>

<h2>Wrap!</h2>

<p>All in all, I very much enjoyed ProgNet and I&#39;m hoping to be involved again next year - apart from the sessions there was also plentiful coffee, chats, and opportunities to catch up with interesting people.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Solid Systems in F#]]></title>
    <link href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/"/>
    <updated>2017-09-13T14:19:21+01:00</updated>
    <id>https://blog.mavnn.co.uk/building-solid-systems-in-f-number</id>
    <content type="html"><![CDATA[<p>We are running another course, and I&#39;m officially stoked! Read on for the details&#8230;</p>

<h2>Building Solid Systems in F#</h2>

<p>Writing code is only the first part of putting software into production - to run, maintain and scale your product, you&#39;ll need to understand and design the overall system.</p>

<p>This 2 day course will take you through best practice in both writing an F# based, distributed system and running it in production - including sensible inter-operation with components written in other languages.</p>

<p>To fit this into 2 days, we&#39;ll need to make some opinionated decisions (such as using F#!), but many of the ideas and concepts will be transferable. </p>

<h2>We&#39;ll cover:</h2>

<ul class="org-ul">
<li>Writing reliable code using F#&#8217;s unique language features</li>
<li>Learn how to apply SOLID (like) principles in a functional style</li>
<li>How to instrument distributed services</li>
<li>Continuous Improvement: 
<ul class="org-ul">
<li>Unit testing</li>
<li>Performance measurement</li>
</ul></li>
<li>Running distributed systems in development</li>
<li>Deploying distributed systems to production</li>
<li>Good practice in dependency management and code organization</li>
</ul>

<h2>You&#39;ll come away with:</h2>

<p>
A git repository of your completed work, which will include:
</p>

<ul class="org-ul">
<li>Nicely instrumented, benchmarked and unit tested F# services</li>
<li>A scripted, deterministic deployment process for the overall distributed system</li>
<li>Real time centralized logging, metrics and health feedback from the system, whether running on the dev machine or in production</li>
<li>Zero down time continuous deployment for the overall system</li>
</ul>

<h2>Prerequisites:</h2>

<p>
You need to have:
</p>

<ul class="org-ul">
<li>a basic knowledge of F# syntax</li>
<li>a reasonable background knowledge of software development</li>
</ul>

<p>
You need to bring laptop with:
</p>

<ul class="org-ul">
<li>a relatively recent F# development environment (you&#8217;ll need to be able to build dotnet core 2.0 apps)</li>
<li>Minikube installed</li>
</ul>

<p>
We&#8217;ll also ask you to pre-download some code and containers in advance so that we can hit the ground running on the first day; we&#8217;ll pass you the details of that before the event. 
</p>

<h2>Is this a replacement for Level Up Your F#?</h2>

<p>No; <a href="https://blog.mavnn.co.uk/level-up-your-f-number-skills/">Level Up Your F#</a> focussed on the details of the F# language, this course is focussed on building systems. We will be running Level Up Your F# again in the future.</p>

<h2>Where will it happen?</h2>

<p>At the <a href="https://wellcomecollection.org/">Wellcome Collection</a></p>

<h2>Where can I get tickets?</h2>

<p>Right here!</p>

<div style="width:100%; text-align:left;"><iframe src="https://blog.mavnn.co.uk//eventbrite.co.uk/tickets-external?eid=37887882677&ref=etckt" frameborder="0" height="648" width="100%" vspace="0" hspace="0" marginheight="5" marginwidth="5" scrolling="auto" allowtransparency="true"></iframe><div style="font-family:Helvetica, Arial; font-size:12px; padding:10px 0 5px; margin:2px; width:100%; text-align:left;" ><a class="powered-by-eb" style="color: #ADB0B6; text-decoration: none;" target="_blank" href="http://www.eventbrite.co.uk/">Powered by Eventbrite</a></div></div>

<p>(Or go to <a href="https://www.eventbrite.co.uk/e/writing-solid-systems-in-f-tickets-37887882677">EventBrite</a> if that form isn&#39;t working for you)</p>

<h2>What have other people said about your courses?</h2>

<p>Hassan Ezzahir, Lead developer (Contractor) at BNP Paribas</p>

<blockquote>
<p>I’ve been trying to learn F# for several years now and got almost all
the existing books on the subjects.</p>

<p>Yet, I felt there was a gap between my good understanding of the
language and actually applying it on bigger “real” projects.</p>

<p>Michael’s great training skills has enabled me to quickly practice some
advanced topics I was less familiar with.</p>

<p>With my newly acquired knowledge, I’m confident I will be able achieve
some great (and fun) developments with F#</p>
</blockquote>

<p>Alexander Battisti, Senior Software Developer (Machine Learning) at Freeletics GmbH</p>

<blockquote>
<p>I found &quot;Level Up your F#&quot; a good course teaching advanced topics in
F# that are commonly ignored or glossed over when you are on your own,
but are useful enough so you shouldn&#39;t ignore them. The exercises were
difficult in a good way and engaging. I definitely recommend the
course for anybody after they took their first serious steps in
learning F#.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[System.Console Is Why We Can't Have Nice Things]]></title>
    <link href="https://blog.mavnn.co.uk/system-dot-console-is-why-we-cant-have-nice-things/"/>
    <updated>2017-08-31T16:30:18+01:00</updated>
    <id>https://blog.mavnn.co.uk/system-dot-console-is-why-we-cant-have-nice-things</id>
    <content type="html"><![CDATA[<p>In writing a simple tutorial for this years <a href="https://skillsmatter.com/conferences/8268-progressive-dot-net-2017#program">Progressive .Net</a> I thought I&#39;d use the Console to allow some nice visual feedback with requiring a dependency.</p>

<p>TD;LR: <code>System.Console</code> (at least on dotnet core 2.0) is not as threadsafe as you&#39;d hope, and means that writing any simple cross platform console UI is nearly impossible.</p>

<!-- more -->

<p>So, I started with a draw method like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Coord</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">X</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">Y</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">draw</span> <span class="n">changes</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">changes</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">coord</span><span class="o">,</span> <span class="n">item</span> <span class="o">:</span> <span class="kt">char</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nn">Console</span><span class="p">.</span><span class="nc">CursorLeft</span> <span class="o">&lt;-</span> <span class="n">coord</span><span class="o">.</span><span class="nc">X</span>
</span><span class='line'>        <span class="nn">Console</span><span class="p">.</span><span class="nc">CursorTop</span> <span class="o">&lt;-</span> <span class="n">coord</span><span class="o">.</span><span class="nc">Y</span>
</span><span class='line'>        <span class="nn">Console</span><span class="p">.</span><span class="nc">Write</span> <span class="n">item</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>This method just takes a sequence of coordinates and characters to write in them, and then moves the cursor around the console to write your inputs. And it works fine.</p>

<p>Then I wanted a sequence of keys pressed by the user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Directions</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Up</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Down</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Left</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Right</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Stay</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">inputUnfolder</span> <span class="n">prev</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">read</span> <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">ReadKey</span><span class="o">(</span><span class="bp">true</span><span class="o">)</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">read</span><span class="o">.</span><span class="nc">Key</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">UpArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="nc">Up</span><span class="o">,</span> <span class="nc">Up</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">DownArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="nc">Down</span><span class="o">,</span> <span class="nc">Down</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">LeftArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="nc">Left</span><span class="o">,</span> <span class="nc">Down</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">RightArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="nc">Right</span><span class="o">,</span> <span class="nc">Right</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="n">prev</span><span class="o">,</span> <span class="n">prev</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">keysPressed</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Seq</span><span class="p">.</span><span class="n">unfold</span> <span class="n">inputUnfolder</span> <span class="nc">Stay</span>
</span></code></pre></td></tr></table></div></figure>

<p>Again, this works fine. And as long as you take one item from the input stream, do all your drawing and then take the next item everything continues to be good.</p>

<p>But&#8230; this story doesn&#39;t end here. What I was really after was accepting key presses on one thread, and drawing on another.</p>

<p>First problem: it turns out that calling <code>Console.ReadKey</code> on one thread, and setting <code>Console.CursorTop/Left</code> on another causes a deadlock.</p>

<p>A bit of research led to the <code>Console.KeyAvailable</code> property, and rewriting <code>inputFolder</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">inputUnfolder</span> <span class="n">prev</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">KeyAvailable</span> <span class="k">then</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">read</span> <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">ReadKey</span><span class="o">(</span><span class="bp">true</span><span class="o">)</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">read</span><span class="o">.</span><span class="nc">Key</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">UpArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="o">(</span><span class="nc">Up</span><span class="o">,</span> <span class="nc">Up</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">DownArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="o">(</span><span class="nc">Down</span><span class="o">,</span> <span class="nc">Down</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">LeftArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="o">(</span><span class="nc">Left</span><span class="o">,</span> <span class="nc">Down</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">RightArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="o">(</span><span class="nc">Right</span><span class="o">,</span> <span class="nc">Right</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="o">(</span><span class="n">prev</span><span class="o">,</span> <span class="n">prev</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nn">Async</span><span class="p">.</span><span class="nc">Sleep</span> <span class="mi">1</span> <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">RunSynchronously</span>
</span><span class='line'>        <span class="n">inputUnfolder</span> <span class="n">prev</span>
</span></code></pre></td></tr></table></div></figure>

<p>Yeah! Spin loop. That looks totally healthy.</p>

<p>Unfortunately, we now have the issue that because <code>Console.ReadKey</code> is not actively blocking at the moment the key is pressed, the input key is printed directly to the console. There doesn&#39;t appear to be anyway of blocking this.</p>

<p>The real pity about all of this is not that it&#39;s just wasted a couple of hours of my life writing a &quot;simple&quot; tutorial (although that&#39;s pretty annoying!); it&#39;s the fact that with dotnet core being genuinely cross platform, I was hoping to use it to write a few nice console UI based applications. It turns out that apart from the well know performance issues of <code>System.Console</code>, it doesn&#39;t currently appear to be possible at all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An in Memory Message Bus in 100 Lines or Less]]></title>
    <link href="https://blog.mavnn.co.uk/an-in-memory-message-bus-in-100-lines-or-less/"/>
    <updated>2017-08-17T15:15:43+01:00</updated>
    <id>https://blog.mavnn.co.uk/an-in-memory-message-bus-in-100-lines-or-less</id>
    <content type="html"><![CDATA[<p>In reimplementing an <a href="https://blog.mavnn.co.uk/process-management-in-easynetq/">EasyNetQ process manager</a> one of the things I wanted to keep from the original project was an in memory message bus that could be used for testing without requiring a running RabbitMQ server. The code has ended up being pleasingly short and also uses a few techniques that seemed interesting, so I thought I&#39;d document it here as part of the design process.</p>

<p>Please note we&#39;re not going for a full re-implementation of RabbitMQ in memory here, but this does give us enough to do some useful testing!</p>

<!-- more -->

<blockquote>
<p>Author&#39;s note: since this post was written, this code was updated to be async. I&#39;ve added the new version as appendix 2</p>
</blockquote>

<h2>What are we building?</h2>

<p>In the main process manager library, I&#39;m starting to hash out the underlying types which will drive the various abstractions in play. As a consumer of the library, you&#39;ll probably never have cause to use these types directly.</p>

<p>One of these is an interface class representing a message bus which routes on a combination of <a href="https://github.com/EasyNetQ/EasyNetQ/wiki/Topic-Based-Routing">topic</a> and .net type (i.e. how EasyNetQ routes by default). It looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Topic</span> <span class="o">=</span> <span class="nc">Topic</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ProcessManagerBus</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">IDisposable</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">Publish</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">TimeSpan</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">TopicPublish</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">Topic</span> <span class="o">-&gt;</span> <span class="nc">TimeSpan</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">Subscribe</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="nc">SubscriptionId</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">TopicSubscribe</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="nc">SubscriptionId</span> <span class="o">-&gt;</span> <span class="nc">Topic</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span></code></pre></td></tr></table></div></figure>

<p>Production code will wrap an instance of an EasyNetQ <code>IBus</code> here, but for testing we&#39;re going to build an in memory version.</p>

<h2>Underlying concepts</h2>

<p>What concepts are we going to have in play here? Well, there&#39;s going to be subscribers, who should have an action called when a relevant message is published. And we&#39;re going to want to be able to actually publish the messages.</p>

<p>It makes sense to model the message bus as an agent which can have commands sent to it (a <code>MailboxProcessor</code> in F# terms), so let&#39;s model the commands we want to be able to send first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">MemoryBus</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">Subscriber</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Action</span> <span class="o">:</span> <span class="n">obj</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Type</span> <span class="o">:</span> <span class="nc">Type</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Binding</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">Subscriber</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">:</span> <span class="nc">SubscriptionId</span>
</span><span class='line'>      <span class="nc">Binding</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nc">Action</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">Subscriber</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span> <span class="n">o</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">o</span> <span class="o">|&gt;</span> <span class="n">unbox</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">|&gt;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Type</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">BusMessage</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Publish</span> <span class="k">of</span> <span class="n">obj</span> <span class="o">*</span> <span class="nc">Type</span> <span class="o">*</span> <span class="nc">DateTime</span> <span class="o">*</span> <span class="nc">Topic</span> <span class="n">option</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Subscribe</span> <span class="k">of</span> <span class="nc">Subscriber</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Stop</span> <span class="k">of</span> <span class="nc">AsyncReplyChannel</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>So, a subscriber knows what topic it is binding to (which might include wildcards, we&#39;ll get there in a moment), which <code>type</code> it is listening for, and an action to call when that type arrives. The agent will need to store a list of subscribers, so we wrap our generic <code>Subscriber&lt;&#39;a&gt;</code> type in a non-generic interface (<code>Subscriber</code>).</p>

<p>The <code>BusMessage</code> type then reflects the three things that we might ask the agent to do: publish a message to current subscribers, add a subscriber, or shut down and reply when shutting down is complete.</p>

<h2>Add the logic</h2>

<p>We&#39;ll also need some logic for determining whether a topic published to match a topic which has been bound to by a subscriber. Topics in RabbitMQ are multipart strings with <code>.</code> separators - &quot;one.two.three&quot;, and messages must be published to a specific topic. But when you bind a subscriber, you can bind with two types of wildcard. A <code>*</code> matches a &quot;section&quot; (so binding to &quot;*.two&quot; will receive messages published to &quot;one.two&quot; and &quot;1.two&quot;), while a <code>#</code> finishes a binding string and matches any number of sections (so binding to &quot;one.#&quot; will match &quot;one.two&quot;, &quot;one.2&quot; and &quot;one.two.three&quot;).</p>

<p>Our logic ends up looking like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">compareSection</span> <span class="o">(</span><span class="n">topicSection</span> <span class="o">:</span> <span class="kt">string</span><span class="o">,</span> <span class="n">bindingSection</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">bindingSection</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="s2">&quot;#&quot;</span> <span class="o">|</span> <span class="s2">&quot;*&quot;</span> <span class="o">-&gt;</span> <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="k">when</span> <span class="n">bindingSection</span> <span class="o">=</span> <span class="n">topicSection</span> <span class="o">-&gt;</span> <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">false</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">topicBindingMatch</span> <span class="n">topicOpt</span> <span class="o">(</span><span class="n">binding</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">topicOpt</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Some</span> <span class="o">(</span><span class="nc">Topic</span> <span class="n">topic</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">topicSections</span> <span class="o">=</span> <span class="n">topic</span><span class="o">.</span><span class="nc">Split</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">bindingSections</span> <span class="o">=</span> <span class="n">binding</span><span class="o">.</span><span class="nc">Split</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">bindingSections</span><span class="o">.[</span><span class="n">bindingSections</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span> <span class="k">then</span>
</span><span class='line'>            <span class="c1">// Seq.zip truncates the longer sequence of the two</span>
</span><span class='line'>            <span class="c1">// provided - so here we ignore any sections beyond</span>
</span><span class='line'>            <span class="c1">// the &quot;#&quot;</span>
</span><span class='line'>            <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">topicSections</span> <span class="n">bindingSections</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">forall</span> <span class="n">compareSection</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="c1">// If there&#39;s no &quot;#&quot; at the end of the binding, there</span>
</span><span class='line'>            <span class="c1">// can only be a match if there is exactly the same number</span>
</span><span class='line'>            <span class="c1">// of sections; check that before zipping the sections</span>
</span><span class='line'>            <span class="c1">// together to compare</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">bindingSections</span><span class="o">.</span><span class="nc">Length</span> <span class="o">=</span> <span class="n">topicSections</span><span class="o">.</span><span class="nc">Length</span> <span class="k">then</span>
</span><span class='line'>                <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">topicSections</span> <span class="n">bindingSections</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">forall</span> <span class="n">compareSection</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="bp">false</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="c1">// If there is no publish topic, the only binding which can match</span>
</span><span class='line'>        <span class="c1">// is &quot;#&quot; as there are no sections to compare.</span>
</span><span class='line'>        <span class="n">binding</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Build the agent</h2>

<p>We now have all of the logic our agent requires. Let&#39;s put into together into an <code>Async</code> recursive function listening for commands.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="k">private</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="o">(</span><span class="n">agent</span> <span class="o">:</span> <span class="nc">MailboxProcessor</span><span class="o">&lt;</span><span class="nc">BusMessage</span><span class="o">&gt;)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Stop</span> <span class="n">chan</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">chan</span><span class="o">.</span><span class="nc">Reply</span> <span class="bp">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">()</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Subscribe</span> <span class="n">s</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="o">(</span><span class="n">s</span><span class="o">::</span><span class="n">subscribers</span><span class="o">)</span> <span class="n">agent</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Publish</span> <span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="k">type&#39;</span><span class="o">,</span> <span class="n">expireTime</span><span class="o">,</span> <span class="n">topic</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">expireTime</span> <span class="o">&gt;</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">subscribers</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="k">type&#39;</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="nc">Type</span>
</span><span class='line'>                                           <span class="o">&amp;&amp;</span> <span class="n">topicBindingMatch</span> <span class="n">topic</span> <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span><span class="o">)</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span> <span class="n">message</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="n">agent</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>With the correct types to guide us, this function ends up almost trivial. If we receive a stop message, we reply to say we&#39;re stopped and then return <code>unit</code>, meaning we&#39;ll process no further messages.</p>

<p>If we receive a subscriber, we just add it to the list of subscribers and call back into the loop.</p>

<p>And finally, if there&#39;s a request to publish we check the message hasn&#39;t expired and then call of the subscribers that have the correct type and a matching binding (before calling back into the loop).</p>

<h2>Wrap it all in the correct interface</h2>

<p>Now we just need a type which implements the <code>ProcessManagerBus</code> interface and we&#39;re done. We want <code>Dispose</code> to stop the underlying agent, and the other methods are straight forward translations. The only real thing of note here is the line <code>do agent.Error.Add raise</code>. This is needed because by default exceptions thrown in <code>MailboxProcessor</code>s kill the background thread the agent loop is running on, but are not propagated up to the overall process. That&#39;s not the behaviour we want here: if a subscriber throws, we want to know about the error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">MemoryBus</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">agent</span> <span class="o">=</span> <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span><span class="n">loop</span> <span class="bp">[]</span><span class="o">)</span>
</span><span class='line'>    <span class="k">do</span> <span class="n">agent</span><span class="o">.</span><span class="nn">Error</span><span class="p">.</span><span class="nc">Add</span> <span class="n">raise</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">IDisposable</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Dispose</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">PostAndReply</span> <span class="nc">Stop</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">ProcessManagerBus</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">message</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span><span class="o">)</span> <span class="n">expiry</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">box</span> <span class="n">message</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="o">+</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">None</span><span class="o">))</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">TopicPublish</span> <span class="o">(</span><span class="n">message</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span><span class="o">)</span> <span class="n">topic</span> <span class="n">expiry</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">box</span> <span class="n">message</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="o">+</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">topic</span><span class="o">))</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Subscribe</span> <span class="n">sid</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Subscribe</span> <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="n">sid</span><span class="o">;</span> <span class="nc">Binding</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span><span class="o">;</span> <span class="nc">Action</span> <span class="o">=</span> <span class="n">action</span> <span class="o">})</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">TopicSubscribe</span> <span class="n">sid</span> <span class="o">(</span><span class="nc">Topic</span> <span class="n">binding</span><span class="o">)</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Subscribe</span> <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="n">sid</span><span class="o">;</span> <span class="nc">Binding</span> <span class="o">=</span> <span class="n">binding</span><span class="o">;</span> <span class="nc">Action</span> <span class="o">=</span> <span class="n">action</span> <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Fin</h2>

<p>And there you have it! An in memory message bus in 100 lines or less of F# code. For bonus points, here&#39;s a simple set of test cases for it so you can see what it looks like in action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nn">Tests</span><span class="p">.</span><span class="nc">MemoryBus</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'><span class="k">open</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">MemoryBus</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Expecto</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">T1</span> <span class="o">=</span> <span class="nc">T1</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'><span class="k">type</span> <span class="nc">T2</span> <span class="o">=</span> <span class="nc">T2</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Tests</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="n">memoryBusTests</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">testList</span> <span class="s2">&quot;memory bus tests&quot;</span> <span class="o">[</span>
</span><span class='line'>        <span class="n">testCase</span> <span class="s2">&quot;Basic send/subscibe works&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">receivedMessage</span> <span class="o">=</span> <span class="n">ref</span> <span class="nc">None</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">bus</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryBus</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">ProcessManagerBus</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">subId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="s2">&quot;t1&quot;</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Subscribe</span><span class="o">&lt;</span><span class="nc">T1</span><span class="o">&gt;</span> <span class="n">subId</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="nc">T1</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">receivedMessage</span> <span class="o">:=</span> <span class="nc">Some</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">(</span><span class="nc">T1</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMinutes</span> <span class="mi">1</span><span class="o">.)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(!</span><span class="n">receivedMessage</span><span class="o">)</span> <span class="o">(</span><span class="nc">Some</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="s2">&quot;Should match&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">testCase</span> <span class="s2">&quot;Subscribe filters correctly by type&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">receivedMessage</span> <span class="o">=</span> <span class="n">ref</span> <span class="nc">None</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">bus</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryBus</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">ProcessManagerBus</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">subId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="s2">&quot;t1&quot;</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Subscribe</span><span class="o">&lt;</span><span class="nc">T2</span><span class="o">&gt;</span> <span class="n">subId</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="nc">T2</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">receivedMessage</span> <span class="o">:=</span> <span class="nc">Some</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">(</span><span class="nc">T1</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMinutes</span> <span class="mi">1</span><span class="o">.)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(!</span><span class="n">receivedMessage</span><span class="o">)</span> <span class="nc">None</span> <span class="s2">&quot;Should match&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">testCase</span> <span class="s2">&quot;Can publish to topic&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">receivedMessage</span> <span class="o">=</span> <span class="n">ref</span> <span class="nc">None</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">bus</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryBus</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">ProcessManagerBus</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">subId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="s2">&quot;t1&quot;</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicSubscribe</span><span class="o">&lt;</span><span class="nc">T1</span><span class="o">&gt;</span> <span class="n">subId</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;one.two&quot;</span><span class="o">)</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="nc">T1</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">receivedMessage</span> <span class="o">:=</span> <span class="nc">Some</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicPublish</span> <span class="o">(</span><span class="nc">T1</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;one.two&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMinutes</span> <span class="mi">1</span><span class="o">.)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(!</span><span class="n">receivedMessage</span><span class="o">)</span> <span class="o">(</span><span class="nc">Some</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="s2">&quot;Should match&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">testCase</span> <span class="s2">&quot;Only receives from matching topic&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">receivedMessage</span> <span class="o">=</span> <span class="n">ref</span> <span class="nc">None</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">bus</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryBus</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">ProcessManagerBus</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">subId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="s2">&quot;t1&quot;</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicSubscribe</span><span class="o">&lt;</span><span class="nc">T1</span><span class="o">&gt;</span> <span class="n">subId</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;one.two&quot;</span><span class="o">)</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="nc">T1</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">receivedMessage</span> <span class="o">:=</span> <span class="nc">Some</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicPublish</span> <span class="o">(</span><span class="nc">T1</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;two.one&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMinutes</span> <span class="mi">1</span><span class="o">.)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(!</span><span class="n">receivedMessage</span><span class="o">)</span> <span class="nc">None</span> <span class="s2">&quot;Should match&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">testCase</span> <span class="s2">&quot;Matching wildcard topic is matched&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">receivedMessage</span> <span class="o">=</span> <span class="n">ref</span> <span class="nc">None</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">bus</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryBus</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">ProcessManagerBus</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">subId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="s2">&quot;t1&quot;</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicSubscribe</span><span class="o">&lt;</span><span class="nc">T1</span><span class="o">&gt;</span> <span class="n">subId</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;*.two&quot;</span><span class="o">)</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="nc">T1</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">receivedMessage</span> <span class="o">:=</span> <span class="nc">Some</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicPublish</span> <span class="o">(</span><span class="nc">T1</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;one.two&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMinutes</span> <span class="mi">1</span><span class="o">.)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(!</span><span class="n">receivedMessage</span><span class="o">)</span> <span class="o">(</span><span class="nc">Some</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="s2">&quot;Should match&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Appendix 1</h2>

<p>Just to round everything off, here&#39;s a listing of the complete implementation from beginning to end.</p>

<p>File 1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Topic</span> <span class="o">=</span> <span class="nc">Topic</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ProcessManagerBus</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">IDisposable</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">Publish</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">TimeSpan</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">TopicPublish</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">Topic</span> <span class="o">-&gt;</span> <span class="nc">TimeSpan</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">Subscribe</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="nc">SubscriptionId</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">TopicSubscribe</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="nc">SubscriptionId</span> <span class="o">-&gt;</span> <span class="nc">Topic</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span></code></pre></td></tr></table></div></figure>

<p>File 2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">MemoryBus</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">Subscriber</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Action</span> <span class="o">:</span> <span class="n">obj</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Type</span> <span class="o">:</span> <span class="nc">Type</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Binding</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">Subscriber</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">:</span> <span class="nc">SubscriptionId</span>
</span><span class='line'>      <span class="nc">Binding</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nc">Action</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">Subscriber</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span> <span class="n">o</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">o</span> <span class="o">|&gt;</span> <span class="n">unbox</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">|&gt;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Type</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">BusMessage</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Publish</span> <span class="k">of</span> <span class="n">obj</span> <span class="o">*</span> <span class="nc">Type</span> <span class="o">*</span> <span class="nc">DateTime</span> <span class="o">*</span> <span class="nc">Topic</span> <span class="n">option</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Subscribe</span> <span class="k">of</span> <span class="nc">Subscriber</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Stop</span> <span class="k">of</span> <span class="nc">AsyncReplyChannel</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">compareSection</span> <span class="o">(</span><span class="n">topicSection</span> <span class="o">:</span> <span class="kt">string</span><span class="o">,</span> <span class="n">bindingSection</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">bindingSection</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="s2">&quot;#&quot;</span> <span class="o">|</span> <span class="s2">&quot;*&quot;</span> <span class="o">-&gt;</span> <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="k">when</span> <span class="n">bindingSection</span> <span class="o">=</span> <span class="n">topicSection</span> <span class="o">-&gt;</span> <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">false</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">topicBindingMatch</span> <span class="n">topicOpt</span> <span class="o">(</span><span class="n">binding</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">topicOpt</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Some</span> <span class="o">(</span><span class="nc">Topic</span> <span class="n">topic</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">topicSections</span> <span class="o">=</span> <span class="n">topic</span><span class="o">.</span><span class="nc">Split</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">bindingSections</span> <span class="o">=</span> <span class="n">binding</span><span class="o">.</span><span class="nc">Split</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">bindingSections</span><span class="o">.[</span><span class="n">bindingSections</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span> <span class="k">then</span>
</span><span class='line'>            <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">topicSections</span> <span class="n">bindingSections</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">forall</span> <span class="n">compareSection</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">bindingSections</span><span class="o">.</span><span class="nc">Length</span> <span class="o">=</span> <span class="n">topicSections</span><span class="o">.</span><span class="nc">Length</span> <span class="k">then</span>
</span><span class='line'>                <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">topicSections</span> <span class="n">bindingSections</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">forall</span> <span class="n">compareSection</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="bp">false</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">binding</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="k">private</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="o">(</span><span class="n">agent</span> <span class="o">:</span> <span class="nc">MailboxProcessor</span><span class="o">&lt;</span><span class="nc">BusMessage</span><span class="o">&gt;)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Stop</span> <span class="n">chan</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">chan</span><span class="o">.</span><span class="nc">Reply</span> <span class="bp">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">()</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Subscribe</span> <span class="n">s</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="o">(</span><span class="n">s</span><span class="o">::</span><span class="n">subscribers</span><span class="o">)</span> <span class="n">agent</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Publish</span> <span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="k">type&#39;</span><span class="o">,</span> <span class="n">expireTime</span><span class="o">,</span> <span class="n">topic</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">expireTime</span> <span class="o">&gt;</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">subscribers</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="k">type&#39;</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="nc">Type</span>
</span><span class='line'>                                           <span class="o">&amp;&amp;</span> <span class="n">topicBindingMatch</span> <span class="n">topic</span> <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span><span class="o">)</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span> <span class="n">message</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="n">agent</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">MemoryBus</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">agent</span> <span class="o">=</span> <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span><span class="n">loop</span> <span class="bp">[]</span><span class="o">)</span>
</span><span class='line'>    <span class="k">do</span> <span class="n">agent</span><span class="o">.</span><span class="nn">Error</span><span class="p">.</span><span class="nc">Add</span> <span class="n">raise</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">IDisposable</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Dispose</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">PostAndReply</span> <span class="nc">Stop</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">ProcessManagerBus</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">message</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span><span class="o">)</span> <span class="n">expiry</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">box</span> <span class="n">message</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="o">+</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">None</span><span class="o">))</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">TopicPublish</span> <span class="o">(</span><span class="n">message</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span><span class="o">)</span> <span class="n">topic</span> <span class="n">expiry</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">box</span> <span class="n">message</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="o">+</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">topic</span><span class="o">))</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Subscribe</span> <span class="n">sid</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Subscribe</span> <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="n">sid</span><span class="o">;</span> <span class="nc">Binding</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span><span class="o">;</span> <span class="nc">Action</span> <span class="o">=</span> <span class="n">action</span> <span class="o">})</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">TopicSubscribe</span> <span class="n">sid</span> <span class="o">(</span><span class="nc">Topic</span> <span class="n">binding</span><span class="o">)</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Subscribe</span> <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="n">sid</span><span class="o">;</span> <span class="nc">Binding</span> <span class="o">=</span> <span class="n">binding</span><span class="o">;</span> <span class="nc">Action</span> <span class="o">=</span> <span class="n">action</span> <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Appendix 1</h2>

<p>The async version!</p>

<p>File 1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Topic</span> <span class="o">=</span> <span class="nc">Topic</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ProcessManagerBus</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">IDisposable</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">Publish</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">TimeSpan</span> <span class="o">-&gt;</span> <span class="nc">Async</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">TopicPublish</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">Topic</span> <span class="o">-&gt;</span> <span class="nc">TimeSpan</span> <span class="o">-&gt;</span> <span class="nc">Async</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">Subscribe</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="nc">SubscriptionId</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">Async</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;)</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">TopicSubscribe</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="nc">SubscriptionId</span> <span class="o">-&gt;</span> <span class="nc">Topic</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">Async</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;)</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span></code></pre></td></tr></table></div></figure>

<p>File 2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">MemoryBus</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">Subscriber</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Action</span> <span class="o">:</span> <span class="n">obj</span> <span class="o">-&gt;</span> <span class="nc">Async</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Type</span> <span class="o">:</span> <span class="nc">Type</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Binding</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">Subscriber</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">:</span> <span class="nc">SubscriptionId</span>
</span><span class='line'>      <span class="nc">Binding</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nc">Action</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">Async</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">Subscriber</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span> <span class="n">o</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">o</span> <span class="o">|&gt;</span> <span class="n">unbox</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">|&gt;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Type</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">BusMessage</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Publish</span> <span class="k">of</span> <span class="n">obj</span> <span class="o">*</span> <span class="nc">Type</span> <span class="o">*</span> <span class="nc">DateTime</span> <span class="o">*</span> <span class="nc">Topic</span> <span class="n">option</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Subscribe</span> <span class="k">of</span> <span class="nc">Subscriber</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Stop</span> <span class="k">of</span> <span class="nc">AsyncReplyChannel</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">compareSection</span> <span class="o">(</span><span class="n">topicSection</span> <span class="o">:</span> <span class="kt">string</span><span class="o">,</span> <span class="n">bindingSection</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">bindingSection</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="s2">&quot;#&quot;</span> <span class="o">|</span> <span class="s2">&quot;*&quot;</span> <span class="o">-&gt;</span> <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="k">when</span> <span class="n">bindingSection</span> <span class="o">=</span> <span class="n">topicSection</span> <span class="o">-&gt;</span> <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">false</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">topicBindingMatch</span> <span class="n">topicOpt</span> <span class="o">(</span><span class="n">binding</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">topicOpt</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Some</span> <span class="o">(</span><span class="nc">Topic</span> <span class="n">topic</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">topicSections</span> <span class="o">=</span> <span class="n">topic</span><span class="o">.</span><span class="nc">Split</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">bindingSections</span> <span class="o">=</span> <span class="n">binding</span><span class="o">.</span><span class="nc">Split</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">bindingSections</span><span class="o">.[</span><span class="n">bindingSections</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span> <span class="k">then</span>
</span><span class='line'>            <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">topicSections</span> <span class="n">bindingSections</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">forall</span> <span class="n">compareSection</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">bindingSections</span><span class="o">.</span><span class="nc">Length</span> <span class="o">=</span> <span class="n">topicSections</span><span class="o">.</span><span class="nc">Length</span> <span class="k">then</span>
</span><span class='line'>                <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">topicSections</span> <span class="n">bindingSections</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">forall</span> <span class="n">compareSection</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="bp">false</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">binding</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="k">private</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="o">(</span><span class="n">exiting</span> <span class="o">:</span> <span class="nc">AsyncReplyChannel</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span> <span class="n">option</span><span class="o">)</span> <span class="o">(</span><span class="n">agent</span> <span class="o">:</span> <span class="nc">MailboxProcessor</span><span class="o">&lt;</span><span class="nc">BusMessage</span><span class="o">&gt;)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">exiting</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">chan</span> <span class="k">when</span> <span class="n">agent</span><span class="o">.</span><span class="nc">CurrentQueueLength</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">chan</span><span class="o">.</span><span class="nc">Reply</span><span class="bp">()</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">Stop</span> <span class="n">chan</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="o">(</span><span class="nc">Some</span> <span class="n">chan</span><span class="o">)</span> <span class="n">agent</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">Subscribe</span> <span class="n">s</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="o">(</span><span class="n">s</span><span class="o">::</span><span class="n">subscribers</span><span class="o">)</span> <span class="n">exiting</span> <span class="n">agent</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">Publish</span> <span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="k">type&#39;</span><span class="o">,</span> <span class="n">expireTime</span><span class="o">,</span> <span class="n">topic</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">expireTime</span> <span class="o">&gt;</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="k">then</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">matchingSubs</span> <span class="o">=</span>
</span><span class='line'>                        <span class="n">subscribers</span>
</span><span class='line'>                        <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="k">type&#39;</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="nc">Type</span>
</span><span class='line'>                                                  <span class="o">&amp;&amp;</span> <span class="n">topicBindingMatch</span> <span class="n">topic</span> <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span><span class="o">)</span>
</span><span class='line'>                    <span class="k">for</span> <span class="n">sub</span> <span class="k">in</span> <span class="n">matchingSubs</span> <span class="k">do</span>
</span><span class='line'>                        <span class="n">sub</span><span class="o">.</span><span class="nc">Action</span> <span class="n">message</span> <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">StartImmediate</span>
</span><span class='line'>                <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="n">exiting</span> <span class="n">agent</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">MemoryBus</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">agent</span> <span class="o">=</span> <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span><span class="n">loop</span> <span class="bp">[]</span> <span class="nc">None</span><span class="o">)</span>
</span><span class='line'>    <span class="k">do</span> <span class="n">agent</span><span class="o">.</span><span class="nn">Error</span><span class="p">.</span><span class="nc">Add</span> <span class="n">raise</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">IDisposable</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Dispose</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">PostAndReply</span> <span class="nc">Stop</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">ProcessManagerBus</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">message</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span><span class="o">)</span> <span class="n">expiry</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">box</span> <span class="n">message</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="o">+</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">None</span><span class="o">))</span>
</span><span class='line'>            <span class="n">async</span><span class="o">.</span><span class="nc">Zero</span><span class="bp">()</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">TopicPublish</span> <span class="o">(</span><span class="n">message</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span><span class="o">)</span> <span class="n">topic</span> <span class="n">expiry</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">box</span> <span class="n">message</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="o">+</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">topic</span><span class="o">))</span>
</span><span class='line'>            <span class="n">async</span><span class="o">.</span><span class="nc">Zero</span><span class="bp">()</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Subscribe</span> <span class="n">sid</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Subscribe</span> <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="n">sid</span><span class="o">;</span> <span class="nc">Binding</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span><span class="o">;</span> <span class="nc">Action</span> <span class="o">=</span> <span class="n">action</span> <span class="o">})</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">TopicSubscribe</span> <span class="n">sid</span> <span class="o">(</span><span class="nc">Topic</span> <span class="n">binding</span><span class="o">)</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Subscribe</span> <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="n">sid</span><span class="o">;</span> <span class="nc">Binding</span> <span class="o">=</span> <span class="n">binding</span><span class="o">;</span> <span class="nc">Action</span> <span class="o">=</span> <span class="n">action</span> <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying .NET Core 2.0 With F# Today]]></title>
    <link href="https://blog.mavnn.co.uk/trying-dotnetcore-2-dot-0-with-f-number-today/"/>
    <updated>2017-08-16T11:15:20+01:00</updated>
    <id>https://blog.mavnn.co.uk/trying-dotnetcore-2-dot-0-with-f-number-today</id>
    <content type="html"><![CDATA[<p>Yesterday, I tried to use .NET Core for F# on day zero. A bit <s>brave</s>foolish, I know, but v2 was supposed to be the one with all the bugs ironed out.</p>

<p>Short version: it&#39;s a lot better, but it&#39;s still easy to hit rough edges.</p>

<p>Longer version: be very careful that you don&#39;t hit issues with versions. On MacOSX, I hit a series of road blocks which made yesterday much more painful than it should have been.</p>

<ul>
<li>If you&#39;re on a Mac, you&#39;ll need to update All The Things&trade; to get a reliable experience. And I don&#39;t just mean all the .NET Core things - full system update and <code>brew upgrade</code> are your friends</li>
<li>Don&#39;t use templates. Not many of them have been updated to 2.0 yet, you get no warnings about the ones which haven&#39;t, and enough has changed that it is very hard to update them manually unless you are a .NET Core expert already. (If you are, I suspect you&#39;re not reading this guide).</li>
<li>Don&#39;t try and update projects unless you know what you&#39;re doing; it cost me a lot of pain yesterday including bizarre internal compiler errors. On the happy news front, just copying across your actual code files works just fine.</li>
<li>Don&#39;t try and use Visual Studio (yet) - I&#39;m not going to go into this one as I&#39;m mainly talking to Mac users, but there has been issues there.</li>
</ul>

<p>With all that said and done, if I skipped using any templates and stuck exclusively to the bundled project options, the actual experience of using <code>dotnet</code> is very pleasant.</p>

<p>For example, setting up a brand new solution with library and test project looks something like below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Create solution file Project.New.sln in current directory</span>
</span><span class='line'>dotnet new sln -n Project.New
</span><span class='line'>
</span><span class='line'><span class="c"># Create library project in directory Project.New.Library</span>
</span><span class='line'><span class="c"># Default proj name is Project.New.Library.fsproj</span>
</span><span class='line'>dotnet new classlib -o Project.New.Library -lang f#
</span><span class='line'>
</span><span class='line'><span class="c"># And again for test library</span>
</span><span class='line'>dotnet new console -o Project.New.Library.Tests -lang f#
</span><span class='line'>
</span><span class='line'><span class="c"># Add projects to solution (can combine to a single line)</span>
</span><span class='line'>dotnet sln add Project.New.Library/Project.New.Library.fsproj
</span><span class='line'>dotnet sln add Project.New.Library.Tests/Project.New.Library.Tests.fsproj
</span><span class='line'>
</span><span class='line'><span class="c"># Set up test console app</span>
</span><span class='line'><span class="nb">cd </span>Project.New.Library.Tests
</span><span class='line'>dotnet add reference ../Project.New.Library/Project.New.Library.fsproj
</span><span class='line'>dotnet add package Expecto
</span><span class='line'><span class="c"># Update Program.fs to run tests (see https://github.com/haf/expecto#testing-hello-world)</span>
</span></code></pre></td></tr></table></div></figure>

<p>At this point, running <code>dotnet run</code> in the test directory should run your example test, and running <code>dotnet build</code> from the solution directory should successfully build your nice, portable, shiny, .NET Core 2.0 code.</p>

<p>Enjoy, and remember this post has a shelf life: hopefully issues like the template woes I had should disappear quickly as the eco-system catches up with the latest release.</p>

<blockquote>
<p>Thanks to Tim Preston for a minor correction to this post; our genius author had managed to copy and paste erroneous commands from his own command history&#8230;</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process Management in EasyNetQ]]></title>
    <link href="https://blog.mavnn.co.uk/process-management-in-easynetq/"/>
    <updated>2017-07-29T12:34:03+01:00</updated>
    <id>https://blog.mavnn.co.uk/process-management-in-easynetq</id>
    <content type="html"><![CDATA[<blockquote>
<p>Update! Check out <a href="https://blog.mavnn.co.uk/routemaster-master-your-messaging-routes/">RouteMaster</a> for a progress update on this.</p>
</blockquote>

<p>Back in 2015, I wrote about a <a href="https://blog.mavnn.co.uk/easynetq-process-management/">process manager</a> I&#39;d written over
the top of <a href="http://easynetq.com/">EasyNetQ</a>. At the time it was released as open
source, and I was pretty pleased with it. It allowed you to fairly quickly string
together a managed work flow of services steps with built in state management for
each work flow, and avoided many of the potential pitfalls of trying to build
a request/response based system in situations where it isn&#39;t appropriate.</p>

<p>Two years on, I&#39;ve learnt a lot about distributed system design and a lot about
composing logic (<em>cough</em> monads <em>cough</em>) - and the original source is no longer
available from my previous employers where it was written.</p>

<p>Despite that, I&#39;ve had a lot of interest in the library in between, so I&#39;m
embarking on a full, clean room, rewrite incorporating everything I&#39;ve learnt.
This will also allow me to take advantage of the (very) recent move of EasyNetQ
to be .netcore compatible to build the library against .NET Standard, providing
a fully portable solution out of the box.</p>

<p>As with EasyNetQ itself, the major focus of this project will be providing the
best possible developer experience. This means that it will provide sensible
defaults and will be opinionated in places.</p>

<p>Where do you come into all of this? Well, we&#39;re looking for corporate sponsorship
to help accelerate the development process and we&#39;re looking for testers to help
build products with pre-release versions. In both cases you get to help to drive
which opinions the library settles on, and as a corporate sponsor we&#39;ll also help
you get up and running. Whether you&#39;re sponsoring or not, we&#39;d love you to get involved.</p>

<p>And on a more general note, if you find you&#39;re pushing the boundaries of EasyNetQ
in any way and you&#39;d like some help, I&#39;d be happy to set up training or consultancy
for a bespoke solution for you as well. Drop a note to <a href="mailto://us@mavnn.co.uk">us@mavnn.co.uk</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deliberate Poster: Fighting Imposter Syndrome]]></title>
    <link href="https://blog.mavnn.co.uk/deliberate-poster-fighting-imposter-syndrome/"/>
    <updated>2017-05-24T12:01:11+01:00</updated>
    <id>https://blog.mavnn.co.uk/deliberate-poster-fighting-imposter-syndrome</id>
    <content type="html"><![CDATA[<p>I first became aware of Imposter Syndrome via an excellent <a href="https://www.hanselman.com/blog/ImAPhonyAreYou.aspx">blog post by Scott Hanselman</a>, but it immediately struck true.
I&#39;m a self taught programmer who dropped out of a Maths degree, and even now with years of experience that voice is there at the back of my head:</p>

<ul>
<li>&quot;You still make off by one errors, and you think you can train people?&quot;</li>
<li>&quot;How could you have let that bug slip by? It&#39;s obvious, I thought you knew what you were doing?&quot;</li>
<li>&quot;You want people to pay you for this? How exactly are you justifying that one to yourself?&quot;</li>
</ul>

<p>Normally I just try and tell it to shut up: everyone makes mistakes sometimes, I deliver stuff people get value from, etc.</p>

<p>But a few days back, something interesting happened. I&#39;d hit a problem that looked like it should be simple, and I&#39;d been bashing my head against it for a couple of days.
The imposter critic was out in force: &quot;call yourself a coder?&quot;. So I stepped back, took a deep breath, told the voice to stuff it and did the sensible thing. I asked my
co-director (and wife) for help.</p>

<p>Now, this isn&#39;t asking a random person off the street for assistance. She has a high level post-graduate degree in mathematics, is ridiculously good at spotting patterns and logical deduction
and has done some programming in the past herself (of the type you do during a maths degree).</p>

<p>It took me over an hour to explain what the actual problem was.</p>

<p>And as I dived through the OO patterns, domain specific knowledge and implementation constraints that built up into this &quot;simple&quot; problem it occurred to me that maybe I
had learnt something over the years. That maybe I wasn&#39;t as much of an imposter as the voice was trying to tell me. That possibly, just maybe, not being able to solve this
problem, right here, right now, didn&#39;t make me less valuable as a person or less competent as a professional. That the very fact I <em>had this problem</em> was actually evidence
that I had a clue what I was doing, or else I wouldn&#39;t have been able to get here.</p>

<p>So, a technique for all the &quot;imposters&quot; out there when the voice fires up: be deliberate in reminding yourself that you&#39;re actually a poster. Don&#39;t fight the voice with
generalities (even if they&#39;re true) - fight it with specifics.</p>

<p>Even if the specifics are &quot;2 years ago I didn&#39;t know enough to get myself into this mess&quot;.</p>

<p>And you know the bonus extra of this technique? It fights <a href="https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect">Dunning-Kruger</a> too&#8230;</p>

<p>I&#39;ll just be leaving this post lying around here so that my wife can post me a link to it next time I&#39;m in the imposter blues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Mutable State With Computational Expressions]]></title>
    <link href="https://blog.mavnn.co.uk/managing-mutable-state-with-computational-expressions/"/>
    <updated>2017-04-25T23:55:29+01:00</updated>
    <id>https://blog.mavnn.co.uk/managing-mutable-state-with-computational-expressions</id>
    <content type="html"><![CDATA[<p>In mixed paradigm languages such as F# and Scala you frequently end up using
mutable APIs in your &quot;nice&quot; pure functional code. It might be because you&#39;re using
a 3rd party library, or it might be for performance reasons - but either way it&#39;s very
easy to make mistakes with mutable constructs when you&#39;re in a functional mind space, especially if you want to compose operations on instances of a mutable type.</p>

<p>Let&#39;s have a look at one way of handling this issue: custom operations on 
computational expressions. We&#39;ll take the Provided Types API for building
types within a type provider as an example of an API to
use, and see what we can do to wrap it.</p>

<!-- more -->

<p>Firstly, let&#39;s give an example of the issue. Creating even a simple type
within a type provider looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">CambridgeProvider</span><span class="bp">()</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;Mavnn.Provided&quot;</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">myProp</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>      <span class="s2">&quot;StaticProperty&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>      <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>      <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;Hello world&quot;</span> <span class="o">@@&gt;)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">myType</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;StaticType&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'>    <span class="n">myType</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">myProp</span>
</span><span class='line'>    <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">myType</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>

<p>The main problem is right at the end on line 26: having
created your property you need to then add it the the mutable <code>ProvidedTypeDefinition</code>. This is easy to forget on the one hand, and makes it hard too
compose partial type definitions on the other.</p>

<p>One way to handle this would be to create a function that takes a provided
type definition and knows how to amend it with a provided property.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">addHelloWorld</span> <span class="o">(</span><span class="n">ptd</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">myProp</span> <span class="o">=</span>
</span><span class='line'>        <span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>          <span class="s2">&quot;StaticProperty&quot;</span><span class="o">,</span>
</span><span class='line'>          <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>          <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>          <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;Hello world&quot;</span> <span class="o">@@&gt;)</span>
</span><span class='line'>    <span class="n">ptd</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">myProp</span>
</span><span class='line'>    <span class="n">ptd</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now if we have a lot of types that need, say, a &quot;hello world&quot; and &quot;goodbye world&quot; property added we can do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">addCommon</span> <span class="n">ptd</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">ptd</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">addHelloWorld</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">addGoodbyeWorld</span> <span class="c1">// definition left as an exercise</span>
</span></code></pre></td></tr></table></div></figure>

<p>So now you can pass in a <code>ProvidedTypeDefinition</code> and get out one with
your two common properties added. But now the secret is that you want to
pass around these builder functions as much as possible, and only actually
pass in a instance of <code>ProvidedTypeDefinition</code> right at the end; up until
you do, you have something composable and reusable. Once you&#39;ve created your
instance, you&#39;re done.</p>

<p>This sounds similar, but not quite like, continuation passing style programming
as used in things like <code>async</code> under the hood. Which raises the interesting
possibility that we might be able to <strike>ab</strike>use computational
expressions to make our code a bit nicer. Let&#39;s give it a go!</p>

<p>Computational expressions are built via a class with some strictly named
member methods which the F# compiler then uses to translate the computational
expression code into &quot;standard&quot; F#.</p>

<p>The type the CE is going to operate on is going to be
<code>ProvidedTypeDefinition -&gt; ProvidedTypeDefinition</code> (similar to the state
monad for those of you who&#39;ve played with it). But it&#39;s going to be a little
odd, as we have no monad and won&#39;t be following the monad laws, so there&#39;s
really no meaningful bind operation. What would that look like?</p>

<p>Something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">PTD</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span> <span class="o">-&gt;</span> <span class="nc">ProvidedTypeDefinition</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ProvidedTypeBuilder</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Zero</span> <span class="bp">()</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">id</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Return</span> <span class="o">_</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">id</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Bind</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="n">f</span> <span class="o">:</span> <span class="kt">unit</span> <span class="o">-&gt;</span> <span class="nc">PTD</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">fun</span> <span class="n">ptd</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">f</span> <span class="bp">()</span><span class="o">)</span> <span class="o">(</span><span class="n">m</span> <span class="n">ptd</span><span class="o">)</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">m1</span> <span class="o">:</span> <span class="nc">PTD</span><span class="o">,</span> <span class="n">m2</span> <span class="o">:</span> <span class="nc">PTD</span><span class="o">)</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">x</span><span class="o">.</span><span class="nc">Bind</span><span class="o">(</span><span class="n">m1</span><span class="o">,</span> <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">m2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>So we have a bind&#8230; but it can only bind <code>unit</code> and no other type. All
it knows how to deal with is composing two <code>ProvidedTypeBuilder -&gt; ProvidedTypeBuilder</code> functions. <code>Zero</code> and <code>Return</code> make some sense as well: both
can be meaningfully defined using the <code>id</code> function; just take the provided
type definition and pass it on unchanged.</p>

<p>Now we can write code like this!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">typeBuilder</span> <span class="o">=</span> <span class="nc">ProvidedTypeBuilder</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">typeBuilder</span> <span class="o">{</span>
</span><span class='line'>    <span class="bp">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Okay, so I admit we&#39;re not quite there yet. Time to dive into the fun bit;
adding a custom operation to our builder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">PTD</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span> <span class="o">-&gt;</span> <span class="nc">ProvidedTypeDefinition</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ProvidedTypeBuilder</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Zero</span> <span class="bp">()</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">id</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Return</span> <span class="o">_</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">id</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Bind</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="n">f</span> <span class="o">:</span> <span class="kt">unit</span> <span class="o">-&gt;</span> <span class="nc">PTD</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">fun</span> <span class="n">ptd</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">f</span> <span class="bp">()</span><span class="o">)</span> <span class="o">(</span><span class="n">m</span> <span class="n">ptd</span><span class="o">)</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">m1</span> <span class="o">:</span> <span class="nc">PTD</span><span class="o">,</span> <span class="n">m2</span> <span class="o">:</span> <span class="nc">PTD</span><span class="o">)</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">x</span><span class="o">.</span><span class="nc">Bind</span><span class="o">(</span><span class="n">m1</span><span class="o">,</span> <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">m2</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[&lt;</span><span class="nc">CustomOperation</span><span class="o">(</span><span class="s2">&quot;addMember&quot;</span><span class="o">,</span> <span class="nc">MaintainsVariableSpaceUsingBind</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)&gt;]</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">ptd</span><span class="o">,</span> <span class="k">member&#39;</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">func</span> <span class="o">=</span>
</span><span class='line'>          <span class="k">fun</span> <span class="o">(</span><span class="n">instance</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>              <span class="n">instance</span><span class="o">.</span><span class="nc">AddMember</span> <span class="k">member&#39;</span>
</span><span class='line'>              <span class="n">instance</span>
</span><span class='line'>        <span class="n">x</span><span class="o">.</span><span class="nc">Bind</span><span class="o">(</span><span class="n">ptd</span><span class="o">,</span> <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">func</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we&#39;re starting to get somewhere, with code that begins to look like
this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">withHelloWorld</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">typeBuilder</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">addMember</span> <span class="o">(</span><span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>                  <span class="s2">&quot;StaticProperty&quot;</span><span class="o">,</span>
</span><span class='line'>                  <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>                  <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>                  <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;Hello world&quot;</span> <span class="o">@@&gt;))</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>withHelloWorld</code> has a type of <code>ProvidedTypeDefinition -&gt; ProvidedTypeDefinition</code> as you&#39;d expect. But there&#39;s still no easy way to compose these; let&#39;s
add that next.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">ProvidedTypeBuilder</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="c1">// ...snip...</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[&lt;</span><span class="nc">CustomOperation</span><span class="o">(</span><span class="s2">&quot;including&quot;</span><span class="o">,</span> <span class="nc">MaintainsVariableSpaceUsingBind</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)&gt;]</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Including</span><span class="o">(</span><span class="n">ptd</span><span class="o">,</span> <span class="n">builder</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">x</span><span class="o">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">ptd</span><span class="o">,</span> <span class="n">builder</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>The <code>including</code> operation is just a wrapper around combine, but it allows us
to do things like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">withHelloAndGoodbye</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">typeBuilder</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">including</span> <span class="n">withHelloWorld</span>
</span><span class='line'>        <span class="n">addMember</span> <span class="o">(</span><span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>                    <span class="s2">&quot;Goodbye&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>                    <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>                    <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;Goodbye&quot;</span> <span class="o">@@&gt;))</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And now the power of this technique begins to be shown, as we build
blocks of composable code which can be included within each other.</p>

<p>Obviously a lot more could be done at this point: we&#39;ve barely scratched
the provided types API, but we&#39;ll leave the blog post at this point.</p>

<p>This blog post comes with many thanks to <a href="http://twitter.com/kolektiv">Andrew Cherry</a> who took some pretty mad lunch time discussions and turned them into
the very real and usable <a href="https://docs.freya.io/en/latest/">Freya</a> (along with a bunch of collaborators). Freya makes use of this kind of
technique heavily.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Return to the Ivory Tower Video]]></title>
    <link href="https://blog.mavnn.co.uk/return-to-the-ivory-tower-video/"/>
    <updated>2017-04-20T13:17:18+01:00</updated>
    <id>https://blog.mavnn.co.uk/return-to-the-ivory-tower-video</id>
    <content type="html"><![CDATA[<p>As mentioned on the blog already, I had the opportunity to talk at this year&#39;s F# Exchange at <a href="https://skillsmatter.com/">skillsmatter</a>. As always, they&#39;ve done an excellent job on the video production, so if you&#39;re interested in what makes F# different from other programming languages have a watch of <a href="https://skillsmatter.com/skillscasts/9883-fixing-real-life-problems-from-the-ivory-tower">Fixing Real Life Problems From the Ivory Tower</a> (free log in required).</p>

<p>If you like the talk and would like to learn more, these are also the subjects that I&#39;ll be covering in my recently announced <a href="https://blog.mavnn.co.uk/level-up-your-f-number-skills/">Level Up Your F#</a> course, which will be running for 2 days in London on the 15th-16th June.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slides for F# Exchange 2017]]></title>
    <link href="https://blog.mavnn.co.uk/slides-for-f-number-exchange-2017/"/>
    <updated>2017-04-07T13:37:13+01:00</updated>
    <id>https://blog.mavnn.co.uk/slides-for-f-number-exchange-2017</id>
    <content type="html"><![CDATA[<p>My &quot;slides&quot; from my talk at F# Exchange were actually just a set of .fsx scripts this year, enabling me to play a bit live during the presentation.</p>

<p>If you&#39;re interested you can find them on my github account at <a href="https://github.com/mavnn/FSharpX2017">https://github.com/mavnn/FSharpX2017</a>.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Level Up Your F# Skills]]></title>
    <link href="https://blog.mavnn.co.uk/level-up-your-f-number-skills/"/>
    <updated>2017-04-06T10:20:01+01:00</updated>
    <id>https://blog.mavnn.co.uk/level-up-your-f-number-skills</id>
    <content type="html"><![CDATA[<p>@mavnn ltd have always offered training as a service, but we&#39;re now pleased
to announce our very first public training event. As readers of this blog (or people attending <a href="https://skillsmatter.com/conferences/8053-f-sharp-exchange-2017#skillscasts">F# Exchange</a>), you
get first notification!</p>

<p>&quot;Level Up Your F#&quot; is going to be a two day course running in London on the 15th-16th June.
We&#39;ll run through a syllabus of language features unique to F# and not shared by
the other dotnet languages - features that offer unparalleled expressive power 
at the cost of a learning curve and the occasional sharp edge. In the course we&#39;ll
give you a leg up that curve, and protect you from a few cuts along the way.</p>

<p>This course will be aimed at people who have spent some time coding in F#
(possibly after taking a course like the &quot;<a href="https://skillsmatter.com/courses/473-tomas-petricek-phil-trelford-fast-track-to-fsharp#overview">Fast Track to F#</a>&quot;) and realise that their
projects could benefit from a deeper understanding of F# special
abilities. These techniques are especially useful for writing generic,
reusable code - whether that&#39;s core internal code or widely used libraries.</p>

<p>It will be a small group, allowing for personalization and some flexibility in design,
but at its core it will be build up through four major topics:</p>

<ol>
<li><p>Useful tricks: active patterns, member constraints, etc</p></li>
<li><p>Quotations: what they are, and how and when to use them</p></li>
<li><p>Type Providers: how to build them, and use them for type safety</p></li>
<li><p>Computational Expressions: build powerful abstractions and then expose them in an easy to use way</p></li>
</ol>

<p>We&#39;re aiming for a cost of £1,295.00 for the course with early bird (<strike>10</strike> 15% until the 15th May) and group discounts available (contact <a href="mailto:us@mavnn.co.uk">us</a>). Due to the nature of the course, there will be a hard limit of 12 attendees. There&#39;s also a limited quantity of super-early bird tickets available if you&#39;re quick! Register your interest soon to secure a ticket, and if there&#39;s a waiting list we&#39;ll consult you about
additional dates.</p>

<p>As always with @mavnn training courses, we&#39;re also willing to come and deliver this training on site and tailor it to your specific needs. Contact us at <a href="mailto:us@mavnn.co.uk">us@mavnn.co.uk</a> to discuss requirements and quotes.</p>

<!-- more -->

<h3>Details:</h3>

<h2>How do I book?</h2>

<p>You can book right here! :)</p>

<div style="width:100%; text-align:left;"><iframe src="https://blog.mavnn.co.uk//eventbrite.co.uk/tickets-external?eid=33720450776&ref=etckt" frameborder="0" height="478" width="100%" vspace="0" hspace="0" marginheight="5" marginwidth="5" scrolling="auto" allowtransparency="true"></iframe><div style="font-family:Helvetica, Arial; font-size:12px; padding:10px 0 5px; margin:2px; width:100%; text-align:left;" ><a class="powered-by-eb" style="color: #ADB0B6; text-decoration: none;" target="_blank" href="http://www.eventbrite.co.uk/">Powered by Eventbrite</a></div></div>

<p>If your ad/privacy blocker doesn&#39;t like the embedded widget, you can also book direct on <a href="https://www.eventbrite.co.uk/e/level-up-your-f-skills-tickets-33720450776">eventbrite</a>.</p>

<h2>Prerequisites</h2>

<p>We will expect attendees to be familiar with F# syntax, including the use of discriminated unions and computational expressions such as async. Other concepts will be explained and explored during the course.</p>

<h2>What to bring</h2>

<p>You will need to bring your own computer with a F# development environment already
installed. VS Code, Visual Studio, Vim, other editor that doesn&#39;t begin with &quot;V&quot;: 
all are fine as long as you can write and compile F# code on the machine. Extra drink
token for anyone who brings a Raspberry Pi as their dev environment!</p>

<h2>What you&#39;ll get</h2>

<p>2 days of workshops guiding you through the unique features of F#, along with code
and exercises to take away with you.</p>

<p>Breakfast, coffee, lunch, and dinner provided within the course costing including
a round of drinks for the evening of the first day.</p>

<h2>Where will it be</h2>

<p>At the <a href="https://wellcomecollection.org/">Wellcome Collection</a>, right next to Euston Station.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Returning to the Ivory Tower]]></title>
    <link href="https://blog.mavnn.co.uk/returning-to-the-ivory-tower/"/>
    <updated>2017-04-03T13:49:25+01:00</updated>
    <id>https://blog.mavnn.co.uk/returning-to-the-ivory-tower</id>
    <content type="html"><![CDATA[<blockquote>
<p>But why should I learn F#?</p>
</blockquote>

<p>I&#39;m glad you asked! With multiple languages targeting the CLR it can seem just to be a matter of preference. Do you like curly braces, or significant white space?</p>

<p>But it soon becomes apparent there&#39;s a bit more to it than that; at first you spot pattern matching and discriminated unions. And then you start noticing
a bunch of other things which look cool&#8230; but it&#39;s not quite so obvious how to use them or what to do with them. Last year I was able to give a <a href="https//blog.mavnn.co.uk/video-and-slides-for-from-the-ivory-tower/">lightning talk</a> at F# Exchange on some of these language features and the response was positive
enough that I&#39;m back at <a href="https://skillsmatter.com/conferences/8053-f-sharp-exchange-2017">F# Exchange 2017</a> to give the full version.</p>

<p>So: whether it&#39;s active patterns, computational expressions, type providers or quotations I&#39;ll be running through practical examples of how these features
can be used, and how to get started creating your own examples.</p>

<p>And apart from being hyped to give my own talk, it&#39;s going to be great to meet up with the F# community again and meet some new faces. The opportunity to
meet in person people I&#39;ve exchanged ideas with online (hi Marcus Griep, Dave Thomas, &#8230;!) is invaluable. And even for someone who&#39;s been around F#
for a while like me, there&#39;s always new things going on; Puritas looks fascinating.</p>

<p>Looking forward to meeting a bunch of you there, and you should start seeing a bit more appearing on this blog again after the conference. The last year
has been pretty intense, but I&#39;m hoping to make some announcements of interest to the F# community over the next couple of months.</p>

<p><em>Is this where I&#39;m supposed to say &quot;watch this space&quot;?</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent 2016]]></title>
    <link href="https://blog.mavnn.co.uk/advent-2016/"/>
    <updated>2016-12-18T00:30:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/advent-2016</id>
    <content type="html"><![CDATA[<style>
table.jup, .jup th, .jup td {
  border: 1px solid #e7e3e7;
  padding: 0.5em;
  margin: 0.5em;
}
table.jup  {
  margin-bottom: 1.5em;
}
</style>

<p>Each year I like to make my F# advent post centered around an aspect of the actual Christmas story, so this year I decided to look at the actual text of the Christmas story.</p>

<p>There are a couple of direct historical accounts recorded in the bible, in the Gospels of Mark and Luke. But Jesus&#39;s birth is a central point of the overall biblical story, with links to the Old Testiment books written before and referenced in places through the New Testiment.</p>

<p>Sounds like a graph to me, so lets see how far we can take some analysis.</p>

<p>Fortunately, someone has already produced a <a href="https://www.openbible.info/labs/cross-references/">text file with a whole bunch of cross references</a> in a nice regular format. So all we need to get started is a nice parser. We&#39;ll also want to pull in some metadata about the structure of the bible as a book in JSON format from the people at <a href="http://bibles.org/pages/api/documentation">bibles.org</a>.</p>

<p>Time to reference some dependencies to do our heavy lifting for us: FParsec for parsing, and FSharp.Data for the JSON type provider.</p>

<p>I&#39;m writing this in the excellent Jupyter F# notebook (and then exporting it as markdown), so I&#39;ll use their Paket helpers to grab my dependencies (this should work on the Azure notebooks as well, although I&#39;ve only tried it locally).</p>

<!-- more -->

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;Paket.fsx&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nn">Paket</span><span class="p">.</span><span class="nc">Package</span> <span class="o">[</span><span class="s2">&quot;FParsec&quot;</span><span class="o">;</span> <span class="s2">&quot;FSharp.Data&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">&lt;null&gt;
</code></pre></div>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;packages/FParsec/lib/net40-client/FParsecCS.dll&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;packages/FParsec/lib/net40-client/FParsec.dll&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;packages/FSharp.Data/lib/net40/FSharp.Data.dll&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;packages/FSharp.Data/lib/net40/FSharp.Data.DesignTime.dll&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;packages/Zlib.Portable/lib/portable-net4+sl5+wp8+win8+wpa81+MonoTouch+MonoAndroid/Zlib.Portable.dll&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>So. This is F#, so the first thing we&#39;ll be wanting is our domain model. What do we need to represent our data in the type system?</p>

<p>Well, there is a standardized system for referencing locations in biblical text; we give a book of the bible (the bible is actually a mini-library of sub-books written at different times), the chapter (in theory a thematic block within a book) and a verse (a fairly arbitrary devision of a sentence or two of text). The chapter and verse devisions were not added by the authors, but by monks and scholars well after the fact, but they do give us an accurate way of pointing to a small defined chunk of biblical text between different printings and translations.</p>

<p>It&#39;s also frequently useful to refer to a range of verses with in a book.</p>

<p>So we&#39;re going to define three main types: <code>ChapterAndVerse</code> (what it sounds like), <code>Location</code> (book name and <code>ChapterAndVerse</code>) and <code>Range</code> (book name, start <code>ChapterAndVerse</code> and end <code>ChapterAndVerse</code>).</p>

<p>We&#39;ll use units of measure to make sure we can&#39;t swap chapters for verses by mistake, and add some helper methods to give nice string representations of the types and a concise syntax for creating instances of the types.</p>

<p>As an aside: the ordering of the books within the bible is fairly arbitrary, so a range that crosses between two books is meaningless. This is why a range is between to <code>ChapterAndVerse</code>s, not between two <code>Location</code>s - remember folks, make illegal states unrepresentable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">[&lt;</span><span class="nc">Measure</span><span class="o">&gt;]</span> <span class="k">type</span> <span class="nc">Chapter</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Measure</span><span class="o">&gt;]</span> <span class="k">type</span> <span class="nc">Verse</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Measure</span><span class="o">&gt;]</span> <span class="k">type</span> <span class="n">c</span> <span class="o">=</span> <span class="nc">Chapter</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Measure</span><span class="o">&gt;]</span> <span class="k">type</span> <span class="n">v</span> <span class="o">=</span> <span class="nc">Verse</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ChapterAndVerse</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">{</span> <span class="nc">Chapter</span> <span class="o">:</span> <span class="kt">int</span><span class="o">&lt;</span><span class="nc">Chapter</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="nc">Verse</span> <span class="o">:</span> <span class="kt">int</span><span class="o">&lt;</span><span class="nc">Verse</span><span class="o">&gt;</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">member</span> <span class="nc">Make</span> <span class="n">c</span> <span class="n">v</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Chapter</span> <span class="o">=</span> <span class="n">c</span>
</span><span class='line'>      <span class="nc">Verse</span> <span class="o">=</span> <span class="n">v</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="n">x</span><span class="o">.</span><span class="nc">ToString</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">sprintf</span> <span class="s2">&quot;%d.%d&quot;</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="nc">Chapter</span> <span class="o">/</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="nc">Verse</span> <span class="o">/</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">cv</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">ChapterAndVerse</span><span class="p">.</span><span class="nc">Make</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Location</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">{</span> <span class="nc">Book</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nc">ChapterAndVerse</span> <span class="o">:</span> <span class="nc">ChapterAndVerse</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">member</span> <span class="nc">Make</span> <span class="n">b</span> <span class="n">c</span> <span class="n">v</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Book</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'>      <span class="nc">ChapterAndVerse</span> <span class="o">=</span> <span class="o">{</span> <span class="nc">Chapter</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span> <span class="nc">Verse</span> <span class="o">=</span> <span class="n">v</span> <span class="o">}</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="n">x</span><span class="o">.</span><span class="nc">ToString</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>     <span class="n">sprintf</span> <span class="s2">&quot;%s.%O&quot;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Book</span> <span class="n">x</span><span class="o">.</span><span class="nc">ChapterAndVerse</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">loc</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">Location</span><span class="p">.</span><span class="nc">Make</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Range</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">{</span> <span class="nc">Book</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nc">Start</span> <span class="o">:</span> <span class="nc">ChapterAndVerse</span>
</span><span class='line'>    <span class="nc">End</span> <span class="o">:</span> <span class="nc">ChapterAndVerse</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">member</span> <span class="nc">Make</span> <span class="n">b</span> <span class="n">s</span> <span class="n">e</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Book</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'>      <span class="nc">Start</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>      <span class="nc">End</span> <span class="o">=</span> <span class="n">e</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="n">x</span><span class="o">.</span><span class="nc">ToString</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">sprintf</span> <span class="s2">&quot;%s.%O-%s.%O&quot;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Book</span> <span class="n">x</span><span class="o">.</span><span class="nc">Start</span> <span class="n">x</span><span class="o">.</span><span class="nc">Book</span> <span class="n">x</span><span class="o">.</span><span class="nc">End</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">r</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">Range</span><span class="p">.</span><span class="nc">Make</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

<p>We&#39;ll also need to be able to test if a location is within a range:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">contains</span> <span class="o">(</span><span class="n">range</span> <span class="o">:</span> <span class="nc">Range</span><span class="o">)</span> <span class="n">location</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">lower</span> <span class="o">=</span> <span class="o">{</span> <span class="nn">Location</span><span class="p">.</span><span class="nc">Book</span> <span class="o">=</span> <span class="n">range</span><span class="o">.</span><span class="nc">Book</span><span class="o">;</span> <span class="nc">ChapterAndVerse</span> <span class="o">=</span> <span class="n">range</span><span class="o">.</span><span class="nc">Start</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">upper</span> <span class="o">=</span> <span class="o">{</span> <span class="nn">Location</span><span class="p">.</span><span class="nc">Book</span> <span class="o">=</span> <span class="n">range</span><span class="o">.</span><span class="nc">Book</span><span class="o">;</span> <span class="nc">ChapterAndVerse</span> <span class="o">=</span> <span class="n">range</span><span class="o">.</span><span class="nc">End</span> <span class="o">}</span>
</span><span class='line'>  <span class="n">location</span> <span class="o">&gt;=</span> <span class="n">lower</span> <span class="o">&amp;&amp;</span> <span class="n">location</span> <span class="o">&lt;=</span> <span class="n">upper</span>
</span></code></pre></td></tr></table></div></figure>

<p>And get a feel of how this all works.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">contains</span> <span class="o">(</span><span class="n">r</span> <span class="s2">&quot;Gen&quot;</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">10</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;))</span> <span class="o">(</span><span class="n">loc</span> <span class="s2">&quot;Gen&quot;</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">true
</code></pre></div>
<p>Genesis 1:2 (verse 2 of chapter 1 of the book of Genesis) is indeed within the range Genesis 1:1-2:10.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">contains</span> <span class="o">(</span><span class="n">r</span> <span class="s2">&quot;Gen&quot;</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">10</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;))</span> <span class="o">(</span><span class="n">loc</span> <span class="s2">&quot;Gen&quot;</span> <span class="mi">3</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">false
</code></pre></div>
<p>While Genesis 3:2 is not. Good stuff.</p>

<p>We have a working domain now, let&#39;s have a look at the input data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
</span><span class='line'><span class="k">let</span> <span class="n">input</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllLines</span> <span class="o">&lt;|</span> <span class="nn">Path</span><span class="p">.</span><span class="nc">Combine</span><span class="o">(__</span><span class="n">SOURCE_DIRECTORY__</span><span class="o">,</span> <span class="s2">&quot;cross_references.txt&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">input</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">[|&quot;From Verse   To Verse    Votes   #www.openbible.info CC-BY 2016-12-05&quot;;
  &quot;Gen.1.1  Heb.11.3    67&quot;; &quot;Gen.1.1   1Chr.16.26  11&quot;; &quot;Gen.1.1   Eccl.12.1   4&quot;;
  &quot;Gen.1.1  Prov.3.19   19&quot;; &quot;Gen.1.1   Ps.124.8    16&quot;; &quot;Gen.1.1   Isa.65.17   8&quot;;
  &quot;Gen.1.1  Ps.104.24   17&quot;; &quot;Gen.1.1   Ps.121.2    14&quot;; &quot;Gen.1.1   Rev.14.7    23&quot;;
  &quot;Gen.1.1  Isa.40.26   18&quot;; &quot;Gen.1.1   Rev.3.14    9&quot;; &quot;Gen.1.1    Job.38.4    43&quot;;
  &quot;Gen.1.1  Exod.20.11  34&quot;; &quot;Gen.1.1   Isa.37.16   17&quot;; &quot;Gen.1.1   Prov.16.4   14&quot;;
  &quot;Gen.1.1  Ps.104.30   14&quot;; &quot;Gen.1.1   Col.1.16-Col.1.17   36&quot;; &quot;Gen.1.1   1John.1.1   14&quot;;
  &quot;Gen.1.1  Isa.45.18   53&quot;; &quot;Gen.1.1   2Pet.3.5    26&quot;; &quot;Gen.1.1   Rom.1.19-Rom.1.20   15&quot;;
  &quot;Gen.1.1  Isa.44.24   26&quot;; &quot;Gen.1.1   Ps.115.15   21&quot;; &quot;Gen.1.1   Mark.13.19  14&quot;;
  &quot;Gen.1.1  Isa.42.5    42&quot;; &quot;Gen.1.1   Ps.134.3    14&quot;; &quot;Gen.1.1   Rev.21.6    3&quot;;
  &quot;Gen.1.1  Jer.51.15   21&quot;; &quot;Gen.1.1   Rev.22.13   4&quot;; &quot;Gen.1.1    Ps.33.6 15&quot;;
  &quot;Gen.1.1  Isa.51.13   17&quot;; &quot;Gen.1.1   Isa.40.28   17&quot;; &quot;Gen.1.1   John.1.1-John.1.3   56&quot;;
  &quot;Gen.1.1  Ps.89.11-Ps.89.12   16&quot;; &quot;Gen.1.1   Ps.90.2 18&quot;; &quot;Gen.1.1   Matt.11.25  2&quot;;
  &quot;Gen.1.1  Jer.32.17   21&quot;; &quot;Gen.1.1   Ps.148.4-Ps.148.5   16&quot;; &quot;Gen.1.1   Rev.10.6    18&quot;;
  &quot;Gen.1.1  Ps.96.5 13&quot;; &quot;Gen.1.1   Isa.51.16   17&quot;; &quot;Gen.1.1   Jer.10.12   21&quot;;
  &quot;Gen.1.1  Ps.102.25   18&quot;; &quot;Gen.1.1   Rom.11.36   14&quot;; &quot;Gen.1.1   Acts.14.15  21&quot;;
  &quot;Gen.1.1  Job.26.13   9&quot;; &quot;Gen.1.1    Eph.3.9 14&quot;; &quot;Gen.1.1   Rev.4.11    44&quot;;
  &quot;Gen.1.1  Ps.33.9 17&quot;; &quot;Gen.1.1   Neh.9.6 28&quot;; &quot;Gen.1.1   Ps.146.6    17&quot;;
  &quot;Gen.1.1  Heb.3.4 15&quot;; &quot;Gen.1.1   Heb.1.2 19&quot;; &quot;Gen.1.1   Heb.1.10    41&quot;;
  &quot;Gen.1.1  Ps.136.5    24&quot;; &quot;Gen.1.1   Zech.12.1   16&quot;; &quot;Gen.1.1   Exod.31.18  -11&quot;;
  &quot;Gen.1.1  Prov.8.22-Prov.8.30 19&quot;; &quot;Gen.1.1   Acts.17.24  39&quot;;
  &quot;Gen.1.1  Acts.4.24   16&quot;; &quot;Gen.1.1   1Cor.8.6    18&quot;; &quot;Gen.1.1   Ps.8.3  17&quot;;
  &quot;Gen.1.2  Jer.4.23    17&quot;; &quot;Gen.1.2   Ps.33.6 1&quot;; &quot;Gen.1.2    Job.26.14   0&quot;;
  &quot;Gen.1.2  Nah.2.10    -5&quot;; &quot;Gen.1.2   Job.26.7    0&quot;; &quot;Gen.1.2    Isa.40.12-Isa.40.14 -2&quot;;
  &quot;Gen.1.2  Isa.45.18   7&quot;; &quot;Gen.1.2    Ps.104.30   9&quot;; &quot;Gen.1.3    1John.2.8   3&quot;;
  &quot;Gen.1.3  Job.36.30   1&quot;; &quot;Gen.1.3    Ps.33.9 4&quot;; &quot;Gen.1.3    Eph.5.8 1&quot;;
  &quot;Gen.1.3  Isa.60.19   7&quot;; &quot;Gen.1.3    2Cor.4.6    14&quot;; &quot;Gen.1.3   Isa.45.7    7&quot;;
  &quot;Gen.1.3  Ps.97.11    4&quot;; &quot;Gen.1.3    John.11.43  -1&quot;; &quot;Gen.1.3   1John.1.5   8&quot;;
  &quot;Gen.1.3  John.1.9    2&quot;; &quot;Gen.1.3    Job.38.19   3&quot;; &quot;Gen.1.3    John.3.19   3&quot;;
  &quot;Gen.1.3  Ps.33.6 6&quot;; &quot;Gen.1.3    John.1.5    9&quot;; &quot;Gen.1.3    Matt.8.3    -2&quot;;
  &quot;Gen.1.3  Ps.148.5    5&quot;; &quot;Gen.1.3    Eph.5.14    2&quot;; &quot;Gen.1.3    Ps.104.2    2&quot;;
  &quot;Gen.1.3  Ps.118.27   1&quot;; &quot;Gen.1.3    1Tim.6.16   1&quot;; &quot;Gen.1.4    Gen.1.18    4&quot;;
  &quot;Gen.1.4  Gen.1.10    1&quot;; &quot;Gen.1.4    Eccl.11.7   1&quot;; &quot;Gen.1.4    Gen.1.25    1&quot;;
  &quot;Gen.1.4  Gen.1.31    1&quot;; &quot;Gen.1.4    Eccl.2.13   2&quot;; &quot;Gen.1.4    Gen.1.12    2&quot;;
  &quot;Gen.1.5  Gen.1.23    2&quot;; ...|]
</code></pre></div>
<p>Looking fairly straight forward here; in fact, after a brief search I realised the format versed here is actually based on a standard called <a href="http://www.crosswire.org/osis/">OSIS</a>, although without all of the unneeded XML bits. Good call.</p>

<p>&quot;Votes&quot; is taken from the original source of these cross references, a context in which it was possible for people to agree or disagree on whether the verses in question are actually linked. For this post I&#39;m just going to ignore the votes, although they&#39;d make an interesting weighting for future investigations.</p>

<p>Time to build a parser to turn this text format into our nice domain types.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">FParsec</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">makeString</span> <span class="n">chars</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">chars</span> <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">ofList</span> <span class="o">|&gt;</span> <span class="nn">System</span><span class="p">.</span><span class="nc">String</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// parse a location</span>
</span><span class='line'><span class="k">let</span> <span class="n">plocation</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">dot</span> <span class="o">=</span> <span class="n">pchar</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">notDot</span> <span class="o">=</span> <span class="n">satisfy</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span> <span class="o">&lt;&gt;</span> <span class="sc">&#39;.&#39;</span><span class="o">)</span>
</span><span class='line'>  <span class="c1">// Take at least one non-dot character.</span>
</span><span class='line'>  <span class="c1">// Build a string from the characters taken.</span>
</span><span class='line'>  <span class="c1">// This is the book name.</span>
</span><span class='line'>  <span class="o">(</span><span class="n">many1</span> <span class="n">notDot</span> <span class="o">|&gt;&gt;</span> <span class="n">makeString</span><span class="o">)</span>
</span><span class='line'>  <span class="c1">// Check the book name is followed by a dot and</span>
</span><span class='line'>  <span class="c1">// then throw it away (.&gt;&gt; only keeps the result</span>
</span><span class='line'>  <span class="c1">// from the left)</span>
</span><span class='line'>  <span class="o">.&gt;&gt;</span> <span class="n">dot</span>
</span><span class='line'>  <span class="c1">// Parse a int; keep both the book and the int.</span>
</span><span class='line'>  <span class="c1">// This is the chapter (.&gt;&gt;. keeps left and right</span>
</span><span class='line'>  <span class="c1">// results, puts them in a tuple)</span>
</span><span class='line'>  <span class="o">.&gt;&gt;.</span> <span class="n">pint32</span>
</span><span class='line'>  <span class="c1">// As above.</span>
</span><span class='line'>  <span class="o">.&gt;&gt;</span> <span class="n">dot</span>
</span><span class='line'>  <span class="c1">// Capture the verse int; we now have a tuple on</span>
</span><span class='line'>  <span class="c1">// the left so we end up with a tuple containing</span>
</span><span class='line'>  <span class="c1">// a tuple and an int</span>
</span><span class='line'>  <span class="o">.&gt;&gt;.</span> <span class="n">pint32</span>
</span><span class='line'>  <span class="c1">// Map the awkward tuple structure into our nice</span>
</span><span class='line'>  <span class="c1">// domain type ``Location`` if we&#39;ve found all of</span>
</span><span class='line'>  <span class="c1">// the required data</span>
</span><span class='line'>  <span class="o">|&gt;&gt;</span> <span class="o">(</span><span class="k">fun</span> <span class="o">((</span><span class="n">book</span><span class="o">,</span> <span class="n">chapter</span><span class="o">),</span> <span class="n">verse</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>       <span class="n">loc</span> <span class="n">book</span> <span class="o">(</span><span class="n">chapter</span> <span class="o">*</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">verse</span> <span class="o">*</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Parse a range</span>
</span><span class='line'><span class="k">let</span> <span class="n">prange</span> <span class="o">=</span>
</span><span class='line'>  <span class="c1">// In the format above, a range is either a single</span>
</span><span class='line'>  <span class="c1">// verse (representation same as a location) or as</span>
</span><span class='line'>  <span class="c1">// a start and an end location separated by &quot;-&quot;.</span>
</span><span class='line'>  <span class="c1">// We&#39;ll create a parser for the optional second half</span>
</span><span class='line'>  <span class="c1">// first...</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">endOfRange</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">pchar</span> <span class="sc">&#39;-&#39;</span>
</span><span class='line'>    <span class="c1">// &gt;&gt;. throws away the result from the left</span>
</span><span class='line'>    <span class="o">&gt;&gt;.</span> <span class="n">plocation</span>
</span><span class='line'>  <span class="c1">// Here we take the start and optional end location</span>
</span><span class='line'>  <span class="c1">// and then map them to our domain type.</span>
</span><span class='line'>  <span class="n">plocation</span> <span class="o">.&gt;&gt;.</span> <span class="o">(</span><span class="n">opt</span> <span class="n">endOfRange</span><span class="o">)</span>
</span><span class='line'>  <span class="o">&gt;&gt;=</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">starting</span><span class="o">,</span> <span class="n">ending</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">fun</span> <span class="n">stream</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">ending</span> <span class="o">=</span> <span class="n">defaultArg</span> <span class="n">ending</span> <span class="n">starting</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">starting</span><span class="o">.</span><span class="nc">Book</span> <span class="o">&lt;&gt;</span> <span class="n">ending</span><span class="o">.</span><span class="nc">Book</span> <span class="k">then</span>
</span><span class='line'>      <span class="nc">Reply</span><span class="o">(</span><span class="nc">Error</span><span class="o">,</span> <span class="n">expectedString</span> <span class="s2">&quot;Both ends of range should be in the same book&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">r</span> <span class="n">starting</span><span class="o">.</span><span class="nc">Book</span> <span class="n">starting</span><span class="o">.</span><span class="nc">ChapterAndVerse</span> <span class="n">ending</span><span class="o">.</span><span class="nc">ChapterAndVerse</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nc">Reply</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Finally, a row from the text file is just a location</span>
</span><span class='line'><span class="c1">// followed by space, followed by a range, then a space</span>
</span><span class='line'><span class="c1">// and the votes. Spaces and votes are ignored by careful</span>
</span><span class='line'><span class="c1">// use of discarding operators.</span>
</span><span class='line'><span class="k">let</span> <span class="n">row</span> <span class="o">:</span> <span class="nc">Parser</span><span class="o">&lt;_,</span> <span class="kt">unit</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">plocation</span>
</span><span class='line'>  <span class="o">.&gt;&gt;</span> <span class="n">spaces1</span>
</span><span class='line'>  <span class="o">.&gt;&gt;.</span> <span class="n">prange</span>
</span><span class='line'>  <span class="o">.&gt;&gt;</span> <span class="n">spaces1</span>
</span><span class='line'>  <span class="o">.&gt;&gt;</span> <span class="n">pint32</span>
</span><span class='line'>  <span class="o">.&gt;&gt;</span> <span class="n">eof</span>
</span></code></pre></td></tr></table></div></figure>

<p>A few trials (of correct and incorrect inputs) suggest that our parser is working nicely.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="s2">&quot;Gen.1.1&quot;</span> <span class="o">|&gt;</span> <span class="n">run</span> <span class="n">plocation</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">Success: {Book = &quot;Gen&quot;;
 ChapterAndVerse = {Chapter = 1;
                    Verse = 1;};}
</code></pre></div>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="s2">&quot;Gen.1.1-Gen.3.10&quot;</span> <span class="o">|&gt;</span> <span class="n">run</span> <span class="n">prange</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">Success: {Book = &quot;Gen&quot;;
 Start = {Chapter = 1;
          Verse = 1;};
 End = {Chapter = 3;
        Verse = 10;};}
</code></pre></div>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="s2">&quot;Gen.1.1-Heb.11.3&quot;</span> <span class="o">|&gt;</span> <span class="n">run</span> <span class="n">prange</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">Failure:
Error in Ln: 1 Col: 17
Gen.1.1-Heb.11.3
                ^
Note: The error occurred at the end of the input stream.
Expecting: &#39;Both ends of range should be in the same book&#39;
</code></pre></div>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="s2">&quot;Gen.1.1 Heb.11.3    67&quot;</span> <span class="o">|&gt;</span> <span class="n">run</span> <span class="n">row</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">Success: ({Book = &quot;Gen&quot;;
  ChapterAndVerse = {Chapter = 1;
                     Verse = 1;};}, {Book = &quot;Heb&quot;;
                                     Start = {Chapter = 11;
                                              Verse = 3;};
                                     End = {Chapter = 11;
                                            Verse = 3;};})
</code></pre></div>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="s2">&quot;Gen.1.1.22  Heb.11.3    67&quot;</span> <span class="o">|&gt;</span> <span class="n">run</span> <span class="n">row</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">Failure:
Error in Ln: 1 Col: 8
Gen.1.1.22      Heb.11.3        67
       ^
Expecting: whitespace
</code></pre></div>
<p>Now let&#39;s run our parser over the input file, and get ourselves a list of cross references.</p>

<p>There&#39;s quite a few of them, so we&#39;ll only display the first 10.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">crossReferences</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">input</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">skip</span> <span class="mi">1</span> <span class="c1">// skip the row titles</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="n">run</span> <span class="n">row</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">choose</span> <span class="o">(</span><span class="k">function</span>
</span><span class='line'>                 <span class="o">|</span> <span class="nc">Success</span> <span class="o">(</span><span class="n">reference</span><span class="o">,</span> <span class="o">_,</span> <span class="o">_)</span> <span class="o">-&gt;</span> <span class="nc">Some</span> <span class="n">reference</span>
</span><span class='line'>                 <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nc">None</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">crossReferences</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">10</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Table</span>
</span></code></pre></td></tr></table></div></figure>

<table class="jup"><thead><tr><th>Item1</th><th>Item2</th></tr></thead><tbody><tr><td>Gen.1.1</td><td>Heb.11.3-Heb.11.3</td></tr><tr><td>Gen.1.1</td><td>1Chr.16.26-1Chr.16.26</td></tr><tr><td>Gen.1.1</td><td>Eccl.12.1-Eccl.12.1</td></tr><tr><td>Gen.1.1</td><td>Prov.3.19-Prov.3.19</td></tr><tr><td>Gen.1.1</td><td>Ps.124.8-Ps.124.8</td></tr><tr><td>Gen.1.1</td><td>Isa.65.17-Isa.65.17</td></tr><tr><td>Gen.1.1</td><td>Ps.104.24-Ps.104.24</td></tr><tr><td>Gen.1.1</td><td>Ps.121.2-Ps.121.2</td></tr><tr><td>Gen.1.1</td><td>Rev.14.7-Rev.14.7</td></tr><tr><td>Gen.1.1</td><td>Isa.40.26-Isa.40.26</td></tr><tbody></tbody></table>

<p>This is all great and everything, but I&#39;d also like to have some way of mapping out where these verses are in the Bible and using the full names of the books. I didn&#39;t feel like entering all the data by hand, but fortunately <a href="http://bibles.org">bibles.org</a> have done it for me. Time to break out that json type provider&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">BibleInfo</span> <span class="o">=</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nn">Data</span><span class="p">.</span><span class="nc">JsonProvider</span><span class="o">&lt;</span><span class="s2">&quot;./books.js&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">bibleInfo</span> <span class="o">=</span> <span class="nn">BibleInfo</span><span class="p">.</span><span class="nc">Load</span><span class="o">(</span><span class="s2">&quot;./books.js&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>And create a map from short to full names.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">bookMap</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">bibleInfo</span><span class="o">.</span><span class="nn">Response</span><span class="p">.</span><span class="nc">Books</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="o">.</span><span class="nc">Abbr</span><span class="o">,</span> <span class="n">b</span><span class="o">.</span><span class="nc">Name</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Map</span><span class="p">.</span><span class="n">ofSeq</span>
</span><span class='line'>
</span><span class='line'><span class="n">bookMap</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">map
  [(&quot;1Chr&quot;, &quot;1 Chronicles&quot;); (&quot;1Cor&quot;, &quot;1 Corinthians&quot;); (&quot;1Esd&quot;, &quot;1 Esdras&quot;);
   (&quot;1John&quot;, &quot;1 John&quot;); (&quot;1Kgs&quot;, &quot;1 Kings&quot;); (&quot;1Macc&quot;, &quot;1 Maccabees&quot;);
   (&quot;1Pet&quot;, &quot;1 Peter&quot;); (&quot;1Sam&quot;, &quot;1 Samuel&quot;); (&quot;1Thess&quot;, &quot;1 Thessalonians&quot;); ...]
</code></pre></div>
<p>Now we have all of the actual data we need.</p>

<p>We&#39;ll start from the historical accounts of Jesus&#39;s actual birth&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">story</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="c1">// Matthew&#39;s account</span>
</span><span class='line'>    <span class="n">r</span> <span class="s2">&quot;Matt&quot;</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">18</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">18</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Luke&#39;s account part 1</span>
</span><span class='line'>    <span class="n">r</span> <span class="s2">&quot;Luke&quot;</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">26</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">56</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Luke&#39;s account part 2</span>
</span><span class='line'>    <span class="n">r</span> <span class="s2">&quot;Luke&quot;</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">21</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>
</span><span class='line'>  <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>&#8230;and then find all of the cross references which come <em>from</em> a verse in these ranges&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">findCrossReferencesOfRange</span> <span class="n">references</span> <span class="n">range</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">references</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">reference</span> <span class="o">-&gt;</span> <span class="n">contains</span> <span class="n">range</span> <span class="o">&lt;|</span> <span class="n">fst</span> <span class="n">reference</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">allCrossReferences</span> <span class="n">references</span> <span class="n">ranges</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">ranges</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">fold</span> <span class="o">(</span><span class="k">fun</span> <span class="n">found</span> <span class="n">range</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nn">Seq</span><span class="p">.</span><span class="n">concat</span> <span class="o">[</span><span class="n">findCrossReferencesOfRange</span> <span class="n">references</span> <span class="n">range</span><span class="o">;</span><span class="n">found</span><span class="o">])</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">empty</span>
</span></code></pre></td></tr></table></div></figure>

<p>&#8230;giving us a sequence of every range cross referenced from the Christmas story.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">christmasRefs</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">allCrossReferences</span> <span class="n">crossReferences</span> <span class="n">story</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">christmasRefs</span> <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">length</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">1042
</code></pre></div>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">christmasRefs</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">10</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Table</span>
</span></code></pre></td></tr></table></div></figure>

<table class="jup"><thead><tr><th>Item1</th><th>Item2</th></tr></thead><tbody><tr><td>Luke.2.1</td><td>Acts.11.28-Acts.11.28</td></tr><tr><td>Luke.2.1</td><td>Matt.24.14-Matt.24.14</td></tr><tr><td>Luke.2.1</td><td>Acts.25.21-Acts.25.21</td></tr><tr><td>Luke.2.1</td><td>Acts.25.11-Acts.25.11</td></tr><tr><td>Luke.2.1</td><td>Rom.1.8-Rom.1.8</td></tr><tr><td>Luke.2.1</td><td>Luke.3.1-Luke.3.1</td></tr><tr><td>Luke.2.1</td><td>Phil.4.22-Phil.4.22</td></tr><tr><td>Luke.2.1</td><td>Mark.16.15-Mark.16.15</td></tr><tr><td>Luke.2.1</td><td>Matt.22.17-Matt.22.17</td></tr><tr><td>Luke.2.1</td><td>Mark.14.9-Mark.14.9</td></tr><tbody></tbody></table>

<p>We&#39;re getting closer. Before we dive into the graph, we&#39;ll have a quick poke around the data.</p>

<p>Like, which are the top 10 books most commonly cross referenced to?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// count per book, sort by descending</span>
</span><span class='line'><span class="k">let</span> <span class="n">byBook</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">christmasRefs</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">r</span> <span class="o">-&gt;</span> <span class="n">bookMap</span><span class="o">.[(</span><span class="n">snd</span> <span class="n">r</span><span class="o">).</span><span class="nc">Book</span><span class="o">])</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">countBy</span> <span class="n">id</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">sortByDescending</span> <span class="n">snd</span>
</span><span class='line'>
</span><span class='line'><span class="n">byBook</span> <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">10</span> <span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Table</span>
</span></code></pre></td></tr></table></div></figure>

<table class="jup"><thead><tr><th>Item1</th><th>Item2</th></tr></thead><tbody><tr><td>Luke</td><td>129</td></tr><tr><td>Matthew</td><td>115</td></tr><tr><td>Psalm</td><td>101</td></tr><tr><td>Isaiah</td><td>74</td></tr><tr><td>Acts</td><td>68</td></tr><tr><td>John</td><td>66</td></tr><tr><td>Genesis</td><td>52</td></tr><tr><td>Revelation</td><td>33</td></tr><tr><td>Exodus</td><td>27</td></tr><tr><td>Jeremiah</td><td>26</td></tr><tbody></tbody></table>

<p>Getting closer to the data we want to create an edge and node graph from, let&#39;s look at the links between books.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Count how many times a book is referenced from each of our</span>
</span><span class='line'><span class="c1">// source books</span>
</span><span class='line'><span class="k">let</span> <span class="n">fromBookToBook</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">christmasRefs</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">from</span><span class="o">,</span> <span class="k">to&#39;</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">bookMap</span><span class="o">.[</span><span class="n">from</span><span class="o">.</span><span class="nc">Book</span><span class="o">],</span> <span class="n">bookMap</span><span class="o">.[</span><span class="k">to&#39;</span><span class="o">.</span><span class="nc">Book</span><span class="o">])</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">countBy</span> <span class="n">id</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">sortByDescending</span> <span class="n">snd</span>
</span><span class='line'>
</span><span class='line'><span class="n">fromBookToBook</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">10</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Table</span>
</span></code></pre></td></tr></table></div></figure>

<table class="jup"><thead><tr><th>Item1</th><th>Item2</th></tr></thead><tbody><tr><td>(Luke, Luke)</td><td>94</td></tr><tr><td>(Luke, Psalm)</td><td>72</td></tr><tr><td>(Matthew, Matthew)</td><td>63</td></tr><tr><td>(Luke, Matthew)</td><td>52</td></tr><tr><td>(Luke, Isaiah)</td><td>52</td></tr><tr><td>(Luke, Acts)</td><td>37</td></tr><tr><td>(Luke, John)</td><td>35</td></tr><tr><td>(Matthew, Luke)</td><td>35</td></tr><tr><td>(Matthew, Acts)</td><td>31</td></tr><tr><td>(Matthew, John)</td><td>31</td></tr><tbody></tbody></table>

<p>And now we&#39;ve arrived. I&#39;ve not found a nice simple way of generating graph images in .net, so we&#39;ll turn to the well used d3 javascript library to help us out, given we&#39;re running in a web page.</p>

<p>We need to also to have a way of turning our data into a valid javascript representation. We&#39;ll need to feed d3 an array of nodes (just the names of the books of the Bible). Then we&#39;ll have an array of &quot;links&quot;, which we&#39;ll also give a &quot;strength&quot; field to represent the number of cross references. The links need to use the index of the source and target in the node list.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">names</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">bibleInfo</span><span class="o">.</span><span class="nn">Response</span><span class="p">.</span><span class="nc">Books</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="o">.</span><span class="nc">Name</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Simple string concatination will do the job here,</span>
</span><span class='line'><span class="c1">// for more complex data we could use an actual JSON</span>
</span><span class='line'><span class="c1">// serialization library</span>
</span><span class='line'><span class="k">let</span> <span class="n">nodes</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">names</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="n">sprintf</span> <span class="s2">&quot;{ id: %A, x: 0, y: 0 }&quot;</span> <span class="n">name</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;,</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="n">sprintf</span> <span class="s2">&quot;[%s]&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">links</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">fromBookToBook</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">((</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">),</span> <span class="n">strength</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">sourceI</span> <span class="o">=</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">findIndex</span> <span class="o">((=)</span> <span class="n">source</span><span class="o">)</span> <span class="n">names</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">targetI</span> <span class="o">=</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">findIndex</span> <span class="o">((=)</span> <span class="n">target</span><span class="o">)</span> <span class="n">names</span>
</span><span class='line'>    <span class="n">sprintf</span> <span class="s2">&quot;{ source: %d, target: %d, strength: %d }&quot;</span> <span class="n">sourceI</span> <span class="n">targetI</span> <span class="n">strength</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;,</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="n">sprintf</span> <span class="s2">&quot;[%s]&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we need some javascript and html to get this all up and running. Let&#39;s make sure we have d3 loaded on the page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="s2">&quot;&quot;&quot;&lt;script src=&#39;http://d3js.org/d3.v3.min.js&#39;&gt;&lt;/script&gt;&quot;&quot;&quot;</span> <span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Html</span> <span class="o">|&gt;</span> <span class="nc">Display</span>
</span></code></pre></td></tr></table></div></figure>

<script src='http://d3js.org/d3.v3.min.js'></script>
<div class="highlight"><pre><code class="text">&lt;null&gt;
</code></pre></div>
<p>And now we can just enter our raw javascript to create the graph, with the node and link data from above. Hopefully most of this will make some sense on a read through but the basic flow is:</p>

<ol>
<li>Inject an svg element into our page</li>
<li>Create a force layout with some standard properties (gravity to keep everything near the middle, charge to keep nodes from overlapping)</li>
<li>Make the desired distance between linked nodes shorter the &quot;stronger&quot; the link is.</li>
<li>Add lines for links, and circles and text for nodes.</li>
<li>Fire a call back to reposition the links and nodes as the force simualtion runs</li>
</ol>

<p>If you&#39;ve read down here from the beginning, the graph has probably settled into a steady state, but feel free to reload the page and watch the nodes bounce around.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">sprintf</span> <span class="s2">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s2">&lt;style&gt;</span>
</span><span class='line'><span class="s2">.node {</span>
</span><span class='line'><span class="s2">    fill: #5cc;</span>
</span><span class='line'><span class="s2">    stroke: #2aa;</span>
</span><span class='line'><span class="s2">    stroke-width: 2px;</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'>
</span><span class='line'><span class="s2">.link {</span>
</span><span class='line'><span class="s2">    stroke: #777;</span>
</span><span class='line'><span class="s2">    stroke-width: 2px;</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'><span class="s2">&lt;/style&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;div id=&quot;</span><span class="n">viz</span><span class="s2">&quot;&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;script&gt;</span>
</span><span class='line'><span class="s2">var width = 800;</span>
</span><span class='line'><span class="s2">var height = 800;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">var nodeData = %s;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">var linkData = %s;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">var force = null,</span>
</span><span class='line'><span class="s2">    nodes = null,</span>
</span><span class='line'><span class="s2">    nodeTitles = null,</span>
</span><span class='line'><span class="s2">    links = null;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">var svg = d3.select(&#39;#viz&#39;).append(&#39;svg&#39;)</span>
</span><span class='line'><span class="s2">    .attr(&#39;width&#39;, width)</span>
</span><span class='line'><span class="s2">    .attr(&#39;height&#39;, height);</span>
</span><span class='line'><span class="s2">    </span>
</span><span class='line'><span class="s2">var initForce = function() {</span>
</span><span class='line'><span class="s2">    svg.selectAll(&#39;*&#39;).remove();</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    force = d3.layout.force()</span>
</span><span class='line'><span class="s2">        .size([width, height])</span>
</span><span class='line'><span class="s2">        .nodes(nodeData)</span>
</span><span class='line'><span class="s2">        .links(linkData)</span>
</span><span class='line'><span class="s2">        .gravity(0.5)</span>
</span><span class='line'><span class="s2">        .charge([-1000]);</span>
</span><span class='line'><span class="s2">        </span>
</span><span class='line'><span class="s2">    force.linkDistance(function (link) { return 400 / link.strength });</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    links = svg.selectAll(&#39;.link&#39;)</span>
</span><span class='line'><span class="s2">        .data(linkData)</span>
</span><span class='line'><span class="s2">        .enter().append(&#39;line&#39;)</span>
</span><span class='line'><span class="s2">        .attr(&#39;class&#39;, &#39;link&#39;);</span>
</span><span class='line'><span class="s2">    </span>
</span><span class='line'><span class="s2">    nodes = svg.selectAll(&#39;.node&#39;)</span>
</span><span class='line'><span class="s2">        .data(nodeData)</span>
</span><span class='line'><span class="s2">        .enter().append(&#39;circle&#39;)</span>
</span><span class='line'><span class="s2">        .attr(&#39;class&#39;, &#39;node&#39;)</span>
</span><span class='line'><span class="s2">        .attr(&#39;r&#39;, width / 50);</span>
</span><span class='line'><span class="s2">        </span>
</span><span class='line'><span class="s2">    nodeTitles = svg.selectAll(&#39;text&#39;)</span>
</span><span class='line'><span class="s2">        .data(nodeData)</span>
</span><span class='line'><span class="s2">        .enter().append(&#39;text&#39;)</span>
</span><span class='line'><span class="s2">        .attr(&#39;text-anchor&#39;, &#39;middle&#39;)</span>
</span><span class='line'><span class="s2">        .text(function (d) { return d.id })</span>
</span><span class='line'><span class="s2">        .attr(&#39;font-family&#39;, &#39;sans&#39;)</span>
</span><span class='line'><span class="s2">        .attr(&#39;font-size&#39;, 16)</span>
</span><span class='line'><span class="s2">        .attr(&#39;fill&#39;, &#39;black&#39;);</span>
</span><span class='line'><span class="s2">    </span>
</span><span class='line'><span class="s2">    force.on(&#39;tick&#39;, stepForce);</span>
</span><span class='line'><span class="s2">};</span>
</span><span class='line'>
</span><span class='line'><span class="s2">var stepForce = function() {</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    nodes.attr(&#39;cx&#39;, function(d) { return d.x; })</span>
</span><span class='line'><span class="s2">        .attr(&#39;cy&#39;, function(d) { return d.y; });</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    nodeTitles.attr(&#39;x&#39;, function(d) { return d.x; })</span>
</span><span class='line'><span class="s2">        .attr(&#39;y&#39;, function(d) { return d.y; });</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    links.attr(&#39;x1&#39;, function(d) { return d.source.x; })</span>
</span><span class='line'><span class="s2">        .attr(&#39;y1&#39;, function(d) { return d.source.y; })</span>
</span><span class='line'><span class="s2">        .attr(&#39;x2&#39;, function(d) { return d.target.x; })</span>
</span><span class='line'><span class="s2">        .attr(&#39;y2&#39;, function(d) { return d.target.y; });</span>
</span><span class='line'><span class="s2">};</span>
</span><span class='line'>
</span><span class='line'><span class="s2">initForce();</span>
</span><span class='line'><span class="s2">force.start();</span>
</span><span class='line'><span class="s2">&lt;/script&gt;</span>
</span><span class='line'><span class="s2">&quot;&quot;&quot;</span> <span class="n">nodes</span> <span class="n">links</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Html</span>
</span></code></pre></td></tr></table></div></figure>

<style>
.node {
    fill: #5cc;
    stroke: #2aa;
    stroke-width: 2px;
}

.link {
    stroke: #777;
    stroke-width: 2px;
}
</style>

<div id="viz"></div>

<script>
var width = 800;
var height = 800;

var nodeData = [{ id: "Genesis", x: 0, y: 0 },
{ id: "Exodus", x: 0, y: 0 },
{ id: "Leviticus", x: 0, y: 0 },
{ id: "Numbers", x: 0, y: 0 },
{ id: "Deuteronomy", x: 0, y: 0 },
{ id: "Joshua", x: 0, y: 0 },
{ id: "Judges", x: 0, y: 0 },
{ id: "Ruth", x: 0, y: 0 },
{ id: "1 Samuel", x: 0, y: 0 },
{ id: "2 Samuel", x: 0, y: 0 },
{ id: "1 Kings", x: 0, y: 0 },
{ id: "2 Kings", x: 0, y: 0 },
{ id: "1 Chronicles", x: 0, y: 0 },
{ id: "2 Chronicles", x: 0, y: 0 },
{ id: "Ezra", x: 0, y: 0 },
{ id: "Nehemiah", x: 0, y: 0 },
{ id: "Esther", x: 0, y: 0 },
{ id: "Job", x: 0, y: 0 },
{ id: "Psalm", x: 0, y: 0 },
{ id: "Proverbs", x: 0, y: 0 },
{ id: "Ecclesiastes", x: 0, y: 0 },
{ id: "Song of Songs", x: 0, y: 0 },
{ id: "Isaiah", x: 0, y: 0 },
{ id: "Jeremiah", x: 0, y: 0 },
{ id: "Lamentations", x: 0, y: 0 },
{ id: "Ezekiel", x: 0, y: 0 },
{ id: "Daniel", x: 0, y: 0 },
{ id: "Hosea", x: 0, y: 0 },
{ id: "Joel", x: 0, y: 0 },
{ id: "Amos", x: 0, y: 0 },
{ id: "Obadiah", x: 0, y: 0 },
{ id: "Jonah", x: 0, y: 0 },
{ id: "Micah", x: 0, y: 0 },
{ id: "Nahum", x: 0, y: 0 },
{ id: "Habakkuk", x: 0, y: 0 },
{ id: "Zephaniah", x: 0, y: 0 },
{ id: "Haggai", x: 0, y: 0 },
{ id: "Zechariah", x: 0, y: 0 },
{ id: "Malachi", x: 0, y: 0 },
{ id: "Tobit", x: 0, y: 0 },
{ id: "Judith", x: 0, y: 0 },
{ id: "Esther (Greek)", x: 0, y: 0 },
{ id: "The Wisdom of Solomon", x: 0, y: 0 },
{ id: "Sirach", x: 0, y: 0 },
{ id: "Baruch", x: 0, y: 0 },
{ id: "Letter of Jeremiah", x: 0, y: 0 },
{ id: "1 Maccabees", x: 0, y: 0 },
{ id: "2 Maccabees", x: 0, y: 0 },
{ id: "1 Esdras", x: 0, y: 0 },
{ id: "2 Esdras", x: 0, y: 0 },
{ id: "The Prayer of Manasseh", x: 0, y: 0 },
{ id: "Matthew", x: 0, y: 0 },
{ id: "Mark", x: 0, y: 0 },
{ id: "Luke", x: 0, y: 0 },
{ id: "John", x: 0, y: 0 },
{ id: "Acts", x: 0, y: 0 },
{ id: "Romans", x: 0, y: 0 },
{ id: "1 Corinthians", x: 0, y: 0 },
{ id: "2 Corinthians", x: 0, y: 0 },
{ id: "Galatians", x: 0, y: 0 },
{ id: "Ephesians", x: 0, y: 0 },
{ id: "Philippians", x: 0, y: 0 },
{ id: "Colossians", x: 0, y: 0 },
{ id: "1 Thessalonians", x: 0, y: 0 },
{ id: "2 Thessalonians", x: 0, y: 0 },
{ id: "1 Timothy", x: 0, y: 0 },
{ id: "2 Timothy", x: 0, y: 0 },
{ id: "Titus", x: 0, y: 0 },
{ id: "Philemon", x: 0, y: 0 },
{ id: "Hebrews", x: 0, y: 0 },
{ id: "James", x: 0, y: 0 },
{ id: "1 Peter", x: 0, y: 0 },
{ id: "2 Peter", x: 0, y: 0 },
{ id: "1 John", x: 0, y: 0 },
{ id: "2 John", x: 0, y: 0 },
{ id: "3 John", x: 0, y: 0 },
{ id: "Jude", x: 0, y: 0 },
{ id: "Revelation", x: 0, y: 0 }];

var linkData = [{ source: 53, target: 53, strength: 94 },
{ source: 53, target: 18, strength: 72 },
{ source: 51, target: 51, strength: 63 },
{ source: 53, target: 51, strength: 52 },
{ source: 53, target: 22, strength: 52 },
{ source: 53, target: 55, strength: 37 },
{ source: 53, target: 54, strength: 35 },
{ source: 51, target: 53, strength: 35 },
{ source: 51, target: 55, strength: 31 },
{ source: 51, target: 54, strength: 31 },
{ source: 51, target: 18, strength: 29 },
{ source: 53, target: 0, strength: 26 },
{ source: 51, target: 0, strength: 26 },
{ source: 51, target: 22, strength: 22 },
{ source: 53, target: 8, strength: 20 },
{ source: 53, target: 77, strength: 17 },
{ source: 51, target: 77, strength: 16 },
{ source: 51, target: 1, strength: 14 },
{ source: 53, target: 56, strength: 13 },
{ source: 53, target: 61, strength: 13 },
{ source: 53, target: 52, strength: 13 },
{ source: 53, target: 1, strength: 13 },
{ source: 53, target: 60, strength: 13 },
{ source: 53, target: 23, strength: 13 },
{ source: 51, target: 23, strength: 13 },
{ source: 53, target: 26, strength: 12 },
{ source: 51, target: 17, strength: 11 },
{ source: 53, target: 69, strength: 9 },
{ source: 51, target: 19, strength: 9 },
{ source: 53, target: 59, strength: 8 },
{ source: 53, target: 25, strength: 8 },
{ source: 53, target: 17, strength: 8 },
{ source: 51, target: 69, strength: 8 },
{ source: 51, target: 10, strength: 8 },
{ source: 51, target: 3, strength: 8 },
{ source: 53, target: 67, strength: 7 },
{ source: 53, target: 7, strength: 6 },
{ source: 53, target: 58, strength: 6 },
{ source: 53, target: 6, strength: 6 },
{ source: 53, target: 57, strength: 6 },
{ source: 53, target: 9, strength: 6 },
{ source: 51, target: 26, strength: 6 },
{ source: 53, target: 32, strength: 5 },
{ source: 53, target: 37, strength: 5 },
{ source: 53, target: 70, strength: 5 },
{ source: 51, target: 25, strength: 5 },
{ source: 51, target: 14, strength: 5 },
{ source: 51, target: 5, strength: 5 },
{ source: 53, target: 11, strength: 4 },
{ source: 53, target: 71, strength: 4 },
{ source: 53, target: 5, strength: 4 },
{ source: 51, target: 2, strength: 4 },
{ source: 51, target: 6, strength: 4 },
{ source: 51, target: 11, strength: 4 },
{ source: 51, target: 56, strength: 4 },
{ source: 51, target: 7, strength: 4 },
{ source: 51, target: 8, strength: 4 },
{ source: 53, target: 4, strength: 3 },
{ source: 53, target: 19, strength: 3 },
{ source: 53, target: 65, strength: 3 },
{ source: 53, target: 62, strength: 3 },
{ source: 53, target: 73, strength: 3 },
{ source: 53, target: 38, strength: 3 },
{ source: 51, target: 4, strength: 3 },
{ source: 51, target: 52, strength: 3 },
{ source: 51, target: 73, strength: 3 },
{ source: 51, target: 13, strength: 3 },
{ source: 51, target: 9, strength: 3 },
{ source: 53, target: 10, strength: 2 },
{ source: 53, target: 20, strength: 2 },
{ source: 53, target: 27, strength: 2 },
{ source: 53, target: 29, strength: 2 },
{ source: 53, target: 34, strength: 2 },
{ source: 53, target: 35, strength: 2 },
{ source: 51, target: 62, strength: 2 },
{ source: 51, target: 60, strength: 2 },
{ source: 51, target: 37, strength: 2 },
{ source: 51, target: 66, strength: 2 },
{ source: 51, target: 32, strength: 2 },
{ source: 51, target: 38, strength: 2 },
{ source: 51, target: 12, strength: 2 },
{ source: 51, target: 57, strength: 2 },
{ source: 51, target: 27, strength: 2 },
{ source: 53, target: 66, strength: 1 },
{ source: 53, target: 64, strength: 1 },
{ source: 53, target: 12, strength: 1 },
{ source: 53, target: 2, strength: 1 },
{ source: 53, target: 30, strength: 1 },
{ source: 53, target: 3, strength: 1 },
{ source: 53, target: 13, strength: 1 },
{ source: 53, target: 76, strength: 1 },
{ source: 51, target: 59, strength: 1 },
{ source: 51, target: 28, strength: 1 },
{ source: 51, target: 67, strength: 1 },
{ source: 51, target: 58, strength: 1 },
{ source: 51, target: 65, strength: 1 },
{ source: 51, target: 70, strength: 1 },
{ source: 51, target: 36, strength: 1 },
{ source: 51, target: 15, strength: 1 },
{ source: 51, target: 24, strength: 1 },
{ source: 51, target: 72, strength: 1 }];

var force = null,
    nodes = null,
    nodeTitles = null,
    links = null;

var svg = d3.select('#viz').append('svg')
    .attr('width', width)
    .attr('height', height);
    
var initForce = function() {
    svg.selectAll('*').remove();

    force = d3.layout.force()
        .size([width, height])
        .nodes(nodeData)
        .links(linkData)
        .gravity(0.5)
        .charge([-1000]);
        
    force.linkDistance(function (link) { return 400 / link.strength });

    links = svg.selectAll('.link')
        .data(linkData)
        .enter().append('line')
        .attr('class', 'link');
    
    nodes = svg.selectAll('.node')
        .data(nodeData)
        .enter().append('circle')
        .attr('class', 'node')
        .attr('r', width / 50);
        
    nodeTitles = svg.selectAll('text')
        .data(nodeData)
        .enter().append('text')
        .attr('text-anchor', 'middle')
        .text(function (d) { return d.id })
        .attr('font-family', 'sans')
        .attr('font-size', 16)
        .attr('fill', 'black');
    
    force.on('tick', stepForce);
};

var stepForce = function() {

    nodes.attr('cx', function(d) { return d.x; })
        .attr('cy', function(d) { return d.y; });

    nodeTitles.attr('x', function(d) { return d.x; })
        .attr('y', function(d) { return d.y; });

    links.attr('x1', function(d) { return d.source.x; })
        .attr('y1', function(d) { return d.source.y; })
        .attr('x2', function(d) { return d.target.x; })
        .attr('y2', function(d) { return d.target.y; });
};

initForce();
force.start();
</script>

<p>And there it is. A nice force layout graph based on our F# data, displaying the properties you would expect. Matthew and Luke as the &quot;source&quot; nodes have settled somewhere near the centre, with books commonly referenced from both squeezed inbetween. An outer ring of books referenced infrequently or from only one of the other form the next ring, and then around the edges we have the books not referenced at all during the Christmas story.</p>

<p>I hope you enjoyed this magical mystery tour of Jupyter, d3 and the Christmas story!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video and Slides for "From the Ivory Tower"]]></title>
    <link href="https://blog.mavnn.co.uk/video-and-slides-for-from-the-ivory-tower/"/>
    <updated>2016-04-15T14:14:17+01:00</updated>
    <id>https://blog.mavnn.co.uk/video-and-slides-for-from-the-ivory-tower</id>
    <content type="html"><![CDATA[<p>I spoke this morning at <a href="https://skillsmatter.com/conferences/7145-f-exchange-2016#program">F# Exchange</a> and this being SkillsMatter they&#39;ve published the recording already.</p>

<p>It&#39;s a nice short talk, weighing in at about 15 minutes. So grab yourself a coffee and
take a short tour of how some of F#&#39;s more esoteric features (active patterns, computational expressions,
quotations and type providers) have been used to solve real problems in the real world.</p>

<p>Video here: https://skillsmatter.com/skillscasts/7735-fixing-real-life-problems-from-the-ivory-tower</p>

<p>Slides here: https//blog.mavnn.co.uk/FromTheIvoryTower/</p>
]]></content>
  </entry>
  
</feed>
