<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mavnn's blog]]></title>
  <link href="https://blog.mavnn.co.uk/atom.xml" rel="self"/>
  <link href="https://blog.mavnn.co.uk/"/>
  <updated>2017-09-14T15:09:10+01:00</updated>
  <id>https://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building Solid Systems in F#]]></title>
    <link href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/"/>
    <updated>2017-09-13T14:19:21+01:00</updated>
    <id>https://blog.mavnn.co.uk/building-solid-systems-in-f-number</id>
    <content type="html"><![CDATA[<p>We are running an other course! Read on for the details&#8230;</p>

<h2>Building Solid Systems in F#</h2>

<p>
Writing code is only the first part of putting a software system into production; some of these rules are universal across software development, some depend on your ecosystem and operating system, and some are unique to each programming language.
</p>

<p>
This course will take you through best practice in both writing and running an F# based system in production, including sensible inter-operation with components written in other languages.
</p>

<p>
<em>We&#8217;ll cover:</em>
</p>

<ul class="org-ul">
<li>Writing reliable code using F#&#8217;s unique language features</li>
<li>Learn how to apply SOLID (like) principles in a functional style</li>
<li>How to instrument distributed services</li>
<li>Continuous Improvement: 
<ul class="org-ul">
<li>Unit testing</li>
<li>Performance measurement</li>
</ul></li>
<li>Running distributed systems in development</li>
<li>Deploying distributed systems to production</li>
<li>Good practice in dependency management and code organization</li>
</ul>

<p>
Obviously to fit this in to a two day course, we&#8217;ll be making some opinionated decisions around libraries and technologies to use.
</p>

<p>
<em>You&#8217;ll come away with:</em>
</p>

<p>
A git repository of your completed work, which will include:
</p>

<ul class="org-ul">
<li>Nicely instrumented, benchmarked and unit tested F# services</li>
<li>A scripted, deterministic deployment process for the overall distributed system</li>
<li>Real time logging, metrics and health feedback from the running system on the dev machine and in production</li>
<li>Zero down time continuous deployment for the overall system</li>
</ul>

<p>
<em>Prerequisites:</em>
</p>

<p>
You need to have:
</p>

<ul class="org-ul">
<li>a basic knowledge of F# syntax</li>
<li>a reasonable background knowledge of software development</li>
</ul>

<p>
You need to bring laptop with:
</p>

<ul class="org-ul">
<li>a relatively recent F# development environment (you&#8217;ll need to be able to build dotnet core 2.0 apps)</li>
<li>minikube installed</li>
</ul>

<p>
We&#8217;ll also ask you to pre-download some code and containers in advance so that we can hit the ground running on the first day; we&#8217;ll pass you the details of that before the event. 
</p>

<p><em>Is this a replacement for Level Up Your F#?</em></p>

<p>No; <a href="https://blog.mavnn.co.uk/level-up-your-f-number-skills/">Level Up Your F#</a> focussed on the details of the F# language, this course is focussed on building systems. We will be running Level Up Your F# again in the future.</p>

<p><em>Where will it happen?</em></p>

<p>At the Wellcome Collection: https://wellcomecollection.org/</p>

<p><em>Where can I get tickets?</em></p>

<p>Right here!</p>

<div style="width:100%; text-align:left;"><iframe src="https://blog.mavnn.co.uk//eventbrite.co.uk/tickets-external?eid=37887882677&ref=etckt" frameborder="0" height="648" width="100%" vspace="0" hspace="0" marginheight="5" marginwidth="5" scrolling="auto" allowtransparency="true"></iframe><div style="font-family:Helvetica, Arial; font-size:12px; padding:10px 0 5px; margin:2px; width:100%; text-align:left;" ><a class="powered-by-eb" style="color: #ADB0B6; text-decoration: none;" target="_blank" href="http://www.eventbrite.co.uk/">Powered by Eventbrite</a></div></div>

<p>(Or go to <a href="https://www.eventbrite.co.uk/e/writing-solid-systems-in-f-tickets-37887882677">EventBrite</a> if that form isn&#39;t working for you)</p>

<p><em>What have other people said about your courses?</em></p>

<p>Hassan Ezzahir, Lead developer (Contractor) at BNP Paribas</p>

<blockquote>
<p>I’ve been trying to learn F# for several years now and got almost all
the existing books on the subjects.</p>

<p>Yet, I felt there was a gap between my good understanding of the
language and actually applying it on bigger “real” projects.</p>

<p>Michael’s great training skills has enabled me to quickly practice some
advanced topics I was less familiar with.</p>

<p>With my newly acquired knowledge, I’m confident I will be able achieve
some great (and fun) developments with F#</p>
</blockquote>

<p>Alexander Battisti, Senior Software Developer (Machine Learning) at Freeletics GmbH</p>

<blockquote>
<p>I found &quot;Level Up your F#&quot; a good course teaching advanced topics in
F# that are commonly ignored or glossed over when you are on your own,
but are useful enough so you shouldn&#39;t ignore them. The exercises were
difficult in a good way and engaging. I definitely recommend the
course for anybody after they took their first serious steps in
learning F#.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[System.Console Is Why We Can't Have Nice Things]]></title>
    <link href="https://blog.mavnn.co.uk/system-dot-console-is-why-we-cant-have-nice-things/"/>
    <updated>2017-08-31T16:30:18+01:00</updated>
    <id>https://blog.mavnn.co.uk/system-dot-console-is-why-we-cant-have-nice-things</id>
    <content type="html"><![CDATA[<p>In writing a simple tutorial for this years <a href="https://skillsmatter.com/conferences/8268-progressive-dot-net-2017#program">Progressive .Net</a> I thought I&#39;d use the Console to allow some nice visual feedback with requiring a dependency.</p>

<p>TD;LR: <code>System.Console</code> (at least on dotnet core 2.0) is not as threadsafe as you&#39;d hope, and means that writing any simple cross platform console UI is nearly impossible.</p>

<!-- more -->

<p>So, I started with a draw method like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Coord</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">X</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">Y</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">draw</span> <span class="n">changes</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">changes</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">coord</span><span class="o">,</span> <span class="n">item</span> <span class="o">:</span> <span class="kt">char</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nn">Console</span><span class="p">.</span><span class="nc">CursorLeft</span> <span class="o">&lt;-</span> <span class="n">coord</span><span class="o">.</span><span class="nc">X</span>
</span><span class='line'>        <span class="nn">Console</span><span class="p">.</span><span class="nc">CursorTop</span> <span class="o">&lt;-</span> <span class="n">coord</span><span class="o">.</span><span class="nc">Y</span>
</span><span class='line'>        <span class="nn">Console</span><span class="p">.</span><span class="nc">Write</span> <span class="n">item</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>This method just takes a sequence of coordinates and characters to write in them, and then moves the cursor around the console to write your inputs. And it works fine.</p>

<p>Then I wanted a sequence of keys pressed by the user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Directions</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Up</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Down</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Left</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Right</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Stay</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">inputUnfolder</span> <span class="n">prev</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">read</span> <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">ReadKey</span><span class="o">(</span><span class="bp">true</span><span class="o">)</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">read</span><span class="o">.</span><span class="nc">Key</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">UpArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="nc">Up</span><span class="o">,</span> <span class="nc">Up</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">DownArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="nc">Down</span><span class="o">,</span> <span class="nc">Down</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">LeftArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="nc">Left</span><span class="o">,</span> <span class="nc">Down</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">RightArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="nc">Right</span><span class="o">,</span> <span class="nc">Right</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="n">prev</span><span class="o">,</span> <span class="n">prev</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">keysPressed</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Seq</span><span class="p">.</span><span class="n">unfold</span> <span class="n">inputUnfolder</span> <span class="nc">Stay</span>
</span></code></pre></td></tr></table></div></figure>

<p>Again, this works fine. And as long as you take one item from the input stream, do all your drawing and then take the next item everything continues to be good.</p>

<p>But&#8230; this story doesn&#39;t end here. What I was really after was accepting key presses on one thread, and drawing on another.</p>

<p>First problem: it turns out that calling <code>Console.ReadKey</code> on one thread, and setting <code>Console.CursorTop/Left</code> on another causes a deadlock.</p>

<p>A bit of research led to the <code>Console.KeyAvailable</code> property, and rewriting <code>inputFolder</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">inputUnfolder</span> <span class="n">prev</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">KeyAvailable</span> <span class="k">then</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">read</span> <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">ReadKey</span><span class="o">(</span><span class="bp">true</span><span class="o">)</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">read</span><span class="o">.</span><span class="nc">Key</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">UpArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="o">(</span><span class="nc">Up</span><span class="o">,</span> <span class="nc">Up</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">DownArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="o">(</span><span class="nc">Down</span><span class="o">,</span> <span class="nc">Down</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">LeftArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="o">(</span><span class="nc">Left</span><span class="o">,</span> <span class="nc">Down</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">RightArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="o">(</span><span class="nc">Right</span><span class="o">,</span> <span class="nc">Right</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="o">(</span><span class="n">prev</span><span class="o">,</span> <span class="n">prev</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nn">Async</span><span class="p">.</span><span class="nc">Sleep</span> <span class="mi">1</span> <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">RunSynchronously</span>
</span><span class='line'>        <span class="n">inputUnfolder</span> <span class="n">prev</span>
</span></code></pre></td></tr></table></div></figure>

<p>Yeah! Spin loop. That looks totally healthy.</p>

<p>Unfortunately, we now have the issue that because <code>Console.ReadKey</code> is not actively blocking at the moment the key is pressed, the input key is printed directly to the console. There doesn&#39;t appear to be anyway of blocking this.</p>

<p>The real pity about all of this is not that it&#39;s just wasted a couple of hours of my life writing a &quot;simple&quot; tutorial (although that&#39;s pretty annoying!); it&#39;s the fact that with dotnet core being genuinely cross platform, I was hoping to use it to write a few nice console UI based applications. It turns out that apart from the well know performance issues of <code>System.Console</code>, it doesn&#39;t currently appear to be possible at all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An in Memory Message Bus in 100 Lines or Less]]></title>
    <link href="https://blog.mavnn.co.uk/an-in-memory-message-bus-in-100-lines-or-less/"/>
    <updated>2017-08-17T15:15:43+01:00</updated>
    <id>https://blog.mavnn.co.uk/an-in-memory-message-bus-in-100-lines-or-less</id>
    <content type="html"><![CDATA[<p>In reimplementing an <a href="https://blog.mavnn.co.uk/process-management-in-easynetq/">EasyNetQ process manager</a> one of the things I wanted to keep from the original project was an in memory message bus that could be used for testing without requiring a running RabbitMQ server. The code has ended up being pleasingly short and also uses a few techniques that seemed interesting, so I thought I&#39;d document it here as part of the design process.</p>

<p>Please note we&#39;re not going for a full re-implementation of RabbitMQ in memory here, but this does give us enough to do some useful testing!</p>

<!-- more -->

<h2>What are we building?</h2>

<p>In the main process manager library, I&#39;m starting to hash out the underlying types which will drive the various abstractions in play. As a consumer of the library, you&#39;ll probably never have cause to use these types directly.</p>

<p>One of these is an interface class representing a message bus which routes on a combination of <a href="https://github.com/EasyNetQ/EasyNetQ/wiki/Topic-Based-Routing">topic</a> and .net type (i.e. how EasyNetQ routes by default). It looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Topic</span> <span class="o">=</span> <span class="nc">Topic</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ProcessManagerBus</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">IDisposable</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">Publish</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">TimeSpan</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">TopicPublish</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">Topic</span> <span class="o">-&gt;</span> <span class="nc">TimeSpan</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">Subscribe</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="nc">SubscriptionId</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">TopicSubscribe</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="nc">SubscriptionId</span> <span class="o">-&gt;</span> <span class="nc">Topic</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span></code></pre></td></tr></table></div></figure>

<p>Production code will wrap an instance of an EasyNetQ <code>IBus</code> here, but for testing we&#39;re going to build an in memory version.</p>

<h2>Underlying concepts</h2>

<p>What concepts are we going to have in play here? Well, there&#39;s going to be subscribers, who should have an action called when a relevant message is published. And we&#39;re going to want to be able to actually publish the messages.</p>

<p>It makes sense to model the message bus as an agent which can have commands sent to it (a <code>MailboxProcessor</code> in F# terms), so let&#39;s model the commands we want to be able to send first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">MemoryBus</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">Subscriber</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Action</span> <span class="o">:</span> <span class="n">obj</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Type</span> <span class="o">:</span> <span class="nc">Type</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Binding</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">Subscriber</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">:</span> <span class="nc">SubscriptionId</span>
</span><span class='line'>      <span class="nc">Binding</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nc">Action</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">Subscriber</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span> <span class="n">o</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">o</span> <span class="o">|&gt;</span> <span class="n">unbox</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">|&gt;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Type</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">BusMessage</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Publish</span> <span class="k">of</span> <span class="n">obj</span> <span class="o">*</span> <span class="nc">Type</span> <span class="o">*</span> <span class="nc">DateTime</span> <span class="o">*</span> <span class="nc">Topic</span> <span class="n">option</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Subscribe</span> <span class="k">of</span> <span class="nc">Subscriber</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Stop</span> <span class="k">of</span> <span class="nc">AsyncReplyChannel</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>So, a subscriber knows what topic it is binding to (which might include wildcards, we&#39;ll get there in a moment), which <code>type</code> it is listening for, and an action to call when that type arrives. The agent will need to store a list of subscribers, so we wrap our generic <code>Subscriber&lt;&#39;a&gt;</code> type in a non-generic interface (<code>Subscriber</code>).</p>

<p>The <code>BusMessage</code> type then reflects the three things that we might ask the agent to do: publish a message to current subscribers, add a subscriber, or shut down and reply when shutting down is complete.</p>

<h2>Add the logic</h2>

<p>We&#39;ll also need some logic for determining whether a topic published to match a topic which has been bound to by a subscriber. Topics in RabbitMQ are multipart strings with <code>.</code> separators - &quot;one.two.three&quot;, and messages must be published to a specific topic. But when you bind a subscriber, you can bind with two types of wildcard. A <code>*</code> matches a &quot;section&quot; (so binding to &quot;*.two&quot; will receive messages published to &quot;one.two&quot; and &quot;1.two&quot;), while a <code>#</code> finishes a binding string and matches any number of sections (so binding to &quot;one.#&quot; will match &quot;one.two&quot;, &quot;one.2&quot; and &quot;one.two.three&quot;).</p>

<p>Our logic ends up looking like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">compareSection</span> <span class="o">(</span><span class="n">topicSection</span> <span class="o">:</span> <span class="kt">string</span><span class="o">,</span> <span class="n">bindingSection</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">bindingSection</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="s2">&quot;#&quot;</span> <span class="o">|</span> <span class="s2">&quot;*&quot;</span> <span class="o">-&gt;</span> <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="k">when</span> <span class="n">bindingSection</span> <span class="o">=</span> <span class="n">topicSection</span> <span class="o">-&gt;</span> <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">false</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">topicBindingMatch</span> <span class="n">topicOpt</span> <span class="o">(</span><span class="n">binding</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">topicOpt</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Some</span> <span class="o">(</span><span class="nc">Topic</span> <span class="n">topic</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">topicSections</span> <span class="o">=</span> <span class="n">topic</span><span class="o">.</span><span class="nc">Split</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">bindingSections</span> <span class="o">=</span> <span class="n">binding</span><span class="o">.</span><span class="nc">Split</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">bindingSections</span><span class="o">.[</span><span class="n">bindingSections</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span> <span class="k">then</span>
</span><span class='line'>            <span class="c1">// Seq.zip truncates the longer sequence of the two</span>
</span><span class='line'>            <span class="c1">// provided - so here we ignore any sections beyond</span>
</span><span class='line'>            <span class="c1">// the &quot;#&quot;</span>
</span><span class='line'>            <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">topicSections</span> <span class="n">bindingSections</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">forall</span> <span class="n">compareSection</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="c1">// If there&#39;s no &quot;#&quot; at the end of the binding, there</span>
</span><span class='line'>            <span class="c1">// can only be a match if there is exactly the same number</span>
</span><span class='line'>            <span class="c1">// of sections; check that before zipping the sections</span>
</span><span class='line'>            <span class="c1">// together to compare</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">bindingSections</span><span class="o">.</span><span class="nc">Length</span> <span class="o">=</span> <span class="n">topicSections</span><span class="o">.</span><span class="nc">Length</span> <span class="k">then</span>
</span><span class='line'>                <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">topicSections</span> <span class="n">bindingSections</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">forall</span> <span class="n">compareSection</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="bp">false</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="c1">// If there is no publish topic, the only binding which can match</span>
</span><span class='line'>        <span class="c1">// is &quot;#&quot; as there are no sections to compare.</span>
</span><span class='line'>        <span class="n">binding</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Build the agent</h2>

<p>We now have all of the logic our agent requires. Let&#39;s put into together into an <code>Async</code> recursive function listening for commands.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="k">private</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="o">(</span><span class="n">agent</span> <span class="o">:</span> <span class="nc">MailboxProcessor</span><span class="o">&lt;</span><span class="nc">BusMessage</span><span class="o">&gt;)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Stop</span> <span class="n">chan</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">chan</span><span class="o">.</span><span class="nc">Reply</span> <span class="bp">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">()</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Subscribe</span> <span class="n">s</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="o">(</span><span class="n">s</span><span class="o">::</span><span class="n">subscribers</span><span class="o">)</span> <span class="n">agent</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Publish</span> <span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="k">type&#39;</span><span class="o">,</span> <span class="n">expireTime</span><span class="o">,</span> <span class="n">topic</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">expireTime</span> <span class="o">&gt;</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">subscribers</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="k">type&#39;</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="nc">Type</span>
</span><span class='line'>                                           <span class="o">&amp;&amp;</span> <span class="n">topicBindingMatch</span> <span class="n">topic</span> <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span><span class="o">)</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span> <span class="n">message</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="n">agent</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>With the correct types to guide us, this function ends up almost trivial. If we receive a stop message, we reply to say we&#39;re stopped and then return <code>unit</code>, meaning we&#39;ll process no further messages.</p>

<p>If we receive a subscriber, we just add it to the list of subscribers and call back into the loop.</p>

<p>And finally, if there&#39;s a request to publish we check the message hasn&#39;t expired and then call of the subscribers that have the correct type and a matching binding (before calling back into the loop).</p>

<h2>Wrap it all in the correct interface</h2>

<p>Now we just need a type which implements the <code>ProcessManagerBus</code> interface and we&#39;re done. We want <code>Dispose</code> to stop the underlying agent, and the other methods are straight forward translations. The only real thing of note here is the line <code>do agent.Error.Add raise</code>. This is needed because by default exceptions thrown in <code>MailboxProcessor</code>s kill the background thread the agent loop is running on, but are not propagated up to the overall process. That&#39;s not the behaviour we want here: if a subscriber throws, we want to know about the error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">MemoryBus</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">agent</span> <span class="o">=</span> <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span><span class="n">loop</span> <span class="bp">[]</span><span class="o">)</span>
</span><span class='line'>    <span class="k">do</span> <span class="n">agent</span><span class="o">.</span><span class="nn">Error</span><span class="p">.</span><span class="nc">Add</span> <span class="n">raise</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">IDisposable</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Dispose</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">PostAndReply</span> <span class="nc">Stop</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">ProcessManagerBus</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">message</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span><span class="o">)</span> <span class="n">expiry</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">box</span> <span class="n">message</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="o">+</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">None</span><span class="o">))</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">TopicPublish</span> <span class="o">(</span><span class="n">message</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span><span class="o">)</span> <span class="n">topic</span> <span class="n">expiry</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">box</span> <span class="n">message</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="o">+</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">topic</span><span class="o">))</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Subscribe</span> <span class="n">sid</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Subscribe</span> <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="n">sid</span><span class="o">;</span> <span class="nc">Binding</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span><span class="o">;</span> <span class="nc">Action</span> <span class="o">=</span> <span class="n">action</span> <span class="o">})</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">TopicSubscribe</span> <span class="n">sid</span> <span class="o">(</span><span class="nc">Topic</span> <span class="n">binding</span><span class="o">)</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Subscribe</span> <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="n">sid</span><span class="o">;</span> <span class="nc">Binding</span> <span class="o">=</span> <span class="n">binding</span><span class="o">;</span> <span class="nc">Action</span> <span class="o">=</span> <span class="n">action</span> <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Fin</h2>

<p>And there you have it! An in memory message bus in 100 lines or less of F# code. For bonus points, here&#39;s a simple set of test cases for it so you can see what it looks like in action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nn">Tests</span><span class="p">.</span><span class="nc">MemoryBus</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'><span class="k">open</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">MemoryBus</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Expecto</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">T1</span> <span class="o">=</span> <span class="nc">T1</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'><span class="k">type</span> <span class="nc">T2</span> <span class="o">=</span> <span class="nc">T2</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Tests</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="n">memoryBusTests</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">testList</span> <span class="s2">&quot;memory bus tests&quot;</span> <span class="o">[</span>
</span><span class='line'>        <span class="n">testCase</span> <span class="s2">&quot;Basic send/subscibe works&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">receivedMessage</span> <span class="o">=</span> <span class="n">ref</span> <span class="nc">None</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">bus</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryBus</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">ProcessManagerBus</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">subId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="s2">&quot;t1&quot;</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Subscribe</span><span class="o">&lt;</span><span class="nc">T1</span><span class="o">&gt;</span> <span class="n">subId</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="nc">T1</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">receivedMessage</span> <span class="o">:=</span> <span class="nc">Some</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">(</span><span class="nc">T1</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMinutes</span> <span class="mi">1</span><span class="o">.)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(!</span><span class="n">receivedMessage</span><span class="o">)</span> <span class="o">(</span><span class="nc">Some</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="s2">&quot;Should match&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">testCase</span> <span class="s2">&quot;Subscribe filters correctly by type&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">receivedMessage</span> <span class="o">=</span> <span class="n">ref</span> <span class="nc">None</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">bus</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryBus</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">ProcessManagerBus</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">subId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="s2">&quot;t1&quot;</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Subscribe</span><span class="o">&lt;</span><span class="nc">T2</span><span class="o">&gt;</span> <span class="n">subId</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="nc">T2</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">receivedMessage</span> <span class="o">:=</span> <span class="nc">Some</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">(</span><span class="nc">T1</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMinutes</span> <span class="mi">1</span><span class="o">.)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(!</span><span class="n">receivedMessage</span><span class="o">)</span> <span class="nc">None</span> <span class="s2">&quot;Should match&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">testCase</span> <span class="s2">&quot;Can publish to topic&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">receivedMessage</span> <span class="o">=</span> <span class="n">ref</span> <span class="nc">None</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">bus</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryBus</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">ProcessManagerBus</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">subId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="s2">&quot;t1&quot;</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicSubscribe</span><span class="o">&lt;</span><span class="nc">T1</span><span class="o">&gt;</span> <span class="n">subId</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;one.two&quot;</span><span class="o">)</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="nc">T1</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">receivedMessage</span> <span class="o">:=</span> <span class="nc">Some</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicPublish</span> <span class="o">(</span><span class="nc">T1</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;one.two&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMinutes</span> <span class="mi">1</span><span class="o">.)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(!</span><span class="n">receivedMessage</span><span class="o">)</span> <span class="o">(</span><span class="nc">Some</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="s2">&quot;Should match&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">testCase</span> <span class="s2">&quot;Only receives from matching topic&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">receivedMessage</span> <span class="o">=</span> <span class="n">ref</span> <span class="nc">None</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">bus</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryBus</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">ProcessManagerBus</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">subId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="s2">&quot;t1&quot;</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicSubscribe</span><span class="o">&lt;</span><span class="nc">T1</span><span class="o">&gt;</span> <span class="n">subId</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;one.two&quot;</span><span class="o">)</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="nc">T1</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">receivedMessage</span> <span class="o">:=</span> <span class="nc">Some</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicPublish</span> <span class="o">(</span><span class="nc">T1</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;two.one&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMinutes</span> <span class="mi">1</span><span class="o">.)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(!</span><span class="n">receivedMessage</span><span class="o">)</span> <span class="nc">None</span> <span class="s2">&quot;Should match&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">testCase</span> <span class="s2">&quot;Matching wildcard topic is matched&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">receivedMessage</span> <span class="o">=</span> <span class="n">ref</span> <span class="nc">None</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">bus</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryBus</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">ProcessManagerBus</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">subId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="s2">&quot;t1&quot;</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicSubscribe</span><span class="o">&lt;</span><span class="nc">T1</span><span class="o">&gt;</span> <span class="n">subId</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;*.two&quot;</span><span class="o">)</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="nc">T1</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">receivedMessage</span> <span class="o">:=</span> <span class="nc">Some</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicPublish</span> <span class="o">(</span><span class="nc">T1</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;one.two&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMinutes</span> <span class="mi">1</span><span class="o">.)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(!</span><span class="n">receivedMessage</span><span class="o">)</span> <span class="o">(</span><span class="nc">Some</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="s2">&quot;Should match&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Appendix 1</h2>

<p>Just to round everything off, here&#39;s a listing of the complete implementation from beginning to end.</p>

<p>File 1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Topic</span> <span class="o">=</span> <span class="nc">Topic</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ProcessManagerBus</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">IDisposable</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">Publish</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">TimeSpan</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">TopicPublish</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">Topic</span> <span class="o">-&gt;</span> <span class="nc">TimeSpan</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">Subscribe</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="nc">SubscriptionId</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">TopicSubscribe</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="nc">SubscriptionId</span> <span class="o">-&gt;</span> <span class="nc">Topic</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span></code></pre></td></tr></table></div></figure>

<p>File 2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">MemoryBus</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">Subscriber</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Action</span> <span class="o">:</span> <span class="n">obj</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Type</span> <span class="o">:</span> <span class="nc">Type</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Binding</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">Subscriber</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">:</span> <span class="nc">SubscriptionId</span>
</span><span class='line'>      <span class="nc">Binding</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nc">Action</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">Subscriber</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span> <span class="n">o</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">o</span> <span class="o">|&gt;</span> <span class="n">unbox</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">|&gt;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Type</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">BusMessage</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Publish</span> <span class="k">of</span> <span class="n">obj</span> <span class="o">*</span> <span class="nc">Type</span> <span class="o">*</span> <span class="nc">DateTime</span> <span class="o">*</span> <span class="nc">Topic</span> <span class="n">option</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Subscribe</span> <span class="k">of</span> <span class="nc">Subscriber</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Stop</span> <span class="k">of</span> <span class="nc">AsyncReplyChannel</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">compareSection</span> <span class="o">(</span><span class="n">topicSection</span> <span class="o">:</span> <span class="kt">string</span><span class="o">,</span> <span class="n">bindingSection</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">bindingSection</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="s2">&quot;#&quot;</span> <span class="o">|</span> <span class="s2">&quot;*&quot;</span> <span class="o">-&gt;</span> <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="k">when</span> <span class="n">bindingSection</span> <span class="o">=</span> <span class="n">topicSection</span> <span class="o">-&gt;</span> <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">false</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">topicBindingMatch</span> <span class="n">topicOpt</span> <span class="o">(</span><span class="n">binding</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">topicOpt</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Some</span> <span class="o">(</span><span class="nc">Topic</span> <span class="n">topic</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">topicSections</span> <span class="o">=</span> <span class="n">topic</span><span class="o">.</span><span class="nc">Split</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">bindingSections</span> <span class="o">=</span> <span class="n">binding</span><span class="o">.</span><span class="nc">Split</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">bindingSections</span><span class="o">.[</span><span class="n">bindingSections</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span> <span class="k">then</span>
</span><span class='line'>            <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">topicSections</span> <span class="n">bindingSections</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">forall</span> <span class="n">compareSection</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">bindingSections</span><span class="o">.</span><span class="nc">Length</span> <span class="o">=</span> <span class="n">topicSections</span><span class="o">.</span><span class="nc">Length</span> <span class="k">then</span>
</span><span class='line'>                <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">topicSections</span> <span class="n">bindingSections</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">forall</span> <span class="n">compareSection</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="bp">false</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">binding</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="k">private</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="o">(</span><span class="n">agent</span> <span class="o">:</span> <span class="nc">MailboxProcessor</span><span class="o">&lt;</span><span class="nc">BusMessage</span><span class="o">&gt;)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Stop</span> <span class="n">chan</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">chan</span><span class="o">.</span><span class="nc">Reply</span> <span class="bp">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">()</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Subscribe</span> <span class="n">s</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="o">(</span><span class="n">s</span><span class="o">::</span><span class="n">subscribers</span><span class="o">)</span> <span class="n">agent</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Publish</span> <span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="k">type&#39;</span><span class="o">,</span> <span class="n">expireTime</span><span class="o">,</span> <span class="n">topic</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">expireTime</span> <span class="o">&gt;</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">subscribers</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="k">type&#39;</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="nc">Type</span>
</span><span class='line'>                                           <span class="o">&amp;&amp;</span> <span class="n">topicBindingMatch</span> <span class="n">topic</span> <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span><span class="o">)</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span> <span class="n">message</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="n">agent</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">MemoryBus</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">agent</span> <span class="o">=</span> <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span><span class="n">loop</span> <span class="bp">[]</span><span class="o">)</span>
</span><span class='line'>    <span class="k">do</span> <span class="n">agent</span><span class="o">.</span><span class="nn">Error</span><span class="p">.</span><span class="nc">Add</span> <span class="n">raise</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">IDisposable</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Dispose</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">PostAndReply</span> <span class="nc">Stop</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">ProcessManagerBus</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">message</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span><span class="o">)</span> <span class="n">expiry</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">box</span> <span class="n">message</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="o">+</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">None</span><span class="o">))</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">TopicPublish</span> <span class="o">(</span><span class="n">message</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span><span class="o">)</span> <span class="n">topic</span> <span class="n">expiry</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">box</span> <span class="n">message</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="o">+</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">topic</span><span class="o">))</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Subscribe</span> <span class="n">sid</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Subscribe</span> <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="n">sid</span><span class="o">;</span> <span class="nc">Binding</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span><span class="o">;</span> <span class="nc">Action</span> <span class="o">=</span> <span class="n">action</span> <span class="o">})</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">TopicSubscribe</span> <span class="n">sid</span> <span class="o">(</span><span class="nc">Topic</span> <span class="n">binding</span><span class="o">)</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Subscribe</span> <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="n">sid</span><span class="o">;</span> <span class="nc">Binding</span> <span class="o">=</span> <span class="n">binding</span><span class="o">;</span> <span class="nc">Action</span> <span class="o">=</span> <span class="n">action</span> <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying .NET Core 2.0 With F# Today]]></title>
    <link href="https://blog.mavnn.co.uk/trying-dotnetcore-2-dot-0-with-f-number-today/"/>
    <updated>2017-08-16T11:15:20+01:00</updated>
    <id>https://blog.mavnn.co.uk/trying-dotnetcore-2-dot-0-with-f-number-today</id>
    <content type="html"><![CDATA[<p>Yesterday, I tried to use .NET Core for F# on day zero. A bit <s>brave</s>foolish, I know, but v2 was supposed to be the one with all the bugs ironed out.</p>

<p>Short version: it&#39;s a lot better, but it&#39;s still easy to hit rough edges.</p>

<p>Longer version: be very careful that you don&#39;t hit issues with versions. On MacOSX, I hit a series of road blocks which made yesterday much more painful than it should have been.</p>

<ul>
<li>If you&#39;re on a Mac, you&#39;ll need to update All The Things&trade; to get a reliable experience. And I don&#39;t just mean all the .NET Core things - full system update and <code>brew upgrade</code> are your friends</li>
<li>Don&#39;t use templates. Not many of them have been updated to 2.0 yet, you get no warnings about the ones which haven&#39;t, and enough has changed that it is very hard to update them manually unless you are a .NET Core expert already. (If you are, I suspect you&#39;re not reading this guide).</li>
<li>Don&#39;t try and update projects unless you know what you&#39;re doing; it cost me a lot of pain yesterday including bizarre internal compiler errors. On the happy news front, just copying across your actual code files works just fine.</li>
<li>Don&#39;t try and use Visual Studio (yet) - I&#39;m not going to go into this one as I&#39;m mainly talking to Mac users, but there has been issues there.</li>
</ul>

<p>With all that said and done, if I skipped using any templates and stuck exclusively to the bundled project options, the actual experience of using <code>dotnet</code> is very pleasant.</p>

<p>For example, setting up a brand new solution with library and test project looks something like below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Create solution file Project.New.sln in current directory</span>
</span><span class='line'>dotnet new sln -n Project.New
</span><span class='line'>
</span><span class='line'><span class="c"># Create library project in directory Project.New.Library</span>
</span><span class='line'><span class="c"># Default proj name is Project.New.Library.fsproj</span>
</span><span class='line'>dotnet new classlib -o Project.New.Library -lang f#
</span><span class='line'>
</span><span class='line'><span class="c"># And again for test library</span>
</span><span class='line'>dotnet new console -o Project.New.Library.Tests -lang f#
</span><span class='line'>
</span><span class='line'><span class="c"># Add projects to solution (can combine to a single line)</span>
</span><span class='line'>dotnet sln add Project.New.Library/Project.New.Library.fsproj
</span><span class='line'>dotnet sln add Project.New.Library.Tests/Project.New.Library.Tests.fsproj
</span><span class='line'>
</span><span class='line'><span class="c"># Set up test console app</span>
</span><span class='line'><span class="nb">cd </span>Project.New.Library.Tests
</span><span class='line'>dotnet add reference ../Project.New.Library/Project.New.Library.fsproj
</span><span class='line'>dotnet add package Expecto
</span><span class='line'><span class="c"># Update Program.fs to run tests (see https://github.com/haf/expecto#testing-hello-world)</span>
</span></code></pre></td></tr></table></div></figure>

<p>At this point, running <code>dotnet run</code> in the test directory should run your example test, and running <code>dotnet build</code> from the solution directory should successfully build your nice, portable, shiny, .NET Core 2.0 code.</p>

<p>Enjoy, and remember this post has a shelf life: hopefully issues like the template woes I had should disappear quickly as the eco-system catches up with the latest release.</p>

<blockquote>
<p>Thanks to Tim Preston for a minor correction to this post; our genius author had managed to copy and paste erroneous commands from his own command history&#8230;</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process Management in EasyNetQ]]></title>
    <link href="https://blog.mavnn.co.uk/process-management-in-easynetq/"/>
    <updated>2017-07-29T12:34:03+01:00</updated>
    <id>https://blog.mavnn.co.uk/process-management-in-easynetq</id>
    <content type="html"><![CDATA[<p>Back in 2015, I wrote about a <a href="https://blog.mavnn.co.uk/easynetq-process-management/">process manager</a> I&#39;d written over
the top of <a href="http://easynetq.com/">EasyNetQ</a>. At the time it was released as open
source, and I was pretty pleased with it. It allowed you to fairly quickly string
together a managed work flow of services steps with built in state management for
each work flow, and avoided many of the potential pitfalls of trying to build
a request/response based system in situations where it isn&#39;t appropriate.</p>

<p>Two years on, I&#39;ve learnt a lot about distributed system design and a lot about
composing logic (<em>cough</em> monads <em>cough</em>) - and the original source is no longer
available from my previous employers where it was written.</p>

<p>Despite that, I&#39;ve had a lot of interest in the library in between, so I&#39;m
embarking on a full, clean room, rewrite incorporating everything I&#39;ve learnt.
This will also allow me to take advantage of the (very) recent move of EasyNetQ
to be .netcore compatible to build the library against .NET Standard, providing
a fully portable solution out of the box.</p>

<p>As with EasyNetQ itself, the major focus of this project will be providing the
best possible developer experience. This means that it will provide sensible
defaults and will be opinionated in places.</p>

<p>Where do you come into all of this? Well, we&#39;re looking for corporate sponsorship
to help accelerate the development process and we&#39;re looking for testers to help
build products with pre-release versions. In both cases you get to help to drive
which opinions the library settles on, and as a corporate sponsor we&#39;ll also help
you get up and running. Whether you&#39;re sponsoring or not, we&#39;d love you to get involved.</p>

<p>And on a more general note, if you find you&#39;re pushing the boundaries of EasyNetQ
in any way and you&#39;d like some help, I&#39;d be happy to set up training or consultancy
for a bespoke solution for you as well. Drop a note to <a href="mailto://us@mavnn.co.uk">us@mavnn.co.uk</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deliberate Poster: Fighting Imposter Syndrome]]></title>
    <link href="https://blog.mavnn.co.uk/deliberate-poster-fighting-imposter-syndrome/"/>
    <updated>2017-05-24T12:01:11+01:00</updated>
    <id>https://blog.mavnn.co.uk/deliberate-poster-fighting-imposter-syndrome</id>
    <content type="html"><![CDATA[<p>I first became aware of Imposter Syndrome via an excellent <a href="https://www.hanselman.com/blog/ImAPhonyAreYou.aspx">blog post by Scott Hanselman</a>, but it immediately struck true.
I&#39;m a self taught programmer who dropped out of a Maths degree, and even now with years of experience that voice is there at the back of my head:</p>

<ul>
<li>&quot;You still make off by one errors, and you think you can train people?&quot;</li>
<li>&quot;How could you have let that bug slip by? It&#39;s obvious, I thought you knew what you were doing?&quot;</li>
<li>&quot;You want people to pay you for this? How exactly are you justifying that one to yourself?&quot;</li>
</ul>

<p>Normally I just try and tell it to shut up: everyone makes mistakes sometimes, I deliver stuff people get value from, etc.</p>

<p>But a few days back, something interesting happened. I&#39;d hit a problem that looked like it should be simple, and I&#39;d been bashing my head against it for a couple of days.
The imposter critic was out in force: &quot;call yourself a coder?&quot;. So I stepped back, took a deep breath, told the voice to stuff it and did the sensible thing. I asked my
co-director (and wife) for help.</p>

<p>Now, this isn&#39;t asking a random person off the street for assistance. She has a high level post-graduate degree in mathematics, is ridiculously good at spotting patterns and logical deduction
and has done some programming in the past herself (of the type you do during a maths degree).</p>

<p>It took me over an hour to explain what the actual problem was.</p>

<p>And as I dived through the OO patterns, domain specific knowledge and implementation constraints that built up into this &quot;simple&quot; problem it occurred to me that maybe I
had learnt something over the years. That maybe I wasn&#39;t as much of an imposter as the voice was trying to tell me. That possibly, just maybe, not being able to solve this
problem, right here, right now, didn&#39;t make me less valuable as a person or less competent as a professional. That the very fact I <em>had this problem</em> was actually evidence
that I had a clue what I was doing, or else I wouldn&#39;t have been able to get here.</p>

<p>So, a technique for all the &quot;imposters&quot; out there when the voice fires up: be deliberate in reminding yourself that you&#39;re actually a poster. Don&#39;t fight the voice with
generalities (even if they&#39;re true) - fight it with specifics.</p>

<p>Even if the specifics are &quot;2 years ago I didn&#39;t know enough to get myself into this mess&quot;.</p>

<p>And you know the bonus extra of this technique? It fights <a href="https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect">Dunning-Kruger</a> too&#8230;</p>

<p>I&#39;ll just be leaving this post lying around here so that my wife can post me a link to it next time I&#39;m in the imposter blues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Mutable State With Computational Expressions]]></title>
    <link href="https://blog.mavnn.co.uk/managing-mutable-state-with-computational-expressions/"/>
    <updated>2017-04-25T23:55:29+01:00</updated>
    <id>https://blog.mavnn.co.uk/managing-mutable-state-with-computational-expressions</id>
    <content type="html"><![CDATA[<p>In mixed paradigm languages such as F# and Scala you frequently end up using
mutable APIs in your &quot;nice&quot; pure functional code. It might be because you&#39;re using
a 3rd party library, or it might be for performance reasons - but either way it&#39;s very
easy to make mistakes with mutable constructs when you&#39;re in a functional mind space, especially if you want to compose operations on instances of a mutable type.</p>

<p>Let&#39;s have a look at one way of handling this issue: custom operations on 
computational expressions. We&#39;ll take the Provided Types API for building
types within a type provider as an example of an API to
use, and see what we can do to wrap it.</p>

<!-- more -->

<p>Firstly, let&#39;s give an example of the issue. Creating even a simple type
within a type provider looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">CambridgeProvider</span><span class="bp">()</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;Mavnn.Provided&quot;</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">myProp</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>      <span class="s2">&quot;StaticProperty&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>      <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>      <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;Hello world&quot;</span> <span class="o">@@&gt;)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">myType</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;StaticType&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'>    <span class="n">myType</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">myProp</span>
</span><span class='line'>    <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">myType</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>

<p>The main problem is right at the end on line 26: having
created your property you need to then add it the the mutable <code>ProvidedTypeDefinition</code>. This is easy to forget on the one hand, and makes it hard too
compose partial type definitions on the other.</p>

<p>One way to handle this would be to create a function that takes a provided
type definition and knows how to amend it with a provided property.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">addHelloWorld</span> <span class="o">(</span><span class="n">ptd</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">myProp</span> <span class="o">=</span>
</span><span class='line'>        <span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>          <span class="s2">&quot;StaticProperty&quot;</span><span class="o">,</span>
</span><span class='line'>          <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>          <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>          <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;Hello world&quot;</span> <span class="o">@@&gt;)</span>
</span><span class='line'>    <span class="n">ptd</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">myProp</span>
</span><span class='line'>    <span class="n">ptd</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now if we have a lot of types that need, say, a &quot;hello world&quot; and &quot;goodbye world&quot; property added we can do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">addCommon</span> <span class="n">ptd</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">ptd</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">addHelloWorld</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">addGoodbyeWorld</span> <span class="c1">// definition left as an exercise</span>
</span></code></pre></td></tr></table></div></figure>

<p>So now you can pass in a <code>ProvidedTypeDefinition</code> and get out one with
your two common properties added. But now the secret is that you want to
pass around these builder functions as much as possible, and only actually
pass in a instance of <code>ProvidedTypeDefinition</code> right at the end; up until
you do, you have something composable and reusable. Once you&#39;ve created your
instance, you&#39;re done.</p>

<p>This sounds similar, but not quite like, continuation passing style programming
as used in things like <code>async</code> under the hood. Which raises the interesting
possibility that we might be able to <strike>ab</strike>use computational
expressions to make our code a bit nicer. Let&#39;s give it a go!</p>

<p>Computational expressions are built via a class with some strictly named
member methods which the F# compiler then uses to translate the computational
expression code into &quot;standard&quot; F#.</p>

<p>The type the CE is going to operate on is going to be
<code>ProvidedTypeDefinition -&gt; ProvidedTypeDefinition</code> (similar to the state
monad for those of you who&#39;ve played with it). But it&#39;s going to be a little
odd, as we have no monad and won&#39;t be following the monad laws, so there&#39;s
really no meaningful bind operation. What would that look like?</p>

<p>Something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">PTD</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span> <span class="o">-&gt;</span> <span class="nc">ProvidedTypeDefinition</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ProvidedTypeBuilder</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Zero</span> <span class="bp">()</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">id</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Return</span> <span class="o">_</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">id</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Bind</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="n">f</span> <span class="o">:</span> <span class="kt">unit</span> <span class="o">-&gt;</span> <span class="nc">PTD</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">fun</span> <span class="n">ptd</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">f</span> <span class="bp">()</span><span class="o">)</span> <span class="o">(</span><span class="n">m</span> <span class="n">ptd</span><span class="o">)</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">m1</span> <span class="o">:</span> <span class="nc">PTD</span><span class="o">,</span> <span class="n">m2</span> <span class="o">:</span> <span class="nc">PTD</span><span class="o">)</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">x</span><span class="o">.</span><span class="nc">Bind</span><span class="o">(</span><span class="n">m1</span><span class="o">,</span> <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">m2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>So we have a bind&#8230; but it can only bind <code>unit</code> and no other type. All
it knows how to deal with is composing two <code>ProvidedTypeBuilder -&gt; ProvidedTypeBuilder</code> functions. <code>Zero</code> and <code>Return</code> make some sense as well: both
can be meaningfully defined using the <code>id</code> function; just take the provided
type definition and pass it on unchanged.</p>

<p>Now we can write code like this!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">typeBuilder</span> <span class="o">=</span> <span class="nc">ProvidedTypeBuilder</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">typeBuilder</span> <span class="o">{</span>
</span><span class='line'>    <span class="bp">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Okay, so I admit we&#39;re not quite there yet. Time to dive into the fun bit;
adding a custom operation to our builder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">PTD</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span> <span class="o">-&gt;</span> <span class="nc">ProvidedTypeDefinition</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ProvidedTypeBuilder</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Zero</span> <span class="bp">()</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">id</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Return</span> <span class="o">_</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">id</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Bind</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="n">f</span> <span class="o">:</span> <span class="kt">unit</span> <span class="o">-&gt;</span> <span class="nc">PTD</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">fun</span> <span class="n">ptd</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">f</span> <span class="bp">()</span><span class="o">)</span> <span class="o">(</span><span class="n">m</span> <span class="n">ptd</span><span class="o">)</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">m1</span> <span class="o">:</span> <span class="nc">PTD</span><span class="o">,</span> <span class="n">m2</span> <span class="o">:</span> <span class="nc">PTD</span><span class="o">)</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">x</span><span class="o">.</span><span class="nc">Bind</span><span class="o">(</span><span class="n">m1</span><span class="o">,</span> <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">m2</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[&lt;</span><span class="nc">CustomOperation</span><span class="o">(</span><span class="s2">&quot;addMember&quot;</span><span class="o">,</span> <span class="nc">MaintainsVariableSpaceUsingBind</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)&gt;]</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">ptd</span><span class="o">,</span> <span class="k">member&#39;</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">func</span> <span class="o">=</span>
</span><span class='line'>          <span class="k">fun</span> <span class="o">(</span><span class="n">instance</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>              <span class="n">instance</span><span class="o">.</span><span class="nc">AddMember</span> <span class="k">member&#39;</span>
</span><span class='line'>              <span class="n">instance</span>
</span><span class='line'>        <span class="n">x</span><span class="o">.</span><span class="nc">Bind</span><span class="o">(</span><span class="n">ptd</span><span class="o">,</span> <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">func</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we&#39;re starting to get somewhere, with code that begins to look like
this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">withHelloWorld</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">typeBuilder</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">addMember</span> <span class="o">(</span><span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>                  <span class="s2">&quot;StaticProperty&quot;</span><span class="o">,</span>
</span><span class='line'>                  <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>                  <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>                  <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;Hello world&quot;</span> <span class="o">@@&gt;))</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>withHelloWorld</code> has a type of <code>ProvidedTypeDefinition -&gt; ProvidedTypeDefinition</code> as you&#39;d expect. But there&#39;s still no easy way to compose these; let&#39;s
add that next.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">ProvidedTypeBuilder</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="c1">// ...snip...</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[&lt;</span><span class="nc">CustomOperation</span><span class="o">(</span><span class="s2">&quot;including&quot;</span><span class="o">,</span> <span class="nc">MaintainsVariableSpaceUsingBind</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)&gt;]</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Including</span><span class="o">(</span><span class="n">ptd</span><span class="o">,</span> <span class="n">builder</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">x</span><span class="o">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">ptd</span><span class="o">,</span> <span class="n">builder</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>The <code>including</code> operation is just a wrapper around combine, but it allows us
to do things like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">withHelloAndGoodbye</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">typeBuilder</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">including</span> <span class="n">withHelloWorld</span>
</span><span class='line'>        <span class="n">addMember</span> <span class="o">(</span><span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>                    <span class="s2">&quot;Goodbye&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>                    <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>                    <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;Goodbye&quot;</span> <span class="o">@@&gt;))</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And now the power of this technique begins to be shown, as we build
blocks of composable code which can be included within each other.</p>

<p>Obviously a lot more could be done at this point: we&#39;ve barely scratched
the provided types API, but we&#39;ll leave the blog post at this point.</p>

<p>This blog post comes with many thanks to <a href="http://twitter.com/kolektiv">Andrew Cherry</a> who took some pretty mad lunch time discussions and turned them into
the very real and usable <a href="https://docs.freya.io/en/latest/">Freya</a> (along with a bunch of collaborators). Freya makes use of this kind of
technique heavily.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Return to the Ivory Tower Video]]></title>
    <link href="https://blog.mavnn.co.uk/return-to-the-ivory-tower-video/"/>
    <updated>2017-04-20T13:17:18+01:00</updated>
    <id>https://blog.mavnn.co.uk/return-to-the-ivory-tower-video</id>
    <content type="html"><![CDATA[<p>As mentioned on the blog already, I had the opportunity to talk at this year&#39;s F# Exchange at <a href="https://skillsmatter.com/">skillsmatter</a>. As always, they&#39;ve done an excellent job on the video production, so if you&#39;re interested in what makes F# different from other programming languages have a watch of <a href="https://skillsmatter.com/skillscasts/9883-fixing-real-life-problems-from-the-ivory-tower">Fixing Real Life Problems From the Ivory Tower</a> (free log in required).</p>

<p>If you like the talk and would like to learn more, these are also the subjects that I&#39;ll be covering in my recently announced <a href="https://blog.mavnn.co.uk/level-up-your-f-number-skills/">Level Up Your F#</a> course, which will be running for 2 days in London on the 15th-16th June.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slides for F# Exchange 2017]]></title>
    <link href="https://blog.mavnn.co.uk/slides-for-f-number-exchange-2017/"/>
    <updated>2017-04-07T13:37:13+01:00</updated>
    <id>https://blog.mavnn.co.uk/slides-for-f-number-exchange-2017</id>
    <content type="html"><![CDATA[<p>My &quot;slides&quot; from my talk at F# Exchange were actually just a set of .fsx scripts this year, enabling me to play a bit live during the presentation.</p>

<p>If you&#39;re interested you can find them on my github account at <a href="https://github.com/mavnn/FSharpX2017">https://github.com/mavnn/FSharpX2017</a>.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Level Up Your F# Skills]]></title>
    <link href="https://blog.mavnn.co.uk/level-up-your-f-number-skills/"/>
    <updated>2017-04-06T10:20:01+01:00</updated>
    <id>https://blog.mavnn.co.uk/level-up-your-f-number-skills</id>
    <content type="html"><![CDATA[<p>@mavnn ltd have always offered training as a service, but we&#39;re now pleased
to announce our very first public training event. As readers of this blog (or people attending <a href="https://skillsmatter.com/conferences/8053-f-sharp-exchange-2017#skillscasts">F# Exchange</a>), you
get first notification!</p>

<p>&quot;Level Up Your F#&quot; is going to be a two day course running in London on the 15th-16th June.
We&#39;ll run through a syllabus of language features unique to F# and not shared by
the other dotnet languages - features that offer unparalleled expressive power 
at the cost of a learning curve and the occasional sharp edge. In the course we&#39;ll
give you a leg up that curve, and protect you from a few cuts along the way.</p>

<p>This course will be aimed at people who have spent some time coding in F#
(possibly after taking a course like the &quot;<a href="https://skillsmatter.com/courses/473-tomas-petricek-phil-trelford-fast-track-to-fsharp#overview">Fast Track to F#</a>&quot;) and realise that their
projects could benefit from a deeper understanding of F# special
abilities. These techniques are especially useful for writing generic,
reusable code - whether that&#39;s core internal code or widely used libraries.</p>

<p>It will be a small group, allowing for personalization and some flexibility in design,
but at its core it will be build up through four major topics:</p>

<ol>
<li><p>Useful tricks: active patterns, member constraints, etc</p></li>
<li><p>Quotations: what they are, and how and when to use them</p></li>
<li><p>Type Providers: how to build them, and use them for type safety</p></li>
<li><p>Computational Expressions: build powerful abstractions and then expose them in an easy to use way</p></li>
</ol>

<p>We&#39;re aiming for a cost of £1,295.00 for the course with early bird (<strike>10</strike> 15% until the 15th May) and group discounts available (contact <a href="mailto:us@mavnn.co.uk">us</a>). Due to the nature of the course, there will be a hard limit of 12 attendees. There&#39;s also a limited quantity of super-early bird tickets available if you&#39;re quick! Register your interest soon to secure a ticket, and if there&#39;s a waiting list we&#39;ll consult you about
additional dates.</p>

<p>As always with @mavnn training courses, we&#39;re also willing to come and deliver this training on site and tailor it to your specific needs. Contact us at <a href="mailto:us@mavnn.co.uk">us@mavnn.co.uk</a> to discuss requirements and quotes.</p>

<!-- more -->

<h3>Details:</h3>

<h2>How do I book?</h2>

<p>You can book right here! :)</p>

<div style="width:100%; text-align:left;"><iframe src="https://blog.mavnn.co.uk//eventbrite.co.uk/tickets-external?eid=33720450776&ref=etckt" frameborder="0" height="478" width="100%" vspace="0" hspace="0" marginheight="5" marginwidth="5" scrolling="auto" allowtransparency="true"></iframe><div style="font-family:Helvetica, Arial; font-size:12px; padding:10px 0 5px; margin:2px; width:100%; text-align:left;" ><a class="powered-by-eb" style="color: #ADB0B6; text-decoration: none;" target="_blank" href="http://www.eventbrite.co.uk/">Powered by Eventbrite</a></div></div>

<p>If your ad/privacy blocker doesn&#39;t like the embedded widget, you can also book direct on <a href="https://www.eventbrite.co.uk/e/level-up-your-f-skills-tickets-33720450776">eventbrite</a>.</p>

<h2>Prerequisites</h2>

<p>We will expect attendees to be familiar with F# syntax, including the use of discriminated unions and computational expressions such as async. Other concepts will be explained and explored during the course.</p>

<h2>What to bring</h2>

<p>You will need to bring your own computer with a F# development environment already
installed. VS Code, Visual Studio, Vim, other editor that doesn&#39;t begin with &quot;V&quot;: 
all are fine as long as you can write and compile F# code on the machine. Extra drink
token for anyone who brings a Raspberry Pi as their dev environment!</p>

<h2>What you&#39;ll get</h2>

<p>2 days of workshops guiding you through the unique features of F#, along with code
and exercises to take away with you.</p>

<p>Breakfast, coffee, lunch, and dinner provided within the course costing including
a round of drinks for the evening of the first day.</p>

<h2>Where will it be</h2>

<p>At the <a href="https://wellcomecollection.org/">Wellcome Collection</a>, right next to Euston Station.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Returning to the Ivory Tower]]></title>
    <link href="https://blog.mavnn.co.uk/returning-to-the-ivory-tower/"/>
    <updated>2017-04-03T13:49:25+01:00</updated>
    <id>https://blog.mavnn.co.uk/returning-to-the-ivory-tower</id>
    <content type="html"><![CDATA[<blockquote>
<p>But why should I learn F#?</p>
</blockquote>

<p>I&#39;m glad you asked! With multiple languages targeting the CLR it can seem just to be a matter of preference. Do you like curly braces, or significant white space?</p>

<p>But it soon becomes apparent there&#39;s a bit more to it than that; at first you spot pattern matching and discriminated unions. And then you start noticing
a bunch of other things which look cool&#8230; but it&#39;s not quite so obvious how to use them or what to do with them. Last year I was able to give a <a href="https//blog.mavnn.co.uk/video-and-slides-for-from-the-ivory-tower/">lightning talk</a> at F# Exchange on some of these language features and the response was positive
enough that I&#39;m back at <a href="https://skillsmatter.com/conferences/8053-f-sharp-exchange-2017">F# Exchange 2017</a> to give the full version.</p>

<p>So: whether it&#39;s active patterns, computational expressions, type providers or quotations I&#39;ll be running through practical examples of how these features
can be used, and how to get started creating your own examples.</p>

<p>And apart from being hyped to give my own talk, it&#39;s going to be great to meet up with the F# community again and meet some new faces. The opportunity to
meet in person people I&#39;ve exchanged ideas with online (hi Marcus Griep, Dave Thomas, &#8230;!) is invaluable. And even for someone who&#39;s been around F#
for a while like me, there&#39;s always new things going on; Puritas looks fascinating.</p>

<p>Looking forward to meeting a bunch of you there, and you should start seeing a bit more appearing on this blog again after the conference. The last year
has been pretty intense, but I&#39;m hoping to make some announcements of interest to the F# community over the next couple of months.</p>

<p><em>Is this where I&#39;m supposed to say &quot;watch this space&quot;?</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent 2016]]></title>
    <link href="https://blog.mavnn.co.uk/advent-2016/"/>
    <updated>2016-12-18T00:30:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/advent-2016</id>
    <content type="html"><![CDATA[<style>
table.jup, .jup th, .jup td {
  border: 1px solid #e7e3e7;
  padding: 0.5em;
  margin: 0.5em;
}
table.jup  {
  margin-bottom: 1.5em;
}
</style>

<p>Each year I like to make my F# advent post centered around an aspect of the actual Christmas story, so this year I decided to look at the actual text of the Christmas story.</p>

<p>There are a couple of direct historical accounts recorded in the bible, in the Gospels of Mark and Luke. But Jesus&#39;s birth is a central point of the overall biblical story, with links to the Old Testiment books written before and referenced in places through the New Testiment.</p>

<p>Sounds like a graph to me, so lets see how far we can take some analysis.</p>

<p>Fortunately, someone has already produced a <a href="https://www.openbible.info/labs/cross-references/">text file with a whole bunch of cross references</a> in a nice regular format. So all we need to get started is a nice parser. We&#39;ll also want to pull in some metadata about the structure of the bible as a book in JSON format from the people at <a href="http://bibles.org/pages/api/documentation">bibles.org</a>.</p>

<p>Time to reference some dependencies to do our heavy lifting for us: FParsec for parsing, and FSharp.Data for the JSON type provider.</p>

<p>I&#39;m writing this in the excellent Jupyter F# notebook (and then exporting it as markdown), so I&#39;ll use their Paket helpers to grab my dependencies (this should work on the Azure notebooks as well, although I&#39;ve only tried it locally).</p>

<!-- more -->

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;Paket.fsx&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nn">Paket</span><span class="p">.</span><span class="nc">Package</span> <span class="o">[</span><span class="s2">&quot;FParsec&quot;</span><span class="o">;</span> <span class="s2">&quot;FSharp.Data&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">&lt;null&gt;
</code></pre></div>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;packages/FParsec/lib/net40-client/FParsecCS.dll&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;packages/FParsec/lib/net40-client/FParsec.dll&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;packages/FSharp.Data/lib/net40/FSharp.Data.dll&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;packages/FSharp.Data/lib/net40/FSharp.Data.DesignTime.dll&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;packages/Zlib.Portable/lib/portable-net4+sl5+wp8+win8+wpa81+MonoTouch+MonoAndroid/Zlib.Portable.dll&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>So. This is F#, so the first thing we&#39;ll be wanting is our domain model. What do we need to represent our data in the type system?</p>

<p>Well, there is a standardized system for referencing locations in biblical text; we give a book of the bible (the bible is actually a mini-library of sub-books written at different times), the chapter (in theory a thematic block within a book) and a verse (a fairly arbitrary devision of a sentence or two of text). The chapter and verse devisions were not added by the authors, but by monks and scholars well after the fact, but they do give us an accurate way of pointing to a small defined chunk of biblical text between different printings and translations.</p>

<p>It&#39;s also frequently useful to refer to a range of verses with in a book.</p>

<p>So we&#39;re going to define three main types: <code>ChapterAndVerse</code> (what it sounds like), <code>Location</code> (book name and <code>ChapterAndVerse</code>) and <code>Range</code> (book name, start <code>ChapterAndVerse</code> and end <code>ChapterAndVerse</code>).</p>

<p>We&#39;ll use units of measure to make sure we can&#39;t swap chapters for verses by mistake, and add some helper methods to give nice string representations of the types and a concise syntax for creating instances of the types.</p>

<p>As an aside: the ordering of the books within the bible is fairly arbitrary, so a range that crosses between two books is meaningless. This is why a range is between to <code>ChapterAndVerse</code>s, not between two <code>Location</code>s - remember folks, make illegal states unrepresentable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">[&lt;</span><span class="nc">Measure</span><span class="o">&gt;]</span> <span class="k">type</span> <span class="nc">Chapter</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Measure</span><span class="o">&gt;]</span> <span class="k">type</span> <span class="nc">Verse</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Measure</span><span class="o">&gt;]</span> <span class="k">type</span> <span class="n">c</span> <span class="o">=</span> <span class="nc">Chapter</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Measure</span><span class="o">&gt;]</span> <span class="k">type</span> <span class="n">v</span> <span class="o">=</span> <span class="nc">Verse</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ChapterAndVerse</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">{</span> <span class="nc">Chapter</span> <span class="o">:</span> <span class="kt">int</span><span class="o">&lt;</span><span class="nc">Chapter</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="nc">Verse</span> <span class="o">:</span> <span class="kt">int</span><span class="o">&lt;</span><span class="nc">Verse</span><span class="o">&gt;</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">member</span> <span class="nc">Make</span> <span class="n">c</span> <span class="n">v</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Chapter</span> <span class="o">=</span> <span class="n">c</span>
</span><span class='line'>      <span class="nc">Verse</span> <span class="o">=</span> <span class="n">v</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="n">x</span><span class="o">.</span><span class="nc">ToString</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">sprintf</span> <span class="s2">&quot;%d.%d&quot;</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="nc">Chapter</span> <span class="o">/</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="nc">Verse</span> <span class="o">/</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">cv</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">ChapterAndVerse</span><span class="p">.</span><span class="nc">Make</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Location</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">{</span> <span class="nc">Book</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nc">ChapterAndVerse</span> <span class="o">:</span> <span class="nc">ChapterAndVerse</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">member</span> <span class="nc">Make</span> <span class="n">b</span> <span class="n">c</span> <span class="n">v</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Book</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'>      <span class="nc">ChapterAndVerse</span> <span class="o">=</span> <span class="o">{</span> <span class="nc">Chapter</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span> <span class="nc">Verse</span> <span class="o">=</span> <span class="n">v</span> <span class="o">}</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="n">x</span><span class="o">.</span><span class="nc">ToString</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>     <span class="n">sprintf</span> <span class="s2">&quot;%s.%O&quot;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Book</span> <span class="n">x</span><span class="o">.</span><span class="nc">ChapterAndVerse</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">loc</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">Location</span><span class="p">.</span><span class="nc">Make</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Range</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">{</span> <span class="nc">Book</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nc">Start</span> <span class="o">:</span> <span class="nc">ChapterAndVerse</span>
</span><span class='line'>    <span class="nc">End</span> <span class="o">:</span> <span class="nc">ChapterAndVerse</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">member</span> <span class="nc">Make</span> <span class="n">b</span> <span class="n">s</span> <span class="n">e</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Book</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'>      <span class="nc">Start</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>      <span class="nc">End</span> <span class="o">=</span> <span class="n">e</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="n">x</span><span class="o">.</span><span class="nc">ToString</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">sprintf</span> <span class="s2">&quot;%s.%O-%s.%O&quot;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Book</span> <span class="n">x</span><span class="o">.</span><span class="nc">Start</span> <span class="n">x</span><span class="o">.</span><span class="nc">Book</span> <span class="n">x</span><span class="o">.</span><span class="nc">End</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">r</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">Range</span><span class="p">.</span><span class="nc">Make</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

<p>We&#39;ll also need to be able to test if a location is within a range:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">contains</span> <span class="o">(</span><span class="n">range</span> <span class="o">:</span> <span class="nc">Range</span><span class="o">)</span> <span class="n">location</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">lower</span> <span class="o">=</span> <span class="o">{</span> <span class="nn">Location</span><span class="p">.</span><span class="nc">Book</span> <span class="o">=</span> <span class="n">range</span><span class="o">.</span><span class="nc">Book</span><span class="o">;</span> <span class="nc">ChapterAndVerse</span> <span class="o">=</span> <span class="n">range</span><span class="o">.</span><span class="nc">Start</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">upper</span> <span class="o">=</span> <span class="o">{</span> <span class="nn">Location</span><span class="p">.</span><span class="nc">Book</span> <span class="o">=</span> <span class="n">range</span><span class="o">.</span><span class="nc">Book</span><span class="o">;</span> <span class="nc">ChapterAndVerse</span> <span class="o">=</span> <span class="n">range</span><span class="o">.</span><span class="nc">End</span> <span class="o">}</span>
</span><span class='line'>  <span class="n">location</span> <span class="o">&gt;=</span> <span class="n">lower</span> <span class="o">&amp;&amp;</span> <span class="n">location</span> <span class="o">&lt;=</span> <span class="n">upper</span>
</span></code></pre></td></tr></table></div></figure>

<p>And get a feel of how this all works.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">contains</span> <span class="o">(</span><span class="n">r</span> <span class="s2">&quot;Gen&quot;</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">10</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;))</span> <span class="o">(</span><span class="n">loc</span> <span class="s2">&quot;Gen&quot;</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">true
</code></pre></div>
<p>Genesis 1:2 (verse 2 of chapter 1 of the book of Genesis) is indeed within the range Genesis 1:1-2:10.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">contains</span> <span class="o">(</span><span class="n">r</span> <span class="s2">&quot;Gen&quot;</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">10</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;))</span> <span class="o">(</span><span class="n">loc</span> <span class="s2">&quot;Gen&quot;</span> <span class="mi">3</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">false
</code></pre></div>
<p>While Genesis 3:2 is not. Good stuff.</p>

<p>We have a working domain now, let&#39;s have a look at the input data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
</span><span class='line'><span class="k">let</span> <span class="n">input</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllLines</span> <span class="o">&lt;|</span> <span class="nn">Path</span><span class="p">.</span><span class="nc">Combine</span><span class="o">(__</span><span class="n">SOURCE_DIRECTORY__</span><span class="o">,</span> <span class="s2">&quot;cross_references.txt&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">input</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">[|&quot;From Verse   To Verse    Votes   #www.openbible.info CC-BY 2016-12-05&quot;;
  &quot;Gen.1.1  Heb.11.3    67&quot;; &quot;Gen.1.1   1Chr.16.26  11&quot;; &quot;Gen.1.1   Eccl.12.1   4&quot;;
  &quot;Gen.1.1  Prov.3.19   19&quot;; &quot;Gen.1.1   Ps.124.8    16&quot;; &quot;Gen.1.1   Isa.65.17   8&quot;;
  &quot;Gen.1.1  Ps.104.24   17&quot;; &quot;Gen.1.1   Ps.121.2    14&quot;; &quot;Gen.1.1   Rev.14.7    23&quot;;
  &quot;Gen.1.1  Isa.40.26   18&quot;; &quot;Gen.1.1   Rev.3.14    9&quot;; &quot;Gen.1.1    Job.38.4    43&quot;;
  &quot;Gen.1.1  Exod.20.11  34&quot;; &quot;Gen.1.1   Isa.37.16   17&quot;; &quot;Gen.1.1   Prov.16.4   14&quot;;
  &quot;Gen.1.1  Ps.104.30   14&quot;; &quot;Gen.1.1   Col.1.16-Col.1.17   36&quot;; &quot;Gen.1.1   1John.1.1   14&quot;;
  &quot;Gen.1.1  Isa.45.18   53&quot;; &quot;Gen.1.1   2Pet.3.5    26&quot;; &quot;Gen.1.1   Rom.1.19-Rom.1.20   15&quot;;
  &quot;Gen.1.1  Isa.44.24   26&quot;; &quot;Gen.1.1   Ps.115.15   21&quot;; &quot;Gen.1.1   Mark.13.19  14&quot;;
  &quot;Gen.1.1  Isa.42.5    42&quot;; &quot;Gen.1.1   Ps.134.3    14&quot;; &quot;Gen.1.1   Rev.21.6    3&quot;;
  &quot;Gen.1.1  Jer.51.15   21&quot;; &quot;Gen.1.1   Rev.22.13   4&quot;; &quot;Gen.1.1    Ps.33.6 15&quot;;
  &quot;Gen.1.1  Isa.51.13   17&quot;; &quot;Gen.1.1   Isa.40.28   17&quot;; &quot;Gen.1.1   John.1.1-John.1.3   56&quot;;
  &quot;Gen.1.1  Ps.89.11-Ps.89.12   16&quot;; &quot;Gen.1.1   Ps.90.2 18&quot;; &quot;Gen.1.1   Matt.11.25  2&quot;;
  &quot;Gen.1.1  Jer.32.17   21&quot;; &quot;Gen.1.1   Ps.148.4-Ps.148.5   16&quot;; &quot;Gen.1.1   Rev.10.6    18&quot;;
  &quot;Gen.1.1  Ps.96.5 13&quot;; &quot;Gen.1.1   Isa.51.16   17&quot;; &quot;Gen.1.1   Jer.10.12   21&quot;;
  &quot;Gen.1.1  Ps.102.25   18&quot;; &quot;Gen.1.1   Rom.11.36   14&quot;; &quot;Gen.1.1   Acts.14.15  21&quot;;
  &quot;Gen.1.1  Job.26.13   9&quot;; &quot;Gen.1.1    Eph.3.9 14&quot;; &quot;Gen.1.1   Rev.4.11    44&quot;;
  &quot;Gen.1.1  Ps.33.9 17&quot;; &quot;Gen.1.1   Neh.9.6 28&quot;; &quot;Gen.1.1   Ps.146.6    17&quot;;
  &quot;Gen.1.1  Heb.3.4 15&quot;; &quot;Gen.1.1   Heb.1.2 19&quot;; &quot;Gen.1.1   Heb.1.10    41&quot;;
  &quot;Gen.1.1  Ps.136.5    24&quot;; &quot;Gen.1.1   Zech.12.1   16&quot;; &quot;Gen.1.1   Exod.31.18  -11&quot;;
  &quot;Gen.1.1  Prov.8.22-Prov.8.30 19&quot;; &quot;Gen.1.1   Acts.17.24  39&quot;;
  &quot;Gen.1.1  Acts.4.24   16&quot;; &quot;Gen.1.1   1Cor.8.6    18&quot;; &quot;Gen.1.1   Ps.8.3  17&quot;;
  &quot;Gen.1.2  Jer.4.23    17&quot;; &quot;Gen.1.2   Ps.33.6 1&quot;; &quot;Gen.1.2    Job.26.14   0&quot;;
  &quot;Gen.1.2  Nah.2.10    -5&quot;; &quot;Gen.1.2   Job.26.7    0&quot;; &quot;Gen.1.2    Isa.40.12-Isa.40.14 -2&quot;;
  &quot;Gen.1.2  Isa.45.18   7&quot;; &quot;Gen.1.2    Ps.104.30   9&quot;; &quot;Gen.1.3    1John.2.8   3&quot;;
  &quot;Gen.1.3  Job.36.30   1&quot;; &quot;Gen.1.3    Ps.33.9 4&quot;; &quot;Gen.1.3    Eph.5.8 1&quot;;
  &quot;Gen.1.3  Isa.60.19   7&quot;; &quot;Gen.1.3    2Cor.4.6    14&quot;; &quot;Gen.1.3   Isa.45.7    7&quot;;
  &quot;Gen.1.3  Ps.97.11    4&quot;; &quot;Gen.1.3    John.11.43  -1&quot;; &quot;Gen.1.3   1John.1.5   8&quot;;
  &quot;Gen.1.3  John.1.9    2&quot;; &quot;Gen.1.3    Job.38.19   3&quot;; &quot;Gen.1.3    John.3.19   3&quot;;
  &quot;Gen.1.3  Ps.33.6 6&quot;; &quot;Gen.1.3    John.1.5    9&quot;; &quot;Gen.1.3    Matt.8.3    -2&quot;;
  &quot;Gen.1.3  Ps.148.5    5&quot;; &quot;Gen.1.3    Eph.5.14    2&quot;; &quot;Gen.1.3    Ps.104.2    2&quot;;
  &quot;Gen.1.3  Ps.118.27   1&quot;; &quot;Gen.1.3    1Tim.6.16   1&quot;; &quot;Gen.1.4    Gen.1.18    4&quot;;
  &quot;Gen.1.4  Gen.1.10    1&quot;; &quot;Gen.1.4    Eccl.11.7   1&quot;; &quot;Gen.1.4    Gen.1.25    1&quot;;
  &quot;Gen.1.4  Gen.1.31    1&quot;; &quot;Gen.1.4    Eccl.2.13   2&quot;; &quot;Gen.1.4    Gen.1.12    2&quot;;
  &quot;Gen.1.5  Gen.1.23    2&quot;; ...|]
</code></pre></div>
<p>Looking fairly straight forward here; in fact, after a brief search I realised the format versed here is actually based on a standard called <a href="http://www.crosswire.org/osis/">OSIS</a>, although without all of the unneeded XML bits. Good call.</p>

<p>&quot;Votes&quot; is taken from the original source of these cross references, a context in which it was possible for people to agree or disagree on whether the verses in question are actually linked. For this post I&#39;m just going to ignore the votes, although they&#39;d make an interesting weighting for future investigations.</p>

<p>Time to build a parser to turn this text format into our nice domain types.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">FParsec</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">makeString</span> <span class="n">chars</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">chars</span> <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">ofList</span> <span class="o">|&gt;</span> <span class="nn">System</span><span class="p">.</span><span class="nc">String</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// parse a location</span>
</span><span class='line'><span class="k">let</span> <span class="n">plocation</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">dot</span> <span class="o">=</span> <span class="n">pchar</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">notDot</span> <span class="o">=</span> <span class="n">satisfy</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span> <span class="o">&lt;&gt;</span> <span class="sc">&#39;.&#39;</span><span class="o">)</span>
</span><span class='line'>  <span class="c1">// Take at least one non-dot character.</span>
</span><span class='line'>  <span class="c1">// Build a string from the characters taken.</span>
</span><span class='line'>  <span class="c1">// This is the book name.</span>
</span><span class='line'>  <span class="o">(</span><span class="n">many1</span> <span class="n">notDot</span> <span class="o">|&gt;&gt;</span> <span class="n">makeString</span><span class="o">)</span>
</span><span class='line'>  <span class="c1">// Check the book name is followed by a dot and</span>
</span><span class='line'>  <span class="c1">// then throw it away (.&gt;&gt; only keeps the result</span>
</span><span class='line'>  <span class="c1">// from the left)</span>
</span><span class='line'>  <span class="o">.&gt;&gt;</span> <span class="n">dot</span>
</span><span class='line'>  <span class="c1">// Parse a int; keep both the book and the int.</span>
</span><span class='line'>  <span class="c1">// This is the chapter (.&gt;&gt;. keeps left and right</span>
</span><span class='line'>  <span class="c1">// results, puts them in a tuple)</span>
</span><span class='line'>  <span class="o">.&gt;&gt;.</span> <span class="n">pint32</span>
</span><span class='line'>  <span class="c1">// As above.</span>
</span><span class='line'>  <span class="o">.&gt;&gt;</span> <span class="n">dot</span>
</span><span class='line'>  <span class="c1">// Capture the verse int; we now have a tuple on</span>
</span><span class='line'>  <span class="c1">// the left so we end up with a tuple containing</span>
</span><span class='line'>  <span class="c1">// a tuple and an int</span>
</span><span class='line'>  <span class="o">.&gt;&gt;.</span> <span class="n">pint32</span>
</span><span class='line'>  <span class="c1">// Map the awkward tuple structure into our nice</span>
</span><span class='line'>  <span class="c1">// domain type ``Location`` if we&#39;ve found all of</span>
</span><span class='line'>  <span class="c1">// the required data</span>
</span><span class='line'>  <span class="o">|&gt;&gt;</span> <span class="o">(</span><span class="k">fun</span> <span class="o">((</span><span class="n">book</span><span class="o">,</span> <span class="n">chapter</span><span class="o">),</span> <span class="n">verse</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>       <span class="n">loc</span> <span class="n">book</span> <span class="o">(</span><span class="n">chapter</span> <span class="o">*</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">verse</span> <span class="o">*</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Parse a range</span>
</span><span class='line'><span class="k">let</span> <span class="n">prange</span> <span class="o">=</span>
</span><span class='line'>  <span class="c1">// In the format above, a range is either a single</span>
</span><span class='line'>  <span class="c1">// verse (representation same as a location) or as</span>
</span><span class='line'>  <span class="c1">// a start and an end location separated by &quot;-&quot;.</span>
</span><span class='line'>  <span class="c1">// We&#39;ll create a parser for the optional second half</span>
</span><span class='line'>  <span class="c1">// first...</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">endOfRange</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">pchar</span> <span class="sc">&#39;-&#39;</span>
</span><span class='line'>    <span class="c1">// &gt;&gt;. throws away the result from the left</span>
</span><span class='line'>    <span class="o">&gt;&gt;.</span> <span class="n">plocation</span>
</span><span class='line'>  <span class="c1">// Here we take the start and optional end location</span>
</span><span class='line'>  <span class="c1">// and then map them to our domain type.</span>
</span><span class='line'>  <span class="n">plocation</span> <span class="o">.&gt;&gt;.</span> <span class="o">(</span><span class="n">opt</span> <span class="n">endOfRange</span><span class="o">)</span>
</span><span class='line'>  <span class="o">&gt;&gt;=</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">starting</span><span class="o">,</span> <span class="n">ending</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">fun</span> <span class="n">stream</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">ending</span> <span class="o">=</span> <span class="n">defaultArg</span> <span class="n">ending</span> <span class="n">starting</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">starting</span><span class="o">.</span><span class="nc">Book</span> <span class="o">&lt;&gt;</span> <span class="n">ending</span><span class="o">.</span><span class="nc">Book</span> <span class="k">then</span>
</span><span class='line'>      <span class="nc">Reply</span><span class="o">(</span><span class="nc">Error</span><span class="o">,</span> <span class="n">expectedString</span> <span class="s2">&quot;Both ends of range should be in the same book&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">r</span> <span class="n">starting</span><span class="o">.</span><span class="nc">Book</span> <span class="n">starting</span><span class="o">.</span><span class="nc">ChapterAndVerse</span> <span class="n">ending</span><span class="o">.</span><span class="nc">ChapterAndVerse</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nc">Reply</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Finally, a row from the text file is just a location</span>
</span><span class='line'><span class="c1">// followed by space, followed by a range, then a space</span>
</span><span class='line'><span class="c1">// and the votes. Spaces and votes are ignored by careful</span>
</span><span class='line'><span class="c1">// use of discarding operators.</span>
</span><span class='line'><span class="k">let</span> <span class="n">row</span> <span class="o">:</span> <span class="nc">Parser</span><span class="o">&lt;_,</span> <span class="kt">unit</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">plocation</span>
</span><span class='line'>  <span class="o">.&gt;&gt;</span> <span class="n">spaces1</span>
</span><span class='line'>  <span class="o">.&gt;&gt;.</span> <span class="n">prange</span>
</span><span class='line'>  <span class="o">.&gt;&gt;</span> <span class="n">spaces1</span>
</span><span class='line'>  <span class="o">.&gt;&gt;</span> <span class="n">pint32</span>
</span><span class='line'>  <span class="o">.&gt;&gt;</span> <span class="n">eof</span>
</span></code></pre></td></tr></table></div></figure>

<p>A few trials (of correct and incorrect inputs) suggest that our parser is working nicely.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="s2">&quot;Gen.1.1&quot;</span> <span class="o">|&gt;</span> <span class="n">run</span> <span class="n">plocation</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">Success: {Book = &quot;Gen&quot;;
 ChapterAndVerse = {Chapter = 1;
                    Verse = 1;};}
</code></pre></div>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="s2">&quot;Gen.1.1-Gen.3.10&quot;</span> <span class="o">|&gt;</span> <span class="n">run</span> <span class="n">prange</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">Success: {Book = &quot;Gen&quot;;
 Start = {Chapter = 1;
          Verse = 1;};
 End = {Chapter = 3;
        Verse = 10;};}
</code></pre></div>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="s2">&quot;Gen.1.1-Heb.11.3&quot;</span> <span class="o">|&gt;</span> <span class="n">run</span> <span class="n">prange</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">Failure:
Error in Ln: 1 Col: 17
Gen.1.1-Heb.11.3
                ^
Note: The error occurred at the end of the input stream.
Expecting: &#39;Both ends of range should be in the same book&#39;
</code></pre></div>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="s2">&quot;Gen.1.1 Heb.11.3    67&quot;</span> <span class="o">|&gt;</span> <span class="n">run</span> <span class="n">row</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">Success: ({Book = &quot;Gen&quot;;
  ChapterAndVerse = {Chapter = 1;
                     Verse = 1;};}, {Book = &quot;Heb&quot;;
                                     Start = {Chapter = 11;
                                              Verse = 3;};
                                     End = {Chapter = 11;
                                            Verse = 3;};})
</code></pre></div>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="s2">&quot;Gen.1.1.22  Heb.11.3    67&quot;</span> <span class="o">|&gt;</span> <span class="n">run</span> <span class="n">row</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">Failure:
Error in Ln: 1 Col: 8
Gen.1.1.22      Heb.11.3        67
       ^
Expecting: whitespace
</code></pre></div>
<p>Now let&#39;s run our parser over the input file, and get ourselves a list of cross references.</p>

<p>There&#39;s quite a few of them, so we&#39;ll only display the first 10.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">crossReferences</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">input</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">skip</span> <span class="mi">1</span> <span class="c1">// skip the row titles</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="n">run</span> <span class="n">row</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">choose</span> <span class="o">(</span><span class="k">function</span>
</span><span class='line'>                 <span class="o">|</span> <span class="nc">Success</span> <span class="o">(</span><span class="n">reference</span><span class="o">,</span> <span class="o">_,</span> <span class="o">_)</span> <span class="o">-&gt;</span> <span class="nc">Some</span> <span class="n">reference</span>
</span><span class='line'>                 <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nc">None</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">crossReferences</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">10</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Table</span>
</span></code></pre></td></tr></table></div></figure>

<table class="jup"><thead><tr><th>Item1</th><th>Item2</th></tr></thead><tbody><tr><td>Gen.1.1</td><td>Heb.11.3-Heb.11.3</td></tr><tr><td>Gen.1.1</td><td>1Chr.16.26-1Chr.16.26</td></tr><tr><td>Gen.1.1</td><td>Eccl.12.1-Eccl.12.1</td></tr><tr><td>Gen.1.1</td><td>Prov.3.19-Prov.3.19</td></tr><tr><td>Gen.1.1</td><td>Ps.124.8-Ps.124.8</td></tr><tr><td>Gen.1.1</td><td>Isa.65.17-Isa.65.17</td></tr><tr><td>Gen.1.1</td><td>Ps.104.24-Ps.104.24</td></tr><tr><td>Gen.1.1</td><td>Ps.121.2-Ps.121.2</td></tr><tr><td>Gen.1.1</td><td>Rev.14.7-Rev.14.7</td></tr><tr><td>Gen.1.1</td><td>Isa.40.26-Isa.40.26</td></tr><tbody></tbody></table>

<p>This is all great and everything, but I&#39;d also like to have some way of mapping out where these verses are in the Bible and using the full names of the books. I didn&#39;t feel like entering all the data by hand, but fortunately <a href="http://bibles.org">bibles.org</a> have done it for me. Time to break out that json type provider&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">BibleInfo</span> <span class="o">=</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nn">Data</span><span class="p">.</span><span class="nc">JsonProvider</span><span class="o">&lt;</span><span class="s2">&quot;./books.js&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">bibleInfo</span> <span class="o">=</span> <span class="nn">BibleInfo</span><span class="p">.</span><span class="nc">Load</span><span class="o">(</span><span class="s2">&quot;./books.js&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>And create a map from short to full names.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">bookMap</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">bibleInfo</span><span class="o">.</span><span class="nn">Response</span><span class="p">.</span><span class="nc">Books</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="o">.</span><span class="nc">Abbr</span><span class="o">,</span> <span class="n">b</span><span class="o">.</span><span class="nc">Name</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Map</span><span class="p">.</span><span class="n">ofSeq</span>
</span><span class='line'>
</span><span class='line'><span class="n">bookMap</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">map
  [(&quot;1Chr&quot;, &quot;1 Chronicles&quot;); (&quot;1Cor&quot;, &quot;1 Corinthians&quot;); (&quot;1Esd&quot;, &quot;1 Esdras&quot;);
   (&quot;1John&quot;, &quot;1 John&quot;); (&quot;1Kgs&quot;, &quot;1 Kings&quot;); (&quot;1Macc&quot;, &quot;1 Maccabees&quot;);
   (&quot;1Pet&quot;, &quot;1 Peter&quot;); (&quot;1Sam&quot;, &quot;1 Samuel&quot;); (&quot;1Thess&quot;, &quot;1 Thessalonians&quot;); ...]
</code></pre></div>
<p>Now we have all of the actual data we need.</p>

<p>We&#39;ll start from the historical accounts of Jesus&#39;s actual birth&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">story</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="c1">// Matthew&#39;s account</span>
</span><span class='line'>    <span class="n">r</span> <span class="s2">&quot;Matt&quot;</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">18</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">18</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Luke&#39;s account part 1</span>
</span><span class='line'>    <span class="n">r</span> <span class="s2">&quot;Luke&quot;</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">26</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">56</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Luke&#39;s account part 2</span>
</span><span class='line'>    <span class="n">r</span> <span class="s2">&quot;Luke&quot;</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">21</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>
</span><span class='line'>  <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>&#8230;and then find all of the cross references which come <em>from</em> a verse in these ranges&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">findCrossReferencesOfRange</span> <span class="n">references</span> <span class="n">range</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">references</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">reference</span> <span class="o">-&gt;</span> <span class="n">contains</span> <span class="n">range</span> <span class="o">&lt;|</span> <span class="n">fst</span> <span class="n">reference</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">allCrossReferences</span> <span class="n">references</span> <span class="n">ranges</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">ranges</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">fold</span> <span class="o">(</span><span class="k">fun</span> <span class="n">found</span> <span class="n">range</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nn">Seq</span><span class="p">.</span><span class="n">concat</span> <span class="o">[</span><span class="n">findCrossReferencesOfRange</span> <span class="n">references</span> <span class="n">range</span><span class="o">;</span><span class="n">found</span><span class="o">])</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">empty</span>
</span></code></pre></td></tr></table></div></figure>

<p>&#8230;giving us a sequence of every range cross referenced from the Christmas story.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">christmasRefs</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">allCrossReferences</span> <span class="n">crossReferences</span> <span class="n">story</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">christmasRefs</span> <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">length</span>
</span></code></pre></td></tr></table></div></figure>
<div class="highlight"><pre><code class="text">1042
</code></pre></div>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">christmasRefs</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">10</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Table</span>
</span></code></pre></td></tr></table></div></figure>

<table class="jup"><thead><tr><th>Item1</th><th>Item2</th></tr></thead><tbody><tr><td>Luke.2.1</td><td>Acts.11.28-Acts.11.28</td></tr><tr><td>Luke.2.1</td><td>Matt.24.14-Matt.24.14</td></tr><tr><td>Luke.2.1</td><td>Acts.25.21-Acts.25.21</td></tr><tr><td>Luke.2.1</td><td>Acts.25.11-Acts.25.11</td></tr><tr><td>Luke.2.1</td><td>Rom.1.8-Rom.1.8</td></tr><tr><td>Luke.2.1</td><td>Luke.3.1-Luke.3.1</td></tr><tr><td>Luke.2.1</td><td>Phil.4.22-Phil.4.22</td></tr><tr><td>Luke.2.1</td><td>Mark.16.15-Mark.16.15</td></tr><tr><td>Luke.2.1</td><td>Matt.22.17-Matt.22.17</td></tr><tr><td>Luke.2.1</td><td>Mark.14.9-Mark.14.9</td></tr><tbody></tbody></table>

<p>We&#39;re getting closer. Before we dive into the graph, we&#39;ll have a quick poke around the data.</p>

<p>Like, which are the top 10 books most commonly cross referenced to?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// count per book, sort by descending</span>
</span><span class='line'><span class="k">let</span> <span class="n">byBook</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">christmasRefs</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">r</span> <span class="o">-&gt;</span> <span class="n">bookMap</span><span class="o">.[(</span><span class="n">snd</span> <span class="n">r</span><span class="o">).</span><span class="nc">Book</span><span class="o">])</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">countBy</span> <span class="n">id</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">sortByDescending</span> <span class="n">snd</span>
</span><span class='line'>
</span><span class='line'><span class="n">byBook</span> <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">10</span> <span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Table</span>
</span></code></pre></td></tr></table></div></figure>

<table class="jup"><thead><tr><th>Item1</th><th>Item2</th></tr></thead><tbody><tr><td>Luke</td><td>129</td></tr><tr><td>Matthew</td><td>115</td></tr><tr><td>Psalm</td><td>101</td></tr><tr><td>Isaiah</td><td>74</td></tr><tr><td>Acts</td><td>68</td></tr><tr><td>John</td><td>66</td></tr><tr><td>Genesis</td><td>52</td></tr><tr><td>Revelation</td><td>33</td></tr><tr><td>Exodus</td><td>27</td></tr><tr><td>Jeremiah</td><td>26</td></tr><tbody></tbody></table>

<p>Getting closer to the data we want to create an edge and node graph from, let&#39;s look at the links between books.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Count how many times a book is referenced from each of our</span>
</span><span class='line'><span class="c1">// source books</span>
</span><span class='line'><span class="k">let</span> <span class="n">fromBookToBook</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">christmasRefs</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">from</span><span class="o">,</span> <span class="k">to&#39;</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">bookMap</span><span class="o">.[</span><span class="n">from</span><span class="o">.</span><span class="nc">Book</span><span class="o">],</span> <span class="n">bookMap</span><span class="o">.[</span><span class="k">to&#39;</span><span class="o">.</span><span class="nc">Book</span><span class="o">])</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">countBy</span> <span class="n">id</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">sortByDescending</span> <span class="n">snd</span>
</span><span class='line'>
</span><span class='line'><span class="n">fromBookToBook</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">10</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Table</span>
</span></code></pre></td></tr></table></div></figure>

<table class="jup"><thead><tr><th>Item1</th><th>Item2</th></tr></thead><tbody><tr><td>(Luke, Luke)</td><td>94</td></tr><tr><td>(Luke, Psalm)</td><td>72</td></tr><tr><td>(Matthew, Matthew)</td><td>63</td></tr><tr><td>(Luke, Matthew)</td><td>52</td></tr><tr><td>(Luke, Isaiah)</td><td>52</td></tr><tr><td>(Luke, Acts)</td><td>37</td></tr><tr><td>(Luke, John)</td><td>35</td></tr><tr><td>(Matthew, Luke)</td><td>35</td></tr><tr><td>(Matthew, Acts)</td><td>31</td></tr><tr><td>(Matthew, John)</td><td>31</td></tr><tbody></tbody></table>

<p>And now we&#39;ve arrived. I&#39;ve not found a nice simple way of generating graph images in .net, so we&#39;ll turn to the well used d3 javascript library to help us out, given we&#39;re running in a web page.</p>

<p>We need to also to have a way of turning our data into a valid javascript representation. We&#39;ll need to feed d3 an array of nodes (just the names of the books of the Bible). Then we&#39;ll have an array of &quot;links&quot;, which we&#39;ll also give a &quot;strength&quot; field to represent the number of cross references. The links need to use the index of the source and target in the node list.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">names</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">bibleInfo</span><span class="o">.</span><span class="nn">Response</span><span class="p">.</span><span class="nc">Books</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="o">.</span><span class="nc">Name</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Simple string concatination will do the job here,</span>
</span><span class='line'><span class="c1">// for more complex data we could use an actual JSON</span>
</span><span class='line'><span class="c1">// serialization library</span>
</span><span class='line'><span class="k">let</span> <span class="n">nodes</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">names</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="n">sprintf</span> <span class="s2">&quot;{ id: %A, x: 0, y: 0 }&quot;</span> <span class="n">name</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;,</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="n">sprintf</span> <span class="s2">&quot;[%s]&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">links</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">fromBookToBook</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">((</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">),</span> <span class="n">strength</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">sourceI</span> <span class="o">=</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">findIndex</span> <span class="o">((=)</span> <span class="n">source</span><span class="o">)</span> <span class="n">names</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">targetI</span> <span class="o">=</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">findIndex</span> <span class="o">((=)</span> <span class="n">target</span><span class="o">)</span> <span class="n">names</span>
</span><span class='line'>    <span class="n">sprintf</span> <span class="s2">&quot;{ source: %d, target: %d, strength: %d }&quot;</span> <span class="n">sourceI</span> <span class="n">targetI</span> <span class="n">strength</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;,</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="n">sprintf</span> <span class="s2">&quot;[%s]&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we need some javascript and html to get this all up and running. Let&#39;s make sure we have d3 loaded on the page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="s2">&quot;&quot;&quot;&lt;script src=&#39;http://d3js.org/d3.v3.min.js&#39;&gt;&lt;/script&gt;&quot;&quot;&quot;</span> <span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Html</span> <span class="o">|&gt;</span> <span class="nc">Display</span>
</span></code></pre></td></tr></table></div></figure>

<script src='http://d3js.org/d3.v3.min.js'></script>
<div class="highlight"><pre><code class="text">&lt;null&gt;
</code></pre></div>
<p>And now we can just enter our raw javascript to create the graph, with the node and link data from above. Hopefully most of this will make some sense on a read through but the basic flow is:</p>

<ol>
<li>Inject an svg element into our page</li>
<li>Create a force layout with some standard properties (gravity to keep everything near the middle, charge to keep nodes from overlapping)</li>
<li>Make the desired distance between linked nodes shorter the &quot;stronger&quot; the link is.</li>
<li>Add lines for links, and circles and text for nodes.</li>
<li>Fire a call back to reposition the links and nodes as the force simualtion runs</li>
</ol>

<p>If you&#39;ve read down here from the beginning, the graph has probably settled into a steady state, but feel free to reload the page and watch the nodes bounce around.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">sprintf</span> <span class="s2">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s2">&lt;style&gt;</span>
</span><span class='line'><span class="s2">.node {</span>
</span><span class='line'><span class="s2">    fill: #5cc;</span>
</span><span class='line'><span class="s2">    stroke: #2aa;</span>
</span><span class='line'><span class="s2">    stroke-width: 2px;</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'>
</span><span class='line'><span class="s2">.link {</span>
</span><span class='line'><span class="s2">    stroke: #777;</span>
</span><span class='line'><span class="s2">    stroke-width: 2px;</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'><span class="s2">&lt;/style&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;div id=&quot;</span><span class="n">viz</span><span class="s2">&quot;&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;script&gt;</span>
</span><span class='line'><span class="s2">var width = 800;</span>
</span><span class='line'><span class="s2">var height = 800;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">var nodeData = %s;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">var linkData = %s;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">var force = null,</span>
</span><span class='line'><span class="s2">    nodes = null,</span>
</span><span class='line'><span class="s2">    nodeTitles = null,</span>
</span><span class='line'><span class="s2">    links = null;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">var svg = d3.select(&#39;#viz&#39;).append(&#39;svg&#39;)</span>
</span><span class='line'><span class="s2">    .attr(&#39;width&#39;, width)</span>
</span><span class='line'><span class="s2">    .attr(&#39;height&#39;, height);</span>
</span><span class='line'><span class="s2">    </span>
</span><span class='line'><span class="s2">var initForce = function() {</span>
</span><span class='line'><span class="s2">    svg.selectAll(&#39;*&#39;).remove();</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    force = d3.layout.force()</span>
</span><span class='line'><span class="s2">        .size([width, height])</span>
</span><span class='line'><span class="s2">        .nodes(nodeData)</span>
</span><span class='line'><span class="s2">        .links(linkData)</span>
</span><span class='line'><span class="s2">        .gravity(0.5)</span>
</span><span class='line'><span class="s2">        .charge([-1000]);</span>
</span><span class='line'><span class="s2">        </span>
</span><span class='line'><span class="s2">    force.linkDistance(function (link) { return 400 / link.strength });</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    links = svg.selectAll(&#39;.link&#39;)</span>
</span><span class='line'><span class="s2">        .data(linkData)</span>
</span><span class='line'><span class="s2">        .enter().append(&#39;line&#39;)</span>
</span><span class='line'><span class="s2">        .attr(&#39;class&#39;, &#39;link&#39;);</span>
</span><span class='line'><span class="s2">    </span>
</span><span class='line'><span class="s2">    nodes = svg.selectAll(&#39;.node&#39;)</span>
</span><span class='line'><span class="s2">        .data(nodeData)</span>
</span><span class='line'><span class="s2">        .enter().append(&#39;circle&#39;)</span>
</span><span class='line'><span class="s2">        .attr(&#39;class&#39;, &#39;node&#39;)</span>
</span><span class='line'><span class="s2">        .attr(&#39;r&#39;, width / 50);</span>
</span><span class='line'><span class="s2">        </span>
</span><span class='line'><span class="s2">    nodeTitles = svg.selectAll(&#39;text&#39;)</span>
</span><span class='line'><span class="s2">        .data(nodeData)</span>
</span><span class='line'><span class="s2">        .enter().append(&#39;text&#39;)</span>
</span><span class='line'><span class="s2">        .attr(&#39;text-anchor&#39;, &#39;middle&#39;)</span>
</span><span class='line'><span class="s2">        .text(function (d) { return d.id })</span>
</span><span class='line'><span class="s2">        .attr(&#39;font-family&#39;, &#39;sans&#39;)</span>
</span><span class='line'><span class="s2">        .attr(&#39;font-size&#39;, 16)</span>
</span><span class='line'><span class="s2">        .attr(&#39;fill&#39;, &#39;black&#39;);</span>
</span><span class='line'><span class="s2">    </span>
</span><span class='line'><span class="s2">    force.on(&#39;tick&#39;, stepForce);</span>
</span><span class='line'><span class="s2">};</span>
</span><span class='line'>
</span><span class='line'><span class="s2">var stepForce = function() {</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    nodes.attr(&#39;cx&#39;, function(d) { return d.x; })</span>
</span><span class='line'><span class="s2">        .attr(&#39;cy&#39;, function(d) { return d.y; });</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    nodeTitles.attr(&#39;x&#39;, function(d) { return d.x; })</span>
</span><span class='line'><span class="s2">        .attr(&#39;y&#39;, function(d) { return d.y; });</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    links.attr(&#39;x1&#39;, function(d) { return d.source.x; })</span>
</span><span class='line'><span class="s2">        .attr(&#39;y1&#39;, function(d) { return d.source.y; })</span>
</span><span class='line'><span class="s2">        .attr(&#39;x2&#39;, function(d) { return d.target.x; })</span>
</span><span class='line'><span class="s2">        .attr(&#39;y2&#39;, function(d) { return d.target.y; });</span>
</span><span class='line'><span class="s2">};</span>
</span><span class='line'>
</span><span class='line'><span class="s2">initForce();</span>
</span><span class='line'><span class="s2">force.start();</span>
</span><span class='line'><span class="s2">&lt;/script&gt;</span>
</span><span class='line'><span class="s2">&quot;&quot;&quot;</span> <span class="n">nodes</span> <span class="n">links</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Html</span>
</span></code></pre></td></tr></table></div></figure>

<style>
.node {
    fill: #5cc;
    stroke: #2aa;
    stroke-width: 2px;
}

.link {
    stroke: #777;
    stroke-width: 2px;
}
</style>

<div id="viz"></div>

<script>
var width = 800;
var height = 800;

var nodeData = [{ id: "Genesis", x: 0, y: 0 },
{ id: "Exodus", x: 0, y: 0 },
{ id: "Leviticus", x: 0, y: 0 },
{ id: "Numbers", x: 0, y: 0 },
{ id: "Deuteronomy", x: 0, y: 0 },
{ id: "Joshua", x: 0, y: 0 },
{ id: "Judges", x: 0, y: 0 },
{ id: "Ruth", x: 0, y: 0 },
{ id: "1 Samuel", x: 0, y: 0 },
{ id: "2 Samuel", x: 0, y: 0 },
{ id: "1 Kings", x: 0, y: 0 },
{ id: "2 Kings", x: 0, y: 0 },
{ id: "1 Chronicles", x: 0, y: 0 },
{ id: "2 Chronicles", x: 0, y: 0 },
{ id: "Ezra", x: 0, y: 0 },
{ id: "Nehemiah", x: 0, y: 0 },
{ id: "Esther", x: 0, y: 0 },
{ id: "Job", x: 0, y: 0 },
{ id: "Psalm", x: 0, y: 0 },
{ id: "Proverbs", x: 0, y: 0 },
{ id: "Ecclesiastes", x: 0, y: 0 },
{ id: "Song of Songs", x: 0, y: 0 },
{ id: "Isaiah", x: 0, y: 0 },
{ id: "Jeremiah", x: 0, y: 0 },
{ id: "Lamentations", x: 0, y: 0 },
{ id: "Ezekiel", x: 0, y: 0 },
{ id: "Daniel", x: 0, y: 0 },
{ id: "Hosea", x: 0, y: 0 },
{ id: "Joel", x: 0, y: 0 },
{ id: "Amos", x: 0, y: 0 },
{ id: "Obadiah", x: 0, y: 0 },
{ id: "Jonah", x: 0, y: 0 },
{ id: "Micah", x: 0, y: 0 },
{ id: "Nahum", x: 0, y: 0 },
{ id: "Habakkuk", x: 0, y: 0 },
{ id: "Zephaniah", x: 0, y: 0 },
{ id: "Haggai", x: 0, y: 0 },
{ id: "Zechariah", x: 0, y: 0 },
{ id: "Malachi", x: 0, y: 0 },
{ id: "Tobit", x: 0, y: 0 },
{ id: "Judith", x: 0, y: 0 },
{ id: "Esther (Greek)", x: 0, y: 0 },
{ id: "The Wisdom of Solomon", x: 0, y: 0 },
{ id: "Sirach", x: 0, y: 0 },
{ id: "Baruch", x: 0, y: 0 },
{ id: "Letter of Jeremiah", x: 0, y: 0 },
{ id: "1 Maccabees", x: 0, y: 0 },
{ id: "2 Maccabees", x: 0, y: 0 },
{ id: "1 Esdras", x: 0, y: 0 },
{ id: "2 Esdras", x: 0, y: 0 },
{ id: "The Prayer of Manasseh", x: 0, y: 0 },
{ id: "Matthew", x: 0, y: 0 },
{ id: "Mark", x: 0, y: 0 },
{ id: "Luke", x: 0, y: 0 },
{ id: "John", x: 0, y: 0 },
{ id: "Acts", x: 0, y: 0 },
{ id: "Romans", x: 0, y: 0 },
{ id: "1 Corinthians", x: 0, y: 0 },
{ id: "2 Corinthians", x: 0, y: 0 },
{ id: "Galatians", x: 0, y: 0 },
{ id: "Ephesians", x: 0, y: 0 },
{ id: "Philippians", x: 0, y: 0 },
{ id: "Colossians", x: 0, y: 0 },
{ id: "1 Thessalonians", x: 0, y: 0 },
{ id: "2 Thessalonians", x: 0, y: 0 },
{ id: "1 Timothy", x: 0, y: 0 },
{ id: "2 Timothy", x: 0, y: 0 },
{ id: "Titus", x: 0, y: 0 },
{ id: "Philemon", x: 0, y: 0 },
{ id: "Hebrews", x: 0, y: 0 },
{ id: "James", x: 0, y: 0 },
{ id: "1 Peter", x: 0, y: 0 },
{ id: "2 Peter", x: 0, y: 0 },
{ id: "1 John", x: 0, y: 0 },
{ id: "2 John", x: 0, y: 0 },
{ id: "3 John", x: 0, y: 0 },
{ id: "Jude", x: 0, y: 0 },
{ id: "Revelation", x: 0, y: 0 }];

var linkData = [{ source: 53, target: 53, strength: 94 },
{ source: 53, target: 18, strength: 72 },
{ source: 51, target: 51, strength: 63 },
{ source: 53, target: 51, strength: 52 },
{ source: 53, target: 22, strength: 52 },
{ source: 53, target: 55, strength: 37 },
{ source: 53, target: 54, strength: 35 },
{ source: 51, target: 53, strength: 35 },
{ source: 51, target: 55, strength: 31 },
{ source: 51, target: 54, strength: 31 },
{ source: 51, target: 18, strength: 29 },
{ source: 53, target: 0, strength: 26 },
{ source: 51, target: 0, strength: 26 },
{ source: 51, target: 22, strength: 22 },
{ source: 53, target: 8, strength: 20 },
{ source: 53, target: 77, strength: 17 },
{ source: 51, target: 77, strength: 16 },
{ source: 51, target: 1, strength: 14 },
{ source: 53, target: 56, strength: 13 },
{ source: 53, target: 61, strength: 13 },
{ source: 53, target: 52, strength: 13 },
{ source: 53, target: 1, strength: 13 },
{ source: 53, target: 60, strength: 13 },
{ source: 53, target: 23, strength: 13 },
{ source: 51, target: 23, strength: 13 },
{ source: 53, target: 26, strength: 12 },
{ source: 51, target: 17, strength: 11 },
{ source: 53, target: 69, strength: 9 },
{ source: 51, target: 19, strength: 9 },
{ source: 53, target: 59, strength: 8 },
{ source: 53, target: 25, strength: 8 },
{ source: 53, target: 17, strength: 8 },
{ source: 51, target: 69, strength: 8 },
{ source: 51, target: 10, strength: 8 },
{ source: 51, target: 3, strength: 8 },
{ source: 53, target: 67, strength: 7 },
{ source: 53, target: 7, strength: 6 },
{ source: 53, target: 58, strength: 6 },
{ source: 53, target: 6, strength: 6 },
{ source: 53, target: 57, strength: 6 },
{ source: 53, target: 9, strength: 6 },
{ source: 51, target: 26, strength: 6 },
{ source: 53, target: 32, strength: 5 },
{ source: 53, target: 37, strength: 5 },
{ source: 53, target: 70, strength: 5 },
{ source: 51, target: 25, strength: 5 },
{ source: 51, target: 14, strength: 5 },
{ source: 51, target: 5, strength: 5 },
{ source: 53, target: 11, strength: 4 },
{ source: 53, target: 71, strength: 4 },
{ source: 53, target: 5, strength: 4 },
{ source: 51, target: 2, strength: 4 },
{ source: 51, target: 6, strength: 4 },
{ source: 51, target: 11, strength: 4 },
{ source: 51, target: 56, strength: 4 },
{ source: 51, target: 7, strength: 4 },
{ source: 51, target: 8, strength: 4 },
{ source: 53, target: 4, strength: 3 },
{ source: 53, target: 19, strength: 3 },
{ source: 53, target: 65, strength: 3 },
{ source: 53, target: 62, strength: 3 },
{ source: 53, target: 73, strength: 3 },
{ source: 53, target: 38, strength: 3 },
{ source: 51, target: 4, strength: 3 },
{ source: 51, target: 52, strength: 3 },
{ source: 51, target: 73, strength: 3 },
{ source: 51, target: 13, strength: 3 },
{ source: 51, target: 9, strength: 3 },
{ source: 53, target: 10, strength: 2 },
{ source: 53, target: 20, strength: 2 },
{ source: 53, target: 27, strength: 2 },
{ source: 53, target: 29, strength: 2 },
{ source: 53, target: 34, strength: 2 },
{ source: 53, target: 35, strength: 2 },
{ source: 51, target: 62, strength: 2 },
{ source: 51, target: 60, strength: 2 },
{ source: 51, target: 37, strength: 2 },
{ source: 51, target: 66, strength: 2 },
{ source: 51, target: 32, strength: 2 },
{ source: 51, target: 38, strength: 2 },
{ source: 51, target: 12, strength: 2 },
{ source: 51, target: 57, strength: 2 },
{ source: 51, target: 27, strength: 2 },
{ source: 53, target: 66, strength: 1 },
{ source: 53, target: 64, strength: 1 },
{ source: 53, target: 12, strength: 1 },
{ source: 53, target: 2, strength: 1 },
{ source: 53, target: 30, strength: 1 },
{ source: 53, target: 3, strength: 1 },
{ source: 53, target: 13, strength: 1 },
{ source: 53, target: 76, strength: 1 },
{ source: 51, target: 59, strength: 1 },
{ source: 51, target: 28, strength: 1 },
{ source: 51, target: 67, strength: 1 },
{ source: 51, target: 58, strength: 1 },
{ source: 51, target: 65, strength: 1 },
{ source: 51, target: 70, strength: 1 },
{ source: 51, target: 36, strength: 1 },
{ source: 51, target: 15, strength: 1 },
{ source: 51, target: 24, strength: 1 },
{ source: 51, target: 72, strength: 1 }];

var force = null,
    nodes = null,
    nodeTitles = null,
    links = null;

var svg = d3.select('#viz').append('svg')
    .attr('width', width)
    .attr('height', height);
    
var initForce = function() {
    svg.selectAll('*').remove();

    force = d3.layout.force()
        .size([width, height])
        .nodes(nodeData)
        .links(linkData)
        .gravity(0.5)
        .charge([-1000]);
        
    force.linkDistance(function (link) { return 400 / link.strength });

    links = svg.selectAll('.link')
        .data(linkData)
        .enter().append('line')
        .attr('class', 'link');
    
    nodes = svg.selectAll('.node')
        .data(nodeData)
        .enter().append('circle')
        .attr('class', 'node')
        .attr('r', width / 50);
        
    nodeTitles = svg.selectAll('text')
        .data(nodeData)
        .enter().append('text')
        .attr('text-anchor', 'middle')
        .text(function (d) { return d.id })
        .attr('font-family', 'sans')
        .attr('font-size', 16)
        .attr('fill', 'black');
    
    force.on('tick', stepForce);
};

var stepForce = function() {

    nodes.attr('cx', function(d) { return d.x; })
        .attr('cy', function(d) { return d.y; });

    nodeTitles.attr('x', function(d) { return d.x; })
        .attr('y', function(d) { return d.y; });

    links.attr('x1', function(d) { return d.source.x; })
        .attr('y1', function(d) { return d.source.y; })
        .attr('x2', function(d) { return d.target.x; })
        .attr('y2', function(d) { return d.target.y; });
};

initForce();
force.start();
</script>

<p>And there it is. A nice force layout graph based on our F# data, displaying the properties you would expect. Matthew and Luke as the &quot;source&quot; nodes have settled somewhere near the centre, with books commonly referenced from both squeezed inbetween. An outer ring of books referenced infrequently or from only one of the other form the next ring, and then around the edges we have the books not referenced at all during the Christmas story.</p>

<p>I hope you enjoyed this magical mystery tour of Jupyter, d3 and the Christmas story!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video and Slides for "From the Ivory Tower"]]></title>
    <link href="https://blog.mavnn.co.uk/video-and-slides-for-from-the-ivory-tower/"/>
    <updated>2016-04-15T14:14:17+01:00</updated>
    <id>https://blog.mavnn.co.uk/video-and-slides-for-from-the-ivory-tower</id>
    <content type="html"><![CDATA[<p>I spoke this morning at <a href="https://skillsmatter.com/conferences/7145-f-exchange-2016#program">F# Exchange</a> and this being SkillsMatter they&#39;ve published the recording already.</p>

<p>It&#39;s a nice short talk, weighing in at about 15 minutes. So grab yourself a coffee and
take a short tour of how some of F#&#39;s more esoteric features (active patterns, computational expressions,
quotations and type providers) have been used to solve real problems in the real world.</p>

<p>Video here: https://skillsmatter.com/skillscasts/7735-fixing-real-life-problems-from-the-ivory-tower</p>

<p>Slides here: https//blog.mavnn.co.uk/FromTheIvoryTower/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expanding Existing Computational Expressions]]></title>
    <link href="https://blog.mavnn.co.uk/expanding-existing-computational-expressions/"/>
    <updated>2016-03-29T19:15:20+01:00</updated>
    <id>https://blog.mavnn.co.uk/expanding-existing-computational-expressions</id>
    <content type="html"><![CDATA[<p>This is a &quot;just because you can&quot; post, although frankly bizarrely I have a genuine use case for this.</p>

<p>Let the mind melting commence!</p>

<p>Computational expressions in F# provide nice sugared syntax for monadic data structures such as <code>seq</code> and <code>async</code>; but the specific expressions are not built in language features. You can <a href="http://fsharpforfunandprofit.com/series/computation-expressions.html">build your own</a>.</p>

<p>Which is fun and all, but you know what&#39;s even more fun? Well, it turns out that there&#39;s no requirements for computational expressions to be actual monads. Even more fun than that is that the bind operation (used when you invoke <code>let!</code> syntax) is a member on a class - and it is valid both for it to be an extension method, and for it to be overloaded. You can even add custom operators to computational expressions using the extension method trick.</p>

<p>Which means you can do some very interesting things indeed to existing computational expressions. Let&#39;s try it out!</p>

<!-- more -->

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">MyThing</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nc">MyThing</span> <span class="k">of</span> <span class="k">&#39;</span><span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">testFunc</span> <span class="n">str</span> <span class="o">=</span>
</span><span class='line'>  <span class="nc">MyThing</span> <span class="o">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">length</span> <span class="n">str</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">AsyncBuilder</span> <span class="k">with</span>
</span><span class='line'>  <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Bind</span><span class="o">(</span><span class="n">value</span> <span class="o">:</span> <span class="nc">MyThing</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="n">f</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">Async</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">b</span><span class="o">&gt;)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">(</span><span class="nc">MyThing</span> <span class="n">inner</span><span class="o">)</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>    <span class="n">f</span> <span class="n">inner</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[&lt;</span><span class="nc">CustomOperation</span><span class="o">(</span><span class="s2">&quot;log&quot;</span><span class="o">,</span> <span class="nc">MaintainsVariableSpaceUsingBind</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)&gt;]</span>
</span><span class='line'>  <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Log</span><span class="o">(</span><span class="n">boundValues</span> <span class="o">:</span> <span class="nc">Async</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="o">[&lt;</span><span class="nc">ProjectionParameter</span><span class="o">&gt;]</span> <span class="n">messageFunc</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">let</span><span class="o">!</span> <span class="n">b</span> <span class="o">=</span> <span class="n">boundValues</span>
</span><span class='line'>      <span class="n">printfn</span> <span class="s2">&quot;Log message: %s&quot;</span> <span class="o">&lt;|</span> <span class="n">messageFunc</span> <span class="n">b</span>
</span><span class='line'>      <span class="n">printfn</span> <span class="s2">&quot;Currently let bound things: %A&quot;</span> <span class="n">b</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">b</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">workflow</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">log</span> <span class="s2">&quot;a string&quot;</span>
</span><span class='line'>    <span class="k">let</span><span class="o">!</span> <span class="n">c</span> <span class="o">=</span> <span class="n">testFunc</span> <span class="s2">&quot;Count the letters&quot;</span>
</span><span class='line'>    <span class="k">let</span><span class="o">!</span> <span class="n">result</span> <span class="o">=</span> <span class="n">async</span> <span class="o">{</span> <span class="k">return</span> <span class="o">(</span><span class="n">c</span> <span class="o">*</span> <span class="mi">10</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">do</span><span class="o">!</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Sleep</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">log</span> <span class="s2">&quot;more string&quot;</span>
</span><span class='line'>    <span class="k">let</span><span class="o">!</span> <span class="n">a</span> <span class="o">=</span> <span class="nc">MyThing</span> <span class="s2">&quot;A prefix here: &quot;</span>
</span><span class='line'>    <span class="n">log</span> <span class="s2">&quot;a different string&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sprintf</span> <span class="s2">&quot;%s %d&quot;</span> <span class="n">a</span> <span class="n">result</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="o">&lt;|</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">RunSynchronously</span> <span class="n">workflow</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Program outputs:</span>
</span><span class='line'><span class="c1">// Log message: a string</span>
</span><span class='line'><span class="c1">// Currently let bound things: &lt;null&gt;</span>
</span><span class='line'><span class="c1">// Log message: more string</span>
</span><span class='line'><span class="c1">// Currently let bound things: (17, 170)</span>
</span><span class='line'><span class="c1">// Log message: a different string</span>
</span><span class='line'><span class="c1">// Currently let bound things: (17, 170, &quot;A prefix here: &quot;)</span>
</span><span class='line'><span class="c1">// &quot;A prefix here:  170&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>This is a full code example that compiles, runs and builds. Oh yes, and it&#39;s an example of a bind based custom operator in case you&#39;ve been looking for one.</p>

<p>As you can see we can now <code>let!</code> both <code>MyThing</code> and <code>Async</code> results and both will be handled correctly - and we can also add logging statements using the custom operator which will get placed correctly into the async workflow. For even more fun and profit, the log custom operator has access to all currently bound values (which it logs in our example).</p>

<p>In case the custom operator is making you scratch your head, the way this one works is that a tuple of the currently bound values in the CE is passed into the operator as the first argument wrapped using the <code>Return</code> method of the CE (in this case, that means we get an Async&lt;&#39;a&gt; where &#39;a is a tuple). The <code>ProjectionParameter</code> is a function from the currently bound values to the expression that follows the custom operator. In my case, that&#39;s always a static string, but of course it could be an expression which used some of the already bound values. Once you&#39;ve done whatever you&#39;re doing within the custom operator, it&#39;s important that you pass back the bound values you received - again, wrapped in a type that the CE knows how to bind as it will use bind to include this code into the overall expression result. As a word of warning, the explanation above is only true for custom operators where <code>MaintainsVariableSpaceUsingBind</code> is set to true. If it is set to false, the CE must support yield and the expansion mechanism is quite different.</p>

<p>I see all kinds of useful ways of bending the F# language here, and making libraries easier to use from within the built in CEs. Have fun, and remember to use these powers for good!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type Provider Pro-Tip: Using Dictionary]]></title>
    <link href="https://blog.mavnn.co.uk/type-provider-pro-tip-using-dictionary/"/>
    <updated>2016-03-05T15:38:45+00:00</updated>
    <id>https://blog.mavnn.co.uk/type-provider-pro-tip-using-dictionary</id>
    <content type="html"><![CDATA[<p>During the <a href="https//blog.mavnn.co.uk/type-providers-live-the-movie/">Type Provider Live</a> recording, <a href="https://twitter.com/panesofglass">Ryan</a> asked me about basing erased provided types on dictionary types, and then exposing nicely typed properties to access data stored within the dictionary.</p>

<p>This will sound familiar to users of a number of dynamically typed languages as in many cases objects in these languages are just dictionaries under the hood.</p>

<p>This is such a common thing to be doing in a type provider that I thought it was worth writing up a working example that can then be modified to your individual situation. I&#39;ve presented the entire listing below with comments, but there is one particular trick I&#39;ll explain in a bit more detail. Let&#39;s have a look at let bindings in quotations!</p>

<!-- more -->

<p>So, normally when you write a <code>let</code> binding in F#, and end up writing something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">myFunction</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span> <span class="o">+</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, the body of function <code>myFunction</code> is an expression that evaluates to 20. But it turns out that this is actually syntax sugar for:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">myFunction</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span> <span class="k">in</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>

<p>A quotation in F# always represents a single expression, so it shouldn&#39;t come as a surprise at this point that the <code>Expr.Let</code> class has a constructor this three arguments. The variable being bound, the value to bind to it, and the body in which it is used. So if you want to express the body of the function above you end up with something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">version1</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">&lt;@@</span> <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span> <span class="k">in</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">10</span> <span class="o">@@&gt;</span> <span class="c1">// cheat!</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">version2</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">xVar</span> <span class="o">=</span> <span class="nc">Var</span><span class="o">(</span><span class="s2">&quot;x&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;)</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Var</span> <span class="n">xVar</span>
</span><span class='line'>  <span class="nn">Expr</span><span class="p">.</span><span class="nc">Let</span><span class="o">(</span><span class="n">xVar</span><span class="o">,</span> <span class="o">&lt;@@</span> <span class="mi">10</span> <span class="o">@@&gt;,</span> <span class="o">&lt;@@</span> <span class="o">%%</span><span class="n">x</span> <span class="o">+</span> <span class="mi">10</span> <span class="o">@@&gt;)</span>
</span></code></pre></td></tr></table></div></figure>

<p>The trick you need to know is that <code>Expr.Var</code> produces an Expr that represents a place where a variable will be used. But it creates an untyped Expr, and this can (and does) cause issues with type inference. We can work around this by making use of typed expressions, represented by the generic <code>Expr&lt;&#39;a&gt;</code> class. The type provider API takes the untyped version, but you can convert back to the untyped version either by calling the <code>Raw</code> property on the typed expression or just by using it to help construct an expression which contains the typed expression but which is untyped itself using the <code>Expr</code> classes.</p>

<p>In the code below, notice the use of <code>&lt;@ ... @&gt;</code> and <code>%</code> rather than <code>&lt;@@ ... @@&gt;</code> and <code>%%</code> to work with typed expressions rather than untyped.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">GD</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Collections</span><span class="p">.</span><span class="nn">Generic</span><span class="p">.</span><span class="nc">Dictionary</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">,</span><span class="kt">string</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">dictExpr</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">gdVar</span> <span class="o">=</span> <span class="nc">Var</span><span class="o">(</span><span class="s2">&quot;gd&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">GD</span><span class="o">&gt;)</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">gdExpr</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Expr</span><span class="p">.</span><span class="nc">Var</span> <span class="n">gdVar</span> <span class="o">|&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Cast</span><span class="o">&lt;</span><span class="nc">GD</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="c1">// Expr.Cast forces this to be a typed expression</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">addValue</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Expr</span><span class="p">.</span><span class="nc">Let</span><span class="o">(</span><span class="n">gdVar</span><span class="o">,</span> <span class="o">&lt;@</span> <span class="nc">GD</span><span class="bp">()</span> <span class="o">@&gt;,</span> <span class="o">&lt;@</span> <span class="o">%</span><span class="n">gdExpr</span><span class="o">.[</span><span class="s2">&quot;one&quot;</span><span class="o">]</span> <span class="o">&lt;-</span> <span class="s2">&quot;the number one&quot;</span> <span class="o">@&gt;)</span>
</span><span class='line'>    <span class="c1">// the line above fails without typed expressions</span>
</span></code></pre></td></tr></table></div></figure>

<p>With that out of the way, we&#39;re good to go. The type provider below is a simple wrapper around a string, string dictionary. It looks like this in use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">MyType</span> <span class="o">=</span> <span class="nn">DictProvider</span><span class="p">.</span><span class="nc">ParaProvider</span><span class="o">&lt;</span><span class="s2">&quot;name1, name2&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">thing</span> <span class="o">=</span> <span class="nc">MyType</span><span class="o">(</span><span class="s2">&quot;1&quot;</span><span class="o">,</span><span class="s2">&quot;2&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">thing</span><span class="o">.</span><span class="n">name1</span> <span class="c1">// &quot;1&quot;</span>
</span><span class='line'><span class="n">thing</span><span class="o">.</span><span class="n">name2</span> <span class="c1">// &quot;2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">thing</span><span class="o">.</span><span class="n">name1</span> <span class="o">&lt;-</span> <span class="s2">&quot;not one. Muhahahaha!&quot;</span>
</span><span class='line'><span class="n">thing</span><span class="o">.</span><span class="n">name2</span> <span class="o">&lt;-</span> <span class="s2">&quot;that&#39;s why you shouldn&#39;t make things mutable&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">thing</span><span class="o">.</span><span class="n">name1</span> <span class="c1">// &quot;not one. Muhahahaha!&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>You&#39;ll get different properties depending which strings you supply as parameters.</p>

<p>Here&#39;s the source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">DictProvider</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">GD</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Collections</span><span class="p">.</span><span class="nn">Generic</span><span class="p">.</span><span class="nc">Dictionary</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">,</span> <span class="kt">string</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">DictionaryProvider</span><span class="bp">()</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;DictProvider&quot;</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">createType</span> <span class="n">typeName</span> <span class="o">(</span><span class="n">parameters</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="c1">// We&#39;ll get our property names by just splitting</span>
</span><span class='line'>    <span class="c1">// our single parameter on commas</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">propNames</span> <span class="o">=</span>
</span><span class='line'>      <span class="o">(</span><span class="n">parameters</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:?&gt;</span> <span class="kt">string</span><span class="o">).</span><span class="nc">Split</span> <span class="sc">&#39;,&#39;</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="nc">Trim</span><span class="bp">()</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Each of our properties has setter code to set the value in the dict with the</span>
</span><span class='line'>    <span class="c1">// name of the property, and getter code with gets the same value</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">aProp</span> <span class="n">name</span> <span class="o">=</span>
</span><span class='line'>      <span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>        <span class="n">name</span><span class="o">,</span>
</span><span class='line'>        <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>        <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">false</span><span class="o">,</span>
</span><span class='line'>        <span class="nc">GetterCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="o">(%%</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]:</span><span class="nc">GD</span><span class="o">).[</span><span class="n">name</span><span class="o">]</span> <span class="o">@@&gt;),</span>
</span><span class='line'>        <span class="nc">SetterCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="o">(%%</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]:</span><span class="nc">GD</span><span class="o">).[</span><span class="n">name</span><span class="o">]</span> <span class="o">&lt;-</span> <span class="o">(%%</span><span class="n">args</span><span class="o">.[</span><span class="mi">1</span><span class="o">]:</span><span class="kt">string</span><span class="o">)</span> <span class="o">@@&gt;))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Here we set the type to be erased to as &quot;GD&quot; (our type alias for a dictionary)</span>
</span><span class='line'>    <span class="c1">// If we want to hide the normal dictionary methods, we could use:</span>
</span><span class='line'>    <span class="c1">// &#39;myType.HideObjectMethods &lt;- true&#39;</span>
</span><span class='line'>    <span class="c1">// But here we&#39;ll just let people use the type as a dictionary as well.</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">myType</span> <span class="o">=</span>
</span><span class='line'>      <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="n">typeName</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">GD</span><span class="o">&gt;)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Make sure we add all the properties to the object.</span>
</span><span class='line'>    <span class="n">propNames</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">propName</span> <span class="o">-&gt;</span> <span class="n">aProp</span> <span class="n">propName</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">ofArray</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">myType</span><span class="o">.</span><span class="nc">AddMembers</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// We&#39;ll want a constructor that takes as many parameters as we have</span>
</span><span class='line'>    <span class="c1">// properties, as we&#39;ll want to set the value in the dictionary of our</span>
</span><span class='line'>    <span class="c1">// properties during construction. If we don&#39;t, trying to use the properties</span>
</span><span class='line'>    <span class="c1">// will result in a key not found exception.</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">cstorParams</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">propNames</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">propName</span> <span class="o">-&gt;</span> <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="n">propName</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;))</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">ofArray</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Here&#39;s the constructor code where we set each property in turn.</span>
</span><span class='line'>    <span class="c1">// Notice how the fold keeps on building up a larger let expression,</span>
</span><span class='line'>    <span class="c1">// adding a set value line at the top of the expression each time through.</span>
</span><span class='line'>    <span class="c1">// Our initial state (a line with only the dictionary variable on) is always</span>
</span><span class='line'>    <span class="c1">// left last, so this is what will be returned from the constructor.</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">cstorCode</span> <span class="o">=</span>
</span><span class='line'>      <span class="k">fun</span> <span class="o">(</span><span class="n">args</span> <span class="o">:</span> <span class="nc">Expr</span> <span class="kt">list</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">dictionaryVar</span> <span class="o">=</span> <span class="nc">Var</span><span class="o">(</span><span class="s2">&quot;dictionary&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">GD</span><span class="o">&gt;)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">dictionary</span> <span class="o">:</span> <span class="nc">Expr</span><span class="o">&lt;</span><span class="nc">GD</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">dictionaryVar</span> <span class="o">|&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Var</span> <span class="o">|&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Cast</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">setValues</span> <span class="o">=</span>
</span><span class='line'>          <span class="n">args</span>
</span><span class='line'>          <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">propNames</span>
</span><span class='line'>          <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">fold</span> <span class="o">(</span><span class="k">fun</span> <span class="n">state</span> <span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">arg</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">&lt;@</span> <span class="o">(%</span><span class="n">dictionary</span><span class="o">).[</span><span class="n">name</span><span class="o">]</span> <span class="o">&lt;-</span> <span class="o">(%%</span><span class="n">arg</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span>
</span><span class='line'>               <span class="o">%</span><span class="n">state</span> <span class="o">@&gt;)</span> <span class="o">&lt;@</span> <span class="o">%</span><span class="n">dictionary</span> <span class="o">@&gt;</span>
</span><span class='line'>        <span class="nn">Expr</span><span class="p">.</span><span class="nc">Let</span><span class="o">(</span><span class="n">dictionaryVar</span><span class="o">,</span> <span class="o">&lt;@</span> <span class="nc">GD</span><span class="bp">()</span> <span class="o">@&gt;,</span> <span class="n">setValues</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Build the constructor out of our helpers</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">cstor</span> <span class="o">=</span>
</span><span class='line'>      <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="n">cstorParams</span><span class="o">,</span> <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="n">cstorCode</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// And make sure you add it to the class!</span>
</span><span class='line'>    <span class="n">myType</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">cstor</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">myType</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">provider</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;ParaProvider&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">parameters</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">[</span><span class="nc">ProvidedStaticParameter</span><span class="o">(</span><span class="s2">&quot;PropNames&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'>    <span class="n">provider</span><span class="o">.</span><span class="nc">DefineStaticParameters</span><span class="o">(</span><span class="n">parameters</span><span class="o">,</span> <span class="n">createType</span><span class="o">)</span>
</span><span class='line'>    <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">provider</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type Providers Live - the Movie]]></title>
    <link href="https://blog.mavnn.co.uk/type-providers-live-the-movie/"/>
    <updated>2016-02-29T21:10:51+00:00</updated>
    <id>https://blog.mavnn.co.uk/type-providers-live-the-movie</id>
    <content type="html"><![CDATA[<p>I recently gave a live streamed tutorial on building type providers, which I&#39;ve embedded below. Apologies for the sound; apparently Google Hangouts added a feature I was unaware of until after the stream started which mutes your microphone whenever you type.</p>

<p>Fortunately I think enough was preserved to be useful, and (amazingly!) all of the demonstrations actually worked.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/pXT0li6zxKQ" frameborder="0" allowfullscreen></iframe>

<p>If you&#39;d like to try things out for yourself, there&#39;s a github repository at https://github.com/mavnn/CambridgeTypeProvider which contains 6 individual fsx files, one for each new feature added to the type provider.</p>

<p>There&#39;s a bunch of other type provider information scattered around this blog, if you&#39;re interested just click <a href="https//blog.mavnn.co.uk/blog/categories/typeprovider/">the &quot;typeprovider&quot; tag</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EmParsec Embedded Parser Library]]></title>
    <link href="https://blog.mavnn.co.uk/emparsec-embedded-parser-library/"/>
    <updated>2016-01-18T12:53:11+00:00</updated>
    <id>https://blog.mavnn.co.uk/emparsec-embedded-parser-library</id>
    <content type="html"><![CDATA[<blockquote>
<p>You can find EmParsec on GitHub: https://github.com/mavnn/EmParsec </p>
</blockquote>

<p>Type providers, by their very nature, tend to access data external to the .net ecosystem. It can also be very awkward technically to make use of dependencies during the actual type generation process.</p>

<p>This is rather a pity, because accessing all of that external data is much nicer and easier when you have a decent parser to do it with. And F# has very, very nice parser support via the <a href="http://www.quanttec.com/fparsec/">FParsec</a> library. Instead, many (most?) type providers end up creating mini-one shot parsers which can be a bit slow to write and don&#39;t tend to have features that come for free in a more complete solution such as nice error reporting.</p>

<p>Writing yet an other parser (YAOP) this week I decided that enough was enough. What I needed was a shared resource that people could pool improvements for that could be easily embedded in projects like type providers were it isn&#39;t desirable (or sometimes possible) to take external binary dependencies.</p>

<p>So I built it.</p>

<!-- more -->

<p>EmParsec is a single file parser combinator &quot;library&quot;, inspired by both FParsec library and <a href="http://fsharpforfunandprofit.com/posts/understanding-parser-combinators/">Scott&#39;s excellent series on building parser combinators</a>.</p>

<p>It consists of a single fs file that can be loaded in the editor of your choice without any requirement for a project file or similar. When you want to use it, you can just reference it as a <a href="https://fsprojects.github.io/Paket/github-dependencies.html">Paket GitHub dependency</a> (which you&#39;ll be wanting to do for the ProvidedTypes.fs file if you&#39;re creating a type provider anyway) or even just copy the file across.</p>

<p>If you are compiling EmParsec into a larger project, it marks itself as &quot;internal&quot; so that you don&#39;t pollute the end users name space, and so that if two projects you reference have embedded different versions of EmParsec there are no collisions.</p>

<h2>How do I use it?</h2>

<p>So, you&#39;ve added EmParsec.fs to your project (manually or with Paket) and now you&#39;re wondering how to use it. Let&#39;s build some simple examples.</p>

<h3>Matching an exact string</h3>

<p>Let&#39;s start with something simple: what if I just want to match a string?</p>

<p>Parser combinator libraries allow you to combine parsers from simpler parsers (hence the name), but in this case <code>pstring</code> (the &#39;p&#39; is there to avoid clashing with the existing <code>string</code> function) is provided for us by EmParsec.</p>

<p>Let&#39;s try it out!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">EmParsec</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">thingParser</span> <span class="o">=</span> <span class="n">pstring</span> <span class="s2">&quot;thing&quot;</span>
</span><span class='line'><span class="c1">// When you enter this line, F# give a &quot;Value restriction&quot; error.</span>
</span><span class='line'><span class="c1">// You can either mark thingParser as type UParser&lt;string&gt;, or</span>
</span><span class='line'><span class="c1">// use the parser with run as below and the error will disappear.</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="n">thingParser</span> <span class="s2">&quot;thing&quot;</span>
</span><span class='line'><span class="c1">// val it : Choice&lt;string,string&gt; = Choice1Of2 &quot;thing&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="n">thingParser</span> <span class="s2">&quot;th1ng&quot;</span>
</span><span class='line'><span class="c1">// val it : Choice&lt;string,string&gt; =</span>
</span><span class='line'><span class="c1">//   Choice2Of2</span>
</span><span class='line'><span class="c1">//     &quot;Parser &lt;string thing&gt; failed at line 0 column 2</span>
</span><span class='line'><span class="c1">// Unexpected [&#39;1&#39;]</span>
</span><span class='line'><span class="c1">// th1ng</span>
</span><span class='line'><span class="c1">//   ^&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Not bad! It even marks the unexpected character in the error output.</p>

<p>Unfortunately:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">run</span> <span class="n">thingParser</span> <span class="s2">&quot;thing and more&quot;</span>
</span><span class='line'><span class="c1">// val it : Choice&lt;string,string&gt; = Choice1Of2 &quot;thing&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>That probably isn&#39;t the behaviour you were hoping for. There&#39;s still input left after the parser has finished, but that isn&#39;t being seen as an error. EmParsec includes the <code>eof</code> parser for just this type of occasion - a parser that checks the input is exhausted.</p>

<p>So we want a parser that parses &quot;thing&quot; and then ends.</p>

<p>Let&#39;s go:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">thingParser2</span> <span class="o">=</span> <span class="n">andThen</span> <span class="o">(</span><span class="n">pstring</span> <span class="s2">&quot;thing&quot;</span><span class="o">)</span> <span class="n">eof</span>
</span><span class='line'><span class="c1">// normally written</span>
</span><span class='line'><span class="k">let</span> <span class="n">thingParser2&#39;</span> <span class="o">=</span> <span class="n">pstring</span> <span class="s2">&quot;thing&quot;</span> <span class="o">.&gt;&gt;.</span> <span class="n">eof</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="n">thingParser2</span> <span class="s2">&quot;thing&quot;</span>
</span><span class='line'><span class="c1">// val it : Choice&lt;(string * unit),string&gt; = Choice1Of2 (&quot;thing&quot;, null)</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="n">thingParser2</span> <span class="s2">&quot;th1ng&quot;</span>
</span><span class='line'><span class="c1">// val it : Choice&lt;(string * unit),string&gt; =</span>
</span><span class='line'><span class="c1">//   Choice2Of2</span>
</span><span class='line'><span class="c1">//     &quot;Parser (&lt;string thing&gt; andThen &lt;end&gt;) failed at line 0 column 2</span>
</span><span class='line'><span class="c1">// Unexpected [&#39;1&#39;]</span>
</span><span class='line'><span class="c1">// th1ng</span>
</span><span class='line'><span class="c1">//   ^&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="n">thingParser2</span> <span class="s2">&quot;thing and more&quot;</span>
</span><span class='line'><span class="c1">// val it : Choice&lt;(string * unit),string&gt; =</span>
</span><span class='line'><span class="c1">//   Choice2Of2</span>
</span><span class='line'><span class="c1">//     &quot;Parser (&lt;string thing&gt; andThen &lt;end&gt;) failed at line 0 column 5</span>
</span><span class='line'><span class="c1">// Unexpected input remaining &#39; and more&#39;</span>
</span><span class='line'><span class="c1">// thing and more</span>
</span><span class='line'><span class="c1">//      ^&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>That&#39;s more like it. The only issue now is that we&#39;ve combined two parser, so we&#39;re getting back a tuple of two results.</p>

<p>A simple tweak tells EmParsec to throw away the unit result returned by <code>eof</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">improvedThingParser</span> <span class="o">=</span> <span class="n">pstring</span> <span class="s2">&quot;thing&quot;</span> <span class="o">.&gt;&gt;</span> <span class="n">eof</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="n">improvedThingParser</span> <span class="s2">&quot;thing&quot;</span>
</span><span class='line'><span class="c1">// val it : Choice&lt;string,string&gt; = Choice1Of2 &quot;thing&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>&quot;Impressive,&quot; I hear you say: &quot;You can parse static strings!&quot;</p>

<h3>Parsing a simple template language</h3>

<p>You have a point. Let&#39;s tackle a simple template language. You know the kind of thing:</p>

<p><code>Welcome {name}! Please spend money here.</code></p>

<p>That kind of thing. I&#39;m going to start building up a set of helper parsers for this, applying some type annotations both to make the example code clearer and to avoid the value restriction errors that crop up until you actually use the parsers (those occur because these parsers can carry generic user state, but we&#39;re not going to go into using that here).</p>

<p>We have two &quot;types&quot; of token that can exist in our template language: values to be replaced, and text to be preserved. Let&#39;s start by creating a union type to contain our parse results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">TemplatePart</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Text</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Value</span> <span class="k">of</span> <span class="kt">string</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then, we&#39;ll have a parser that will parse individual characters which are <em>not</em> an opening bracket:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">notOpenBracket</span> <span class="o">:</span> <span class="nc">UParser</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">satisfy</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span> <span class="o">&lt;&gt;</span> <span class="kt">char</span> <span class="sc">&#39;{&#39;</span><span class="o">)</span> <span class="s2">&quot;not open bracket&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>satisfy</code> is a function built into EmParsec which takes a predicate for whether or not it will consume the next character in the input stream. The final string argument is a name for the parser, which will be used in error messages.</p>

<p>Then we&#39;ll use that parser to create one that consumes as many &quot;not open bracket&quot; characters as it can, combines them into a string and then counts that string as a <code>Text</code> part.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">textParser</span> <span class="o">:</span> <span class="nc">UParser</span><span class="o">&lt;</span><span class="nc">TemplatePart</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">many1</span> <span class="n">notOpenBracket</span>
</span><span class='line'>  <span class="o">|&gt;&gt;</span> <span class="o">(</span><span class="k">fun</span> <span class="n">charList</span> <span class="o">-&gt;</span>
</span><span class='line'>         <span class="n">charList</span>
</span><span class='line'>         <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="kt">string</span>
</span><span class='line'>         <span class="o">|&gt;</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>         <span class="o">|&gt;</span> <span class="nc">Text</span><span class="o">)</span>
</span><span class='line'>  <span class="o">&lt;?&gt;</span> <span class="s2">&quot;&lt;text parser&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>There&#39;s a new function here and a couple of new operators (all taken from FParsec, by the way). <code>|&gt;&gt;</code> is a map operator; it allows you to transform the result of a parser and then rewrap everything back up into a new parser. This is really at the heart of the power of parser combinator libraries.</p>

<p>The <code>&lt;?&gt;</code> operator is much simpler: it allows you to name a parser rather than its name being some combination of the parsers it&#39;s built of.</p>

<p>The <code>many1</code> function says &quot;match one or more instances of the parser that follows&quot;. There is also a <code>many</code>, which matches 0 or more repeats.</p>

<p>So that&#39;s good - we can capture the text in between our replacable values. Let&#39;s go with a parser for the bracketed value names next!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">valueName</span> <span class="o">:</span> <span class="nc">UParser</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">many1</span> <span class="o">(</span><span class="n">satisfy</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span> <span class="o">&lt;&gt;</span> <span class="sc">&#39;}&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="ow">not</span> <span class="o">&lt;|</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Char</span><span class="p">.</span><span class="nc">IsWhiteSpace</span> <span class="n">c</span><span class="o">))</span> <span class="s2">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|&gt;&gt;</span> <span class="o">(</span><span class="k">fun</span> <span class="n">charList</span> <span class="o">-&gt;</span> <span class="n">charList</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="kt">string</span> <span class="o">|&gt;</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">openValue</span> <span class="o">:</span> <span class="nc">UParser</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">pchar</span> <span class="sc">&#39;{&#39;</span> <span class="o">.&gt;&gt;.</span> <span class="n">spaces</span>
</span><span class='line'>  <span class="o">|&gt;&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">closeValue</span> <span class="o">:</span> <span class="nc">UParser</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">spaces</span> <span class="o">.&gt;&gt;.</span> <span class="n">pchar</span> <span class="sc">&#39;}&#39;</span>
</span><span class='line'>  <span class="o">|&gt;&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">value</span> <span class="o">:</span> <span class="nc">UParser</span><span class="o">&lt;</span><span class="nc">TemplatePart</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">between</span> <span class="n">openValue</span> <span class="n">closeValue</span> <span class="n">valueName</span>
</span><span class='line'>  <span class="o">|&gt;&gt;</span> <span class="nc">Value</span>
</span><span class='line'>  <span class="o">&lt;?&gt;</span> <span class="s2">&quot;&lt;value parser&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>So we now have parsers for white space and our &quot;valueName&quot; (which we are saying must be at least one character long, and can consist of any character which is not whitespace or a closing curly bracket). We can then use pchar (&quot;parse char&quot;) and whitespace to allow for minor variations in syntax (some people like <code>{name}</code>, others like <code>{ name }</code>).</p>

<p>Finally we build our value parser, using the <code>between</code> function, which does pretty much what you&#39;d expect: it takes an opening parser, a closing parser, and captures what&#39;s in between with third parser.</p>

<p>Our final step is just to combine our parsers for value and text sections. We want to capture &quot;many&quot; of one or the other, until we run out of input. We&#39;ll put an explicit <code>eof</code> on there as well, otherwise things like (for example) an unclosed <code>}</code> at the end of the string will not show up as an error - the parser will just stop at the character before the opening <code>{</code> as the last matching input.</p>

<p>Our final parser introduces the <code>&lt;|&gt;</code> (orElse) operator, and looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">template</span> <span class="o">:</span> <span class="nc">UParser</span><span class="o">&lt;</span><span class="nc">TemplatePart</span> <span class="kt">list</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">many</span> <span class="o">(</span><span class="n">value</span> <span class="o">&lt;|&gt;</span> <span class="n">textParser</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.&gt;&gt;</span> <span class="n">eof</span>
</span><span class='line'>  <span class="o">&lt;?&gt;</span> <span class="s2">&quot;&lt;template parser&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Let&#39;s try it out!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Text</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">showTemplate</span> <span class="n">values</span> <span class="n">parts</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">folder</span> <span class="o">(</span><span class="n">sb</span> <span class="o">:</span> <span class="nc">StringBuilder</span><span class="o">)</span> <span class="n">part</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">part</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Text</span> <span class="n">s</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">sb</span><span class="o">.</span><span class="nc">Append</span> <span class="n">s</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Value</span> <span class="n">v</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">defaultArg</span> <span class="o">(</span><span class="nn">Map</span><span class="p">.</span><span class="n">tryFind</span> <span class="n">v</span> <span class="n">values</span><span class="o">)</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="n">sb</span><span class="o">.</span><span class="nc">Append</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">sb</span> <span class="o">=</span> <span class="nn">List</span><span class="p">.</span><span class="n">fold</span> <span class="n">folder</span> <span class="o">(</span><span class="nc">StringBuilder</span><span class="bp">()</span><span class="o">)</span> <span class="n">parts</span>
</span><span class='line'>  <span class="n">sb</span><span class="o">.</span><span class="nc">ToString</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">values</span> <span class="o">=</span> <span class="nc">Map</span> <span class="o">[</span> <span class="s2">&quot;name&quot;</span><span class="o">,</span> <span class="s2">&quot;bob&quot;</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">run&#39;</span> <span class="n">parser</span> <span class="n">str</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">run</span> <span class="n">parser</span> <span class="n">str</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="k">function</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">Choice1Of2</span> <span class="n">success</span> <span class="o">-&gt;</span> <span class="n">showTemplate</span> <span class="n">values</span> <span class="n">success</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">Choice2Of2</span> <span class="n">fail</span> <span class="o">-&gt;</span> <span class="n">failwithf</span> <span class="s2">&quot;Parsing failed!</span><span class="se">\n</span><span class="s2">%s&quot;</span> <span class="n">fail</span>
</span></code></pre></td></tr></table></div></figure>

<p>A couple of helpers: <code>showTemplate</code> knows how to build up a string from a list of template parts and a value map, <code>run&#39;</code> is just a simple wrapper around <code>run</code> that throws if parsing is not successful.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">ex1</span> <span class="o">=</span> <span class="s2">&quot;Welcome {name}! Please spend money here!&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="n">ex2</span> <span class="o">=</span> <span class="s2">&quot;hello { name } thing&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">run&#39;</span> <span class="n">template</span> <span class="n">ex1</span>
</span><span class='line'><span class="c1">// val it : string = &quot;Welcome bob! Please spend money here!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">run&#39;</span> <span class="n">template</span> <span class="n">ex2</span>
</span><span class='line'><span class="c1">// val it : string = &quot;hello bob thing&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">ex3</span> <span class="o">=</span> <span class="s2">&quot;Hello, { name }! How about {</span>
</span><span class='line'><span class="s2"> date:alreadyrendered?</span>
</span><span class='line'><span class="s2">}? &lt;- That should be left blank, but parse as valid.&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">run&#39;</span> <span class="n">template</span> <span class="n">ex3</span>
</span><span class='line'><span class="c1">// val it : string =</span>
</span><span class='line'><span class="c1">//   &quot;Hello, bob! How about ? &lt;- That should be left blank, but parse as valid.&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>And finally our templates in action. You can see that even with a simple parser like this, it&#39;s already reaching a complexity that would be painful to match with a hand rolled creation.</p>

<p>If you want to know more about parser combinators, and especially how to use them to create recursive grammars, do check out the <a href="http://www.quanttec.com/fparsec/">FParsec documentation</a> which is excellent. It is also more complete and <em>much</em> more performant than EmParsec.</p>

<p>But if you need a small, single file parser where performance is not the primary concern - maybe EmParsec is your friend. Anyone who wants to join in making it better is more than welcome! Of particular note is that EmParsec does not yet support controlling when backtracking does or doesn&#39;t happen (it will always backtrack) which can make for some pretty confusing error messages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angels From the Realms of Glory]]></title>
    <link href="https://blog.mavnn.co.uk/angels-from-the-realms-of-glory/"/>
    <updated>2015-12-19T12:00:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/angels-from-the-realms-of-glory</id>
    <content type="html"><![CDATA[<blockquote>
<p>An angel of the Lord appeared to them, and the glory of the Lord shone around them, and they were terrified. <ref><a href="https://www.biblegateway.com/passage/?search=luke+2:9&version=NIV" title="Luke 2:9">Luke 2:9</a></ref></p>
</blockquote>

<p>It&#39;s that time of year again, where the F# community get together to source a collection of weird, wonderful and occasionally useful blog posts on life, the universe and sometimes Christmas.</p>

<p>As mentioned in last years post, I like to go back to the source when it comes to advent posts, so lets dive back into the book of Luke (and learn about agent based programming as we go).</p>

<!-- more -->

<h3>The plan</h3>

<p>We&#39;re going to simulate the angelic choir as they sing for the shepherds, although with a
couple of minor limitations. One is I don&#39;t feel like dealing with cross platform audio issues
(and don&#39;t think I could do the voices justice anyway&#8230;) and the other is that I can&#39;t draw
for toffee.</p>

<p>So we&#39;re going to simulate a view of the angels from a long way away out of earshot.</p>

<p>The final result should end up looking something like this (your results may vary depending
on console colour scheme, but I&#39;d suggest dark background for the best effect!):</p>

<p><img src="https://blog.mavnn.co.uk/images/angels1.gif"/></p>

<h3>Step 1: atomic writes to the console</h3>

<p>If you&#39;ve tried to use the <code>System.Console</code> namespace in .net, you&#39;ll have discovered a few
things about it. The biggest problem we want to deal with, is that writing a character in colour
to the console is not atomic.</p>

<p>You have to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Set the cursor to the position you want to write</span>
</span><span class='line'><span class="nn">Console</span><span class="p">.</span><span class="nc">SetCursorPosition</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span>
</span><span class='line'><span class="c1">// Change the foreground colour to the colour you want</span>
</span><span class='line'><span class="nn">Console</span><span class="p">.</span><span class="nc">ForegroundColor</span> <span class="o">&lt;-</span> <span class="n">c</span>
</span><span class='line'><span class="c1">// Write the character</span>
</span><span class='line'><span class="nn">Console</span><span class="p">.</span><span class="nc">Write</span> <span class="o">(</span><span class="kt">string</span> <span class="n">m</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>In async code, different threads doing this at the same time will mix these operations up,
as there&#39;s no way to know what an other thread is doing with the cursor while you try and
set up your own write.</p>

<p>For this we&#39;re going to set up our first agent: the console agent. It will be responsible
for all writes to the screen in our program.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">ConsoleColour</span><span class="o">|)</span> <span class="n">i</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="k">then</span>
</span><span class='line'>    <span class="nn">ConsoleColor</span><span class="p">.</span><span class="nc">Black</span>
</span><span class='line'>  <span class="k">elif</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">15</span> <span class="k">then</span>
</span><span class='line'>    <span class="nn">ConsoleColor</span><span class="p">.</span><span class="nc">White</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">enum</span> <span class="n">i</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">console</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span>
</span><span class='line'>    <span class="k">fun</span> <span class="n">agent</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="k">let</span> <span class="k">rec</span> <span class="n">inner</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">let</span><span class="o">!</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="nc">ConsoleColour</span> <span class="n">c</span><span class="o">,</span> <span class="n">m</span> <span class="o">:</span> <span class="kt">char</span><span class="o">)</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
</span><span class='line'>          <span class="nn">Console</span><span class="p">.</span><span class="nc">SetCursorPosition</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span>
</span><span class='line'>          <span class="nn">Console</span><span class="p">.</span><span class="nc">ForegroundColor</span> <span class="o">&lt;-</span> <span class="n">c</span>
</span><span class='line'>          <span class="nn">Console</span><span class="p">.</span><span class="nc">Write</span> <span class="o">(</span><span class="kt">string</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>          <span class="k">return</span><span class="o">!</span> <span class="n">inner</span> <span class="bp">()</span> <span class="o">}</span>
</span><span class='line'>      <span class="n">inner</span> <span class="bp">()</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">console</span><span class="o">.</span><span class="nn">Error</span><span class="p">.</span><span class="nc">Add</span><span class="o">(</span><span class="k">fun</span> <span class="n">e</span> <span class="o">-&gt;</span> <span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="n">e</span><span class="o">.</span><span class="nc">Message</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>The <code>(|ConsoleColour|)</code> construct is what&#39;s called an active pattern. With it, we can pattern
match on any integer and be guaranteed to get a valid ConsoleColor enum out. It also spells
&quot;colour&quot; correctly :D.</p>

<p>Then we start a <code>MailboxProcessor</code> (the default name for an agent in F#). This agent listens
for messages which consist of: an x coordinate, a y coordinate, an int for colour and a character
to write. The overall agent is implemented as an async block and so will not block a thread while
waiting for messages - but it will guarantee that it will not start processing the next message
until the current one is finished.</p>

<p>Hey presto! We can now safely write to the console from any thread simply by calling <code>console.Post.</code></p>

<p>We&#39;ll try it out by creating some random stationary angels.</p>

<p>First, we&#39;ll initialize some infinite sequences of random numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">seedx</span><span class="o">,</span> <span class="n">seedy</span><span class="o">,</span> <span class="n">seedc</span> <span class="o">=</span> <span class="mi">100</span><span class="o">,</span> <span class="mi">150</span><span class="o">,</span> <span class="mi">200</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">randX</span> <span class="o">=</span> <span class="nc">Random</span><span class="o">(</span><span class="n">seedx</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">randY</span> <span class="o">=</span> <span class="nc">Random</span><span class="o">(</span><span class="n">seedy</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">randC</span> <span class="o">=</span> <span class="nc">Random</span><span class="o">(</span><span class="n">seedc</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">randSeq</span> <span class="o">(</span><span class="n">rand</span> <span class="o">:</span> <span class="nc">Random</span><span class="o">)</span> <span class="n">min&#39;</span> <span class="n">max&#39;</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">Seq</span><span class="p">.</span><span class="n">unfold</span> <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">rand</span><span class="o">.</span><span class="nc">Next</span><span class="o">(</span><span class="n">min&#39;</span><span class="o">,</span> <span class="n">max&#39;</span><span class="o">),</span> <span class="bp">()</span><span class="o">))</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">xSeq</span> <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randX</span> <span class="n">xZero</span> <span class="o">(</span><span class="n">width</span> <span class="o">+</span> <span class="n">xZero</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">ySeq</span> <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randY</span> <span class="n">yZero</span> <span class="o">(</span><span class="n">height</span> <span class="o">+</span> <span class="n">yZero</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">cSeq</span> <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randC</span> <span class="mi">0</span> <span class="mi">15</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then we&#39;ll wrap the write in an async method, and draw our angels across the screen concurrently;
each angel will wait 50 milliseconds per unit across the x axis to give a nice staggered appearance.</p>

<p>You can find a full listing in <a href="https://github.com/mavnn/advent2015/blob/master/advent1.fsx">advent1.fsx</a>. Running it should give you something like this:</p>

<p><img src="https://blog.mavnn.co.uk/images/angels2.gif"/></p>

<blockquote>
<p>But the angel said to them, “Do not be afraid. I bring you good news that will cause great joy for all the people. Today in the town of David a Savior has been born to you; he is the Messiah, the Lord. This will be a sign to you: You will find a baby wrapped in cloths and lying in a manger.” <ref><a href="https://www.biblegateway.com/passage/?search=luke+2:10-12&version=NIV" title="Luke 2:10-12">Luke 2:10-12</a></ref></p>
</blockquote>

<h2>Step 2: Add event loop</h2>

<p>Onwards! Time to make our angels move. Following on with the theme, we&#39;re going to make an agent
responsible for ticking off each &#39;loop&#39; of events.</p>

<p>We&#39;ll add some safety to our console agent to make sure that writes outside the console don&#39;t
cause us issues:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">width</span>  <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">WindowWidth</span>
</span><span class='line'><span class="k">let</span> <span class="n">height</span> <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">WindowHeight</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">xZero</span>  <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">WindowLeft</span>
</span><span class='line'><span class="k">let</span> <span class="n">yZero</span>  <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">WindowTop</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">ConsoleColour</span><span class="o">|)</span> <span class="n">i</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="k">then</span>
</span><span class='line'>    <span class="nn">ConsoleColor</span><span class="p">.</span><span class="nc">Black</span>
</span><span class='line'>  <span class="k">elif</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">15</span> <span class="k">then</span>
</span><span class='line'>    <span class="nn">ConsoleColor</span><span class="p">.</span><span class="nc">White</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">enum</span> <span class="n">i</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">X</span><span class="o">|)</span> <span class="n">x</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">xZero</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">xZero</span>
</span><span class='line'>  <span class="k">elif</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="n">width</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">width</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">x</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">Y</span><span class="o">|)</span> <span class="n">y</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">yZero</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">yZero</span>
</span><span class='line'>  <span class="k">elif</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="n">height</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">height</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">y</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">console</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span>
</span><span class='line'>    <span class="k">fun</span> <span class="n">agent</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="k">let</span> <span class="k">rec</span> <span class="n">inner</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">let</span><span class="o">!</span> <span class="o">(</span><span class="nc">X</span> <span class="n">x</span><span class="o">,</span> <span class="nc">Y</span> <span class="n">y</span><span class="o">,</span> <span class="nc">ConsoleColour</span> <span class="n">c</span><span class="o">,</span> <span class="n">m</span> <span class="o">:</span> <span class="kt">char</span><span class="o">)</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
</span><span class='line'>          <span class="nn">Console</span><span class="p">.</span><span class="nc">SetCursorPosition</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span>
</span><span class='line'>          <span class="nn">Console</span><span class="p">.</span><span class="nc">ForegroundColor</span> <span class="o">&lt;-</span> <span class="n">c</span>
</span><span class='line'>          <span class="nn">Console</span><span class="p">.</span><span class="nc">Write</span> <span class="o">(</span><span class="kt">string</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>          <span class="k">return</span><span class="o">!</span> <span class="n">inner</span> <span class="bp">()</span> <span class="o">}</span>
</span><span class='line'>      <span class="n">inner</span> <span class="bp">()</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">console</span><span class="o">.</span><span class="nn">Error</span><span class="p">.</span><span class="nc">Add</span><span class="o">(</span><span class="k">fun</span> <span class="n">e</span> <span class="o">-&gt;</span> <span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="n">e</span><span class="o">.</span><span class="nc">Message</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Notice the use of the X and Y active patterns to enforce our domain constraints on the underlying
.net type.</p>

<p>We&#39;ll also have some types for keeping track of an angels position and velocity.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Vector2</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">{</span> <span class="n">x</span> <span class="o">:</span> <span class="kt">float</span><span class="o">;</span> <span class="n">y</span> <span class="o">:</span> <span class="kt">float</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">member</span> <span class="o">(+)</span> <span class="o">({</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x1</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y1</span> <span class="o">},</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x2</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y2</span> <span class="o">})</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x1</span> <span class="o">+</span> <span class="n">x2</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y1</span> <span class="o">+</span> <span class="n">y2</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">member</span> <span class="o">(-)</span> <span class="o">({</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x1</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y1</span> <span class="o">},</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x2</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y2</span> <span class="o">})</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x1</span> <span class="o">-</span> <span class="n">x2</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y1</span> <span class="o">-</span> <span class="n">y2</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">member</span> <span class="nc">Abs</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x1</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y1</span> <span class="o">}</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">x1</span> <span class="o">*</span> <span class="n">x1</span> <span class="o">+</span> <span class="n">y1</span> <span class="o">*</span> <span class="n">y1</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">sqrt</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">AngelInfo</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">{</span> <span class="nc">Position</span> <span class="o">:</span> <span class="nc">Vector2</span>
</span><span class='line'>    <span class="nc">Velocity</span> <span class="o">:</span> <span class="nc">Vector2</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here we&#39;ve defined + and - on a two element vector, and a helper function to calculate the vectors
magnitude.</p>

<p>Now we&#39;re ready to set up our event loop agent. I&#39;m going to call mine <code>ping</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">AngelMessage</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Init</span> <span class="k">of</span> <span class="nc">AsyncReplyChannel</span><span class="o">&lt;</span><span class="nc">AngelInfo</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Next</span> <span class="k">of</span> <span class="nc">AngelInfo</span> <span class="kt">list</span> <span class="o">*</span> <span class="nc">AsyncReplyChannel</span><span class="o">&lt;</span><span class="nc">AngelInfo</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">ping</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span>
</span><span class='line'>    <span class="k">fun</span> <span class="n">agent</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="k">let</span> <span class="k">rec</span> <span class="n">inner</span> <span class="o">(</span><span class="n">angels</span> <span class="o">:</span> <span class="nc">MailboxProcessor</span><span class="o">&lt;</span><span class="nc">AngelMessage</span><span class="o">&gt;</span> <span class="kt">list</span><span class="o">)</span> <span class="n">infos</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Ask the angels where they will be next</span>
</span><span class='line'>          <span class="k">let</span><span class="o">!</span> <span class="n">newInfos</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">angels</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">angel</span> <span class="o">-&gt;</span> <span class="n">angel</span><span class="o">.</span><span class="nc">PostAndAsyncReply</span> <span class="o">(</span><span class="k">fun</span> <span class="n">r</span> <span class="o">-&gt;</span> <span class="nc">Next</span><span class="o">(</span><span class="n">infos</span><span class="o">,</span> <span class="n">r</span><span class="o">)))</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Parallel</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">let</span> <span class="n">newInfos</span> <span class="o">=</span> <span class="n">newInfos</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">ofArray</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Erase old locations</span>
</span><span class='line'>          <span class="k">do</span><span class="o">!</span>
</span><span class='line'>            <span class="n">infos</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="n">p</span> <span class="o">}</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">setAsync</span> <span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">.</span><span class="n">x</span><span class="o">)</span> <span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">.</span><span class="n">y</span><span class="o">)</span> <span class="mi">0</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Parallel</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Ignore</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Draw new locations</span>
</span><span class='line'>          <span class="k">do</span><span class="o">!</span>
</span><span class='line'>            <span class="n">newInfos</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="n">p</span> <span class="o">}</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">setAsync</span> <span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">.</span><span class="n">x</span><span class="o">)</span> <span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">.</span><span class="n">y</span><span class="o">)</span> <span class="mi">15</span> <span class="sc">&#39;*&#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Parallel</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Ignore</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">do</span><span class="o">!</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Sleep</span> <span class="mi">100</span>
</span><span class='line'>          <span class="k">return</span><span class="o">!</span> <span class="n">inner</span> <span class="n">angels</span> <span class="n">newInfos</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">init</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Wait for angels to be passed in</span>
</span><span class='line'>          <span class="k">let</span><span class="o">!</span> <span class="o">(</span><span class="n">msg</span> <span class="o">:</span> <span class="nc">MailboxProcessor</span><span class="o">&lt;</span><span class="nc">AngelMessage</span><span class="o">&gt;</span> <span class="kt">list</span><span class="o">)</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">let</span><span class="o">!</span> <span class="n">infos</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">msg</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">angel</span> <span class="o">-&gt;</span> <span class="n">angel</span><span class="o">.</span><span class="nc">PostAndAsyncReply</span> <span class="nc">Init</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Parallel</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">return</span><span class="o">!</span> <span class="n">inner</span> <span class="n">msg</span> <span class="o">(</span><span class="n">infos</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">ofArray</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="n">init</span> <span class="bp">()</span>
</span><span class='line'>    <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>This agent is a bit more chunky. If you look down to the end of the body, you&#39;ll see it starts
by calling <code>init</code>. This method is responsible for waiting for the initial list of angels that
will populate our night sky. The angels themselves will be agents that listen for the AngelMessage
type.</p>

<p><code>init</code> sends an <code>Init</code> message to each angel, asking it for it&#39;s initial position and velocity.
The message consists solely of a reply channel which the angel will use to pass back the information.</p>

<p>Once all the angels have reported in, we pass control to the recursive inner loop. On each round
through, the <code>ping</code> agent asks every angel where it&#39;s moving to. It then writes spaces to every square on the console that held an angel last
tick, and finally draws the new positions of every angel.</p>

<p>And most of our infrastructure is in place! Let&#39;s test it with a collection of angels that will
start with a random position and velocity and move in a straight line for a while.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">xSeq</span>  <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randX</span> <span class="n">xZero</span> <span class="o">(</span><span class="n">width</span> <span class="o">+</span> <span class="n">xZero</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">ySeq</span>  <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randY</span> <span class="n">yZero</span> <span class="o">(</span><span class="n">height</span> <span class="o">+</span> <span class="n">yZero</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">vxSeq</span> <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randX</span> <span class="o">-</span><span class="mi">5</span> <span class="mi">5</span>
</span><span class='line'><span class="k">let</span> <span class="n">vySeq</span> <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randY</span> <span class="o">-</span><span class="mi">5</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">createAngel</span> <span class="n">logic</span> <span class="n">angelInfo</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span>
</span><span class='line'>    <span class="k">fun</span> <span class="n">agent</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="k">let</span> <span class="k">rec</span> <span class="n">inner</span> <span class="n">currentInfo</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">let</span><span class="o">!</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
</span><span class='line'>          <span class="k">return</span><span class="o">!</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">Init</span> <span class="n">r</span> <span class="o">-&gt;</span>
</span><span class='line'>              <span class="n">r</span><span class="o">.</span><span class="nc">Reply</span> <span class="n">currentInfo</span>
</span><span class='line'>              <span class="n">inner</span> <span class="n">currentInfo</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">Next</span> <span class="o">(</span><span class="n">infos</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>              <span class="k">let</span> <span class="n">newInfo</span> <span class="o">=</span> <span class="n">logic</span> <span class="n">currentInfo</span> <span class="n">infos</span>
</span><span class='line'>              <span class="n">r</span><span class="o">.</span><span class="nc">Reply</span> <span class="n">newInfo</span>
</span><span class='line'>              <span class="n">inner</span> <span class="n">newInfo</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="n">inner</span> <span class="n">angelInfo</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">angels</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="o">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">xSeq</span> <span class="n">ySeq</span><span class="o">)</span> <span class="o">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">vxSeq</span> <span class="n">vySeq</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">10</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span>
</span><span class='line'>      <span class="o">(</span><span class="k">fun</span> <span class="o">((</span><span class="n">px</span><span class="o">,</span> <span class="n">py</span><span class="o">),</span> <span class="o">(</span><span class="n">vx</span><span class="o">,</span> <span class="n">vy</span><span class="o">))</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">px</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">py</span> <span class="o">};</span> <span class="nc">Velocity</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">vx</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">py</span> <span class="o">}})</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="n">createAngel</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">c</span> <span class="k">with</span> <span class="nc">Position</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="nc">Position</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="nc">Velocity</span> <span class="o">}))</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toList</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Start the whole thing off</span>
</span><span class='line'><span class="n">ping</span><span class="o">.</span><span class="nc">Post</span> <span class="n">angels</span>
</span><span class='line'>
</span><span class='line'><span class="nn">Console</span><span class="p">.</span><span class="nc">ReadLine</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="nn">Console</span><span class="p">.</span><span class="nc">ForegroundColor</span> <span class="o">&lt;-</span> <span class="nn">ConsoleColor</span><span class="p">.</span><span class="nc">White</span>
</span><span class='line'><span class="nn">Console</span><span class="p">.</span><span class="nc">CursorVisible</span> <span class="o">&lt;-</span> <span class="bp">true</span>
</span></code></pre></td></tr></table></div></figure>

<p>Each of our angels knows how to report its initial state, and how to apply a function called <code>logic</code> to it&#39;s previous state to generate the new position. For testing, the <code>logic</code> we&#39;re passing in is just to add its velocity to it&#39;s current position each time its asked.</p>

<p>Full listing is in <a href="https://github.com/mavnn/advent2015/blob/master/advent2.fsx">advent2.fsx</a>, and running it should give us something like this:</p>

<p><img src="https://blog.mavnn.co.uk/images/angels3.gif"/></p>

<blockquote>
<p>Suddenly a great company of the heavenly host appeared with the angel, praising God and saying,</p>

<p>“Glory to God in the highest heaven,
   and on earth peace to those on whom his favor rests.” <ref><a href="https://www.biblegateway.com/passage/?search=luke+2:13-14&version=NIV" title="Luke 2:13-14">Luke 2:13-14</a></ref></p>
</blockquote>

<h3>Adding some dancing</h3>

<p>But! Angels in straight lines doesn&#39;t sound much fun. We&#39;ll make our angels a bit more interesting
by implementing a simple <a href="https://en.wikipedia.org/wiki/Boids">boid</a> variant.</p>

<p>First we&#39;ll add the ability to specify a colour as part of our angel info (check the full listing for details). We&#39;ll also expand the vectors to implement multiplication, division and a magnitude limit.</p>

<p>Then we can add a <code>logic</code> module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Logic</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">private</span> <span class="n">surrounding</span> <span class="n">radius</span> <span class="o">(</span><span class="n">us</span> <span class="o">:</span> <span class="nc">AngelInfo</span><span class="o">)</span> <span class="o">(</span><span class="n">others</span> <span class="o">:</span> <span class="nc">AngelInfo</span> <span class="kt">list</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">others</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="nn">Vector2</span><span class="p">.</span><span class="n">abs</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="nc">Position</span> <span class="o">-</span> <span class="n">us</span><span class="o">.</span><span class="nc">Position</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">radius</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="k">private</span> <span class="n">desiredVel</span> <span class="n">angels</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">angels</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">fold</span>
</span><span class='line'>        <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">i</span><span class="o">)</span> <span class="n">angel</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="o">(</span><span class="n">angel</span><span class="o">.</span><span class="nc">Velocity</span> <span class="o">+</span> <span class="n">v</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">))</span> <span class="o">({</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.},</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="k">fun</span> <span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">i</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">i</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">x</span> <span class="o">/</span> <span class="kt">float</span> <span class="n">i</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">y</span> <span class="o">/</span> <span class="kt">float</span> <span class="n">i</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="k">private</span> <span class="n">avoid</span> <span class="n">this</span> <span class="n">angels</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">dodge</span> <span class="n">v</span> <span class="o">=</span>
</span><span class='line'>      <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span> <span class="o">/</span> <span class="n">v</span><span class="o">.</span><span class="n">x</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="o">.</span>
</span><span class='line'>        <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span> <span class="o">/</span> <span class="n">v</span><span class="o">.</span><span class="n">y</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="o">.</span> <span class="o">}</span> <span class="o">*</span> <span class="o">(</span><span class="nn">List</span><span class="p">.</span><span class="n">length</span> <span class="n">angels</span> <span class="o">|&gt;</span> <span class="kt">float</span><span class="o">)</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">angels</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="bp">[]</span> <span class="o">|</span> <span class="o">[_]</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">angels</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">angel</span> <span class="o">-&gt;</span> <span class="n">angel</span><span class="o">.</span><span class="nc">Position</span> <span class="o">-</span> <span class="n">this</span><span class="o">.</span><span class="nc">Position</span><span class="o">)</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">reduce</span> <span class="o">(+)</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="n">dodge</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">boid</span> <span class="n">midpoint</span> <span class="n">friendRadius</span> <span class="n">dodgeRadius</span> <span class="n">maxAcc</span> <span class="n">maxVel</span> <span class="n">this</span> <span class="n">angels</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">groupVel</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">surrounding</span> <span class="n">friendRadius</span> <span class="n">this</span> <span class="n">angels</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="n">desiredVel</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nn">Vector2</span><span class="p">.</span><span class="n">limit</span> <span class="n">maxVel</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">avoidCollision</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">surrounding</span> <span class="n">dodgeRadius</span> <span class="n">this</span> <span class="n">angels</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="n">avoid</span> <span class="n">this</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nn">Vector2</span><span class="p">.</span><span class="n">limit</span> <span class="n">maxVel</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">towardsMiddle</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">midpoint</span> <span class="o">-</span> <span class="n">this</span><span class="o">.</span><span class="nc">Position</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nn">Vector2</span><span class="p">.</span><span class="n">limit</span> <span class="n">maxVel</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">acceleration</span> <span class="o">=</span>
</span><span class='line'>      <span class="o">(</span><span class="n">groupVel</span> <span class="o">*</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span> <span class="o">+</span> <span class="n">avoidCollision</span> <span class="o">*</span> <span class="mi">2</span><span class="o">.</span> <span class="o">+</span> <span class="n">towardsMiddle</span><span class="o">)</span>
</span><span class='line'>      <span class="o">/</span> <span class="mi">3</span><span class="o">.</span>
</span><span class='line'>    <span class="o">{</span> <span class="n">this</span> <span class="k">with</span> <span class="nc">Position</span> <span class="o">=</span> <span class="n">this</span><span class="o">.</span><span class="nc">Position</span> <span class="o">+</span> <span class="n">this</span><span class="o">.</span><span class="nc">Velocity</span>
</span><span class='line'>                <span class="nc">Velocity</span> <span class="o">=</span> <span class="o">(</span><span class="n">this</span><span class="o">.</span><span class="nc">Velocity</span> <span class="o">+</span> <span class="n">acceleration</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="nn">Vector2</span><span class="p">.</span><span class="n">limit</span> <span class="n">maxVel</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">stationary</span> <span class="n">this</span> <span class="o">_</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="n">this</span> <span class="k">with</span> <span class="nc">Velocity</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span> <span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Nothing super exciting here individually - we have methods for discovering other angels nearby
(<code>surrounding</code>), the average velocity of a group of angels (<code>desiredVel</code>) and a rough guess
at not running into a group of nearby angels (<code>avoid</code>). All could probably be improved!</p>

<p>Putting it all together, the <code>boid</code> method calculates the acceleration the angel would &quot;like&quot; to
have to follow all if its rules fully, and then limits that by a specified maximum acceleration.
I played with the weighting of the rules a bit to get something that looked kind of nice, and also
decided to make my life easier by aiming cohesion towards the middle of the screen rather than the
middle of the flock.</p>

<p>Generating our angels is now just a case of partially applying boid with the parameters of our
choice:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">angels</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">Seq</span><span class="p">.</span><span class="n">zip3</span> <span class="o">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">xSeq</span> <span class="n">ySeq</span><span class="o">)</span> <span class="o">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">vxSeq</span> <span class="n">vySeq</span><span class="o">)</span> <span class="n">cSeq</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">40</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span>
</span><span class='line'>      <span class="o">(</span><span class="k">fun</span> <span class="o">((</span><span class="n">px</span><span class="o">,</span> <span class="n">py</span><span class="o">),</span> <span class="o">(</span><span class="n">vx</span><span class="o">,</span> <span class="n">vy</span><span class="o">),</span> <span class="n">c</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>       <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">px</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">py</span> <span class="o">}</span>
</span><span class='line'>         <span class="nc">Velocity</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">vx</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">vy</span> <span class="o">}</span>
</span><span class='line'>         <span class="nc">Colour</span>   <span class="o">=</span> <span class="n">c</span> <span class="o">})</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="n">createAngel</span> <span class="o">(</span><span class="nn">Logic</span><span class="p">.</span><span class="n">boid</span> <span class="n">midpoint</span> <span class="mi">10</span><span class="o">.</span> <span class="mi">1</span><span class="o">.</span> <span class="mi">0</span><span class="o">.</span><span class="mi">3</span> <span class="mi">1</span><span class="o">.))</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">append</span>
</span><span class='line'>      <span class="o">[(</span><span class="n">createAngel</span>
</span><span class='line'>         <span class="nn">Logic</span><span class="p">.</span><span class="n">stationary</span> <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="n">midpoint</span>
</span><span class='line'>                            <span class="nc">Velocity</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span> <span class="o">}</span>
</span><span class='line'>                            <span class="nc">Colour</span>   <span class="o">=</span> <span class="mi">15</span> <span class="o">})]</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toList</span>
</span></code></pre></td></tr></table></div></figure>

<p>The ones in listing <a href="https://github.com/mavnn/advent2015/blob/master/advent3.fsx">advent3.fsx</a> give something reasonably nice, looking like:</p>

<p><img src="https://blog.mavnn.co.uk/images/angels4.gif"/></p>

<p>One word of warning: there&#39;s a bug in the avoidance which I haven&#39;t had a chance to track down,
so if you add too many angels they&#39;ll all push each other into the top left corner. Oops.</p>

<p>And that&#39;s all for now. I hope you enjoyed this brief dive into agent based programming,
and how we can use agents to separate responsibility and protect against unwanted race conditions.</p>

<p>As you can see, this framework allows easy modification of angel logic, and in fact allows for
every angel to have its own implementation without much added complexity - as long as it replies to
the same messages.</p>

<p>Happy Christmas, and God bless.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Annoucing @mavnn Ltd]]></title>
    <link href="https://blog.mavnn.co.uk/annoucing-at-mavnn-ltd/"/>
    <updated>2015-12-07T10:23:19+00:00</updated>
    <id>https://blog.mavnn.co.uk/annoucing-at-mavnn-ltd</id>
    <content type="html"><![CDATA[<p>As I hinted in the last post, new (and to me) exciting things are afoot. I&#39;m very pleased
to announce the formation of <a href="http://mavnn.co.uk">@mavnn ltd</a>!</p>

<h3>That&#39;s great, but what is it going to do?</h3>

<p>I&#39;m glad you asked! @mavnn ltd is the continuation of a lot of the things I&#39;ve come to care most about over my years in software development: building reliable, maintainable and well crafted code and teaching others to do the same.</p>

<p>You can check out the web page for more details, but basically there&#39;s three streams to what the company will be providing:</p>

<ul>
<li>Building code that works</li>
<li>Offering consultancy on how your team can build better software with less friction (especially around automating build, deployment and testing)</li>
<li>Giving training in skills that will allow teams to build solid software using functional programming techniques and thinking</li>
</ul>

<h3>What are doing already?</h3>

<p>I&#39;m glad you asked that too! Stream one of the company (&quot;Building code that works&quot;) is already well under way - we&#39;re very pleased to say that @mavnn ltd&#39;s first customer is <a href="https://github.com/logibit">Logibit</a>, where I&#39;m helping Henrik and Mikko build out the <a href="https://qvitoo.com/">Qvitoo</a> platform.</p>

<p>Although it&#39;s always nice as a small company to have contracts, we&#39;re particularly pleased to be working with Logibit: firstly because they&#39;re great people to work with - you don&#39;t need to work for them to find that out, just get involved in any of the myriad <a href="http://suave.io/">open</a> <a href="https://github.com/Albacore/albacore">source</a> <a href="https://github.com/logary/logary">projects</a> they&#39;re involved in!</p>

<p>Secondly, as a company they embody the things that @mavnn stands for: leveraging the ideas behind functional programming in deeply practical ways to build software that solves real world problems, and does so exactly as designed.</p>

<h3>Can I hire you?</h3>

<p>Yes! To avoid disappointment, though, I should make it clear that we have some ongoing contractual agreements and so will not be accepting ongoing full time contracts for the foreseeable future.</p>

<p>Training, consultancy, ongoing part time and short term full time contracts are all up for grabs though - including remotely and in some cases internationally as evidenced by our co-operation with Logibit. <a href="http://mavnn.co.uk/#contacts">Contact us to find out more</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginnings and Endings]]></title>
    <link href="https://blog.mavnn.co.uk/beginnings-and-endings/"/>
    <updated>2015-11-26T12:02:10+00:00</updated>
    <id>https://blog.mavnn.co.uk/beginnings-and-endings</id>
    <content type="html"><![CDATA[<p>There&#39;s the normal mix of excitement and sadness as I announce that today is my last day with my current employers, <a href="http://www.15below.com">15below</a>.</p>

<p>Sadness because the people here are great and I&#39;ve learned an unbelievable amount while working here. Excitement because there&#39;s
exciting things happening for the future. What are these brave new vistas? Well, that will have to wait for next week.</p>

<p>But for now, it&#39;s time for a brief thank you and review of what I&#39;m leaving.</p>

<p>Thanks 15below for:</p>

<ul>
<li>being an incredibly flexible, generous &amp; family friendly employer</li>
<li>Lots and lots of learning from existing code, conversations, other people delivering internal training, <a href="https://twitter.com/15below_travel/status/340475764677951488">letting me invite external speakers</a>, and the rest</li>
<li>releasing some open source, even while in an &quot;enterprise&quot; market: <a href="https://github.com/15below/">github</a></li>
<li>letting me <a href="https//blog.mavnn.co.uk/keeping-up-with-the-latest-hammer/">coordinate the internal developer education</a></li>
<li>sponsoring a <a href="https//blog.mavnn.co.uk/functional-programming-in-an-imperitive-world/">bunch</a> <a href="https//blog.mavnn.co.uk/sdd-conf-2015/">of</a>
<a href="https//blog.mavnn.co.uk/lambdacon-2015/">conference</a> speaking (there&#39;s more!)</li>
<li>trusting me to convert the build from msbuild to <a href="https://github.com/fsharp/FAKE">FAKE</a> and kick start the journey to automated deployment (which was a slow and painful one in msbuild world&#8230;)</li>
<li>picking solid, generous people <a href="https://www.facebook.com/15below/posts/829520247132711">as staff</a> - that&#39;s just one example from many, and the company often matches the giving of the staff</li>
</ul>

<p>I&#39;m hoping my last piece of work here, converting our main product repository to use <a href="http://fsprojects.github.io/Paket/">Paket</a> rather than nuget for dependency management is a gift that will keep on giving to the rest of the devs; here&#39;s to many more years of 15below bringing tech to the travel industry.</p>
]]></content>
  </entry>
  
</feed>
