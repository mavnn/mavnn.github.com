<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mavnn's blog]]></title>
  <link href="http://blog.mavnn.co.uk/atom.xml" rel="self"/>
  <link href="http://blog.mavnn.co.uk/"/>
  <updated>2015-12-07T11:06:52+00:00</updated>
  <id>http://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Annoucing @mavnn Ltd]]></title>
    <link href="http://blog.mavnn.co.uk/annoucing-at-mavnn-ltd/"/>
    <updated>2015-12-07T10:23:19+00:00</updated>
    <id>http://blog.mavnn.co.uk/annoucing-at-mavnn-ltd</id>
    <content type="html"><![CDATA[<p>As I hinted in the last post, new (and to me) exciting things are afoot. I&rsquo;m very pleased
to announce the formation of <a href="http://mavnn.co.uk">@mavnn ltd</a>!</p>

<h3>That&rsquo;s great, but what is it going to do?</h3>

<p>I&rsquo;m glad you asked! @mavnn ltd is the continuation of a lot of the things I&rsquo;ve come to care most about over my years in software development: building reliable, maintainable and well crafted code and teaching others to do the same.</p>

<p>You can check out the web page for more details, but basically there&rsquo;s three streams to what the company will be providing:</p>

<ul>
<li>Building code that works</li>
<li>Offering consultancy on how your team can build better software with less friction (especially around automating build, deployment and testing)</li>
<li>Giving training in skills that will allow teams to build solid software using functional programming techniques and thinking</li>
</ul>


<h3>What are doing already?</h3>

<p>I&rsquo;m glad you asked that too! Stream one of the company (&ldquo;Building code that works&rdquo;) is already well under way &ndash; we&rsquo;re very pleased to say that @mavnn ltd&rsquo;s first customer is <a href="https://github.com/logibit">Logibit</a>, where I&rsquo;m helping Henrik and Mikko build out the <a href="https://qvitoo.com/">Qvitoo</a> platform.</p>

<p>Although it&rsquo;s always nice as a small company to have contracts, we&rsquo;re particularly pleased to be working with Logibit: firstly because they&rsquo;re great people to work with &ndash; you don&rsquo;t need to work for them to find that out, just get involved in any of the myriad <a href="http://suave.io/">open</a> <a href="https://github.com/Albacore/albacore">source</a> <a href="https://github.com/logary/logary">projects</a> they&rsquo;re involved in!</p>

<p>Secondly, as a company they embody the things that @mavnn stands for: leveraging the ideas behind functional programming in deeply practical ways to build software that works, and that solves real problems.</p>

<h3>Can I hire you?</h3>

<p>Yes! To avoid disappointment, though, I should make it clear that we have some ongoing contractual agreements and so will not be accepting ongoing full time contracts for the foreseeable future.</p>

<p>Training, consultancy, ongoing part time and short term full time contracts are all up for grabs though &ndash; including remotely and in some cases internationally as evidenced by our co-operation with Logibit. <a href="http://mavnn.co.uk/#contacts">Contact us to find out more</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginnings and Endings]]></title>
    <link href="http://blog.mavnn.co.uk/beginnings-and-endings/"/>
    <updated>2015-11-26T12:02:10+00:00</updated>
    <id>http://blog.mavnn.co.uk/beginnings-and-endings</id>
    <content type="html"><![CDATA[<p>There&rsquo;s the normal mix of excitement and sadness as I announce that today is my last day with my current employers, <a href="http://www.15below.com">15below</a>.</p>

<p>Sadness because the people here are great and I&rsquo;ve learned an unbelievable amount while working here. Excitement because there&rsquo;s
exciting things happening for the future. What are these brave new vistas? Well, that will have to wait for next week.</p>

<p>But for now, it&rsquo;s time for a brief thank you and review of what I&rsquo;m leaving.</p>

<p>Thanks 15below for:</p>

<ul>
<li>being an incredibly flexible, generous &amp; family friendly employer</li>
<li>Lots and lots of learning from existing code, conversations, other people delivering internal training, <a href="https://twitter.com/15below_travel/status/340475764677951488">letting me invite external speakers</a>, and the rest</li>
<li>releasing some open source, even while in an &ldquo;enterprise&rdquo; market: <a href="https://github.com/15below/">github</a></li>
<li>letting me <a href="http://blog.mavnn.co.uk/keeping-up-with-the-latest-hammer/">coordinate the internal developer education</a></li>
<li>sponsoring a <a href="http://blog.mavnn.co.uk/functional-programming-in-an-imperitive-world/">bunch</a> <a href="http://blog.mavnn.co.uk/sdd-conf-2015/">of</a>
<a href="http://blog.mavnn.co.uk/lambdacon-2015/">conference</a> speaking (there&rsquo;s more!)</li>
<li>trusting me to convert the build from msbuild to <a href="https://github.com/fsharp/FAKE">FAKE</a> and kick start the journey to automated deployment (which was a slow and painful one in msbuild world&hellip;)</li>
<li>picking solid, generous people <a href="https://www.facebook.com/15below/posts/829520247132711">as staff</a> &ndash; that&rsquo;s just one example from many, and the company often matches the giving of the staff</li>
</ul>


<p>I&rsquo;m hoping my last piece of work here, converting our main product repository to use <a href="http://fsprojects.github.io/Paket/">Paket</a> rather than nuget for dependency management is a gift that will keep on giving to the rest of the devs; here&rsquo;s to many more years of 15below bringing tech to the travel industry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EasyNetQ Process Management]]></title>
    <link href="http://blog.mavnn.co.uk/easynetq-process-management/"/>
    <updated>2015-10-05T12:23:02+01:00</updated>
    <id>http://blog.mavnn.co.uk/easynetq-process-management</id>
    <content type="html"><![CDATA[<blockquote><p>TL;DR: I wrote a EasyNetQ aware process manager library. Read down for some examples, and leave feedback if you think anything should change before it&rsquo;s released.</p></blockquote>

<p><a href="http://easynetq.com/">EasyNetQ</a> is a nice little .net client library for RabbitMQ. Originally designed for introducing Rabbit (and the concepts of a bus based architecture)
to a company and programmers who hadn&rsquo;t previously used them before, it uses conventions to set up exchanges and queues &ndash; basing them on the names of the .net types that are
being sent and subscribe to.</p>

<p>For example (from the EasyNetQ homepage):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">bus</span><span class="p">.</span><span class="n">Publish</span><span class="p">&lt;</span><span class="n">MyMessage</span><span class="p">&gt;(</span><span class="n">message</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will publish a message of type &ldquo;MyMessage&rdquo;. Generally there&rsquo;s no need to actually specify the type here, C# will infer it for you, but it makes the example clearer.</p>

<p>Other services can subscribe to &ldquo;MyMessage&rdquo; like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">bus</span><span class="p">.</span><span class="n">Subscribe</span><span class="p">&lt;</span><span class="n">MyMessage</span><span class="p">&gt;(</span><span class="s">&quot;my_subscription_id&quot;</span><span class="p">,</span> <span class="n">msg</span> <span class="p">=&gt;</span>
</span><span class='line'>      <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">Text</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>If multiple services use the same subscription id, they will all connect to the same queue on the Rabbit server. This means in practice they will round-robin receipt of
messages, allowing for easy horizontal scalability. Subscribers with a different subscription ID will create a new queue behind the scenes and so a copy of the message will
be routed to both subscription IDs.</p>

<p>At this point, the only real point of coupling between subscribers and publishers is the need to share a dll with your &ldquo;contract types&rdquo; &ndash; the types that are going to be
used for publishing and subscribing.</p>

<p>This immediately gives you a lot of the ground work you need to start creating a message based system. But there is one big hole, which it&rsquo;s harder to fill than you might
think.</p>

<p>The hole is that at some point you&rsquo;re going to want to start building processes on top of your message based services which glue together some kind of long running
work flow which requires information from several other components.</p>

<p>Let&rsquo;s start with a simple example &ndash; we&rsquo;ll assume we have a email sending system. It has a bus based service that knows how to grab some data from somewhere;
a service that stores email templates; a service that knows how to render the data and template together; and finally an email sender.</p>

<p>Triggering the services might look a bit like this (if you&rsquo;re working in F#):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">{</span> <span class="nn">StoreModel</span><span class="p">.</span><span class="nc">CorrelationId</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">;</span> <span class="nc">Model</span> <span class="o">=</span> <span class="n">model</span> <span class="o">}</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">{</span> <span class="nn">StoreTemplate</span><span class="p">.</span><span class="nc">CorrelationId</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">;</span> <span class="nc">Name</span> <span class="o">=</span> <span class="s2">&quot;mytemplate&quot;</span><span class="o">;</span> <span class="nc">Template</span> <span class="o">=</span> <span class="n">template</span> <span class="o">}</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">{</span> <span class="nn">RequestRender</span><span class="p">.</span><span class="nc">CorrelationId</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">;</span> <span class="nc">TemplateId</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="nc">ModelId</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">}</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">{</span> <span class="nn">SendEmail</span><span class="p">.</span><span class="nc">CorrelationId</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">;</span> <span class="nc">Content</span> <span class="o">=</span> <span class="s2">&quot;Hello world!&quot;</span><span class="o">;</span> <span class="nc">EmailAddress</span> <span class="o">=</span> <span class="s2">&quot;me@example.com&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s fantastic; only, you&rsquo;ll notice the values for each step are hard coded. Obviously, we need to subscribe to the messages we&rsquo;re expecting to be published in response
to these commands. We&rsquo;d better subscribe to the responses &ndash; in fact, we&rsquo;d better subscribe to everything before we start publishing, otherwise we might start getting responses
back before we&rsquo;re listening for them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Subscribers</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Subscribe</span><span class="o">&lt;</span><span class="nc">RenderComplete</span><span class="o">&gt;</span> <span class="o">(</span><span class="s2">&quot;Process&quot;</span><span class="o">,</span> <span class="k">fun</span> <span class="n">r</span> <span class="o">-&gt;</span> <span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="n">r</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Subscribe</span><span class="o">&lt;</span><span class="nc">ModelStored</span><span class="o">&gt;</span> <span class="o">(</span><span class="s2">&quot;Process&quot;</span><span class="o">,</span> <span class="k">fun</span> <span class="n">ms</span> <span class="o">-&gt;</span> <span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="n">ms</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Subscribe</span><span class="o">&lt;</span><span class="nc">TemplateStored</span><span class="o">&gt;</span> <span class="o">(</span><span class="s2">&quot;Process&quot;</span><span class="o">,</span> <span class="k">fun</span> <span class="n">ts</span> <span class="o">-&gt;</span> <span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="n">ts</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Subscribe</span><span class="o">&lt;</span><span class="nc">EmailSent</span><span class="o">&gt;</span> <span class="o">(</span><span class="s2">&quot;Process&quot;</span><span class="o">,</span> <span class="k">fun</span> <span class="n">es</span> <span class="o">-&gt;</span> <span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="n">es</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Senders</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">{</span> <span class="nn">StoreModel</span><span class="p">.</span><span class="nc">CorrelationId</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">;</span> <span class="nc">Model</span> <span class="o">=</span> <span class="n">model</span> <span class="o">}</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">{</span> <span class="nn">StoreTemplate</span><span class="p">.</span><span class="nc">CorrelationId</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">;</span> <span class="nc">Name</span> <span class="o">=</span> <span class="s2">&quot;mytemplate&quot;</span><span class="o">;</span> <span class="nc">Template</span> <span class="o">=</span> <span class="n">template</span> <span class="o">}</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">{</span> <span class="nn">RequestRender</span><span class="p">.</span><span class="nc">CorrelationId</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">;</span> <span class="nc">TemplateId</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="nc">ModelId</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">}</span>
</span><span class='line'><span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">{</span> <span class="nn">SendEmail</span><span class="p">.</span><span class="nc">CorrelationId</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">;</span> <span class="nc">Content</span> <span class="o">=</span> <span class="s2">&quot;Hello world!&quot;</span><span class="o">;</span> <span class="nc">EmailAddress</span> <span class="o">=</span> <span class="s2">&quot;me@example.com&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, that&rsquo;s great. What now?</p>

<p>Well: as is common in a message based system we&rsquo;re passing a correlation ID into the service we&rsquo;re sending a request to, and part of the contract is that the triggered response will
have the same correlation ID. So we need some way to link a correlation ID back to a specific business process &ndash; a state store. But that needs to be safe for horizontal scaling.
We also need to wire up all the various stages in our process to know which other message to publish next. And it would be good if storing the template and model data happened concurrently,
because we&rsquo;re message based and why not? And finally, the client only wants the email sent if we can generate it within 15 seconds. Did we not mention that?</p>

<p>EasyNetQ provides one way of dealing with this, by allowing for what it calls a request/response pattern. But we found out the hard way that this still suffers from a few problems:
at a practical level, it doesn&rsquo;t scale very well for services that need to handle a lot of requests. On a conceptual level it assumes that the service that issued the request will
be around to process the response. That&rsquo;s an assumption that we really don&rsquo;t want if we&rsquo;re using a message bus to help us provide high availability.</p>

<p>So after several rounds of consultation within the company, I&rsquo;ve written a library to help write process managers over the top of EasyNetQ, following the EasyNetQ conventions but
meeting the needs we&rsquo;ve discovered.</p>

<p>The code is available on github at <a href="https://github.com/15below/EasyNetQ.ProcessManager">https://github.com/15below/EasyNetQ.ProcessManager</a> ; if you want to run the examples you&rsquo;ll need a few db bits set up (see the README) and a
SMTP server (I recommend the excellent <a href="https://papercut.codeplex.com/">PaperCut</a> as a simple and convenient development SMTP server).</p>

<blockquote><p>Please note: if you&rsquo;ve looked at this article before, the code below has changed after a <a href="https://twitter.com/BlythMeister">a colleague of mine</a> suggested much better method names for certain operations&hellip;</p></blockquote>

<p>Back to the world of C#; first we&rsquo;ll need an actual ProcessManager object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">rabbitConnString</span> <span class="p">=</span> <span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="s">&quot;rabbit connection&quot;</span><span class="p">];</span>
</span><span class='line'><span class="kt">var</span> <span class="n">sqlConnString</span> <span class="p">=</span> <span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="s">&quot;sql connection&quot;</span><span class="p">];</span>
</span><span class='line'><span class="kt">var</span> <span class="n">bus</span> <span class="p">=</span> <span class="n">RabbitHutch</span><span class="p">.</span><span class="n">CreateBus</span><span class="p">(</span><span class="n">rabbitConnString</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">active</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SqlActiveStore</span><span class="p">(</span><span class="n">sqlConnString</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">store</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SqlStateStore</span><span class="p">(</span><span class="n">sqlConnString</span><span class="p">,</span> <span class="k">new</span> <span class="n">Serializer</span><span class="p">());</span>
</span><span class='line'><span class="kt">var</span> <span class="n">pm</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ProcessManager</span><span class="p">(</span><span class="k">new</span> <span class="n">EasyNetQPMBus</span><span class="p">(</span><span class="n">bus</span><span class="p">),</span> <span class="s">&quot;Process&quot;</span><span class="p">,</span> <span class="n">active</span><span class="p">,</span> <span class="n">store</span><span class="p">);</span>
</span><span class='line'><span class="n">Workflow</span><span class="p">.</span><span class="n">Configure</span><span class="p">(</span><span class="n">pm</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously, most of this would normally be covered with an IoC container. So, the bus is probably pretty obvious, and <code>"Process"</code> is our subscription ID for any subscriptions we make
&ndash; but what are the <code>SqlActiveStore</code> and <code>SqlStateStore</code>?</p>

<p>The active store is a component that will store the list of correlation IDs a process is waiting for, and which handlers to connect them to. Out of the box you get a
memory based version (fast, good for testing, not horizontally scalable for hopefully obvious reasons) and an SQL Server based version.</p>

<p>The state store, as you might have guessed, stores state for your workflow. Again both memory and SQL based implementations are provided, with the SQL implementation guaranteed to be not
just thread safe, but &ldquo;process safe&rdquo;. One thing you do have to provide yourself is a serializer that knows how to serialize any work flow state objects you want stored.</p>

<p>Finally, and most interesting: let&rsquo;s see what&rsquo;s in <code>Workflow.Configure(pm)</code>. Let&rsquo;s take the file that actually configures our workflow, and break it down into sections (I&rsquo;ll chop some boilerplate out, full file at the end).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Runtime.Serialization</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">EasyNetQ.ProcessManager</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Messenger.Messages.Email</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Messenger.Messages.Render</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Messenger.Messages.Store</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>All the standard bits &ndash; we&rsquo;ll need access to the various message types and the ProcessManager name space.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[DataContract]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">WorkflowState</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">WorkflowState</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">WorkflowState</span><span class="p">(</span><span class="kt">int?</span> <span class="n">modelId</span><span class="p">,</span> <span class="kt">int?</span> <span class="n">contentTemplateId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">emailContent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">emailAddress</span><span class="p">,</span> <span class="kt">int?</span> <span class="n">addressTemplateId</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ModelId</span> <span class="p">=</span> <span class="n">modelId</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ContentTemplateId</span> <span class="p">=</span> <span class="n">contentTemplateId</span><span class="p">;</span>
</span><span class='line'>        <span class="n">EmailContent</span> <span class="p">=</span> <span class="n">emailContent</span><span class="p">;</span>
</span><span class='line'>        <span class="n">EmailAddress</span> <span class="p">=</span> <span class="n">emailAddress</span><span class="p">;</span>
</span><span class='line'>        <span class="n">AddressTemplateId</span> <span class="p">=</span> <span class="n">addressTemplateId</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">    [DataMember]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int?</span> <span class="n">ModelId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int?</span> <span class="n">ContentTemplateId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int?</span> <span class="n">AddressTemplateId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">EmailContent</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">    [DataMember]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">EmailAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This object will store the state of our work flow. As you might guess, it starts off empty and steps in the work flow will gradually fill in the gaps as
they receive information back from the remote services. The basic flow of the process we&rsquo;re creating is to store a model (piece of data), an address template
and a content template. We&rsquo;ll render an address once we have both address template and model IDs, and the content once we have both content template and model ID.</p>

<p>After both rendering jobs have finished, we&rsquo;ll send an email to the address, with the content. Note that our object does <em>not</em> need any awareness of which
instance of the work flow it&rsquo;s storing information for &ndash; the ProcessManager will handle that for us.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Workflow</span>
</span><span class='line'><span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s have a class to group all of our work flow logic together in one place. This isn&rsquo;t in anyway required by ProcessManager, but it&rsquo;s definitely recommended to
allow people to work out what on earth your project manager actually does.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ModelStoredCheckRenderContentKey</span> <span class="p">=</span> <span class="s">&quot;ModelStoredCheckRenderContentKey&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ModelStoredCheckRenderAddressKey</span> <span class="p">=</span> <span class="s">&quot;ModelStoredCheckRenderAddress&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ContentTemplateStoredCheckRenderContentKey</span> <span class="p">=</span> <span class="s">&quot;ContentTemplateStoredCheckRenderContent&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">AddressTemplateStoredCheckRenderAddressKey</span> <span class="p">=</span> <span class="s">&quot;AddressTemplateStoredCheckRenderAddress&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ContentRenderedCheckSendEmailKey</span> <span class="p">=</span> <span class="s">&quot;ContentRenderedCheckSendEmail&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">AddressRenderedCheckSendEmailKey</span> <span class="p">=</span> <span class="s">&quot;AddressRenderedCheckSendEmail&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll be specifying in each of our work flow steps which callbacks we&rsquo;re expecting to be fired when response messages are received. Because these callbacks may not
happen in the same process (ProcessManager is horizontally scalable by design), callbacks are referred to by a string mapping. These get used in several places, so
it&rsquo;s probably worth recording them all as <code>const</code>s to avoid typos.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">Start</span><span class="p">(</span><span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">model</span><span class="p">,</span> <span class="kt">string</span> <span class="n">contentTemplate</span><span class="p">,</span> <span class="kt">string</span> <span class="n">addressTemplate</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">modelCid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">contentCid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">addressCid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>        <span class="n">Out</span><span class="p">.</span><span class="n">Empty</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="k">new</span> <span class="n">StoreModel</span><span class="p">(</span><span class="n">modelCid</span><span class="p">,</span> <span class="n">model</span><span class="p">),</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">ModelStored</span><span class="p">&gt;(</span><span class="n">modelCid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">ModelStoredCheckRenderContentKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span> <span class="s">&quot;TimeOut&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">ModelStored</span><span class="p">&gt;(</span><span class="n">modelCid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">ModelStoredCheckRenderAddressKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span> <span class="s">&quot;TimeOut&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="k">new</span> <span class="n">StoreTemplate</span><span class="p">(</span><span class="n">contentCid</span><span class="p">,</span> <span class="s">&quot;content template&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">contentTemplate</span><span class="p">),</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">TemplateStored</span><span class="p">&gt;(</span><span class="n">contentCid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">ContentTemplateStoredCheckRenderContentKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span>
</span><span class='line'>                <span class="s">&quot;TimeOut&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="k">new</span> <span class="n">StoreTemplate</span><span class="p">(</span><span class="n">addressCid</span><span class="p">,</span> <span class="s">&quot;address template&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">addressTemplate</span><span class="p">),</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">TemplateStored</span><span class="p">&gt;(</span><span class="n">addressCid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">AddressTemplateStoredCheckRenderAddressKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span>
</span><span class='line'>                <span class="s">&quot;TimeOut&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So: our <code>Start</code> method is where the real fun starts. It&rsquo;s <code>static</code>, as an instance of the work flow class makes very little sense as all state will be stored in the
state store. And basically all it does is set up our first set of expected requests (to <code>Send</code>) and continuations (to <code>Expect</code>).</p>

<p>All functions within a work flow must return an <code>Out</code> object. Here, we create our Out using its fluent builder API; first adding a request to send a <code>StoreModel</code>,
then hooking up two handlers to the response message we expect the store to send when it&rsquo;s done storing the model (there&rsquo;s no requirement for a specific message to trigger
only one continuation). But what are these <code>TimeSpan</code>s floating around everywhere?</p>

<p>Well, it turns out that RabbitMQ implements the idea of expiring messages. ProcessManager forces you to choose how long a message should stay available for before expiring,
to avoid creating situations where you build up unbounded backlogs of ancient messages that no longer have any relevance. For time critical processes such as ours, it also
means that we can put expectations on how long we expect a step to take. Here, we&rsquo;re saying: &ldquo;if the store doesn&rsquo;t accept the store model request within 4 seconds, do not
deliver it.&rdquo;</p>

<p>In a similar way, we must choose a timespan to process continuations within. Network issues or overloading of the ProcessManager itself might mean that the request is processed,
but by the time the continuation trigger message returns we&rsquo;ve already missed our processing window. In this example, we&rsquo;re specifying: &ldquo;if we don&rsquo;t receive a model stored message
within 5 seconds, do not process the continuation when (or if) it arrives; also, publish a time out message to be processed by a handler named TimeOut.&rdquo;</p>

<p>The rest of the method follows a similar pattern, setting up the requests to store content and address templates respectively, with the expected continuations.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">RenderContentIfReady</span><span class="p">(</span><span class="n">WorkflowState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(!</span><span class="n">state</span><span class="p">.</span><span class="n">ModelId</span><span class="p">.</span><span class="n">HasValue</span> <span class="p">||</span> <span class="p">!</span><span class="n">state</span><span class="p">.</span><span class="n">ContentTemplateId</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span> <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Ignore</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">cid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">renderContent</span> <span class="p">=</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">RequestRender</span><span class="p">(</span><span class="n">cid</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">ContentTemplateId</span><span class="p">.</span><span class="n">Value</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">ModelId</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>        <span class="n">Out</span><span class="p">.</span><span class="n">Empty</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">renderContent</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">RenderComplete</span><span class="p">&gt;(</span><span class="n">cid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">ContentRenderedCheckSendEmailKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span>
</span><span class='line'>                <span class="s">&quot;TimeOut&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">RenderAddressIfReady</span><span class="p">(</span><span class="n">WorkflowState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(!</span><span class="n">state</span><span class="p">.</span><span class="n">ModelId</span><span class="p">.</span><span class="n">HasValue</span> <span class="p">||</span> <span class="p">!</span><span class="n">state</span><span class="p">.</span><span class="n">AddressTemplateId</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span> <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Ignore</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">cid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">renderContent</span> <span class="p">=</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">RequestRender</span><span class="p">(</span><span class="n">cid</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">AddressTemplateId</span><span class="p">.</span><span class="n">Value</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">ModelId</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Empty</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">renderContent</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">RenderComplete</span><span class="p">&gt;(</span><span class="n">cid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">AddressRenderedCheckSendEmailKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&quot;TimeOut&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next up: a couple of private helper methods. These take our <code>WorkflowState</code> object from above and know whether we can start the two rendering processes yet.</p>

<p>Note the use of <code>Out.Ignore</code> if the state is not yet ready to trigger the next part of the work flow. <code>Ignore</code> is basically a way of marking this branch of the
work flow complete. This is different to <code>Out.End</code>, which we&rsquo;ll have a look at a bit later &ndash; and which ends all branches of the work flow.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">ModelStoredCheckRenderContent</span><span class="p">(</span><span class="n">ModelStored</span> <span class="n">ms</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">ModelId</span> <span class="p">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">ModelId</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">existing</span><span class="p">.</span><span class="n">ModelId</span> <span class="p">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">ModelId</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">RenderContentIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">ModelStoredCheckRenderAddress</span><span class="p">(</span><span class="n">ModelStored</span> <span class="n">ms</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">ModelId</span> <span class="p">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">ModelId</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">existing</span><span class="p">.</span><span class="n">ModelId</span> <span class="p">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">ModelId</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">RenderAddressIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">ContentTemplateStoredCheckRenderContent</span><span class="p">(</span><span class="n">TemplateStored</span> <span class="n">ts</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">ContentTemplateId</span> <span class="p">=</span> <span class="n">ts</span><span class="p">.</span><span class="n">TemplateId</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">existing</span><span class="p">.</span><span class="n">ContentTemplateId</span> <span class="p">=</span> <span class="n">ts</span><span class="p">.</span><span class="n">TemplateId</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">RenderContentIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">AddressTemplateStoredCheckRenderAddress</span><span class="p">(</span><span class="n">TemplateStored</span> <span class="n">ts</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">AddressTemplateId</span> <span class="p">=</span> <span class="n">ts</span><span class="p">.</span><span class="n">TemplateId</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">existing</span><span class="p">.</span><span class="n">AddressTemplateId</span> <span class="p">=</span> <span class="n">ts</span><span class="p">.</span><span class="n">TemplateId</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">RenderAddressIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>These four methods will be wired up to handle the four continuation options we created in our <code>Start</code> method.
Each is very similar: it is passed the triggering message and the state of <em>this</em> work flow, updates or creates the
state with the data it has received back, and then runs one of the private helpers we defined above.</p>

<p>Why can we not just Add, or just Update the state? Well &ndash; we published 3 requests which are being handled by 4
continuations. There are no guarantees what order these will be triggered in or that they won&rsquo;t be triggered simultaneously
on different threads or even on different machines. <code>AddOrUpdate</code> acts as a synchronization point for our work flow,
guaranteeing that the operation happening within it will be atomic.</p>

<p>We can apply similar logic to waiting for our two rendering jobs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">SendEmailIfReady</span><span class="p">(</span><span class="n">WorkflowState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">state</span><span class="p">.</span><span class="n">EmailContent</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Ignore</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">cid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">sendEmail</span> <span class="p">=</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">SendEmail</span><span class="p">(</span><span class="n">cid</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">EmailAddress</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">EmailContent</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Empty</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">sendEmail</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">EmailSent</span><span class="p">&gt;(</span><span class="n">cid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="s">&quot;EmailSent&quot;</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span> <span class="s">&quot;TimeOut&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">AddressRenderedCheckSendEmail</span><span class="p">(</span><span class="n">RenderComplete</span> <span class="n">rc</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">EmailAddress</span> <span class="p">=</span> <span class="n">rc</span><span class="p">.</span><span class="n">Content</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">existing</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">=</span> <span class="n">rc</span><span class="p">.</span><span class="n">Content</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">SendEmailIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">ContentRenderedCheckSendEmail</span><span class="p">(</span><span class="n">RenderComplete</span> <span class="n">rc</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">EmailContent</span> <span class="p">=</span> <span class="n">rc</span><span class="p">.</span><span class="n">Content</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">existing</span><span class="p">.</span><span class="n">EmailContent</span> <span class="p">=</span> <span class="n">rc</span><span class="p">.</span><span class="n">Content</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">SendEmailIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once they have both finished, and only once they have both finished, <code>SendEmailIfReady</code> will fire off a <code>SendEmail</code> request.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">EmailSent</span><span class="p">(</span><span class="n">EmailSent</span> <span class="n">es</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">WorkflowState</span><span class="p">&gt;().</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Email send success: {0}\nAddress: {1}\nContent: {2}&quot;</span><span class="p">,</span> <span class="n">es</span><span class="p">.</span><span class="n">Successful</span><span class="p">,</span> <span class="n">ws</span><span class="p">.</span><span class="n">EmailAddress</span><span class="p">,</span> <span class="n">ws</span><span class="p">.</span><span class="n">EmailContent</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">End</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally on our happy path, we&rsquo;re informed that an email has been sent. Here we mark the work flow as ended using <code>Out.End</code>. This will cancel
any outstanding continuations and remove the work flow state from the state store. ProcessManager <em>will not retain any information</em>
about the running of a work flow. If you require (and you probably do) any kind of logging or auditing it is your responsibility to
cover that within the handlers you write.</p>

<p>But all this only covers the happy path. What happens if we hit one of those time outs we&rsquo;ve been talking about?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">TimeOut</span><span class="p">(</span><span class="n">TimeOutMessage</span> <span class="n">to</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Time out waiting for: {0}&quot;</span><span class="p">,</span> <span class="n">to</span><span class="p">.</span><span class="n">TimedOutStep</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">End</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, in that case a <code>TimeOutMessage</code> will be published, and we can handle it appropriately. In this case, just printing out the fact the job timed out, and which step it was that didn&rsquo;t complete (one of the fields on the <code>TimeOutMessage</code> object).
As above, we explicitly <code>End</code> the work flow. No further continuations will be triggered beyond this point. One thing to bear in mind though: while a continuation
timeout guarantees the continuation will not fire after the <code>TimeSpan</code> has expired, there is <strong>no</strong> guarantee that the <code>TimeOutMessage</code> will be either published
or handled in any particular timescale. For example, if all your ProcessManager nodes go down; well you won&rsquo;t be publishing/handling any time outs until they&rsquo;re running
again.</p>

<p>Now we&rsquo;re ready to write our <code>Configure</code> method. Let&rsquo;s wire everything up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">ProcessManager</span> <span class="n">pm</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">stored</span> <span class="p">=&gt;</span> <span class="n">stored</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">ModelStored</span><span class="p">&gt;(</span><span class="n">ModelStoredCheckRenderContentKey</span><span class="p">,</span> <span class="n">ModelStoredCheckRenderContent</span><span class="p">),</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">ModelStored</span><span class="p">&gt;(</span><span class="n">ModelStoredCheckRenderAddressKey</span><span class="p">,</span> <span class="n">ModelStoredCheckRenderAddress</span><span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">stored</span> <span class="p">=&gt;</span> <span class="n">stored</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span><span class="p">[]</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">TemplateStored</span><span class="p">&gt;(</span><span class="n">ContentTemplateStoredCheckRenderContentKey</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ContentTemplateStoredCheckRenderContent</span><span class="p">),</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">TemplateStored</span><span class="p">&gt;(</span><span class="n">AddressTemplateStoredCheckRenderAddressKey</span><span class="p">,</span>
</span><span class='line'>            <span class="n">AddressTemplateStoredCheckRenderAddress</span><span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">complete</span> <span class="p">=&gt;</span> <span class="n">complete</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">RenderComplete</span><span class="p">&gt;(</span><span class="n">AddressRenderedCheckSendEmailKey</span><span class="p">,</span> <span class="n">AddressRenderedCheckSendEmail</span><span class="p">),</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">RenderComplete</span><span class="p">&gt;(</span><span class="n">ContentRenderedCheckSendEmailKey</span><span class="p">,</span> <span class="n">ContentRenderedCheckSendEmail</span><span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">sent</span> <span class="p">=&gt;</span> <span class="n">sent</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">EmailSent</span><span class="p">&gt;(</span><span class="s">&quot;EmailSent&quot;</span><span class="p">,</span> <span class="n">EmailSent</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">to</span> <span class="p">=&gt;</span> <span class="n">to</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">TimeOutMessage</span><span class="p">&gt;(</span><span class="s">&quot;TimeOut&quot;</span><span class="p">,</span> <span class="n">TimeOut</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The method takes our ProcessManager and starts adding processors to it. A processor knows how to extract a correlation ID from a specific message type, and an <code>IEnumerable</code> of mappings.
Each mapping tells the ProcessManager which method to fire based on a string Key (remember our <code>const</code>s from above?).</p>

<p>So, there you have it; a complete managed work flow on top of EasyNetQ with split and merge and time outs. The full work flow code file with out my commentary is below for those of you
who find that easier!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Runtime.Serialization</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">EasyNetQ.ProcessManager</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Messenger.Messages.Email</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Messenger.Messages.Render</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Messenger.Messages.Store</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">Process3</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">    [DataContract]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">WorkflowState</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="nf">WorkflowState</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="nf">WorkflowState</span><span class="p">(</span><span class="kt">int?</span> <span class="n">modelId</span><span class="p">,</span> <span class="kt">int?</span> <span class="n">contentTemplateId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">emailContent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">emailAddress</span><span class="p">,</span> <span class="kt">int?</span> <span class="n">addressTemplateId</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">ModelId</span> <span class="p">=</span> <span class="n">modelId</span><span class="p">;</span>
</span><span class='line'>            <span class="n">ContentTemplateId</span> <span class="p">=</span> <span class="n">contentTemplateId</span><span class="p">;</span>
</span><span class='line'>            <span class="n">EmailContent</span> <span class="p">=</span> <span class="n">emailContent</span><span class="p">;</span>
</span><span class='line'>            <span class="n">EmailAddress</span> <span class="p">=</span> <span class="n">emailAddress</span><span class="p">;</span>
</span><span class='line'>            <span class="n">AddressTemplateId</span> <span class="p">=</span> <span class="n">addressTemplateId</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">        [DataMember]</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">int?</span> <span class="n">ModelId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">        [DataMember]</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">int?</span> <span class="n">ContentTemplateId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">        [DataMember]</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">int?</span> <span class="n">AddressTemplateId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">        [DataMember]</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">EmailContent</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">        [DataMember]</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">EmailAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Workflow</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Callback keys</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ModelStoredCheckRenderContentKey</span> <span class="p">=</span> <span class="s">&quot;ModelStoredCheckRenderContentKey&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ModelStoredCheckRenderAddressKey</span> <span class="p">=</span> <span class="s">&quot;ModelStoredCheckRenderAddress&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ContentTemplateStoredCheckRenderContentKey</span> <span class="p">=</span> <span class="s">&quot;ContentTemplateStoredCheckRenderContent&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">AddressTemplateStoredCheckRenderAddressKey</span> <span class="p">=</span> <span class="s">&quot;AddressTemplateStoredCheckRenderAddress&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ContentRenderedCheckSendEmailKey</span> <span class="p">=</span> <span class="s">&quot;ContentRenderedCheckSendEmail&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">AddressRenderedCheckSendEmailKey</span> <span class="p">=</span> <span class="s">&quot;AddressRenderedCheckSendEmail&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">Start</span><span class="p">(</span><span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">model</span><span class="p">,</span> <span class="kt">string</span> <span class="n">contentTemplate</span><span class="p">,</span> <span class="kt">string</span> <span class="n">addressTemplate</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">modelCid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">contentCid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">addressCid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>                <span class="n">Out</span><span class="p">.</span><span class="n">Empty</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="k">new</span> <span class="n">StoreModel</span><span class="p">(</span><span class="n">modelCid</span><span class="p">,</span> <span class="n">model</span><span class="p">),</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">ModelStored</span><span class="p">&gt;(</span><span class="n">modelCid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">ModelStoredCheckRenderContentKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span> <span class="s">&quot;TimeOut&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">ModelStored</span><span class="p">&gt;(</span><span class="n">modelCid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">ModelStoredCheckRenderAddressKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span> <span class="s">&quot;TimeOut&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="k">new</span> <span class="n">StoreTemplate</span><span class="p">(</span><span class="n">contentCid</span><span class="p">,</span> <span class="s">&quot;content template&quot;</span><span class="p">,</span> <span class="n">contentTemplate</span><span class="p">),</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">TemplateStored</span><span class="p">&gt;(</span><span class="n">contentCid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">ContentTemplateStoredCheckRenderContentKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span>
</span><span class='line'>                        <span class="s">&quot;TimeOut&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="k">new</span> <span class="n">StoreTemplate</span><span class="p">(</span><span class="n">addressCid</span><span class="p">,</span> <span class="s">&quot;address template&quot;</span><span class="p">,</span> <span class="n">addressTemplate</span><span class="p">),</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">TemplateStored</span><span class="p">&gt;(</span><span class="n">addressCid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">AddressTemplateStoredCheckRenderAddressKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span>
</span><span class='line'>                        <span class="s">&quot;TimeOut&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">private</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">RenderContentIfReady</span><span class="p">(</span><span class="n">WorkflowState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(!</span><span class="n">state</span><span class="p">.</span><span class="n">ModelId</span><span class="p">.</span><span class="n">HasValue</span> <span class="p">||</span> <span class="p">!</span><span class="n">state</span><span class="p">.</span><span class="n">ContentTemplateId</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span> <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Ignore</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">cid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">renderContent</span> <span class="p">=</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">RequestRender</span><span class="p">(</span><span class="n">cid</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">ContentTemplateId</span><span class="p">.</span><span class="n">Value</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">ModelId</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>                <span class="n">Out</span><span class="p">.</span><span class="n">Empty</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">renderContent</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">RenderComplete</span><span class="p">&gt;(</span><span class="n">cid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">ContentRenderedCheckSendEmailKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span>
</span><span class='line'>                        <span class="s">&quot;TimeOut&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">private</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">RenderAddressIfReady</span><span class="p">(</span><span class="n">WorkflowState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(!</span><span class="n">state</span><span class="p">.</span><span class="n">ModelId</span><span class="p">.</span><span class="n">HasValue</span> <span class="p">||</span> <span class="p">!</span><span class="n">state</span><span class="p">.</span><span class="n">AddressTemplateId</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span> <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Ignore</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">cid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">renderContent</span> <span class="p">=</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">RequestRender</span><span class="p">(</span><span class="n">cid</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">AddressTemplateId</span><span class="p">.</span><span class="n">Value</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">ModelId</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Empty</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">renderContent</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">RenderComplete</span><span class="p">&gt;(</span><span class="n">cid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">AddressRenderedCheckSendEmailKey</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span>
</span><span class='line'>                    <span class="s">&quot;TimeOut&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">ModelStoredCheckRenderContent</span><span class="p">(</span><span class="n">ModelStored</span> <span class="n">ms</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">ModelId</span> <span class="p">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">ModelId</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">existing</span><span class="p">.</span><span class="n">ModelId</span> <span class="p">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">ModelId</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">RenderContentIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">ModelStoredCheckRenderAddress</span><span class="p">(</span><span class="n">ModelStored</span> <span class="n">ms</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">ModelId</span> <span class="p">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">ModelId</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">existing</span><span class="p">.</span><span class="n">ModelId</span> <span class="p">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">ModelId</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">RenderAddressIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">ContentTemplateStoredCheckRenderContent</span><span class="p">(</span><span class="n">TemplateStored</span> <span class="n">ts</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">ContentTemplateId</span> <span class="p">=</span> <span class="n">ts</span><span class="p">.</span><span class="n">TemplateId</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">existing</span><span class="p">.</span><span class="n">ContentTemplateId</span> <span class="p">=</span> <span class="n">ts</span><span class="p">.</span><span class="n">TemplateId</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">RenderContentIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">AddressTemplateStoredCheckRenderAddress</span><span class="p">(</span><span class="n">TemplateStored</span> <span class="n">ts</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">AddressTemplateId</span> <span class="p">=</span> <span class="n">ts</span><span class="p">.</span><span class="n">TemplateId</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">existing</span><span class="p">.</span><span class="n">AddressTemplateId</span> <span class="p">=</span> <span class="n">ts</span><span class="p">.</span><span class="n">TemplateId</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">RenderAddressIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">private</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">SendEmailIfReady</span><span class="p">(</span><span class="n">WorkflowState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">state</span><span class="p">.</span><span class="n">EmailContent</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Ignore</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">cid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">sendEmail</span> <span class="p">=</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">SendEmail</span><span class="p">(</span><span class="n">cid</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">EmailAddress</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">EmailContent</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">Empty</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">sendEmail</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">4</span><span class="p">))</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Expect</span><span class="p">&lt;</span><span class="n">EmailSent</span><span class="p">&gt;(</span><span class="n">cid</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="s">&quot;EmailSent&quot;</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">),</span> <span class="s">&quot;TimeOut&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">AddressRenderedCheckSendEmail</span><span class="p">(</span><span class="n">RenderComplete</span> <span class="n">rc</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">EmailAddress</span> <span class="p">=</span> <span class="n">rc</span><span class="p">.</span><span class="n">Content</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">existing</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">=</span> <span class="n">rc</span><span class="p">.</span><span class="n">Content</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">SendEmailIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">ContentRenderedCheckSendEmail</span><span class="p">(</span><span class="n">RenderComplete</span> <span class="n">rc</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="k">new</span> <span class="n">WorkflowState</span> <span class="p">{</span><span class="n">EmailContent</span> <span class="p">=</span> <span class="n">rc</span><span class="p">.</span><span class="n">Content</span><span class="p">},</span> <span class="n">existing</span> <span class="p">=&gt;</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">existing</span><span class="p">.</span><span class="n">EmailContent</span> <span class="p">=</span> <span class="n">rc</span><span class="p">.</span><span class="n">Content</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">existing</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">SendEmailIfReady</span><span class="p">(</span><span class="n">ws</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">EmailSent</span><span class="p">(</span><span class="n">EmailSent</span> <span class="n">es</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">ws</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">WorkflowState</span><span class="p">&gt;().</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Email send success: {0}\nAddress: {1}\nContent: {2}&quot;</span><span class="p">,</span> <span class="n">es</span><span class="p">.</span><span class="n">Successful</span><span class="p">,</span> <span class="n">ws</span><span class="p">.</span><span class="n">EmailAddress</span><span class="p">,</span> <span class="n">ws</span><span class="p">.</span><span class="n">EmailContent</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">End</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">Out</span> <span class="nf">TimeOut</span><span class="p">(</span><span class="n">TimeOutMessage</span> <span class="n">to</span><span class="p">,</span> <span class="n">IState</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Time out waiting for: {0}&quot;</span><span class="p">,</span> <span class="n">to</span><span class="p">.</span><span class="n">TimedOutStep</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Out</span><span class="p">.</span><span class="n">End</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">ProcessManager</span> <span class="n">pm</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">stored</span> <span class="p">=&gt;</span> <span class="n">stored</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span> <span class="p">[]</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">ModelStored</span><span class="p">&gt;(</span><span class="n">ModelStoredCheckRenderContentKey</span><span class="p">,</span> <span class="n">ModelStoredCheckRenderContent</span><span class="p">),</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">ModelStored</span><span class="p">&gt;(</span><span class="n">ModelStoredCheckRenderAddressKey</span><span class="p">,</span> <span class="n">ModelStoredCheckRenderAddress</span><span class="p">)</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">stored</span> <span class="p">=&gt;</span> <span class="n">stored</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span><span class="p">[]</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">TemplateStored</span><span class="p">&gt;(</span><span class="n">ContentTemplateStoredCheckRenderContentKey</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">ContentTemplateStoredCheckRenderContent</span><span class="p">),</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">TemplateStored</span><span class="p">&gt;(</span><span class="n">AddressTemplateStoredCheckRenderAddressKey</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">AddressTemplateStoredCheckRenderAddress</span><span class="p">)</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">complete</span> <span class="p">=&gt;</span> <span class="n">complete</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span> <span class="p">[]</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">RenderComplete</span><span class="p">&gt;(</span><span class="n">AddressRenderedCheckSendEmailKey</span><span class="p">,</span> <span class="n">AddressRenderedCheckSendEmail</span><span class="p">),</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">RenderComplete</span><span class="p">&gt;(</span><span class="n">ContentRenderedCheckSendEmailKey</span><span class="p">,</span> <span class="n">ContentRenderedCheckSendEmail</span><span class="p">)</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">sent</span> <span class="p">=&gt;</span> <span class="n">sent</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">EmailSent</span><span class="p">&gt;(</span><span class="s">&quot;EmailSent&quot;</span><span class="p">,</span> <span class="n">EmailSent</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">pm</span><span class="p">.</span><span class="n">AddProcessor</span><span class="p">(</span><span class="n">to</span> <span class="p">=&gt;</span> <span class="n">to</span><span class="p">.</span><span class="n">CorrelationId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="k">new</span> <span class="n">Mapping</span><span class="p">&lt;</span><span class="n">TimeOutMessage</span><span class="p">&gt;(</span><span class="s">&quot;TimeOut&quot;</span><span class="p">,</span> <span class="n">TimeOut</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Suggestions, additions and questions welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extracting Information From MsBuild]]></title>
    <link href="http://blog.mavnn.co.uk/extracting-information-from-msbuild/"/>
    <updated>2015-08-07T14:45:28+01:00</updated>
    <id>http://blog.mavnn.co.uk/extracting-information-from-msbuild</id>
    <content type="html"><![CDATA[<p>Recently as part of some research into making a large (very large) solution build more efficient, I started looking into whether there&rsquo;s anyway of getting MsBuild to do
some of the donkey work for you. This is especially important in situations where you want to know what&rsquo;s being used/produced with this particular set of parameters.</p>

<p>Obviously dealing with every possible custom build target is out of scope, but you can get a surprisingly long way by taking advantage of some of the intermediate build
targets used within the MsBuild Common targets files (imported into every *proj file created by Visual Studio).</p>

<p>Create yourself a little file called something like <code>Analyse.proj</code>, and put the following in it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;Project</span> <span class="na">ToolsVersion=</span><span class="s">&quot;12.0&quot;</span> <span class="na">DefaultTargets=</span><span class="s">&quot;WriteStuff&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Import</span> <span class="na">Project=</span><span class="s">&quot;$(TargetProject)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Target</span> <span class="na">Name=</span><span class="s">&quot;WriteStuff&quot;</span> <span class="na">DependsOnTargets=</span><span class="s">&quot;ResolveReferences&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Message</span> <span class="na">Importance=</span><span class="s">&quot;high&quot;</span> <span class="na">Text=</span><span class="s">&quot;References::@(ReferencePath)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Message</span> <span class="na">Importance=</span><span class="s">&quot;high&quot;</span> <span class="na">Text=</span><span class="s">&quot;Compiles::@(BeforeCompile);@(Compile);@(AfterCompile)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Message</span> <span class="na">Importance=</span><span class="s">&quot;high&quot;</span> <span class="na">Text=</span><span class="s">&quot;Output::$(OutputPath)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Target&gt;</span>
</span><span class='line'><span class="nt">&lt;/Project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a mini-MsBuild project that imports an other project &ndash; the project you want to analyse. You can &ldquo;build&rdquo; this project like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>PS C:\DirectoryWithProj&gt; <span class="err">&amp;</span> &#39;C:\Program Files (x86)\MSBuild\12.0\Bin\SBuild&#39; .\Analyse.proj /nologo /p:TargetProject=./Fake.Shake.fsproj
</span><span class='line'>Build started 07/08/2015 15:05:27.
</span><span class='line'>Project &quot;C:\DirectoryWithProj\Analyse.proj&quot; on node 1 (default targ ets).
</span><span class='line'>WriteStuff:
</span><span class='line'>  References::C:\rip\Fake.Shake\packages\FAKE.Lib\lib\net451\FakeLib.dll;C:\rip
</span><span class='line'>  \Fake.Shake\packages\FSharp.Core\lib\net40\FSharp.Core.dll;C:\rip\Fake.Shake\
</span><span class='line'>  packages\FsPickler\lib\net45\FsPickler.dll;C:\rip\Fake.Shake\packages\Hopac\l
</span><span class='line'>  ib\net45\Hopac.Core.dll;C:\rip\Fake.Shake\packages\Hopac\lib\net45\Hopac.dll;
</span><span class='line'>  C:\rip\Fake.Shake\packages\Hopac\lib\net45\Hopac.Platform.dll;C:\Program File
</span><span class='line'>  s (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.1\mscorli
</span><span class='line'>  b.dll;C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFra
</span><span class='line'>  mework\v4.5.1\System.Core.dll;C:\Program Files (x86)\Reference Assemblies\Mic
</span><span class='line'>  rosoft\Framework\.NETFramework\v4.5.1\System.dll;C:\Program Files (x86)\Refer
</span><span class='line'>  ence Assemblies\Microsoft\Framework\.NETFramework\v4.5.1\System.Numerics.dll;
</span><span class='line'>  C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework
</span><span class='line'>  \v4.5.1\System.Runtime.Serialization.dll;C:\Program Files (x86)\Reference Ass
</span><span class='line'>  emblies\Microsoft\Framework\.NETFramework\v4.5.1\System.Xml.dll
</span><span class='line'>  Compiles::;Fake.Shake.Core.fs;Fake.Shake.Control.fs;Fake.Shake.DefaultRules.f
</span><span class='line'>  s;Fake.Shake.fs;
</span><span class='line'>  Output::bin\Debug\
</span><span class='line'>Done Building Project &quot;C:\DirectoryWithProj\Analyse.proj&quot; (default
</span><span class='line'>targets).
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Build succeeded.
</span><span class='line'>    0 Warning(s)
</span><span class='line'>    0 Error(s)
</span><span class='line'>
</span><span class='line'>Time Elapsed 00:00:00.12
</span></code></pre></td></tr></table></div></figure>


<p>And as you can see, whilst it&rsquo;s a bit ugly it generates a whole load of useful information for you about how <em>this</em> build with <em>these</em> properties will be built.</p>

<p>That&rsquo;s all for now!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming in an Imperative World]]></title>
    <link href="http://blog.mavnn.co.uk/functional-programming-in-an-imperitive-world/"/>
    <updated>2015-06-12T10:54:20+01:00</updated>
    <id>http://blog.mavnn.co.uk/functional-programming-in-an-imperitive-world</id>
    <content type="html"><![CDATA[<p>Yesterday was the <a href="https://skillsmatter.com/conferences/7036-functional-programming-exchange-2015#skillscasts">Functional Programming Exchange 2015</a> and this being SkillsMatter,
the videos are already up. It&rsquo;s a great place to talk from that point of view, with consistently excellent organisation.</p>

<p>I was talking on being a &ldquo;Functional Programmer in an Imperative World&rdquo;; the slides are embedded below, but for the full experience check out the video at the link above.</p>

<iframe src="http://blog.mavnn.co.uk//www.slideshare.net/slideshow/embed_code/key/cSlUuPevYKsSHL" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://blog.mavnn.co.uk//www.slideshare.net/mavnn/functional-programming-in-an-imperitive-world" title="Functional Programming in an Imperitive World" target="_blank">Functional Programming in an Imperitive World</a> </strong> from <strong><a href="http://blog.mavnn.co.uk//www.slideshare.net/mavnn" target="_blank">mavnn</a></strong> </div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Property Based Testing at SDD Conf 2015]]></title>
    <link href="http://blog.mavnn.co.uk/sdd-conf-2015/"/>
    <updated>2015-06-08T10:21:44+01:00</updated>
    <id>http://blog.mavnn.co.uk/sdd-conf-2015</id>
    <content type="html"><![CDATA[<p>So, nearly a month back now I had the fantastic opportunity to speak at this year&rsquo;s
<a href="http://sddconf.com/">Software, Design &amp; Development</a> at the Barbican on property based
testing &ndash; or more specifically, FsCheck.</p>

<!-- more -->


<p>It was a fun experience and a very different type of conference to the smaller, generally
open source community based events that I normally attend. There were a wide variety of
expert speakers, covering the whole range from people like myself presenting on potentially
useful but relatively unknown technology (in the enterprise world, at least &ndash;
property based testing is pretty well known in functional programming circles) through to
known industry names.</p>

<p>I won&rsquo;t go into the details of all the talks I attended as I was there for 3 days. But there
were a lot of good ideas on display ranging through sane naming (always worth watching
anything by <a href="https://twitter.com/KevlinHenney">Kevlin Henney</a> if you get a chance) to
project design (as opposed to project planning, probably more thoughts on that later) to
practical DDD examples in .net to the &ldquo;Zen of Architecture&rdquo;.</p>

<p>As a thank you
to <a href="https://twitter.com/kurt2001">Kurt Schelfthout</a> who wrote FsCheck, to spread further what
I think is an awesome concept and to give an idea
of some of the kind of things we do at <a href="http://www.15below.com/">15below</a> to any interested
developers I managed to arrange for the recording of my talk to be released publicly. It&rsquo;s
an unmanned camera, so you have a pretty good view of the slides with out having to see my
face at any point, which many people will see as an advantage! I strongly recommend full
screen viewing; there&rsquo;s a fair amount of code in the presentation.</p>

<iframe src="https://player.vimeo.com/video/129109178" width="100%" height="400" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p>If you want to play with the code from the demo yourself, it&rsquo;s available <a href="https://github.com/mavnn/SddConf2015">on Github</a>. The slides are also available <a href="http://sddconf.com/brands/sdd/library/Breaking_Your_Code_In_New_Exciting_Ways.pdf">as a PDF</a>.</p>

<p>Many thanks to the conference organisers <a href="http://www.yellowstonetechmedia.com/">Yellowstone TechMedia</a>, and I&rsquo;ll definitely be considering submitting talks/attending again next year.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serialization in .net]]></title>
    <link href="http://blog.mavnn.co.uk/serialization-in-net/"/>
    <updated>2015-05-21T16:11:28+01:00</updated>
    <id>http://blog.mavnn.co.uk/serialization-in-net</id>
    <content type="html"><![CDATA[<p>Leaving the confines of your own process&rsquo;s safe little memory space is always a potentially painful moment
when you&rsquo;re coding up an up. Whether it&rsquo;s receiving data from the outside world, passing a message over
RabbitMQ to an other in house service, or writing an audit trail that needs to be accessible for the next
20 years, there&rsquo;s a bunch of considerations that need to be taken into account when you hit the joys of
serialization and deserialization.</p>

<!-- more -->


<h2>Mirror, mirror on the wall</h2>

<p>First up on the list is whether or not to use reflection. For those of you who aren&rsquo;t aware, reflection
is a way of inspecting the properties of your .net code at runtime, and various serialization libraries
take advantage of this to try and make your life easier.</p>

<p>The best known example of this is <a href="http://www.newtonsoft.com/json">Json.NET</a> &ndash; which will take any .net
object and try and create a Json representation of it &ndash; or vice versa.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Product</span> <span class="n">product</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Product</span><span class="p">();</span>
</span><span class='line'><span class="n">product</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;Apple&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">product</span><span class="p">.</span><span class="n">Expiry</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="p">(</span><span class="m">2008</span><span class="p">,</span> <span class="m">12</span><span class="p">,</span> <span class="m">28</span><span class="p">);</span>
</span><span class='line'><span class="n">product</span><span class="p">.</span><span class="n">Sizes</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;Small&quot;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">string</span> <span class="n">json</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="n">SerializeObject</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
</span><span class='line'><span class="c1">// {</span>
</span><span class='line'><span class="c1">//   &quot;Name&quot;: &quot;Apple&quot;,</span>
</span><span class='line'><span class="c1">//   &quot;Expiry&quot;: &quot;2008-12-28T00:00:00&quot;,</span>
</span><span class='line'><span class="c1">//   &quot;Sizes&quot;: [</span>
</span><span class='line'><span class="c1">//     &quot;Small&quot;</span>
</span><span class='line'><span class="c1">//   ]</span>
</span><span class='line'><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a common technique, but it does have a few problems.</p>

<h3>Versioning</h3>

<p>The &ldquo;schema&rdquo; here is actually the underlying .net type that you are serializing &ndash; this can be great for
quick to implement communications between .net services which can share a &ldquo;messages&rdquo; dll with the type in.</p>

<p>Unfortunately, this also plays merry havoc in any scenario where your messages might persist
between versions of your messaging dll. Saving these objects to a document store for example, or trying to run two versions of a service at once (required for seamless deployment)
connected to a messaging bus.</p>

<p>Because .net will only allow you to have one version of an assembly loaded at once, you can&rsquo;t
easily build a way of deserializing the old format.</p>

<h3>Uglyness</h3>

<p>This might sound like a purely aesthetic consideration, and therefore beneath us
technical types but the result of automatic serialization is often ugly and strange
looking. And to be fair, it isn&rsquo;t normally a huge problem for as long as you&rsquo;re working
in a .net to .net scenario. But if, for example, you&rsquo;re writing an API to be consumed
from JavaScript your UI developers (which is probably still you, right?) will curse your
name forever more if you go this route. As well as this, as there&rsquo;s no schema, it&rsquo;s very
hard to tell in any other language whether the object you&rsquo;ve created will make it through
the deserialization process when it hits .net land again.</p>

<h3>Runtime failure</h3>

<p>That <code>JsonConvert.SerializeObject</code> method up there: it&rsquo;s generic. Which means it will
take any .net object you want to throw at it.</p>

<p>Unfortunately, the number of .net objects it can actually serialize is quite a bit more
restricted than &ldquo;any .net object you want to throw at it&rdquo;. And it has no way of telling
you that until run time, when it will just throw an exception, which can be pretty painful.</p>

<h3>When to use?</h3>

<p>Only use reflection based serialization in situations where you know the serialized
representation will be transient, and where you can test your serialization works at
runtime in advance. Additional, be very suspicious of using reflection based serialization
in any scenario where anything outside the .net ecosystem will need to access the data.</p>

<p>Typical scenarios:</p>

<ul>
<li>Caching</li>
<li>Inter-process communication in distributed systems</li>
<li>Message bus communications (only if you can guarantee the messages are transient)</li>
</ul>


<p>Avoid for:</p>

<ul>
<li>Permanent persistence</li>
<li>Defining APIs to be used from outside .net</li>
</ul>


<h3>Recommended implementation</h3>

<p>If you are doing reflection based serialization in .net, you want to use
<a href="https://nessos.github.io/FsPickler/">FsPickler</a>. It covers binary, json, bson and xml
serialization in a single library, is faster than Json.NET and successfully serializes
more types than Json.NET. What&rsquo;s not to like?</p>

<h2>Attribute all the things!</h2>

<p>As well as just trying to guess how to serialize things with reflection in .net,
there is also the <a href="https://msdn.microsoft.com/en-us/library/system.serializableattribute%28v=vs.110%29.aspx">Serializable</a> attribute that allows you to then serialize to a variety
of formats using the <code>System.Runtime.Serialization</code> name space. This a few advantages
over the raw reflection technique in theory (you can mark specific fields not to be serialized, for example) but to be blunt if you&rsquo;re going to go to this amount of effort you may
as well go for one of the safer options below.</p>

<h3>When to use?</h3>

<p>When you&rsquo;re using a Microsoft library that requires you to.</p>

<h2>Safety with (type) class</h2>

<p>If you happen to be working in F#, then <a href="https://msdn.microsoft.com/en-us/library/dd233203.aspx">member constraints</a> allow you to try a more flexible and type safe way of expressing
serialization &ndash; in exchange for a little more work.</p>

<p>As an example, the Chiron library allows you to do things like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">Chiron</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Chiron</span><span class="p">.</span><span class="nc">Operators</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">InnerRecord</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="nc">Start</span> <span class="o">:</span> <span class="nn">System</span><span class="p">.</span><span class="nc">DateTime</span>
</span><span class='line'>        <span class="nc">Id</span> <span class="o">:</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Guid</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">FromJson</span> <span class="o">(_</span> <span class="o">:</span> <span class="nc">InnerRecord</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">(</span><span class="k">fun</span> <span class="n">s</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="nc">Start</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span> <span class="nc">Id</span> <span class="o">=</span> <span class="n">i</span> <span class="o">})</span>
</span><span class='line'>        <span class="o">&lt;!&gt;</span> <span class="nn">Json</span><span class="p">.</span><span class="n">read</span> <span class="s2">&quot;startTime&quot;</span>
</span><span class='line'>        <span class="o">&lt;*&gt;</span> <span class="nn">Json</span><span class="p">.</span><span class="n">read</span> <span class="s2">&quot;identity&quot;</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">ToJson</span> <span class="n">innerRecord</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">Json</span><span class="p">.</span><span class="n">write</span> <span class="s2">&quot;startTime&quot;</span> <span class="n">innerRecord</span><span class="o">.</span><span class="nc">Start</span>
</span><span class='line'>        <span class="o">*&gt;</span> <span class="nn">Json</span><span class="p">.</span><span class="n">write</span> <span class="s2">&quot;identity&quot;</span> <span class="n">innerRecord</span><span class="o">.</span><span class="nc">Id</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">OuterRecord</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="nc">Name</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>        <span class="nc">Inner</span> <span class="o">:</span> <span class="nc">InnerRecord</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">FromJson</span> <span class="o">(_</span> <span class="o">:</span> <span class="nc">OuterRecord</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">(</span><span class="k">fun</span> <span class="n">n</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="nc">Name</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span> <span class="nc">Inner</span> <span class="o">=</span> <span class="n">i</span> <span class="o">})</span>
</span><span class='line'>        <span class="o">&lt;!&gt;</span> <span class="nn">Json</span><span class="p">.</span><span class="n">read</span> <span class="s2">&quot;name&quot;</span>
</span><span class='line'>        <span class="o">&lt;*&gt;</span> <span class="nn">Json</span><span class="p">.</span><span class="n">read</span> <span class="s2">&quot;inner&quot;</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">ToJson</span> <span class="n">outerRecord</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">Json</span><span class="p">.</span><span class="n">write</span> <span class="s2">&quot;name&quot;</span> <span class="n">outerRecord</span><span class="o">.</span><span class="nc">Name</span>
</span><span class='line'>        <span class="o">*&gt;</span> <span class="nn">Json</span><span class="p">.</span><span class="n">write</span> <span class="s2">&quot;inner&quot;</span> <span class="n">outerRecord</span><span class="o">.</span><span class="nc">Inner</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="nc">Name</span> <span class="o">=</span> <span class="s2">&quot;my object&quot;</span>
</span><span class='line'>  <span class="nc">Inner</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>            <span class="nc">Start</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nc">DateTime</span><span class="o">(</span><span class="mi">2015</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">21</span><span class="o">)</span>
</span><span class='line'>            <span class="nc">Id</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Json</span><span class="p">.</span><span class="n">serialize</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Json</span><span class="p">.</span><span class="n">format</span>
</span><span class='line'><span class="c1">// Your json goes here</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few interesting things to note here. Firstly, as you&rsquo;ve probably guessed, the magic
of telling Chiron how to serialize and deserialize things happens in the <code>ToJson</code> and
<code>FromJson</code> methods. What might not be so obvious is that if these methods are not
implemented with the correct signature, than <code>Json.serialize</code> will not compile when
fed the erroneous object. Which does wonders for eliminating run time errors!</p>

<p>Also, if you look carefully at the To and From methods you&rsquo;ll see that there&rsquo;s no need
for the fields in the Json and the .net object to have the same name. In fact, you can
apply what ever logic you want within them, allowing you to match a specific schema,
allow for different versions of the serialized data to be deserialized or just generally
make the serialized version prettier to use from other places.</p>

<p>You do, of course, have to actually write the From and To methods, which is definitely
more work. Having said that, it&rsquo;s not quite as bad as it sounds though: as you can see
from the <code>OuterRecord</code> type with it&rsquo;s <code>InnerRecord</code> field, and can nest the To and
From methods nicely &ndash; and the type system will check that your object is serializable
all the way down. Nice.</p>

<h3>When to use?</h3>

<p>Any time when you might have to persist data between versions, or process data during
the serialization/deserialization process &ndash; and you can specify your data types in F#.</p>

<h3>Recommended implementation</h3>

<p><a href="https://github.com/mausch/Fleece">Fleece</a> and <a href="https://github.com/xyncro/chiron/">Chiron</a>
both implement these techniques. Fleece is a more established library that has been tested
for longer, but I have had some performance issues with it in libraries with a lot of types
that implement To and From methods. Chiron is a little bit&hellip; cutting edge in age, but
has always been fast and reliable for me so far.</p>

<p>We currently use Fleece in one of our projects, and have provided some support to improving
the testing of Chiron as it looks like a hopeful alternative.</p>

<p>Edit: Eirik points out in the comments that FsPickler (mentioned above) also has a mechanism
for defining type safe (de)serialization <a href="http://nessos.github.io/FsPickler/tutorial.html#Picklers-and-Pickler-combinators">using Picklers</a>. I couldn&rsquo;t possibly guess where the library
got it&rsquo;s name.</p>

<h2>All the rest</h2>

<p>I&rsquo;m sure that there are other ways of tackling these problems &ndash; for example, for our
customer facing &ldquo;business&rdquo; APIs we&rsquo;re moving to specifying our API using hand crafted
XSD and WSDL files and then autogenerating code behind. This assumes, of course, you
have some reason to be using SOAP. But if you do, it works an awful lot better than
trying to autogenerate the schema from the code &ndash; a path that&rsquo;s lead me to worlds of
pain both as the consumer and producer of the schemas.</p>

<p>But the routes above are the most common paths that I&rsquo;ve come across as a .net developer
and I&rsquo;ve often discovered them being used in the &ldquo;wrong&rdquo; places. Retroactively having to
version reflection based APIs is a particular pain point that I&rsquo;d recommend avoiding if
you possibly can!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API Design Workshop]]></title>
    <link href="http://blog.mavnn.co.uk/api-design-workshop/"/>
    <updated>2015-05-07T15:35:51+01:00</updated>
    <id>http://blog.mavnn.co.uk/api-design-workshop</id>
    <content type="html"><![CDATA[<p>Designing an API is hard.</p>

<p>You want to actually apply the
<a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment">principle of least astonishment</a> &ndash;
but you&rsquo;re the person who wrote the code. You&rsquo;re unlikely to be astonished. So
you&rsquo;re trying to think how someone who didn&rsquo;t know what you know would think &ndash;
which is never an easy starting point!</p>

<p>Similarly, you&rsquo;re trying to create the
<a href="http://blog.codinghorror.com/falling-into-the-pit-of-success/">pit of success</a>
for users. Which means trying to make it <em>very hard</em> to do the wrong thing with
your API. Preferably, in strongly typed languages, this should include using the
type system to
<a href="http://fsharpforfunandprofit.com/posts/designing-with-types-making-illegal-states-unrepresentable/">make illegal states unrepresentable</a>
so that code that compiles is very likely to work.</p>

<p>In general, the core libraries for .net are not bad at API design, but there are
a few places where this isn&rsquo;t true. As an exercise, we at
<a href="http://www.15below.com/">15below</a> are going to take one of them, split into
teams and spend an hour or so seeing what alternatives we can come up with. Feel
free to follow along at home, and if you do give it a try ping me a code snippet
and I&rsquo;ll post it up with our internal attempts in a week or so.</p>

<!-- more -->


<h2>The API</h2>

<p>Lots of things can be represented as streams of data. Files, network
connections, compressed archives, chunks of memory&hellip; the list goes on.</p>

<p>So .net provides us with the <a href="https://msdn.microsoft.com/en-us/library/system.io.stream%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396"><code>System.IO.Stream</code> class</a>.</p>

<p>Which is great and all&hellip; except that not all streams are equal. For example,
your function might need write access to a stream, and not all streams are
writable. You can check easily enough, but the only way of flagging to the user
you need write access is via comments or naming conventions. The same is true
for requiring the ability to read from the stream or seek to specific locations
with in it.</p>

<h2>The challenge</h2>

<p>Have a look through the interface provided by <code>System.IO.Stream</code>. Create a
skeleton of an API that could implement the same functionality, be reasonably
easy to use and tries to make illegal states unrepresentable as much as
possible. Note: this API does <em>not</em> have to be functional.</p>

<p>Try adding a few example methods that make use of your API (hint: your design
will probably be better if you write these first).</p>

<p>Maybe you want to try using interfaces and
<a href="http://stackoverflow.com/questions/3663739/method-parameter-with-multiple-interface-restrictions">multiple interface constraints</a>. Or
you have some clever idea for representing things with
<a href="http://fsharpforfunandprofit.com/posts/discriminated-unions/">discriminated unions</a>. Or
maybe you just know that there&rsquo;s a better core library out there with a nicer
representation you can rip off whole sale! Who knows?</p>

<p>Post your work up somewhere it can be seen on the internet and ping me a link,
and we&rsquo;ll go over the submissions and write up a commentary over the next week
or two.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ecumenical APIs]]></title>
    <link href="http://blog.mavnn.co.uk/ecumenical-apis/"/>
    <updated>2015-05-06T10:44:16+01:00</updated>
    <id>http://blog.mavnn.co.uk/ecumenical-apis</id>
    <content type="html"><![CDATA[<p>One of the big sells of shared runtime functional languages such as F#, Scala
and Clojure is that you can carrying on using the surrounding library ecosystem
and your existing code. The different paradigm occasionally causes a little
pain, but there are plenty of blog posts about how to wrap OO interfaces in a
functionally friendly way.</p>

<p>This is not one of those blog posts. This is about making sure that your
colleagues who are consuming your shiny new code in an imperative language
(generally C# in my case) don&rsquo;t threaten to defenestrate you.</p>

<p>At <a href="http://15below.com">15below</a> we&rsquo;ve recently had need in some of our services
of taking a distributed lock between servers. There are many services available
designed for doing this, but after some deliberation we decided that we didn&rsquo;t
want to add a new piece of infrastructure purely for this one purpose. So
<a href="http://15below.github.io/Sproc.Lock">Sproc.Lock</a> was born: SQL Server based
distributed locking.</p>

<p>In this post, I&rsquo;m not going to talk about the design of the service. What I&rsquo;m
going to write about is how I engineered the API to be pleasent to use from both
C# and F#, giving a idiomatic interface from both languages.</p>

<!-- more -->


<h2>The original interface (F#)</h2>

<p>The F# interface was written first, and follows a pattern that will feel
immediately familiar to an F# programmer. Our lock can be of 3 types (global,
organisation or environment) and so we have a discriminated union (<code>Lock</code>)
representing these three options.</p>

<p>(I&rsquo;ve removed the implementations of the various bits to leave the shape of the
code clear)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">/// Type representing a Lock that has definitely been acquired. Locks are</span>
</span><span class='line'><span class="c1">/// IDisposable; disposing the lock will ensure it is released.</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Lock</span> <span class="o">=</span>
</span><span class='line'>     <span class="c1">/// A lock that applies globally across the lock server</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">Global</span> <span class="k">of</span> <span class="o">...</span>
</span><span class='line'>     <span class="c1">/// A lock scoped to a specific organisation</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">Organisation</span> <span class="k">of</span> <span class="o">...</span>
</span><span class='line'>     <span class="c1">/// A lock scoped to a particular environment belonging to a particular organisation</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">Environment</span> <span class="k">of</span> <span class="o">...</span>
</span><span class='line'>     <span class="c1">/// The LockId acquired. Useful in combination when getting one of a list of locks to determine which was free.</span>
</span><span class='line'>     <span class="k">member</span> <span class="n">lock</span><span class="o">.</span><span class="nc">LockId</span> <span class="o">=</span>
</span><span class='line'>         <span class="o">...</span>
</span><span class='line'>     <span class="c1">/// Disposing releases the lock</span>
</span><span class='line'>     <span class="k">member</span> <span class="n">lock</span><span class="o">.</span><span class="nc">Dispose</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>         <span class="o">...</span>
</span><span class='line'>     <span class="k">interface</span> <span class="nc">IDisposable</span> <span class="k">with</span>
</span><span class='line'>         <span class="c1">/// Disposing releases the lock</span>
</span><span class='line'>         <span class="k">member</span> <span class="n">lock</span><span class="o">.</span><span class="nc">Dispose</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">lock</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The lock is <code>IDisposable</code> to take advantage of .net&rsquo;s most common resource
management idiom. You can release a lock by disposing it.</p>

<p>Then, of course, when we try and acquire a lock we may or may not be able to &ndash;
the whole point of locks is that you cannot obtain them if someone else has
locked it already, after all.</p>

<p>So we have a second discriminated union (<code>LockResult</code>) wrapping the first,
with (again) three potential cases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">/// A type representing the possible results of attempting to acquire a lock.</span>
</span><span class='line'><span class="k">type</span> <span class="nc">LockResult</span> <span class="o">=</span>
</span><span class='line'>     <span class="c1">/// A lock was successfully acquired</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">Locked</span> <span class="k">of</span> <span class="nc">Lock</span>
</span><span class='line'>     <span class="c1">/// No lock was available</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">Unavailable</span>
</span><span class='line'>     <span class="c1">/// The attempt to acquire a lock caused an error in SQL Server</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">Error</span> <span class="k">of</span> <span class="kt">int</span>
</span><span class='line'>     <span class="c1">/// Disposing a lock result disposes the lock if it was acquired, and has no effect otherwise</span>
</span><span class='line'>     <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Dispose</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Locked</span> <span class="n">l</span> <span class="o">-&gt;</span> <span class="n">l</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Unavailable</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Error</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>     <span class="k">interface</span> <span class="nc">IDisposable</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Dispose</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, this is <code>IDisposable</code> so that you can just dispose of your overall
<code>LockResult</code> object which makes a lot of the code cleaner.</p>

<p>So: how do we get a <code>LockResult</code>? Well, we have a set of functions for getting
locks. Let&rsquo;s have a look at the skeleton of one of them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// val GetOrganisationLock : string -&gt; string -&gt; TimeSpan -&gt; string -&gt; LockResult</span>
</span><span class='line'><span class="k">let</span> <span class="nc">GetOrganisationLock</span> <span class="n">connString</span> <span class="n">organisation</span> <span class="o">(</span><span class="n">maxDuration</span> <span class="o">:</span> <span class="nc">TimeSpan</span><span class="o">)</span> <span class="n">lockIdentifier</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s this doing? Well, it&rsquo;s going to (try and) create a lock scoped to a
particular database and organisation with a particular ID, returning a
<code>LockResult</code>.</p>

<p>From an API design point of view, what&rsquo;s interesting here is the order of the
arguments. <a href="https://en.wikipedia.org/wiki/Currying">Currying</a> enables easy
partial application, and here it is very likely that the application will want
to take all locks from the same database (making the first parameter) and
reasonably likely that it will always want them scoped to the same organisation
(second parameter). This is a common pattern in languages that allow for easy
currying, and invariably a consumer of this library in F# will end up with a
partially applied helper function looking something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// val getLock : string -&gt; LockResult</span>
</span><span class='line'><span class="k">let</span> <span class="n">getLock</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">GetOrganisationLock</span> <span class="s2">&quot;myDbConnString&quot;</span> <span class="s2">&quot;OrgName&quot;</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMinutes</span> <span class="mi">5</span><span class="o">.)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also have a set of helper functions for common operations we might want to
carry out on locks, all of which take a higher order function as part of their
arguments. Let&rsquo;s have a look at <code>AwaitLock</code> which will wait for a lock to
become available for a specified length of time, rather then returning
immediately with an <code>Unavailable</code> result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// val AwaitLock : TimeSpan -&gt; (unit -&gt; LockResult) -&gt; LockResult</span>
</span><span class='line'><span class="k">let</span> <span class="nc">AwaitLock</span> <span class="o">(</span><span class="n">timeOut</span> <span class="o">:</span> <span class="nc">TimeSpan</span><span class="o">)</span> <span class="n">getLock</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Using it using the helper above:</span>
</span><span class='line'><span class="k">let</span> <span class="n">awaitMyLock</span> <span class="n">identifier</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">AwaitLock</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromSeconds</span> <span class="mi">2</span><span class="o">.)</span> <span class="o">(</span><span class="n">getLock</span> <span class="n">identifier</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we then want (say) to wait up to 2 seconds for one of a list of possible
locks to become available, we can then compose this function with the
<code>OneOfLocks</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// val OneOfLocks : (&#39;a -&gt; LockResult) -&gt; seq&lt;&#39;a&gt; -&gt; LockResult</span>
</span><span class='line'><span class="k">let</span> <span class="nc">OneOfLocks</span> <span class="n">getLock</span> <span class="n">lockIds</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Using it using await helper:</span>
</span><span class='line'><span class="k">let</span> <span class="n">pickLock</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">OneOfLocks</span> <span class="n">awaitMyLock</span> <span class="o">[</span><span class="s2">&quot;LockId1&quot;</span><span class="o">;</span><span class="s2">&quot;LockId2&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m sure the comments will disagree, but I&rsquo;m actually pretty happy with this as
an F# interface to this library. It&rsquo;s not strictly pure, but that&rsquo;s an option in
F#, and the combination of composable functions and careful choice of parameter
order make for concise and readable code.</p>

<p>So, we&rsquo;re done &ndash; right?</p>

<p>Unfortunately not. This code would be truely horrible to use from C#, and we
still use a lot of C# here &ndash; some of our (stranger?) developers even prefer
it. Why would it be so nasty?</p>

<ul>
<li>Consuming discriminated unions from C# is verbose to the point of unusable</li>
<li>Partial application is a pain in C#, and no one wants to repeat the connection
string everytime they want a lock</li>
<li>Function composition is possible in C# but is not idiomatic and may make the
capabilities of the library unclear</li>
</ul>


<h2>API Take 2: the &ldquo;OO&rdquo; namespace</h2>

<p>In thinking about the kind of API I would expect for a locking library in C#, a
few things immediately sprang to mind:</p>

<ul>
<li>I would expect some kind of configurable provider object or factory</li>
<li>Out of flow returns are normally signalled by exceptions</li>
<li>Function composition only for more unusual calling options</li>
</ul>


<p>Wrapping the functional API turned out to be reasonably simple. A couple of
custom exception types and the <code>OOise</code> method later (I love that function
name, even if I say so myself) we can easily wrap our functional API in
something that makes sense in C# land &ndash; they either return an acquired,
<code>IDisposable</code> lock or throw.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">/// Exception thrown by ``LockProvider`` if none of the specified locks are available.</span>
</span><span class='line'><span class="k">type</span> <span class="nc">LockUnavailableException</span> <span class="o">(</span><span class="n">message</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Exception</span><span class="o">(</span><span class="n">message</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// Exception thrown by ``LockProvider`` if a lock request errors on SQL Server.</span>
</span><span class='line'><span class="c1">/// ``LockErrorCode`` is the SQL error response.</span>
</span><span class='line'><span class="k">type</span> <span class="nc">LockRequestErrorException</span> <span class="o">(</span><span class="n">errorCode</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Exception</span><span class="o">(</span><span class="n">sprintf</span> <span class="s2">&quot;Error code: %d&quot;</span> <span class="n">errorCode</span><span class="o">)</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nn">Data</span><span class="p">.</span><span class="nc">Add</span><span class="o">(</span><span class="n">box</span> <span class="s2">&quot;ErrorCode&quot;</span><span class="o">,</span> <span class="n">box</span> <span class="n">errorCode</span><span class="o">)</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">LockErrorCode</span>
</span><span class='line'>        <span class="k">with</span> <span class="n">get</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="nn">Data</span><span class="p">.</span><span class="err">[&quot;</span><span class="nc">ErrorCode</span><span class="s2">&quot;] |&gt; unbox&lt;int&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">let private OOise lockId getLock =</span>
</span><span class='line'><span class="s2">    match getLock lockId with</span>
</span><span class='line'><span class="s2">    | Locked l -&gt; l</span>
</span><span class='line'><span class="s2">    | Unavailable -&gt; raise &lt;| LockUnavailableException(sprintf &quot;</span><span class="nc">Lock</span> <span class="o">%</span><span class="n">s</span> <span class="n">was</span> <span class="n">unavailable</span><span class="o">.</span><span class="s2">&quot; lockId)</span>
</span><span class='line'><span class="s2">    | Error i -&gt; raise &lt;| LockRequestErrorException i</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, a simple <code>LockProvider</code> class allows for all the normal patterns we&rsquo;ve
come to know (and in some cases love) such as dependency injection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">LockProvider</span> <span class="o">(</span><span class="n">connString</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">GlobalLock</span> <span class="o">(</span><span class="n">lockId</span><span class="o">,</span> <span class="n">maxDuration</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="nc">GetGlobalLock</span> <span class="n">connString</span> <span class="n">maxDuration</span> <span class="o">|&gt;</span> <span class="nc">OOise</span> <span class="n">lockId</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">OrganisationLock</span> <span class="o">(</span><span class="n">lockId</span><span class="o">,</span> <span class="n">organisation</span><span class="o">,</span> <span class="n">maxDuration</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="c1">// Rest of the implementations snipped</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">EnvironmentLock</span> <span class="o">(</span><span class="n">lockId</span><span class="o">,</span> <span class="n">organisation</span><span class="o">,</span> <span class="n">environment</span><span class="o">,</span> <span class="n">maxDuration</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">AwaitGlobalLock</span> <span class="o">(</span><span class="n">lockId</span><span class="o">,</span> <span class="n">maxDuration</span><span class="o">,</span> <span class="n">timeOut</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">AwaitOrganisationLock</span> <span class="o">(</span><span class="n">lockId</span><span class="o">,</span> <span class="n">organisation</span><span class="o">,</span> <span class="n">maxDuration</span><span class="o">,</span> <span class="n">timeOut</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">AwaitEnvironmentLock</span> <span class="o">(</span><span class="n">lockId</span><span class="o">,</span> <span class="n">organisation</span><span class="o">,</span> <span class="n">environment</span><span class="o">,</span> <span class="n">maxDuration</span><span class="o">,</span> <span class="n">timeOut</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="c1">/// Build a ``System.Func`` that returns a lock based on lockId and provide a list of lockIds.</span>
</span><span class='line'>    <span class="c1">/// If any of the locks are available, it will pick one of the available locks at random.</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">OneOf</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">t</span><span class="o">&gt;</span> <span class="o">(</span><span class="n">getLock</span> <span class="o">:</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Func</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">t</span><span class="o">,</span> <span class="nc">Lock</span><span class="o">&gt;,</span> <span class="n">lockIds</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="c1">/// Build a ``System.Func`` that returns a lock based on lockId and provide a list of lockIds.</span>
</span><span class='line'>    <span class="c1">/// If any of the locks are available, it will pick one of the available locks at random.</span>
</span><span class='line'>    <span class="c1">/// If none are available it will wait until one is, or ``timeOut`` has passed.</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">AwaitOneOf</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">t</span><span class="o">&gt;</span> <span class="o">(</span><span class="n">getLock</span> <span class="o">:</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Func</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">t</span><span class="o">,</span> <span class="nc">Lock</span><span class="o">&gt;,</span> <span class="n">lockIds</span><span class="o">,</span> <span class="n">timeOut</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, by the time we get to the <code>OneOf</code> members, we&rsquo;re pretty much
forced into taking higher order functions to avoid a combinatorial explosion of
members (not that that always seems to deter OO API designers&hellip;). Other than
that, I think we&rsquo;re left with an API which will immediately make sense to a C#
developer: you can new up a <code>LockProvider</code>, you have a specified list of
exception types to expect, and you can easily intellisense your way around all
of the available options.</p>

<p>Our C# consuming code ends up looking a bit like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Sproc.Lock.OO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">MyApp</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Thing</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">DoLockRequiringWork</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">provider</span> <span class="p">=</span> <span class="k">new</span> <span class="n">LockProvider</span><span class="p">(</span><span class="s">&quot;sql connection string&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">try</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">lock2</span> <span class="p">=</span> <span class="n">provider</span><span class="p">.</span><span class="n">GlobalLock</span><span class="p">(</span><span class="s">&quot;MyAppLock&quot;</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromMinutes</span><span class="p">(</span><span class="m">5.0</span><span class="p">)))</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// If I get here, I have a lock!</span>
</span><span class='line'>                    <span class="c1">// Doing stuff!</span>
</span><span class='line'>                <span class="p">}</span> <span class="c1">// Lock released when Disposed</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">catch</span> <span class="p">(</span><span class="n">LockUnavailableException</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="c1">// Could not get the lock</span>
</span><span class='line'>                <span class="k">throw</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">catch</span> <span class="p">(</span><span class="n">LockRequestErrorException</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="c1">// Getting the lock threw an error</span>
</span><span class='line'>                <span class="k">throw</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the very different parameter order, placing the parameters that change most
frequently at the beginning of the list as you would normally expect in C#. This
makes a surprisingly large difference to how easy the code is to consume.</p>

<p>Again: quite nice, if I do say so myself.</p>

<p>So there you have it &ndash; want to play nicely the whole .net ecosystem? Be
kind to your consumers, and build them an ecumenical API!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LambdaCon 2015]]></title>
    <link href="http://blog.mavnn.co.uk/lambdacon-2015/"/>
    <updated>2015-04-01T10:30:00+01:00</updated>
    <id>http://blog.mavnn.co.uk/lambdacon-2015</id>
    <content type="html"><![CDATA[<p>This weekend I had the honour of speaking at <a href="http://www.lambdacon.org/">LambdaCon</a>. My own talk I&rsquo;ll be writing some separate posts on in the future, but I also wanted to jot down some notes on the conference before the memory faded.</p>

<!-- more -->


<h3>The night before</h3>

<p>Friday night kicked off with a round of meeting online friends in person: <a href="https://twitter.com/map_it">Manuel</a>, <a href="https://twitter.com/TRikace">Riccardo</a>, <a href="https://twitter.com/robertoaloi">Roberto</a>, <a href="https://twitter.com/theburningmonk">Yan</a>, <a href="https://twitter.com/old_sound">Alvero</a>, Chris (sorry, no link!) and I all managed to end up at the same place at the same time and kick off the functional goodness with some awesome pasta and nice wine. As it was described on twitter afterwards:</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p><a href="https://twitter.com/robertoaloi">@robertoaloi</a> <a href="https://twitter.com/LambdaCon">@LambdaCon</a> It&#39;s been fun :) That&#39;s how every language fight should be settled! With tortellini, tagliatelle and red wine.</p>&mdash; Manuel Paccagnella (@map_it) <a href="https://twitter.com/map_it/status/582284940538171392">March 29, 2015</a></blockquote>


<script async src="http://blog.mavnn.co.uk//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>If you ever get a chance to meet up with any of these people and chat code, craftsmanship or childcare in Sweden then I strongly recommend you take the opportunity.</p>

<h3>The conference itself</h3>

<p>After a brief introductory talk explaining how things would work and a couple of schedule changes, we were off. The organisation was first class for a conference in it&rsquo;s first year, and my hats off to all the people at LambdaCon for getting that right out of the box. They looked a little frazzled, but everything seemed to work!</p>

<h4>Session 1: Fun with categories &ndash; Milewski</h4>

<p>This was an amazing talk: Milewski&rsquo;s talk used examples from C++ and pictures of pigs to explain basic category theory, and how these concepts are useful for solving practical programming problems. He then moved onto building a writer monad for logging audit data in a banking application in C++. If you are either new to functional programming or you work with people who are not functional programmers, this talk should go to the top of your watch list as soon as the video is
available.</p>

<h4>Session 2: It&rsquo;s the type theory baby! &ndash; Finelli</h4>

<p>Unfortunately, this was my one disappointment of the day. The ideas in Finelli&rsquo;s talk are fascinating, but the talk was based much more heavily than I had realised on the paper <a href="http://r.duckduckgo.com/l/?kh=-1&amp;uddg=http%3A%2F%2Fhomepages.inf.ed.ac.uk%2Fwadler%2Fpapers%2Fpropositions-as-types%2Fpropositions-as-types.pdf">propositions as types</a> (pdf) which I have read most of. Finelli was not a bad speaker, but Wadler is a master of the writing art and on this one I&rsquo;d recommend just grabbing the paper.</p>

<p>Also, it was probably a bit rude to define &ldquo;type system&rdquo; to exclude dynamic and unityped languages at a conference with Erlang and Clojure speakers! :D</p>

<h4>Session 3: Persisting persistent data structures &ndash; Newton</h4>

<p>This was me; I&rsquo;ll leave others to comment!</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Eventsourcing from domain modeling to persistence with <a href="https://twitter.com/hashtag/fsharp?src=hash">#fsharp</a> <a href="https://twitter.com/hashtag/suave?src=hash">#suave</a> and <a href="https://twitter.com/GetEventStore">@GetEventStore</a> by <a href="https://twitter.com/mavnn">@mavnn</a> <a href="http://t.co/PQegdVfdRQ">pic.twitter.com/PQegdVfdRQ</a></p>&mdash; Enrico Sada (@enricosada) <a href="https://twitter.com/enricosada/status/581798670510743552">March 28, 2015</a></blockquote>


<script async src="http://blog.mavnn.co.uk//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>The only thing I will say is that I should have <strong>really</strong> had a wrap up slide to summarize the key points and signal to everyone that the talk had actually finished. That would probably have been better than a momentary awkward silence.</p>

<h4>Lunch</h4>

<p>It would be hard to swing a cat (a nice English expression for you) in Bologna without hitting a high quality food supplier, so not surprisingly lunch was pretty good. So was (also not surprisingly!) the coffee during the coffee breaks, accompanied by both sweet and savoury snacks.</p>

<p>Conversation was good, and new contacts were made.</p>

<h4>Session 4: Generic polymorphism on steroids &ndash; Sacerdoti Coen</h4>

<p>Like the initial keynote, this talk would have been worth the price of admission alone. A different and fascinating approach to solving the Expression Problem in OCaml using polymorphic union case constructors. I can&rsquo;t wait for the video of this one to contrast and compare the details of the technique with Active Patterns in F# &ndash; two totally different solutions to the same problem.</p>

<h4>Session 5: Actor Model in F# and Akka.net &ndash; Terrell</h4>

<p>A good solid introduction to Akka.net, Akka and the actor model in general. Solid presentation, some really nice demos and a lot to go away and look up about supervision and routing&hellip;</p>

<p>Riccardo is touring Europe and presenting this talk in a number of different places including Prague, London, and probably others. Check it out if you get a chance.</p>

<h4>Session 6: Rust now and then &ndash; Percoco</h4>

<p>As I&rsquo;ve mentioned before, when I&rsquo;m at a conference I always like to attend at least one session that is on a subject I don&rsquo;t yet know much about and that isn&rsquo;t something I&rsquo;m immediately likely to use.</p>

<p>This was the session; I&rsquo;ve heard of rust a few times but never had a chance to look into it. Flavio gave an entertaining and very informative introduction to Rust &ndash; plenty of good stuff to trigger ideas and look into in the future.</p>

<h4>Session 7: TDD as in Type-Directed Development</h4>

<p>Awesome slides, domain modelling, entertaining presentation, property based testing, practical applications of propositions as types&hellip; I lost track of the good stuff in this talk and again, it&rsquo;ll be well worth grabbing a copy of the video to show to non-functional programmers to explain <em>why</em> we rant about all these things. Clément Delafargue rounded out my day nicely.</p>

<h4>Closing keynote</h4>

<p>Unfortunately I&rsquo;ll be waiting for the video of this with the rest of you, as train times didn&rsquo;t allow me to stay for the wrap up.</p>

<h3>Conclusion</h3>

<p>All in all, LambdaCon was a thoroughly enjoyable day: huge congratulations to <a href="http://www.coderstug.org/">Coders TUG</a> for all the hard work and effort and for all the sponsors that kept the conference at such an affordable price. I&rsquo;m very much hoping they&rsquo;ll do more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing ProvidedType.fs by Example]]></title>
    <link href="http://blog.mavnn.co.uk/testing-providedtype-dot-fs/"/>
    <updated>2015-02-16T12:12:56+00:00</updated>
    <id>http://blog.mavnn.co.uk/testing-providedtype-dot-fs</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/fsprojects/FSharp.TypeProviders.StarterPack">Type Provider Starter Pack</a> was designed with two purposes initially. Firstly, to be a canonical repository for the ProvidedTypes files which provide a source file based API for creating type providers. And secondly, to be a set of tutorials and examples for people wanting to dip their toes into building type providers for the first time.</p>

<p>To be honest, it&rsquo;s not been doing a complete job of either:</p>

<ul>
<li>I think most people are using it as the source of ProvidedTypes.fs and .fsi now days, but it didn&rsquo;t provide any infrastructure or testing for progressing the library.</li>
<li>The &ldquo;examples&rdquo; were limited to a link to my <a href="http://blog.mavnn.co.uk/type-providers-from-the-ground-up/">tutorial on building type providers</a></li>
</ul>


<p>Today, that&rsquo;s changed. And I need your help!</p>

<h3>Testing ProvidedTypes</h3>

<p>Once I started thinking about it, it became clear that the code needed for basic type provider examples, and the code needed to test ProvidedTypes.fs were basically identical.</p>

<p>So I implemented a system for compiling and testing example .fsx scripts within the Starter Pack repository.</p>

<p>Want to help out? As long as you have some basic git and F# knowledge, it&rsquo;s easy!</p>

<!-- more -->


<h4>Fork the repository and pull down a clone</h4>

<h4>Add an example to the <code>/examples</code> directory</h4>

<p>Structure the example as below and save it as an .fsx file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">#</span><span class="k">if</span> <span class="nc">INTERACTIVE</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;../src/ProvidedTypes.fsi&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;../src/ProvidedTypes.fs&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">BasicProvider</span> <span class="o">(</span><span class="n">config</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;StaticProperty.Provided&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">createTypes</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">myType</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;MyType&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">myProp</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;MyProperty&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span> <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>                                        <span class="nc">GetterCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;Hello world&quot;</span> <span class="o">@@&gt;))</span>
</span><span class='line'>        <span class="n">myType</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">myProp</span><span class="o">)</span>
</span><span class='line'>        <span class="o">[</span><span class="n">myType</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="n">createTypes</span><span class="bp">()</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span> <span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>#if INTERACTIVE</code> block at the top will allow you to write your example in Visual Studio, without us requiring a separate project for each example provider.</p>

<h4>Add a set of tests in a .fsx script in the <code>/examples</code> directory</h4>

<p>The test file for the example above looks like this, and again should be saved as an .fsx file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">#</span><span class="k">if</span> <span class="nc">INTERACTIVE</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;../packages/Nunit.Runners/tools/nunit.framework.dll&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;../test/StaticProperty.dll&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">NUnit</span><span class="p">.</span><span class="nc">Framework</span>
</span><span class='line'><span class="k">open</span> <span class="nn">StaticProperty</span><span class="p">.</span><span class="nc">Provided</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Test</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="o">``</span><span class="nc">Static</span> <span class="n">property</span> <span class="n">should</span> <span class="n">have</span> <span class="n">been</span> <span class="n">created</span><span class="o">``</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Assert</span><span class="p">.</span><span class="nc">AreEqual</span><span class="o">(</span><span class="s2">&quot;Hello world&quot;</span><span class="o">,</span> <span class="nn">MyType</span><span class="p">.</span><span class="nc">MyProperty</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the two #r references at the top. Remember what you choose to call the dll!</p>

<h4>Hooking up the examples so they get built and tested</h4>

<p>The main build file is where the magic happens &ndash; <a href="https://github.com/fsprojects/FSharp.TypeProviders.StarterPack/blob/master/build.fsx">build.fsx</a> in the root directory.</p>

<p>Squirrelled away in there is a target called <code>Examples</code>. It&rsquo;s contents look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">examples</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="nc">Name</span> <span class="o">=</span> <span class="s2">&quot;StaticProperty&quot;</span>
</span><span class='line'>            <span class="nc">ProviderSourceFiles</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;StaticProperty.fsx&quot;</span><span class="o">]</span>
</span><span class='line'>            <span class="nc">TestSourceFiles</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;StaticProperty.Tests.fsx&quot;</span><span class="o">]</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="nc">Name</span> <span class="o">=</span> <span class="s2">&quot;ErasedWithConstructor&quot;</span>
</span><span class='line'>            <span class="nc">ProviderSourceFiles</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;ErasedWithConstructor.fsx&quot;</span><span class="o">]</span>
</span><span class='line'>            <span class="nc">TestSourceFiles</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;ErasedWithConstructor.Tests.fsx&quot;</span><span class="o">]</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">testNunitDll</span> <span class="o">=</span> <span class="n">testDir</span> <span class="o">@@</span> <span class="s2">&quot;nunit.framework.dll&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="nn">File</span><span class="p">.</span><span class="nc">Exists</span> <span class="n">testNunitDll</span> <span class="k">then</span>
</span><span class='line'>        <span class="nn">File</span><span class="p">.</span><span class="nc">Delete</span> <span class="n">testNunitDll</span>
</span><span class='line'>    <span class="nn">File</span><span class="p">.</span><span class="nc">Copy</span> <span class="o">(</span><span class="n">nunitDir</span> <span class="o">@@</span> <span class="s2">&quot;nunit.framework.dll&quot;</span><span class="o">,</span> <span class="n">testNunitDll</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">fromExampleDir</span> <span class="n">filenames</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">filenames</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">filename</span> <span class="o">-&gt;</span> <span class="n">exampleDir</span> <span class="o">@@</span> <span class="n">filename</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">examples</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">example</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="c1">// Compile type provider</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">output</span> <span class="o">=</span> <span class="n">testDir</span> <span class="o">@@</span> <span class="n">example</span><span class="o">.</span><span class="nc">Name</span> <span class="o">+</span> <span class="s2">&quot;.dll&quot;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">setOpts</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">def</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">def</span> <span class="k">with</span> <span class="nc">Output</span> <span class="o">=</span> <span class="n">output</span><span class="o">;</span> <span class="nc">FscTarget</span> <span class="o">=</span> <span class="nn">FscTarget</span><span class="p">.</span><span class="nc">Library</span> <span class="o">}</span>
</span><span class='line'>        <span class="nc">Fsc</span> <span class="n">setOpts</span> <span class="o">(</span><span class="nn">List</span><span class="p">.</span><span class="n">concat</span> <span class="o">[</span><span class="n">pt</span><span class="o">;</span><span class="n">fromExampleDir</span> <span class="n">example</span><span class="o">.</span><span class="nc">ProviderSourceFiles</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Compile test dll</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">setTestOpts</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">def</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">{</span> <span class="n">def</span> <span class="k">with</span>
</span><span class='line'>                <span class="nc">Output</span> <span class="o">=</span> <span class="n">testDir</span> <span class="o">@@</span> <span class="n">example</span><span class="o">.</span><span class="nc">Name</span> <span class="o">+</span> <span class="s2">&quot;.Tests.dll&quot;</span>
</span><span class='line'>                <span class="nc">FscTarget</span> <span class="o">=</span> <span class="nn">FscTarget</span><span class="p">.</span><span class="nc">Library</span>
</span><span class='line'>                <span class="nc">References</span> <span class="o">=</span> <span class="o">[</span><span class="n">output</span><span class="o">;</span><span class="n">nunitDir</span> <span class="o">@@</span> <span class="s2">&quot;nunit.framework.dll&quot;</span><span class="o">]</span> <span class="o">}</span>
</span><span class='line'>        <span class="nc">Fsc</span> <span class="n">setTestOpts</span> <span class="o">(</span><span class="n">fromExampleDir</span> <span class="n">example</span><span class="o">.</span><span class="nc">TestSourceFiles</span><span class="o">)</span>
</span><span class='line'>    <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will need to add your example to the <code>examples</code> list at the top of the target. <code>Name</code> is the name of the dll that will be produced for your type provider. <code>ProviderSourceFiles</code> is the fsx file with your type provider example code. And <code>TestSourceFiles</code> is the code of your tests.</p>

<p>If you check further down, the call to the compiler to compile your provider will automatically prepend the ProvidedTypes files, so there&rsquo;s no need to list those. And the call to the compiler to run your tests will have references added for the provider you just built and <code>nunit.framework.dll</code>.</p>

<p>So what are you waiting for? Get writing some examples!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Good Developer CVs (Résumés)]]></title>
    <link href="http://blog.mavnn.co.uk/good-developer-cvs/"/>
    <updated>2015-02-12T15:31:49+00:00</updated>
    <id>http://blog.mavnn.co.uk/good-developer-cvs</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been reviewing a number of CVs from developers of varying experience recently, and wanted to get a few notes out there about what to do (and <strong>not</strong> do) on your CV if you want to get noticed.</p>

<p>Well, by me at least. Your mileage may vary with other reviewers! But &ndash; remember that you&rsquo;re interviewing the company as much as they&rsquo;re interviewing you. Hopefully this advice will get you more interest from the kind of companies you <strong>want</strong> to work for, even if it doesn&rsquo;t get you through the enterprise HR screen quite as often.</p>

<p>I&rsquo;ll start with the postives, and then go onto some things it&rsquo;s best to avoid.</p>

<h3>Make yourself stand out!</h3>

<p>Looking from the outside (at least, from the job descriptions!), <a href="http://15below.com">15below</a> probably looks like a Microsoft shop. That&rsquo;s because it is &ndash; all of our new code is written in MS supported .net languages, we use SQL Server as our primary data store, WebApi, ASP.net MVC, etc.</p>

<p>But! One of the things that makes us who we are is that we&rsquo;ve deliberately hired outside the box, especially for senior developer roles. I have professional Python experience, use F# by preference and run my personal computers on Linux. Three of us use Vim (or at least VsVim). One of us used to write C++ code for nuclear reactors (the testing is strong in that one). My colleagues tweet about Erlang, code for fun in Idris and steal ideas liberally from all these places to make 15below
the kind of place it is. Not all of it makes it into production code, but even there you&rsquo;ll find technologies like RabbitMQ that don&rsquo;t show up that often in the Microsoft world.</p>

<p>If you tailor your CV to what it looks like we prefer, you immediately sink to almost invisibility. &ldquo;Oh, an other developer with 5+ years C# experience who knows T-SQL and knows to buzzword Scrum onto the CV.&rdquo; To be clear: that&rsquo;s not a bad thing to have on your CV. It shouldn&rsquo;t be the only thing on your CV.</p>

<h3>Show me the codez</h3>

<p>This isn&rsquo;t essential, and you may not be able to depending on your previous employment. But if you can link to some previous code you&rsquo;ve written (even a website where you can say &ldquo;I wrote the JavaScript for this one&rdquo;) you&rsquo;ll immediately gain a boost towards an interview. We&rsquo;ll still give you the technical test, because unfortunately there are people who are stupid enough to try and pass off others work as their own (and it is stupid &ndash; you will get yourself burnt trying that). But
you&rsquo;re
much more likely to get to the interview stage. This is a particularly useful piece of advice for those of you just coming out of university. Can you link to your final year project? A hobby project? Your github account? If the code is good, you&rsquo;re instantly up there competing with candidates who on paper have years of experience over you.</p>

<p>Whether you show us code in advance or not, we will ask you to write something trivial during the interview. We&rsquo;ll make it as unscary as we can, but unfortunately enough people have come to us who cannot actually write code that we feel we have very little choice about this step. If you&rsquo;re nervous about this kind of thing, I would seriously suggest getting in a practice session or two with friends before getting to an interview for a development post. And be very, very wary of a company that
doesn&rsquo;t ask you to demonstrate you can actually code.</p>

<h3>Don&rsquo;t bother me with trivia, especially if it makes you look bad</h3>

<p>Been out of school for more than 5 years? I couldn&rsquo;t give two figs about your grades. Unless you explicitly list the fact that you achieved a C and 3 E&rsquo;s at AS level. That gives me pause for thought. It&rsquo;s not a make or break thing, but no need to cut your own chances.</p>

<h3>Don&rsquo;t fluff up your management skills (unless you want to be a manager)</h3>

<p>We&rsquo;ve been very borderline about interviewing several candidates because it was completely unclear from their CVs whether they actually <em>write any code</em>. Oh, it says &ldquo;experienced C# software engineer&rdquo; at the top of the CV, but if you look at the description of their last job it&rsquo;s all about &ldquo;Team Leader&rdquo;, &ldquo;Mentor&rdquo;, &ldquo;SCRUM master&rdquo;&hellip; Again, none of that&rsquo;s bad (well &ndash; maybe SCRUM master is a bit dubious) but we&rsquo;re not a Local Council where the only way of being &ldquo;Senior&rdquo; is to have
management responsibility. We&rsquo;re hiring developers, and while we&rsquo;ll expect a senior developer to be a good communicator we&rsquo;re not expecting them to be graduates of Atlassian University. If you want to get into people management, it&rsquo;s a fine career path. If you want to be a developer, highlight your development skills.</p>

<h3>Don&rsquo;t give in depth technical examples that give me the fear</h3>

<p>We got a CV from someone who had recently written a desktop application that used every multithreading techniques. Really? All of them? In one app? An interesting design decision.</p>

<p>Fortunately for my curiosity, he proceeded to list every multithreading techniques:</p>

<ul>
<li>ManualResetEvent</li>
<li>BackgroundWorker</li>
<li>Manual Dispatch</li>
</ul>


<p>In 2015 this is not the way to highlight your expertise in writing asynchronous and concurrent reliable, maintainable code. If someone wrote code like this within the company, the code review would immediately result in some pair programming on &ldquo;here&rsquo;s all the easier, more reliable ways you could have done this.&rdquo; From an applicant applying for a senior role it&rsquo;s an instant fail.</p>

<p>The problem is not here that someone didn&rsquo;t know how to write concurrent code: not every developer has reason to have learnt those skills. The problem is using a subject where you have very little expertise to try and boost your technical credentials.</p>

<p>Three things to take away here:</p>

<ol>
<li>Don&rsquo;t claim to be an expert on something unless you&rsquo;re certain that you actually are.</li>
<li>Did something in a previous job in a way you wouldn&rsquo;t now? List the result, not the detail of the technique</li>
<li>If you need ManualResetEvent you&rsquo;re probably doing something very wrong</li>
</ol>


<h3>Don&rsquo;t try and out Agile us</h3>

<p>Yes, yes, we say we&rsquo;re an agile company. But frankly, a lot of stuff that people call agile is a complete waste of time, and other things we just can&rsquo;t do because we spend a lot of time working with customers who are <em>not</em> agile. At all. So, we do 15below agile. It&rsquo;s a nice shorthand to give you a good idea of how we generally work. And agile being as dispersed an idea as it is, that&rsquo;s going to be true of pretty much any company that says it&rsquo;s agile.</p>

<p>So be wary getting too carried away on your &ldquo;agility&rdquo;. Again, don&rsquo;t claim to be expert if you&rsquo;re not: &ldquo;we had a morning meeting everyday&rdquo;, as one of our candidates noted in his agile experience. And you&rsquo;re going to make me very wary if you try and come across as being an agile zealot &ndash; not because agile is bad, but because whatever it is you&rsquo;re a zealot about, it&rsquo;s not going to be &ldquo;15below agile&rdquo;. And life&rsquo;s too short for getting into arguments about that kind of thing.</p>

<hr />

<p>So, there you have. My own personal list of things that increase or decrease your chances that I&rsquo;ll recommend you&rsquo;re interviewed.</p>

<p>If you think that you&rsquo;d be interested in working for the type of company that uses this type of criteria&hellip; well, oddly enough we&rsquo;re hiring at the moment. Ping me or drop a note through to <a href="&#x6d;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#x6a;&#111;&#98;&#115;&#64;&#x31;&#53;&#x62;&#101;&#108;&#111;&#x77;&#46;&#99;&#111;&#109;&#x2e;">&#106;&#x6f;&#x62;&#x73;&#64;&#x31;&#53;&#98;&#x65;&#x6c;&#111;&#x77;&#x2e;&#x63;&#111;&#x6d;&#46;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RX Solutions]]></title>
    <link href="http://blog.mavnn.co.uk/rx-solutions/"/>
    <updated>2015-02-09T14:15:45+00:00</updated>
    <id>http://blog.mavnn.co.uk/rx-solutions</id>
    <content type="html"><![CDATA[<p>This post contains solutions to the <a href="http://blog.mavnn.co.uk/exploring-reactive-extensions/">Reactive Extensions practical</a> post.</p>

<!--more-->


<p>The base program looks like this (as in the previous post):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Reactive</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Reactive.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">ReactiveTester.Shared</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">EventTester</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Handler</span><span class="p">(</span><span class="n">Tuple</span><span class="p">&lt;</span><span class="n">Guid</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">tuple</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0} - {1}&quot;</span><span class="p">,</span> <span class="n">tuple</span><span class="p">.</span><span class="n">Item1</span><span class="p">,</span> <span class="n">tuple</span><span class="p">.</span><span class="n">Item2</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Error</span><span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">err</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">OpenStandardError</span><span class="p">();</span>
</span><span class='line'>            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">writer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">StreamWriter</span><span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">Console</span><span class="p">.</span><span class="n">OutputEncoding</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">writer</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0}&quot;</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Nice docs (although Java): http://reactivex.io/RxJava/javadoc/rx/Observable.html</span>
</span><span class='line'>            <span class="c1">// The challenge:</span>
</span><span class='line'>            <span class="c1">// The ChangeReceiver will fire an event every time a change is received.</span>
</span><span class='line'>            <span class="c1">// Events can be:</span>
</span><span class='line'>            <span class="c1">// &quot;Ignore!&quot; -&gt; don&#39;t do anything</span>
</span><span class='line'>            <span class="c1">// &quot;Change!&quot; -&gt; send notification to staff and customers</span>
</span><span class='line'>            <span class="c1">// &quot;StaffOnly!&quot; -&gt; send notification to staff</span>
</span><span class='line'>            <span class="c1">// &quot;CustomerOnly!&quot; -&gt; send notification to customer only</span>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="c1">// Staff must be notified within 3 seconds.</span>
</span><span class='line'>            <span class="c1">// Customers most be notified between 5 and 7 seconds.</span>
</span><span class='line'>            <span class="n">using</span><span class="p">(</span><span class="kt">var</span> <span class="n">pub</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ChangeReceiver</span><span class="p">(</span><span class="s">&quot;tcp://*:5555&quot;</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Listening...&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">var</span> <span class="n">staffSender</span> <span class="p">=</span> <span class="k">new</span> <span class="n">NotificationSender</span><span class="p">(</span><span class="s">&quot;tcp://localhost:5556&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">customerSender</span> <span class="p">=</span> <span class="k">new</span> <span class="n">NotificationSender</span><span class="p">(</span><span class="s">&quot;tcp://localhost:5557&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">var</span> <span class="n">obs</span> <span class="p">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">FromEventPattern</span><span class="p">&lt;</span><span class="n">Tuple</span><span class="p">&lt;</span><span class="n">Guid</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;&gt;(</span><span class="n">pub</span><span class="p">,</span> <span class="s">&quot;ChangeRecieved&quot;</span><span class="p">).</span><span class="n">Select</span><span class="p">(</span><span class="n">ep</span> <span class="p">=&gt;</span> <span class="n">ep</span><span class="p">.</span><span class="n">EventArgs</span><span class="p">);</span>
</span><span class='line'>                <span class="n">obs</span><span class="p">.</span><span class="n">Subscribe</span><span class="p">&lt;</span><span class="n">Tuple</span><span class="p">&lt;</span><span class="n">Guid</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;&gt;(</span><span class="n">Handler</span><span class="p">);</span>
</span><span class='line'>                <span class="n">obs</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item1</span><span class="p">).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">guid</span> <span class="p">=&gt;</span> <span class="n">customerSender</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">guid</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">//var err = Observable.FromEventPattern&lt;Exception&gt;(pub, &quot;OnError&quot;).Select(ep =&gt; ep.EventArgs);</span>
</span><span class='line'>                <span class="c1">//err.Subscribe&lt;Exception&gt;(Error);</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">pub</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Closing down.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>None of the teams bothered with helper methods or anything refined like that &ndash; they only had about 40 minutes to produce anything it all. So, in each of the following cases, replace line 50 in the original code block with the submitted solution.</p>

<h3>Attempt 1:</h3>

<p>Simple, readable and minimalistic, our first contenders went with this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">obs</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">t</span><span class="p">=&gt;</span><span class="n">t</span><span class="p">.</span><span class="n">Item2</span> <span class="p">==</span> <span class="s">&quot;StaffOnly!&quot;</span> <span class="p">||</span> <span class="n">t</span><span class="p">.</span><span class="n">Item2</span> <span class="p">==</span> <span class="s">&quot;Change!&quot;</span><span class="p">).</span><span class="n">Select</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item1</span><span class="p">).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">guid</span> <span class="p">=&gt;</span> <span class="n">staffSender</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">guid</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">obs</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">t</span><span class="p">=&gt;</span><span class="n">t</span><span class="p">.</span><span class="n">Item2</span> <span class="p">==</span> <span class="s">&quot;CustomerOnly!&quot;</span> <span class="p">||</span> <span class="n">t</span><span class="p">.</span><span class="n">Item2</span> <span class="p">==</span> <span class="s">&quot;Change!&quot;</span><span class="p">).</span><span class="n">Delay</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">)).</span><span class="n">Select</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item1</span><span class="p">).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">guid</span> <span class="p">=&gt;</span> <span class="n">customerSender</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">guid</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, staff are notified immediately on either a <code>StaffOnly!</code> or <code>Change!</code> event &ndash; while customer events are delayed 5 seconds.</p>

<h3>Attempt 2:</h3>

<p>Group 2 played with RX&rsquo;s <code>GroupBy</code> method, which creates an Observable of Observables &ndash; each one of which only gets events that match the partitioning function.</p>

<p>Interesting stuff, although probably slightly overkill with 4 pre-known options.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">obs</span><span class="p">.</span><span class="n">GroupBy</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Item2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">o</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Item2</span> <span class="p">==</span> <span class="s">&quot;StaffOnly!&quot;</span> <span class="p">||</span> <span class="n">x</span><span class="p">.</span><span class="n">Item2</span> <span class="p">==</span> <span class="s">&quot;Change!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Item1</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">staffSender</span><span class="p">.</span><span class="n">Send</span><span class="p">);</span>
</span><span class='line'>        <span class="n">o</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Item2</span> <span class="p">==</span> <span class="s">&quot;CustomerOnly!&quot;</span> <span class="p">||</span> <span class="n">x</span><span class="p">.</span><span class="n">Item2</span> <span class="p">==</span> <span class="s">&quot;Change!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item1</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Delay</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">6</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">customerSender</span><span class="p">.</span><span class="n">Send</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>It also still does the job fine.</p>

<h3>Attempt 3:</h3>

<p>With high points on pragmatism and clarity, group 3 just went with the absolute simplest solution. Just have 4 separate observables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">obs</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item2</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="s">&quot;StaffOnly!&quot;</span><span class="p">)).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">staffOnly</span> <span class="p">=&gt;</span> <span class="n">staffSender</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">staffOnly</span><span class="p">.</span><span class="n">Item1</span><span class="p">));</span>
</span><span class='line'><span class="n">obs</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item2</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="s">&quot;CustomerOnly!&quot;</span><span class="p">)).</span><span class="n">Delay</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">)).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">customerOnly</span> <span class="p">=&gt;</span> <span class="n">customerSender</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">customerOnly</span><span class="p">.</span><span class="n">Item1</span><span class="p">));</span>
</span><span class='line'><span class="n">obs</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item2</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="s">&quot;Change!&quot;</span><span class="p">)).</span><span class="n">Delay</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">)).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">customerSender</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">Item1</span><span class="p">));</span>
</span><span class='line'><span class="n">obs</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item2</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="s">&quot;Change!&quot;</span><span class="p">)).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">staffSender</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">Item1</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s obviously much more to RX than you can learn in a single 1 hour practical session, but hopefully this gives you a feel and (if you followed along) takes away some of the fear of trying out this useful part of the .net ecosystem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring Reactive Extensions]]></title>
    <link href="http://blog.mavnn.co.uk/exploring-reactive-extensions/"/>
    <updated>2015-02-09T13:01:36+00:00</updated>
    <id>http://blog.mavnn.co.uk/exploring-reactive-extensions</id>
    <content type="html"><![CDATA[<p>The <a href="http://rx.codeplex.com/">Reactive Extensions</a> project is &ldquo;a library for composing asynchronous and event-based programs using observable sequences and LINQ-style query operators&rdquo;. That doesn&rsquo;t immediately give most people an intuitive grasp of exactly what it is &ndash; but it&rsquo;s a useful addition to the toolset so we put together a practical for people to experiment with.</p>

<p>At it&rsquo;s simplest, RX (as it&rsquo;s called&hellip; the Nuget package you&rsquo;re looking for is <a href="https://www.nuget.org/packages/Rx-Main">Rx-Main</a>, obviously!) allows you to create an <code>IObservable</code> object which you can then&hellip; erm&hellip; observe.</p>

<!--more-->


<p><code>IObservable</code> objects can, in turn, be observed by other <code>IObservable</code>s via a series of extension methods, and they will react when the original observable publishes a change. Hence &ldquo;Reactive Extensions&rdquo;. These extensions include all the normal Linq like things you&rsquo;ve come to know and expect in .net (<code>.Where</code> for filtering, <code>.Select</code> for mapping, etc) and also a selection of time based extensions which are the real meat of the reactive programming model. Things like <code>.Delay</code>, which
holds changes for a period of time before passing them on to subscribers. Or <code>.Throttle</code>, which throttles how quickly events can be passed through, and throws away events that are occurring too rapidly.</p>

<p>The best explanation of the various methods I&rsquo;ve seen is actually the <a href="http://reactivex.io/RxJava/javadoc/">reactivex.io javadocs</a>, which have diagram pictorially depicting the effect of each method. Although it&rsquo;s for Java, the method names are the same. For example, the <a href="http://reactivex.io/RxJava/javadoc/">sample method</a> comes with the following diagram:</p>

<p><img src="https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.s.png" alt="Sample method image" /></p>

<p>It shows quite nicely that sample will pick the last event of each interval (if there are any), and publish on only that.</p>

<p>The final part of the puzzle, once you&rsquo;ve done all your filtering, mapping, delaying and sampling is to hook up a Publish callback on your final <code>IObservable</code>.</p>

<p>Let&rsquo;s get to the example code!</p>

<h3>The scenario</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Reactive</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Reactive.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">ReactiveTester.Shared</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">EventTester</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Handler</span><span class="p">(</span><span class="n">Tuple</span><span class="p">&lt;</span><span class="n">Guid</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">tuple</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0} - {1}&quot;</span><span class="p">,</span> <span class="n">tuple</span><span class="p">.</span><span class="n">Item1</span><span class="p">,</span> <span class="n">tuple</span><span class="p">.</span><span class="n">Item2</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Error</span><span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">err</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">OpenStandardError</span><span class="p">();</span>
</span><span class='line'>            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">writer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">StreamWriter</span><span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">Console</span><span class="p">.</span><span class="n">OutputEncoding</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">writer</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0}&quot;</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Nice docs (although Java): http://reactivex.io/RxJava/javadoc/rx/Observable.html</span>
</span><span class='line'>            <span class="c1">// The challenge:</span>
</span><span class='line'>            <span class="c1">// The ChangeReceiver will fire an event every time a change is received.</span>
</span><span class='line'>            <span class="c1">// Events can be:</span>
</span><span class='line'>            <span class="c1">// &quot;Ignore!&quot; -&gt; don&#39;t do anything</span>
</span><span class='line'>            <span class="c1">// &quot;Change!&quot; -&gt; send notification to staff and customers</span>
</span><span class='line'>            <span class="c1">// &quot;StaffOnly!&quot; -&gt; send notification to staff</span>
</span><span class='line'>            <span class="c1">// &quot;CustomerOnly!&quot; -&gt; send notification to customer only</span>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="c1">// Staff must be notified within 3 seconds.</span>
</span><span class='line'>            <span class="c1">// Customers most be notified between 5 and 7 seconds.</span>
</span><span class='line'>            <span class="n">using</span><span class="p">(</span><span class="kt">var</span> <span class="n">pub</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ChangeReceiver</span><span class="p">(</span><span class="s">&quot;tcp://*:5555&quot;</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Listening...&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">var</span> <span class="n">staffSender</span> <span class="p">=</span> <span class="k">new</span> <span class="n">NotificationSender</span><span class="p">(</span><span class="s">&quot;tcp://localhost:5556&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">customerSender</span> <span class="p">=</span> <span class="k">new</span> <span class="n">NotificationSender</span><span class="p">(</span><span class="s">&quot;tcp://localhost:5557&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">var</span> <span class="n">obs</span> <span class="p">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">FromEventPattern</span><span class="p">&lt;</span><span class="n">Tuple</span><span class="p">&lt;</span><span class="n">Guid</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;&gt;(</span><span class="n">pub</span><span class="p">,</span> <span class="s">&quot;ChangeRecieved&quot;</span><span class="p">).</span><span class="n">Select</span><span class="p">(</span><span class="n">ep</span> <span class="p">=&gt;</span> <span class="n">ep</span><span class="p">.</span><span class="n">EventArgs</span><span class="p">);</span>
</span><span class='line'>                <span class="n">obs</span><span class="p">.</span><span class="n">Subscribe</span><span class="p">&lt;</span><span class="n">Tuple</span><span class="p">&lt;</span><span class="n">Guid</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;&gt;(</span><span class="n">Handler</span><span class="p">);</span>
</span><span class='line'>                <span class="n">obs</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Item1</span><span class="p">).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">guid</span> <span class="p">=&gt;</span> <span class="n">customerSender</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">guid</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">//var err = Observable.FromEventPattern&lt;Exception&gt;(pub, &quot;OnError&quot;).Select(ep =&gt; ep.EventArgs);</span>
</span><span class='line'>                <span class="c1">//err.Subscribe&lt;Exception&gt;(Error);</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">pub</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Closing down.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The challenge was to complete the C# program above.</p>

<p>Want to follow along at home? The <a href="https://github.com/mavnn/RX-Practical">example code is on github</a>. Mind out &ndash; it&rsquo;s a bit big, as I included all of the binaries to get people going faster. The file in question is in the <code>EventTester</code> project as <code>Program.cs</code>.</p>

<p>The other program in the project (<code>ReactiveTester</code>) is test server. Right click on the solution, &ldquo;Set StartUp projects&rdquo; to run both on start up and hit <code>F5</code>. You should get two consoles pop up, something like this:</p>

<p><img src="http://blog.mavnn.co.uk/images/Reactive1.PNG" alt="/images/Reactive1.PNG" /></p>

<p>What&rsquo;s going on here? Well, as company <a href="http://15below.com">15below</a> deal with travel passenger communications, so the example stays close to home. The &ldquo;server&rdquo; (ReactiveTester, on the right) is masquerading as both an IROP (irregular operations, i.e. your flight has been cancelled due to insufficient chicken sarnies) system and as the staff and travellers who need to be told about events that are happening.</p>

<p>We&rsquo;re skipping any business logic identifying event types here, so for our purposes there are 4 types of events the system can issue.</p>

<ul>
<li>&ldquo;Ignore!&rdquo; &ndash;> we don&rsquo;t care about these</li>
<li>&ldquo;Change!&rdquo; &ndash;> both staff and travellers should be told about these</li>
<li>&ldquo;StaffOnly!&rdquo; &ndash;> only staff need to know about these ones</li>
<li>&ldquo;CustomerOnly!&rdquo; &ndash;> staff don&rsquo;t care about these, only tell the customer</li>
</ul>


<p>Our C# program then has a <code>ChangeReceiver</code> type that fires an event when a change is received, and a <code>NotificationSender</code> type it can use to send notifications out with. In reality, these go back to <code>ReactiveTester</code> that will then tell you if the notification arrived within the allowed window for either customer or staff.</p>

<p>The practical kicked off with the code at the state above. As you can see at line 48 we&rsquo;ve hooked up an observable object to the ChangeReceiver&rsquo;s ChangeReceived event &ndash; now we can observe events. We&rsquo;ve then hooked up a subscriber that fires the <code>Handler</code> method (line 14) which prints all changes to the command line. And a second subscriber that first maps the identifier/message tuple to the identifier and then sends a customer notification.</p>

<p>But wait&hellip;! Our test server keeps on saying &ldquo;Customer: early&rdquo;? And &ldquo;No guid xxx found&rdquo;? What gives?</p>

<p>Well&hellip; most travel companies are very keen for their staff to know about service alterations before customers. So the requirements we&rsquo;ve been given are that staff should be notified within 3 seconds &ndash; but customers only between 5 and 7 seconds. (In real life, these timings would probably be in minutes, obviously).</p>

<p>And the missing guid warnings are because the customers only care about some of the event types (see above). And, of course, the staff aren&rsquo;t getting any notifications at all, so their always complaining about them being late.</p>

<p>Your mission, should you choose to accept it: make everyone happy!</p>

<p>We had 3 teams take up the challenge; I&rsquo;ve posted their solutions in <a href="http://blog.mavnn.co.uk/rx-solutions/">a separate solutions post</a> to avoid accidental spoilers :)</p>

<p>P.S. A couple of people were interested in how the server worked. It&rsquo;s my very first attempt at writing both <a href="https://github.com/Hopac/Hopac">Hopac</a> and <a href="https://github.com/zeromq/fszmq">fszmq</a> (an F# zeromq wrapper library). I&rsquo;m hugely impressed by both, but wouldn&rsquo;t recommend my code in that repository as an introduction to either!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persistent Data Structures]]></title>
    <link href="http://blog.mavnn.co.uk/persistent-data-structures/"/>
    <updated>2015-02-02T15:36:51+00:00</updated>
    <id>http://blog.mavnn.co.uk/persistent-data-structures</id>
    <content type="html"><![CDATA[<p>In last week&rsquo;s <a href="http://blog.mavnn.co.uk/keeping-up-with-the-latest-hammer/">Developer Education session</a> at <a href="http://15below.com">15below</a> we had a look at immutable and persistent data structures, and why you&rsquo;d want to use them.</p>

<blockquote><p>TL;DR version: are you writing performance critical, real time code? Do you have less memory available than a low end smart phone? No?</p>

<p>Use immutable data types everywhere you can.</p></blockquote>

<p>The session was inspired by <a href="https://twitter.com/ScottWlaschin">Scott Wlaschin</a>&rsquo;s excellent <a href="http://fsharpforfunandprofit.com/posts/is-your-language-unreasonable/">is your programming language unreasonable?</a> post. If you haven&rsquo;t read it yet, go and do so &ndash; it&rsquo;s much better than the rest of this post, and you can always come back here later if you remember.</p>

<p>One of the points that Scott raises is that code written with mutable data structures (ones that you can change after they&rsquo;ve been created) is very hard to reason about. In the very literal sense of working out the reason why things happen.</p>

<!-- more -->


<p>So we kicked off with a couple of examples of the dangers of mutability. Consider the following C# code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">mercurial</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="p">{</span> <span class="s">&quot;Bob&quot;</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">DoWork</span><span class="p">(</span><span class="n">mercurial</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mercurial</span><span class="p">.</span><span class="n">First</span><span class="p">()</span> <span class="p">==</span> <span class="s">&quot;Bob&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Yay! We have Bob!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">DoSomeOtherWork</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// Actually get around to doing some work.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mercurial</span><span class="p">.</span><span class="n">First</span><span class="p">()</span> <span class="p">==</span> <span class="s">&quot;Bob&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Success&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Oops, I updated {0}&#39;s record by mistake.&quot;</span><span class="p">,</span> <span class="n">mercurial</span><span class="p">.</span><span class="n">First</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Does it update Bob&rsquo;s record, or someone else&rsquo;s? Well &ndash; this is Scott&rsquo;s point. We&rsquo;ve passed the mutable <code>mercurial</code> object (here a <code>List</code>, but it could be anything mutable) into a function (<code>DoWork</code>), and now we don&rsquo;t know what will be done to it. Even if we check that it has the value we were expecting (line 6) there&rsquo;s no guarantee that it won&rsquo;t be changed under our nose. Which in fact, it is, because the rest of the code looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">DoSomeOtherWork</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">System</span><span class="p">.</span><span class="n">Threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">500</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="k">async</span> <span class="k">void</span> <span class="nf">DoWork</span><span class="p">(</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Mercurial</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="n">Immutable</span><span class="p">.</span><span class="n">Thing</span><span class="p">(</span><span class="s">&quot;Hello world&quot;</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="n">Delay</span><span class="p">(</span><span class="m">100</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Mercurial</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Mercurial</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Fred&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This example is clearly contrived &ndash; but these kinds of bugs crop up in code a lot, and it doesn&rsquo;t even need to be asynchronous for it to happen.</p>

<p>We then discussed equality, and the fact that it can be very hard to decide what equality means for a mutable object. Is a customer object the same as another customer object because they both have the same Id? Because they&rsquo;re both the same object in memory? Because they have the same value in all of their fields? What happens if one of the fields is changed? Overriding equality in .net <a href="http://visualstudiomagazine.com/articles/2011/02/01/equality-in-net.aspx">is not trivial</a>. Edit: found a
better article on the subject of <a href="http://www.aaronstannard.com/overriding-equality-in-dotnet/">C# equality</a> by Aaron Stannard.</p>

<p>Immutable objects cannot be changed, which means that they are nearly always defined as having value based equality. If all of the fields are equal, the object is equal &ndash; and it can&rsquo;t change, so you don&rsquo;t have to worry about it shifting under you. This is such a useful property (especially if you&rsquo;re loading data from another source that you want to run comparisons on) that we&rsquo;ve even had occasions here where we&rsquo;ve considered implementing our data types as <a href="https://msdn.microsoft.com/en-us/library/dd233184.aspx">F# records</a> even when writing C# services.</p>

<p>For example, you can define an F# record like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Yes, this is the entire file</span>
</span><span class='line'><span class="k">module</span> <span class="nc">Immutable</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Thing</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="nc">One</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>        <span class="nc">Two</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then use it from C# like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// You do need to reference the project with Thing in</span>
</span><span class='line'><span class="k">static</span> <span class="kt">bool</span> <span class="nf">UseRecordTypeFromCSharp</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">myThing</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Immutable</span><span class="p">.</span><span class="n">Thing</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="m">11</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">myThing2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Immutable</span><span class="p">.</span><span class="n">Thing</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="m">11</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">myThing</span> <span class="p">==</span> <span class="n">myThing2</span><span class="p">;</span> <span class="c1">// Always returns true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If all you need is an immutable collection, rather than an immutable
object with nice value based properties then you don&rsquo;t even need to
leave the comfort of your C# window. Microsoft themselves have bought
into the concept of immutable data structures sufficiently to release
an <a href="https://msdn.microsoft.com/en-us/library/dn385366%28v=vs.110%29.aspx">Immutable Collections</a> library.</p>

<h3>But what about the memory? Think of the RAM, the poor RAM!</h3>

<p>We also discussed the downsides of immutable data types. There are two concerns which are raised most frequently. The first is performance &ndash; in .net, using immutable data structures and then doing a lot of transforms on the data will create a lot of objects. This can have a significant effect in very performance critical areas of your code. This is a valid concern where performance is paramount, and the normal way around this is to wrap a private mutable object (or raw array, for
that matter) in a function that does all of your heavy manipulation. In that way you can take advantage of the speed of imperative coding techniques whilst keeping their scope small enough to reason about the effects.</p>

<p>Of course, even if <strong>speed</strong> isn&rsquo;t of paramount importance &ndash; what about <strong>memory</strong>? After all, these allocations must be adding up on the memory side of things as well, no?</p>

<p>Well, not as much as you might think, for two reasons. One is that if your code is asynchronous, you&rsquo;re almost certainly taking copies of your mutable data structures all over the place anyway to guarantee thread safety. Well, either that or you&rsquo;re taking a lot of locks, and you&rsquo;re back into performance issues.</p>

<p>The second, and much more interesting, reason is that a very bright guy called Chris Okasaki realised back in 1996 (despite the recent surge of interest in functional programming, it&rsquo;s not new&hellip;) that you can take advantage of the fact that an object is immutable to avoid copying all of it when a new, similar object is required.</p>

<p>For example, if you add a new object to the end of an immutable list, the new list you get back doesn&rsquo;t need to be a complete copy &ndash; it can just be the single new item with a pointer back to the original list. To the person using the list, it appears to be a three item list and they are none the wiser. Because it&rsquo;s immutable, the first two values never change, so it&rsquo;s never a concern to you whether your list is a completely new one, or a &ldquo;pointer&rdquo; list. Okasaki called these data
types &ldquo;persistent&rdquo; data types as they &ldquo;persist&rdquo; a previous version of themselves when &ldquo;modified&rdquo;. You can read more about them in a <a href="https://en.wikipedia.org/wiki/Persistent_data_structure">surprisingly complete wikipedia article</a>.</p>

<p>In .net land, both the F# immutable records and collections, and the <code>System.Collections.Immutable</code> library from Microsoft mentioned above are persistent data types. So unless you&rsquo;re extremely memory constrained, you should be good to go.</p>

<p>And there you have it. An introduction to immutable data types: officially approved for use almost everywhere by your local Technical Architect.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Difficult vs Impossible]]></title>
    <link href="http://blog.mavnn.co.uk/difficult-vs-impossible/"/>
    <updated>2015-01-20T15:40:57+00:00</updated>
    <id>http://blog.mavnn.co.uk/difficult-vs-impossible</id>
    <content type="html"><![CDATA[<p>Although <a href="http://blog.mavnn.co.uk/keeping-up-with-the-latest-hammer/">programming is young</a> and we often don&rsquo;t know much about the &ldquo;best&rdquo; way to do things, we&rsquo;re not totally shooting in the dark.</p>

<p>Every so often, you come up against problems that people have investigated in detail, and given programming&rsquo;s mathematical roots this even leads on occasion to a proof about a certain type of system. It would be impossible to keep up with all of the research; but there are a few places where it&rsquo;s very helpful to know about general results.</p>

<p>I&rsquo;m going to claim here that it makes a big difference to how you handle feature requests both as a developer, and as a business, when you&rsquo;re asked to produce systems which are actually impossible.</p>

<p>Let&rsquo;s take the one that comes up most often in my experience&hellip; Consistency in distributed systems.</p>

<p>So &ndash; this comes up the moment that somebody (customer, internal stakeholder, whatever) declares that having just a single service running on a single server is just not reliable enough. At some point, something will go wrong &ndash; and when it does, the service is a SPOF (single point of failure) and your processes which use it stop.</p>

<blockquote><p>Unacceptable!</p>

<p><cite>Every product owner, ever</cite></p></blockquote>

<p>&ldquo;We must have a cluster!&rdquo; the service developer is told. &ldquo;Load balancing!&rdquo;</p>

<p>&ldquo;Hmmmm.&rdquo; says the developer to themselves. &ldquo;Distributed computing. That can get a little tricky. Let&rsquo;s see if I can nail down the actual requirements a bit more.&rdquo;</p>

<p>The Q&amp;A session goes something a bit like this:</p>

<ul>
<li>Dev: So&hellip; Let&rsquo;s start easy and assume two nodes for now. How important is it that <strong>every</strong> write is replicated to both nodes before it&rsquo;s readable?</li>
<li>PO: Critical!</li>
<li>Dev: And&hellip; How important is it that the system stays available when one node is down?</li>
<li>PO: Critical!</li>
<li>Dev <em>pausing</em>: Ah&hellip; We won&rsquo;t be able to replicate writes at that point &ndash; the second node is down.</li>
<li>PO: Oh. Right, makes sense &ndash; read availability is critical though.</li>
<li>Dev: It would make life easier if writes can only be made to one of the two nodes &ndash; let&rsquo;s call it master. That OK?</li>
<li>PO <em>thinks for while</em>: OK. It&rsquo;s not ideal, but we&rsquo;ve got a deadline. Go for it.</li>
<li>Dev: How about consistency &ndash; if Bob writes to the first node, and then immediately reads from the second, is it okay if he gets slightly out of date data?</li>
<li>PO: Absolutely not.</li>
<li>Dev: OK. Give me a moment.</li>
<li>PO: Just a moment &ndash; one last thing! This has to be super user friendly to use. So make sure it&rsquo;s completely transparent to the client consumer that they&rsquo;re talking to a cluster.</li>
<li>Dev: &hellip;right.</li>
</ul>


<p>Little known to our PO, their requirements are at this point strictly impossible. The impossibility here is a particular edge case; what happens if the &ldquo;master&rdquo; node receives a write, sends it to the &ldquo;slave&rdquo; to replicate, but then <strong>never gets a response</strong>. What does it do? Return an error to the client? Well &ndash; no. If the slave comes back up, and the replication had been successful before the slave became unavailable, then we&rsquo;d have an inconsistent history between slave and master.</p>

<p>Does it return a success? Well &ndash; no. In that case, we&rsquo;re violating our restriction that every write is replicated before it&rsquo;s considered available to read.</p>

<p>So it has to return something else &ndash; a &ldquo;pending&rdquo;, &ldquo;this write will probably be replicated some day&rdquo; response. But that violates the restriction that it shouldn&rsquo;t add any complexity to the consumer. We now have a corner case that the server can&rsquo;t handle, so it has to be passed back to the client.</p>

<p>After this first write, we do have a little bit more flexibility &ndash; we can stop accepting new writes until we&rsquo;ve heard from the slave that it&rsquo;s back up and available and just throw an error. But we&rsquo;re still left with that first, awkward write to deal with. (Perceptive readers will also realise that this set up actually leaves us less reliable for writes than a single node solution &ndash; proofs left as an exercise to the reader).</p>

<p>In reality, this impossibility is a subset of the more widely know CAP theorem: a distributed system cannot be always &ldquo;Consistent&rdquo; and always &ldquo;Available&rdquo; and still behave predictably under network &ldquo;Partitions&rdquo;. The three terms in CAP have pretty specific meanings &ndash; check out a nice introduction at <a href="http://codahale.com/you-cant-sacrifice-partition-tolerance/">You Can&rsquo;t Sacrifice Partition Tolerance</a>.</p>

<p>This is the point where reality diverges, Sliding Doors style, depending on what the developer does next. The branches are numerous, but let&rsquo;s have a look at some of the most common. As an aside, I&rsquo;ve fallen into pretty much all of these categories at different points.</p>

<h3>Option 1: The developer doesn&rsquo;t know this is impossible either</h3>

<p>At this point, we end up with a response that goes something along the lines of: &ldquo;Well &ndash; I can do you a temporary solution where we return a pending result in situation x. Bit of a pain; put it on the technical debt register, and we&rsquo;ll sort it out when we have a bit more time.&rdquo;</p>

<p>Or: &ldquo;I can&rsquo;t think of a completely fool proof solution right now; how about in situation x we return a failure for now. It&rsquo;ll be a bit confusing when a user gets told the write failed, and then it shows up later &ndash; but we&rsquo;ll get it sorted before the final release.&rdquo;</p>

<p>Neither of these solutions are wrong, as such: but the building of impossible expectations will inevitably sour the relationship between product owner and developer, and can cause serious business issues if an external customer has been promised impossible results. There may even be direct financial penalty clauses involved.</p>

<h3>Option 2: The developer knows it&rsquo;s impossible, and thinks the product owner does too</h3>

<p>Here the developer <strong>says</strong> &ldquo;Well, I can return a pending result&hellip;&rdquo; and the PO adds mentally &ldquo;&hellip;which is a OK stop gap measure, I&rsquo;ll schedule some time to clean it up later.&rdquo;</p>

<p>This leads to pretty much the same outcomes as &ldquo;Option 1&rdquo;, except the developer gets an unhealthy injection of smug self-righteousness for knowing that he never promised the impossible. In general, this is not helpful.</p>

<h3>Option 3: The developer knows it&rsquo;s impossible, tries to explain&hellip; And fails</h3>

<p>This is very similar in outcome to Options 1 &amp; 2. Just more frustrating to the developer, especially if the product owner then claims the developer is &ldquo;negative&rdquo; or &ldquo;incompetent&rdquo;.</p>

<h3>Option 4: The developer knows it&rsquo;s impossible and explains to the product owner how and why</h3>

<p>This is hard on two levels. On the first: the proof of why something can&rsquo;t be done might be genuinely difficult to understand.  On the second: it can be hard to work out if you&rsquo;ve avoided Option 3, or if people are just nodding and smiling.</p>

<p>We nearly hit one of these scenarios this week; fortunately our QA department spotted the mismatch in expectations (yay QA!). Where things got a bit strange is that it was raised as Option 3: &ldquo;hey! Can we put a bit more effort in, and make this nicer to use?&rdquo; At the QAT phase this much easier to deal with though &ndash; you don&rsquo;t have angry customers, commercial agreements and these other bits hanging over your heads (well &ndash; not if you&rsquo;re writing an internal service anyway).</p>

<h2>What can we take away from all of this?</h2>

<p>A few things.</p>

<h3>Developers</h3>

<ol>
<li>As a developer, you must know the basics of the domain you&rsquo;re working in. Keep on learning, folks.</li>
<li>You must be able to communicate as a developer. A lot of developers are introverts, myself included. This is not an excuse. Introvert means that you can&rsquo;t recharge around other people, not that you can&rsquo;t talk to them.</li>
<li>You cannot remove your developers from your customer communications, or completely separate commercial proposals and technical evaluation. You must have technical input into your business process, because sometimes its isn&rsquo;t a question of how much time you spend, how well you design or how skilled a developer you assign to the problem: it might just be impossible.</li>
</ol>


<h3>&ldquo;Product Owners&rdquo; (whatever your actual job title is)</h3>

<ol>
<li>Listen to your developers, and pay attention to the wording. If they say something is impossible (not hard, not delayed) check you understand why.</li>
<li>Be careful how you define the business problem to your developers. You may end up specifying a problem that is unsolvable if you end up layering up too many technical restrictions &ndash; while your developer may be able to suggest something that meets the business criteria without falling foul of technical (or more importantly mathematical) limitations to what is possible.</li>
<li>If you place a technical requirement (&ldquo;it must be clustered &ndash; no single points of failure!&rdquo;) make sure you understand the technical trade offs that you are imposing. This may take a long time. Alternatively, and preferably, rephrase your requirement to be your actual business requirement (&ldquo;We promised 98% uptime &ndash; what&rsquo;s your design to make sure it happens?&rdquo;).</li>
<li>You must be able and willing to say &ldquo;no&rdquo; to a customer when they ask for something impossible. You can offer alternatives, work arounds &ndash; but don&rsquo;t promise the impossible. It will come back, and it will hurt you.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping Up With the Latest Hammer]]></title>
    <link href="http://blog.mavnn.co.uk/keeping-up-with-the-latest-hammer/"/>
    <updated>2014-12-22T12:07:02+00:00</updated>
    <id>http://blog.mavnn.co.uk/keeping-up-with-the-latest-hammer</id>
    <content type="html"><![CDATA[<h2>Making Sure Your Developers Keep Developing</h2>

<p>Software development is a strange profession, mostly because it&rsquo;s so young and because the tools are changing so fast. I&rsquo;ve not been an established enough craftsman in any other trade to know whether other professions are moving as quickly these days, but at least in my imagination once a carpenter learns to use a hammer, it doesn&rsquo;t get discontinued after 2 years and the hammer taken off the market. Or a new hammer released that hammers nails ten times as fast, but has a different
shaped handle and you have to hammer sideways instead of down.</p>

<p>We don&rsquo;t even seem to be able to decide whether it&rsquo;s a craft or a science. You can earn Computer Science degrees &ndash; but then well known software professionals choose titles like <a href="https://twitter.com/unclebobmartin">Software Craftsman</a>.</p>

<p>Despite all of our claims of best practice and shared knowledge, it largely boils down to: developers don&rsquo;t know what they&rsquo;re doing yet. We&rsquo;re a new profession, and we&rsquo;re still learning &ndash; not just as individuals, but as a profession.</p>

<p>This means that both as an individual developers, and as software houses &ndash; if we stop learning, we sink. The competitive advantage of keeping up with what&rsquo;s happening in the industry so outweighs the cost of doing the research that it would be foolish not to. Because while we might not yet know the <em>right</em> way to do things, we&rsquo;re still definitely finding <em>better</em> ways to do things.</p>

<p>So: how do we do keep up to date, as <a href="http://blog.mavnn.co.uk/keeping-up-with-the-latest-hammer/#individuals">individuals</a> and as <a href="http://blog.mavnn.co.uk/keeping-up-with-the-latest-hammer/#companies">companies</a>?</p>

<!-- More -->


<h2><a name="individuals"></a> As individuals</h2>

<h3>Books and Blogs</h3>

<p>Firstly of course, you need to read. Technical books are still excellent when you need a deep dive into a specific subject, but in general a lot of the information is now becoming available in blog posts which seem to be developers main method of swapping information, ideas, and &ldquo;best practice&rdquo;. In general, if you need a deep dive into an established technology or you need to read up on a subject at a conceptual level (Test Driven Development, Functional Programming, etc.)
then a book can be very helpful. If you&rsquo;re looking into something new, or very specific (AngularJS, a particular unit testing framework) then it&rsquo;s time to hit google and read up on some blog posts. Otherwise you&rsquo;ll just have a stack of dead trees to be taking to the recycling center every six months.</p>

<h3>Conferences</h3>

<p>Sometimes, there&rsquo;s nothing like seeing somebody do something. Or hearing from someone who&rsquo;s actually done the thing you&rsquo;re thinking of doing.</p>

<p>Conferences come into their own in these situations; large conferences can be nice because of the big name speakers and the wide range of subjects but in my experience small specialist conferences have two big advantages. They give you much more access to the speakers outside the sessions, and they tend to be much cheaper!</p>

<p>Speaking at conferences is a great way to attend them cheaply, and is also a great way of ending up at things like speaker&rsquo;s dinners and making some contacts as well as learning the particular skill you went for. If you or your company is doing something well &ndash; pretty much anything well &ndash; get yourself out there. It provides great opportunities for you, and other people&rsquo;s gratefulness is a currency you can&rsquo;t buy with money.</p>

<p>And&hellip; ssssh, don&rsquo;t tell everyone: it&rsquo;s actually really easy to get speaking gigs at specialist conferences if you know about a relevant specialist subject. Why? Because people like you don&rsquo;t bother applying, and so the organisers tend to be a bit desperate. Yes, you&rsquo;ll need to do some public speaking &ndash; but that&rsquo;s not exactly a bad skill to have under your belt anyway, is it now?</p>

<h3>Research Papers</h3>

<p>Keeping up with computer science research would be a more than full time job in its own right &ndash; but the research that is turning out to have practical applications is often referenced in talks and blog posts by the people who are basing projects off it. If the project looks interesting to you, don&rsquo;t be afraid to go back and read the original research papers! There&rsquo;s generally more in there than the current project needs which might help you even further &ndash; and they are often
surprisingly readable.</p>

<h3>Training Courses</h3>

<p>And for some skills, you just need the hands on training. It can be expensive, but on occasion its worth it to pay your money and actually be taught to do something.</p>

<h3>Discernment</h3>

<p>It&rsquo;s not a word that comes up very often, but discernment is critical to software developers. Remember what I was saying above about it being a new profession? Well, one of the side effects of that is we&rsquo;re still learning from our mistakes and we&rsquo;re still repeating them. Not everything that people say is new is actually new &ndash; try and check back in the (relatively short) history of computer science to see if it&rsquo;s already been tried and failed.</p>

<p>A classic example of this is distributed computing; making lots of computers do lots of things at the same time is actually pretty hard to get right. A lot of the &ldquo;new&rdquo; solutions to the problem you see being suggested are actually ideas that people have already tried and do not work; if you need to work with distributed systems it&rsquo;s worth doing enough background research to have a hope of spotting these issues.</p>

<p>This doesn&rsquo;t necessarily mean you have to be an expert on everything you consider touching. It does mean you&rsquo;ll have to do enough research to discover the people who <em>are</em> experts so that you can get well thought out feedback about the ideas you&rsquo;re considering using.</p>

<p>This extends even to things like choosing which blogs to follow. You won&rsquo;t be able to follow all of them, so if you can find a &ldquo;core&rdquo; of people whose opinion you value they can act as a pre-filter for you on interesting new ideas, with out you trying to track all of their sources independently.</p>

<h2><a name="companies"></a> As a Company</h2>

<p>This is all great &ndash; but all of these things give knowledge to an individual. How do you share the learning around?</p>

<p>Some of these things carry across directly, of course: you should have a conference budget. You should have a training budget, too &ndash; and you should almost certainly be providing in house training for your own in house tools and procedures.</p>

<p>But that only really helps for the things that people know they don&rsquo;t know; when they&rsquo;ve realised they&rsquo;ve hit a problem and they need some knowledge. How do you share the more nebulous things? No one is going to wake up one morning and realise that the problem they&rsquo;re currently tackling would be better solved by a functional programming technique if they don&rsquo;t know what functional programming <em>is</em>.</p>

<p><a href="https://mikehadlow.com">Mike Hadlow</a> came up with a solution for this years ago that he implemented at <a href="http://15below.com">15below</a> which we&rsquo;re still using.</p>

<p>His proposal was deceptive simple: one hour a week is spent on group &ldquo;Developer Education.&rdquo; Someone prepares a topic and promises to provide notes (or a recording) afterwards &ndash; everyone else just turns up. We call them DevEds, and they run every Friday morning at 9:00am.</p>

<p>It doesn&rsquo;t sound much, does it? But actually, it&rsquo;s had a huge impact in the company. And we keep on getting asked how we do it, and how it works, so I&rsquo;m going to try and explain!</p>

<h3>What subjects?</h3>

<p>We&rsquo;re not completely random in subject choices &ndash; but we are deliberately broad. Basically, the subjects fall into three main categories:</p>

<p>1) Communication of internal changes</p>

<p>A team releases a new service for our core product. A new internal code review process is put in place. For these kind of events, we use the DevEd as a vehicle for communication to developers within the company, making sure everyone is aware of the change and allowing people to ask questions. Sometimes we&rsquo;ll put a requirement on a DevEd of this type that at least one developer from each team needs to be there (DevEds are not compulsory &ndash; just highly recommended).</p>

<p>2) Things we could be using already</p>

<p>We use Microsoft&rsquo;s .net languages for development, so (for example) we run sessions on the new features in the latest version of C# each time we upgrade. These are things that developers can go back out into the office and use today; also in this category are things like open source libraries we&rsquo;re already using.</p>

<p>3) Potential new tools and general programming knowledge</p>

<p><a href="http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29">SOLID</a> programming. Why you shouldn&rsquo;t do thread management by hand. <a href="http://blog.mavnn.co.uk/property-checking-start-challenge/">Property based testing</a> (that link is a write up of an actual DevEd session, if you&rsquo;re interested). This is where we try and introduce people to ideas they should be aware of, introduce new tools and languages that we are considering using but aren&rsquo;t yet or try and teach people how to <em>think</em> about development rather than how to <em>do</em> development. We also
tend to throw some fairly odd ball things into this category to keep people thinking, and to avoid people only knowing about things within &ldquo;our expertise.&rdquo; For example, although we&rsquo;re a Windows .net programming house we&rsquo;ve run sessions on using Emacs and Vim. Why? Because a lot of programmers use these tools, and get a great deal of value from them. Which means they probably have things to teach us if we care to learn. And yes &ndash; this blog post was written in Vim!</p>

<p>The idea in this category is not normally that a person will come out of the session being able to use something straight away &ndash; but they should now be aware it exists, and know what to look up if they do need to use it.</p>

<h3>But I don&rsquo;t learn listening to lectures!</h3>

<p>Different people learn in different ways. So we try and teach in different ways: most of our sessions are live coding demos, but some are straight up presentations; others are white board round table discussions (thrown Lego pieces optional); and we&rsquo;re trying to build in more and more practical sessions as we go forward, with groups of two or three people (preferably from different teams) working together to explore the &lsquo;thing&rsquo; we&rsquo;re looking at.</p>

<h3>The benefits</h3>

<p>What does all this buy us?</p>

<p>Well: a few things. The benefits of having a built in internal comms session is a big benefit in it&rsquo;s own right. Breaking changes to our auto-deploy system can be announced up front in a format that has more impact than any email would ever had. We don&rsquo;t always have the luxury (or remember to use it!) but when we have, it&rsquo;s worked well.</p>

<p>For keeping people up to date on the technologies and techniques within the company, I count it as invaluable. For an old-ish code base, you&rsquo;ll find C# 5.0 async/await, F# code, LINQ usage in our core product&hellip; all the types of shiny new things that save bucket loads of time when you&rsquo;re coding, but a lot of &ldquo;enterprise&rdquo; development houses will tell you not to use in case &lsquo;not everyone can understand and maintain the code&rsquo;. For us, this is much less of a problem: if a DevEd has already happened, you&rsquo;ve
either been exposed to the concepts or you can look up the presenter and, hey presto, you have an expert to ask. If there hasn&rsquo;t been one, you just ask for it &ndash; and you&rsquo;re guaranteed to have a suitable expert to deliver the session (the author of the code in question).</p>

<p>The blue sky sessions sound the least practical, but I suspect they actually have the largest impact. As software houses, we tend to specialise: a particular programming language, a particular operating system, preferred libraries, preferred database server, the list goes on. On the one hand, this is good: you <em>must</em> be expert in the tools of your trade. On the other hand, this can be crippling: if you stop evaluating the new things that come along, you&rsquo;ll go out of date. This
causes two big problems: firstly, you&rsquo;re no longer using the best tools for the job. Secondly, the staff you want most will leave.</p>

<p>They will. The people who you really want building your code will be doing all of the things from the first half of this post <em>in their own time anyway</em>. That means they&rsquo;ll know that the grass is greener. That there&rsquo;s a better way to do things. That there&rsquo;s already a respected open source project that does the thing you&rsquo;ve asked them to create on a shoe string time and testing budget. They&rsquo;ll know, they&rsquo;ll skill up, and they&rsquo;ll leave. This doesn&rsquo;t mean you should always be using the
latest &ldquo;new and shiny&rdquo; just because it is &ldquo;new and shiny&rdquo; &ndash; but it does mean that if one of your developers comes to you and says &lsquo;there is a better way!&rsquo;, you really should listen and find out if there is. And then tell the rest of the developers, so they stay excited about staying too.</p>

<h3>Preparation time</h3>

<p>Ok, so if you&rsquo;re a manager this has probably all sounded great up until this point. I mean, an hour on Friday morning when the Developers are still normally rubbing the sleep out of their eyes anyway? Good deal!</p>

<p>Let&rsquo;s hit pause for a moment.</p>

<p>These sessions are something we take reasonably seriously; some of them get more prep than others, but I can safely say that a lot of them take a full working day between preparation and post session write up (or recording upload etc). That&rsquo;s a lot of time.</p>

<p>I&rsquo;ve had a lot of questions about how we make this work, and frankly the answer is mostly me. Not me, the individual person. But me, my role: having a person who has as a serious job priority internal technical training and communication. It&rsquo;s not my only responsibility, but it&rsquo;s up there on my list in a way that it isn&rsquo;t for our other developers. This means that I have a back up session planned most of the time for if an other developer has to drop doing a session because a
project is running late. I make sure (most of the time!) that there are a few future sessions planned in. I provide support for people who know a subject but aren&rsquo;t comfortable presenting to do their first sessions.</p>

<p>I do end up also delivering the majority of the sessions; I&rsquo;ve a fairly broad range of background knowledge and as I&rsquo;m not generally running on a project critical path I&rsquo;m the &ldquo;goto&rdquo; guy if no one else is available. But that&rsquo;s not the most important thing I provide: it&rsquo;s the ongoing push to make sure these sessions don&rsquo;t just happen this week, but that they keep on happening in the future. Which means I&rsquo;m not doing other things for the company.</p>

<p>So I suppose the final message here is: if you&rsquo;re in a company where this isn&rsquo;t happening, and you have time/resource allocation responsibilities&hellip; read the benefits section again and ask yourself how your company is meeting those needs. If you&rsquo;re a developer in a company where this kind of thing or an equivalent doesn&rsquo;t happen, you pretty much only have two choices: make it happen yourself with &ldquo;brown bag&rdquo; sessions and lunch breaks &ndash; being aware that you&rsquo;re basically training yourself, and
others, to be ready to leave. Or try and convince the decision makers that keeping the business up to date is worth it. I hope this post helps.</p>

<p>If you are already doing something: awesome! Tell us about it in the comments. We like what we&rsquo;ve got, but we&rsquo;re not above stealing better ideas.</p>

<h2>Appendix</h2>

<p>Whenever I get asked about this whole process over a conference beer, the follow up is always: what subjects have you covered?</p>

<p>In terms of what the output looks like, <a href="http://blog.mavnn.co.uk/blog/categories/15below/">this blog&rsquo;s achieves will give you a selection of DevEd write ups</a>.</p>

<p>More generally, here&rsquo;s a selection of session titles from the last few years (with purely internal communication subjects removed, obviously):</p>

<ul>
<li><p>GitFlow Intro</p></li>
<li><p>Database Normalisation</p></li>
<li><p>SQL Server Storage and IO</p></li>
<li><p>Error handling with Choice</p></li>
<li><p>Introduction to NodaTime And Humanizer</p></li>
<li><p>Text Editing with vim &amp; emacs</p></li>
<li><p>Functionally SOLID</p></li>
<li><p>Influx</p></li>
<li><p>WebSQL</p></li>
<li><p>Intro to Threading</p></li>
<li><p>FsUnit and TickSpec</p></li>
<li><p>Mobile apps using PhoneGap</p></li>
<li><p>Adaptive Programming to Reduce Config</p></li>
<li><p>What is a Reverse Proxy</p></li>
<li><p>Meet EmoteBot &ndash; C# Async and Await</p></li>
<li><p>SemVers and Nuget</p></li>
<li><p>AOP &ndash; Aspect Oriented Programming</p></li>
<li><p>How To Write Scalable Services</p></li>
<li><p>A refactoring example</p></li>
<li><p>DDD 2 &ndash; Applying Strategic Design</p></li>
<li><p>DDD Strategic Design</p></li>
<li><p>Introduction to F#</p></li>
<li><p>What is REST</p></li>
<li><p>The basics of TCP/IP</p></li>
<li><p>RabbitMQ</p></li>
<li><p>LINQ To Objects from scratch</p></li>
<li><p>Estimation game</p></li>
<li><p>Real world SRP</p></li>
<li><p>Approval Tests</p></li>
<li><p>Web API</p></li>
<li><p>Octopus and Teamcity</p></li>
<li><p>Solid</p></li>
<li><p>Safe Refactoring</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modelling Inheritance With Inheritance]]></title>
    <link href="http://blog.mavnn.co.uk/modelling-inheritance-with-inheritance/"/>
    <updated>2014-12-18T12:01:41+00:00</updated>
    <id>http://blog.mavnn.co.uk/modelling-inheritance-with-inheritance</id>
    <content type="html"><![CDATA[<blockquote><p>This post is part of the <a href="https://sergeytihon.wordpress.com/tag/fsadvent/">F# Advent Calendar</a> 2014, which is stuffed full of other interesting posts. Go have a read!</p></blockquote>

<p>Note: This post is epic in length. If you just want to see the final resulting script of much silliness, skip straight to <a href="#conclusion">the conclusion</a>!</p>

<p>Note 2: If you just want to see an example of a sane generated type provider, <a href="https://github.com/mavnn/FPDays.TypeProvider/">the code from my FPDays tutorial</a> is a much better bet.</p>

<p>Note 3: There is a lot of code below. If you&rsquo;re viewing this on a desktop, I suggest collapsing the sidebar to the right otherwise you&rsquo;ll have a lot of horizontal scroll bars. If you&rsquo;re on a mobile device, you might want to bookmark for later.</p>

<p>So&hellip; I&rsquo;ve been playing with generated (not erased) type providers for a bit, and meaning to write something up about them. Most of the documentation out there is for erased type providers, and to be honest they have a lot of advantages in terms of performance.</p>

<p>But they also have two fundamental limitations:</p>

<ul>
<li>You can&rsquo;t used erased F# types in any other .net language</li>
<li>You can&rsquo;t use reflection on erased types (even in F#)</li>
</ul>


<p>So let&rsquo;s see if we can have a play with generated types, and then &ndash; given this is Christmas, and all &ndash; let&rsquo;s see if we can build Jesus&#8217; family tree in the .net type system. After all, if you&rsquo;re going to use inheritance to model something, how about modelling inheritance?</p>

<!-- more -->


<blockquote><p>If you need a reminder of type provider basics, check out <a href="http://blog.mavnn.co.uk/type-providers-from-the-ground-up/">Type Providers from the Ground Up</a></p></blockquote>

<p>Let&rsquo;s start with a really basic example of a generative type provider. We&rsquo;ll just create a single type with a static property on it.</p>

<p>First, our input. We&rsquo;re going to grab <a href="https://www.biblegateway.com/passage/?search=matthew+1%3A2-16&amp;version=NIV">the genealogy of Jesus from Matthew</a> and then massage the content just enough that the first name on each line is a &ldquo;parent&rdquo;, and any other names on a line are&hellip; other people. We&rsquo;ll assume they&rsquo;re siblings, although actually not all of them are.</p>

<pre><code>Abraham was the father of Isaac,
Isaac the father of Jacob,
Jacob the father of Judah and his brothers,
Judah the father of Perez and Zerah, whose mother was Tamar,
Perez the father of Hezron,
Hezron the father of Ram,
Ram the father of Amminadab,
... (some other people here) ...
Akim the father of Elihud,
Elihud the father of Eleazar,
Eleazar the father of Matthan,
Matthan the father of Jacob,
Jacob the father of Joseph, the husband of Mary, 
and Mary was the mother of Jesus who is called the Messiah.
</code></pre>

<p>For round one, we&rsquo;re just going to put this string into a type as a property.</p>

<p>Our type provider file looks a bit like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">AdventProvider</span>
</span><span class='line'><span class="o">#</span><span class="k">if</span> <span class="nc">INTERACTIVE</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fsi&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fs&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">AdventProvider</span> <span class="o">(</span><span class="n">cfg</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;Advent.Provided&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">tempAsmPath</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">ChangeExtension</span><span class="o">(</span><span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetTempFileName</span><span class="bp">()</span><span class="o">,</span> <span class="s2">&quot;.dll&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">tempAsm</span> <span class="o">=</span> <span class="nc">ProvidedAssembly</span> <span class="n">tempAsmPath</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;Family&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span><span class="nc">ProvidedStaticParameter</span><span class="o">(</span><span class="s2">&quot;Genealogy&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">DefineStaticParameters</span><span class="o">(</span>
</span><span class='line'>            <span class="n">parameters</span><span class="o">,</span>
</span><span class='line'>            <span class="k">fun</span> <span class="n">typeName</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">genealogy</span> <span class="o">=</span> <span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:?&gt;</span> <span class="kt">string</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">inputFile</span> <span class="o">=</span>
</span><span class='line'>                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">cfg</span><span class="o">.</span><span class="nc">ResolutionFolder</span><span class="o">,</span> <span class="n">genealogy</span><span class="o">)</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">raw</span> <span class="o">=</span>
</span><span class='line'>                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllLines</span> <span class="n">inputFile</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">g</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span>
</span><span class='line'>                            <span class="n">asm</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">ns</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">typeName</span><span class="o">,</span>
</span><span class='line'>                            <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span>
</span><span class='line'>                            <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;Raw&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span> <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">rawStr</span> <span class="o">=</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">raw</span>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="nc">GetterCode</span> <span class="o">&lt;-</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Value</span> <span class="n">rawStr</span>
</span><span class='line'>                <span class="n">g</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">g</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">g</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">RegisterRuntimeAssemblyLocationAsProbingFolder</span> <span class="n">cfg</span>
</span><span class='line'>        <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">t</span><span class="o">]</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">t</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span> <span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s with the <code>#if INTERACTIVE</code> bits? Well, that&rsquo;ll be the subject of another blog post soon; I&rsquo;m doing must of my type provider dev in Vim these days to avoid the Visual Studio restart cycle, so I thought I might as well skip the fsproj file completely.</p>

<p>In the actual provider itself, there&rsquo;s a few new things to note if you&rsquo;ve only previously done erased type provider development.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">tempAsmPath</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">ChangeExtension</span><span class="o">(</span><span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetTempFileName</span><span class="bp">()</span><span class="o">,</span> <span class="s2">&quot;.dll&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">tempAsm</span> <span class="o">=</span> <span class="nc">ProvidedAssembly</span> <span class="n">tempAsmPath</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generative type providers, unlike erased type providers, actually pass IL (.net byte code) to the compiler rather than just a quotation. To achieve that, we need to write the IL into an actual assembly that the compiler will then merge into the dll it&rsquo;s compiling.</p>

<p>Let&rsquo;s try that again, slower. The compiler will be building a piece of code that uses your type provider into <code>Output.dll</code>. It will call into your type provider, which needs to write the IL of the type/codes it&rsquo;s generating to disk into <code>Temp.dll</code>. The compiler will then take the IL from <code>Temp.dll</code> and insert it into <code>Output.dll</code>. At this point, we have no further use for <code>Temp.dll</code>, hence why we&rsquo;re using <code>GetTempFileName</code> to get a file in the OS temporary file
folder.</p>

<p>The <code>ProvidedTypes</code> API knows how to create these temporary dlls, so we wrap our filename in the <code>ProvidedAssembly</code> type.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="n">this</span><span class="o">.</span><span class="nc">RegisterRuntimeAssemblyLocationAsProbingFolder</span> <span class="n">cfg</span>
</span><span class='line'>    <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">t</span><span class="o">]</span>
</span><span class='line'>    <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">t</span><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also need to specify which types need adding to the temporary assembly. Here we&rsquo;re specifying that the parameterized type (the one that takes a filename) should be added; on line 46 of the main code you&rsquo;ll see the type generated when a parameter is supplied being added. We also need to tell the type provider where the runtime dll is being created &ndash; fortunately, a helper method works this out for us when given the config item from the type provider constructor.</p>

<p>It&rsquo;s important to note that nested types <em>should not</em> be added to the temporary assembly. That&rsquo;s handled by adding the root.</p>

<p>So, if you compile this code down you can invoke it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">#!/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">fsharpi</span>
</span><span class='line'><span class="c1">// Put all of this in a file called something like Families.fsx</span>
</span><span class='line'><span class="c1">// Yes, that hashbang line means if you make it executable it</span>
</span><span class='line'><span class="c1">// will run on linux/mac</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;AdventProvider.dll&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">AdventProvider</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Advent</span><span class="p">.</span><span class="nc">Provided</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">JesusGenerations</span> <span class="o">=</span> <span class="nc">Family</span><span class="o">&lt;</span><span class="s2">&quot;Genealogy.txt&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">printfn</span> <span class="s2">&quot;%s&quot;</span> <span class="nn">JesusGenerations</span><span class="p">.</span><span class="nc">Raw</span>
</span></code></pre></td></tr></table></div></figure>


<p>Excellent! A real, valid .net type. You can only invoke the type provider from F#, but the types generated are usable across the .net language universe &ndash; and reflection works fine.</p>

<p>So&hellip; phase two. Let&rsquo;s see if we can parse something sane out of our plain text mess to turn into types. I&rsquo;m not going to go into this in detail, but because I wanted to avoid the complication of external dependencies I just wrote a very simple regex based parser for this.</p>

<p>Behold! The <code>Parser.fs</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Parser</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Text</span><span class="p">.</span><span class="nc">RegularExpressions</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Person</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="nc">Name</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>        <span class="nc">Heir</span> <span class="o">:</span> <span class="nc">Person</span> <span class="n">option</span>
</span><span class='line'>        <span class="nc">Others</span> <span class="o">:</span> <span class="kt">string</span> <span class="kt">list</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">namesRegex</span> <span class="o">=</span> <span class="nc">Regex</span><span class="o">(@</span><span class="s2">&quot;(?&lt;name&gt;[A-Z][a-z]+)&quot;</span><span class="o">,</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">Compiled</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nc">ParseToNames</span> <span class="n">line</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">namesRegex</span><span class="o">.</span><span class="nc">Matches</span><span class="o">(</span><span class="n">line</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">cast</span><span class="o">&lt;</span><span class="nc">Match</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">m</span> <span class="o">-&gt;</span> <span class="n">m</span><span class="o">.</span><span class="nn">Groups</span><span class="p">.</span><span class="err">[&quot;</span><span class="n">name</span><span class="s2">&quot;].Value)</span>
</span><span class='line'><span class="s2">    |&gt; Seq.filter (fun n -&gt; n &lt;&gt; &quot;</span><span class="nc">King</span><span class="s2">&quot; &amp;&amp; n &lt;&gt; &quot;</span><span class="nc">Messiah</span><span class="s2">&quot; &amp;&amp; n &lt;&gt; &quot;</span><span class="nc">Babylon</span><span class="s2">&quot;)</span>
</span><span class='line'><span class="s2">    |&gt; Seq.toList</span>
</span><span class='line'><span class="s2">    |&gt; function h::t -&gt; h, t | [] -&gt; failwith &quot;</span><span class="nc">No</span> <span class="n">blank</span> <span class="n">lines</span><span class="o">!</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">let rec NamesToPerson names =</span>
</span><span class='line'><span class="s2">    match names with</span>
</span><span class='line'><span class="s2">    | [] -&gt; None</span>
</span><span class='line'><span class="s2">    | (father,others)::t -&gt;</span>
</span><span class='line'><span class="s2">        let heir =</span>
</span><span class='line'><span class="s2">            match t with</span>
</span><span class='line'><span class="s2">            | [] -&gt; None</span>
</span><span class='line'><span class="s2">            | (heir, _)::_ -&gt; Some heir</span>
</span><span class='line'><span class="s2">        Some {</span>
</span><span class='line'><span class="s2">            Name = father</span>
</span><span class='line'><span class="s2">            Heir = NamesToPerson t</span>
</span><span class='line'><span class="s2">            Others =</span>
</span><span class='line'><span class="s2">                others</span>
</span><span class='line'><span class="s2">                |&gt; List.filter</span>
</span><span class='line'><span class="s2">                    (fun c -&gt;</span>
</span><span class='line'><span class="s2">                        match heir with</span>
</span><span class='line'><span class="s2">                        | Some h -&gt; c &lt;&gt; h</span>
</span><span class='line'><span class="s2">                        | None -&gt; true)</span>
</span><span class='line'><span class="s2">        }</span>
</span><span class='line'>
</span><span class='line'><span class="s2">let Parse lines =</span>
</span><span class='line'><span class="s2">    lines</span>
</span><span class='line'><span class="s2">    |&gt; List.map ParseToNames</span>
</span><span class='line'><span class="s2">    |&gt; NamesToPerson</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nb. Never, ever, ever build a parser like this for production code. Treat this as a &ldquo;how not to build a parser&rdquo; example, and go read something like <a href="http://trelford.com/blog/post/parser.aspx">Phil&rsquo;s excellent parsing posts</a> instead.</p>

<p>So&hellip; what can we do this this?</p>

<p>Let&rsquo;s start be parsing our file, and seeing if we can build a nested set of types representing the family tree.</p>

<p>Recursive type building! Go!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">AdventProvider</span>
</span><span class='line'><span class="o">#</span><span class="k">if</span> <span class="nc">INTERACTIVE</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fsi&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fs&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;Parser.fs&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Parser</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">AdventProvider</span> <span class="o">(</span><span class="n">cfg</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;Advent.Provided&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">tempAsmPath</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">ChangeExtension</span><span class="o">(</span><span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetTempFileName</span><span class="bp">()</span><span class="o">,</span> <span class="s2">&quot;.dll&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">tempAsm</span> <span class="o">=</span> <span class="nc">ProvidedAssembly</span> <span class="n">tempAsmPath</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;Family&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span><span class="nc">ProvidedStaticParameter</span><span class="o">(</span><span class="s2">&quot;Genealogy&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">DefineStaticParameters</span><span class="o">(</span>
</span><span class='line'>            <span class="n">parameters</span><span class="o">,</span>
</span><span class='line'>            <span class="k">fun</span> <span class="n">typeName</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">genealogy</span> <span class="o">=</span> <span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:?&gt;</span> <span class="kt">string</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">inputFile</span> <span class="o">=</span>
</span><span class='line'>                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">cfg</span><span class="o">.</span><span class="nc">ResolutionFolder</span><span class="o">,</span> <span class="n">genealogy</span><span class="o">)</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">raw</span> <span class="o">=</span>
</span><span class='line'>                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllLines</span> <span class="n">inputFile</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">input</span> <span class="o">=</span>
</span><span class='line'>                    <span class="n">raw</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toList</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nc">Parse</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">g</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span>
</span><span class='line'>                            <span class="n">asm</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">ns</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">typeName</span><span class="o">,</span>
</span><span class='line'>                            <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span>
</span><span class='line'>                            <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>                <span class="n">g</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Class</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;Raw&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span> <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">rawStr</span> <span class="o">=</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">raw</span>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="nc">GetterCode</span> <span class="o">&lt;-</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Value</span> <span class="n">rawStr</span>
</span><span class='line'>                <span class="n">g</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="k">rec</span> <span class="n">personToType</span> <span class="o">(</span><span class="n">father</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">(</span><span class="n">person</span> <span class="o">:</span> <span class="nc">Person</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="o">(</span><span class="n">father</span> <span class="o">:&gt;</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Type</span><span class="o">),</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">t</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Class</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">father</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">t</span>
</span><span class='line'>                    <span class="k">match</span> <span class="n">person</span><span class="o">.</span><span class="nc">Heir</span> <span class="k">with</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">personToType</span> <span class="n">t</span> <span class="n">p</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">match</span> <span class="n">input</span> <span class="k">with</span>
</span><span class='line'>                <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="n">personToType</span> <span class="n">g</span> <span class="n">p</span>
</span><span class='line'>                <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">g</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">g</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">RegisterRuntimeAssemblyLocationAsProbingFolder</span> <span class="n">cfg</span>
</span><span class='line'>        <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">t</span><span class="o">]</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">t</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span> <span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s not looking too bad&hellip; but we&rsquo;re also getting our first hint of trouble to come. The first time I tried to use this provider, I didn&rsquo;t have lines 46 and 55. It turns out that the default attributes of a <code>ProvidedTypeDefinition</code> set the <code>Sealed</code> attribute on the class that&rsquo;s generated. If you then try and build a type that inherits from it, you get an error when you try and consume the types from the provider.</p>

<p>But, hey? We&rsquo;ve worked around that, right? I&rsquo;m sure there&rsquo;s no reason it&rsquo;s set that way by default&hellip;</p>

<p>And: we have types. Lots of types:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">#!/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">fsharpi</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;AdventProvider.dll&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">AdventProvider</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Advent</span><span class="p">.</span><span class="nc">Provided</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">JesusGenerations</span> <span class="o">=</span> <span class="nc">Family</span><span class="o">&lt;</span><span class="s2">&quot;Genealogy.txt&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">printfn</span> <span class="s2">&quot;%s&quot;</span> <span class="nn">JesusGenerations</span><span class="p">.</span><span class="nc">Raw</span>
</span><span class='line'>
</span><span class='line'><span class="nn">JesusGenerations</span><span class="p">.</span><span class="nn">Abraham</span><span class="p">.</span><span class="nn">Isaac</span><span class="p">.</span><span class="nn">Jacob</span><span class="p">.</span><span class="nn">Judah</span><span class="p">.</span><span class="nn">Perez</span><span class="p">.</span><span class="nn">Hezron</span><span class="p">.</span><span class="nn">Ram</span><span class="p">.</span><span class="nc">Amminadab</span>
</span><span class='line'><span class="c1">// ... there&#39;s more where that came from</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can even do things like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="nc">DescendedFromAbraham</span> <span class="o">(</span><span class="n">person</span> <span class="o">:</span> <span class="nn">JesusGenerations</span><span class="p">.</span><span class="nc">Abraham</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="bp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compile time family tree checking &ndash; pretty nifty. Except&hellip; when we try and call this function we realise we have a problem. None of these classes have constructors.</p>

<p>Hmmm.</p>

<p>Let&rsquo;s try and add one. Nothing fancy &ndash; just a default constructor.</p>

<p>We&rsquo;ll replace the <code>personToType</code> method with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">personToType</span> <span class="o">(</span><span class="n">father</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">(</span><span class="n">person</span> <span class="o">:</span> <span class="nc">Person</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="o">(</span><span class="n">father</span> <span class="o">:&gt;</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Type</span><span class="o">),</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Class</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">)</span>
</span><span class='line'>    <span class="n">c</span><span class="o">.</span><span class="nc">InvokeCode</span> <span class="o">&lt;-</span>
</span><span class='line'>        <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">args</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="n">failwith</span> <span class="s2">&quot;Generated constructors should always pass the instance as the first argument!&quot;</span>
</span><span class='line'>            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="o">&lt;@@</span> <span class="bp">()</span> <span class="o">@@&gt;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">c</span>
</span><span class='line'>    <span class="n">father</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">t</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">person</span><span class="o">.</span><span class="nc">Heir</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">personToType</span> <span class="n">t</span> <span class="n">p</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>All looks good. In here you can see one of the first differences between erased and generated type. For a generated type, the first input arg to the constructor is the instance of the type to be initialized &ndash; and the return type of the constructor should be null.</p>

<p>The only problem is that our type provider errors immediately on usage with an &ldquo;Argument cannot be null. Parameter name: obj&rdquo; error. Not immediately informative.</p>

<p>A quick check with a type provider providing a single type later, we can confirm that the constructor above is valid; sounds like we&rsquo;re having issues with the fact that we&rsquo;re inheriting from a provided type. Maybe they&rsquo;re sealed for a reason after all. Still; we&rsquo;re not to be deterred so easily!</p>

<p><em>Cue dramatic music of choice!</em></p>

<p>Taking an guess, we&rsquo;ll assume this might have something to do with the <code>JesusGenerations</code> type not having a constructor; we&rsquo;ll add one and try again and&hellip; no dice. Same error.</p>

<p>Which is round about the time I noticed that provided constructors also have a <code>BaseConstructorCall</code> property. Time for a slightly more invasive rewrite, leaving us an overall type provider that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">AdventProvider</span>
</span><span class='line'><span class="o">#</span><span class="k">if</span> <span class="nc">INTERACTIVE</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fsi&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fs&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;Parser.fs&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Parser</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">AdventProvider</span> <span class="o">(</span><span class="n">cfg</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;Advent.Provided&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">tempAsmPath</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">ChangeExtension</span><span class="o">(</span><span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetTempFileName</span><span class="bp">()</span><span class="o">,</span> <span class="s2">&quot;.dll&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">tempAsm</span> <span class="o">=</span> <span class="nc">ProvidedAssembly</span> <span class="n">tempAsmPath</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;Family&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span><span class="nc">ProvidedStaticParameter</span><span class="o">(</span><span class="s2">&quot;Genealogy&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">DefineStaticParameters</span><span class="o">(</span>
</span><span class='line'>            <span class="n">parameters</span><span class="o">,</span>
</span><span class='line'>            <span class="k">fun</span> <span class="n">typeName</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">genealogy</span> <span class="o">=</span> <span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:?&gt;</span> <span class="kt">string</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">inputFile</span> <span class="o">=</span>
</span><span class='line'>                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">cfg</span><span class="o">.</span><span class="nc">ResolutionFolder</span><span class="o">,</span> <span class="n">genealogy</span><span class="o">)</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">raw</span> <span class="o">=</span>
</span><span class='line'>                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllLines</span> <span class="n">inputFile</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">input</span> <span class="o">=</span>
</span><span class='line'>                    <span class="n">raw</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toList</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nc">Parse</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">g</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span>
</span><span class='line'>                            <span class="n">asm</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">ns</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">typeName</span><span class="o">,</span>
</span><span class='line'>                            <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span>
</span><span class='line'>                            <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>                <span class="n">g</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Class</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;Raw&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span> <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">rawStr</span> <span class="o">=</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">raw</span>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="nc">GetterCode</span> <span class="o">&lt;-</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Value</span> <span class="n">rawStr</span>
</span><span class='line'>                <span class="n">g</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">)</span>
</span><span class='line'>                <span class="n">c</span><span class="o">.</span><span class="nc">InvokeCode</span> <span class="o">&lt;-</span>
</span><span class='line'>                    <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                        <span class="k">match</span> <span class="n">args</span> <span class="k">with</span>
</span><span class='line'>                        <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span>
</span><span class='line'>                            <span class="n">failwith</span> <span class="s2">&quot;Generated constructors should always pass the instance as the first argument!&quot;</span>
</span><span class='line'>                        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>                            <span class="o">&lt;@@</span> <span class="bp">()</span> <span class="o">@@&gt;</span>
</span><span class='line'>                <span class="n">g</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">c</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="k">rec</span> <span class="n">personToType</span> <span class="o">(</span><span class="n">father</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="n">fatherCtor</span> <span class="o">(</span><span class="n">person</span> <span class="o">:</span> <span class="nc">Person</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="o">(</span><span class="n">father</span> <span class="o">:&gt;</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Type</span><span class="o">),</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">t</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Class</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span><span class="o">)</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">c</span><span class="o">.</span><span class="nc">BaseConstructorCall</span> <span class="o">&lt;-</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">fatherCtor</span><span class="o">,</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">c</span><span class="o">.</span><span class="nc">InvokeCode</span> <span class="o">&lt;-</span>
</span><span class='line'>                        <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                            <span class="k">match</span> <span class="n">args</span> <span class="k">with</span>
</span><span class='line'>                            <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span>
</span><span class='line'>                                <span class="n">failwith</span> <span class="s2">&quot;Generated constructors should always pass the instance as the first argument!&quot;</span>
</span><span class='line'>                            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>                                <span class="o">&lt;@@</span> <span class="bp">()</span> <span class="o">@@&gt;</span>
</span><span class='line'>                    <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">c</span>
</span><span class='line'>                    <span class="n">father</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">t</span>
</span><span class='line'>                    <span class="k">match</span> <span class="n">person</span><span class="o">.</span><span class="nc">Heir</span> <span class="k">with</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">personToType</span> <span class="n">t</span> <span class="n">c</span> <span class="n">p</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">match</span> <span class="n">input</span> <span class="k">with</span>
</span><span class='line'>                <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="n">personToType</span> <span class="n">g</span> <span class="n">c</span> <span class="n">p</span>
</span><span class='line'>                <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">g</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">g</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">RegisterRuntimeAssemblyLocationAsProbingFolder</span> <span class="n">cfg</span>
</span><span class='line'>        <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">t</span><span class="o">]</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">t</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span> <span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>It all builds, we can reference it&hellip; and then we get:</p>

<pre><code>The type provider 'AdventProvider+AdventProvider' reported an error: User defined subclasses of System.Type are not yet supported
</code></pre>

<p>Hmm. Irritating. Especially as the error message is actually incorrect; we&rsquo;re not subclassing System.Type and we know that that was working correctly as the types were being generated correctly before we tried to add constructors to them. But it looks like we might have hit the limits of what the current type provider implementation allows.</p>

<p>But we&rsquo;re still not quite done yet; let&rsquo;s turn the insanity up a notch.</p>

<p><em>Cue your choice of even more dramatic music or Benny Hill here</em></p>

<p>As well as actual inheritance in .net, we have interfaces which can be used to model inheritance. Let&rsquo;s have a last throw of the dice, and see whether we can create generated interfaces to do compile time ancestry checking.</p>

<p>Adding an <code>Interface</code> at every level turns out to be fairly easy, and it appears we can create generated interfaces &ndash; a useful trick to have up your sleeve. Let&rsquo;s have a look what that looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">AdventProvider</span>
</span><span class='line'><span class="o">#</span><span class="k">if</span> <span class="nc">INTERACTIVE</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fsi&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fs&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;Parser.fs&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Parser</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">AdventProvider</span> <span class="o">(</span><span class="n">cfg</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;Advent.Provided&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">tempAsmPath</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">ChangeExtension</span><span class="o">(</span><span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetTempFileName</span><span class="bp">()</span><span class="o">,</span> <span class="s2">&quot;.dll&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">tempAsm</span> <span class="o">=</span> <span class="nc">ProvidedAssembly</span> <span class="n">tempAsmPath</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;Family&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span><span class="nc">ProvidedStaticParameter</span><span class="o">(</span><span class="s2">&quot;Genealogy&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">DefineStaticParameters</span><span class="o">(</span>
</span><span class='line'>            <span class="n">parameters</span><span class="o">,</span>
</span><span class='line'>            <span class="k">fun</span> <span class="n">typeName</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">genealogy</span> <span class="o">=</span> <span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:?&gt;</span> <span class="kt">string</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">inputFile</span> <span class="o">=</span>
</span><span class='line'>                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">cfg</span><span class="o">.</span><span class="nc">ResolutionFolder</span><span class="o">,</span> <span class="n">genealogy</span><span class="o">)</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">raw</span> <span class="o">=</span>
</span><span class='line'>                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllLines</span> <span class="n">inputFile</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">input</span> <span class="o">=</span>
</span><span class='line'>                    <span class="n">raw</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toList</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nc">Parse</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">g</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span>
</span><span class='line'>                            <span class="n">asm</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">ns</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">typeName</span><span class="o">,</span>
</span><span class='line'>                            <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span>
</span><span class='line'>                            <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;Raw&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span> <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">rawStr</span> <span class="o">=</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">raw</span>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="nc">GetterCode</span> <span class="o">&lt;-</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Value</span> <span class="n">rawStr</span>
</span><span class='line'>                <span class="n">g</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="k">rec</span> <span class="n">personToType</span> <span class="o">(</span><span class="n">father</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">(</span><span class="n">fatherInterfaces</span> <span class="o">:</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Type</span> <span class="kt">list</span><span class="o">)</span> <span class="o">(</span><span class="n">person</span> <span class="o">:</span> <span class="nc">Person</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">parentInterface</span> <span class="o">=</span>
</span><span class='line'>                        <span class="k">match</span> <span class="n">fatherInterfaces</span> <span class="k">with</span>
</span><span class='line'>                        <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span> <span class="nc">None</span>
</span><span class='line'>                        <span class="o">|</span> <span class="n">h</span><span class="o">::_</span> <span class="o">-&gt;</span> <span class="nc">Some</span> <span class="n">h</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">i</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="s2">&quot;I&quot;</span> <span class="o">+</span> <span class="n">person</span><span class="o">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">None</span><span class="o">,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">i</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Interface</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Abstract</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">father</span><span class="o">.</span><span class="nc">AddMembers</span> <span class="o">[</span><span class="n">t</span><span class="o">;</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>                    <span class="k">match</span> <span class="n">person</span><span class="o">.</span><span class="nc">Heir</span> <span class="k">with</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">personToType</span> <span class="n">t</span> <span class="o">(</span><span class="n">i</span> <span class="o">:&gt;</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Type</span><span class="o">::</span><span class="n">fatherInterfaces</span><span class="o">)</span> <span class="n">p</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">match</span> <span class="n">input</span> <span class="k">with</span>
</span><span class='line'>                <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="n">personToType</span> <span class="n">g</span> <span class="bp">[]</span> <span class="n">p</span>
</span><span class='line'>                <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">g</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">g</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">RegisterRuntimeAssemblyLocationAsProbingFolder</span> <span class="n">cfg</span>
</span><span class='line'>        <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">t</span><span class="o">]</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">t</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span> <span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Line 58 and 59 do all the work &ndash; normally an interface has no base type, and we need to reset the type attributes to make the interface look like an interface to the compiler. This all works well &ndash; but doesn&rsquo;t, of course, give us any inheritance. Lets see if we can use those &ldquo;fatherInterfaces&rdquo; I&rsquo;ve fed into the function to get us any closer.</p>

<p>A brief experiment with <code>IDisposable</code> shows us that if we change the base type of the interface to <code>Some typeof&lt;System.IDisposable&gt;</code>, that actually works. Again &ndash; useful type provider knowledge, but doesn&rsquo;t help us here. No dice on using the parent interface as the base type &ndash; we just start getting into more of the problems we were having above inheriting from other generated types.</p>

<p>So let&rsquo;s see what happens if instead we use implement interface instead of trying to inherit the interface; it seems about as reasonable as anything else we&rsquo;re tried so far&hellip;</p>

<p>We&rsquo;ll add this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">fatherInterfaces</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="n">i</span><span class="o">.</span><span class="nc">AddInterfaceImplementation</span>
</span></code></pre></td></tr></table></div></figure>


<p>after line 59 of the version above and see what happens.</p>

<h2><a name="conclusion"></a> Conclusion</h2>

<p>And suddenly&hellip; hey presto! We can do things like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">#!/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">fsharpi</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;AdventProvider.dll&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">AdventProvider</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Advent</span><span class="p">.</span><span class="nc">Provided</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">JesusGenerations</span> <span class="o">=</span> <span class="nc">Family</span><span class="o">&lt;</span><span class="s2">&quot;Genealogy.txt&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">printfn</span> <span class="s2">&quot;%s&quot;</span> <span class="o">(</span><span class="nn">JesusGenerations</span><span class="p">.</span><span class="nn">Raw</span><span class="p">.</span><span class="nc">Substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">20</span><span class="o">)</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">descendentOfAbraham</span> <span class="o">(_</span> <span class="o">:</span> <span class="o">#</span><span class="nn">JesusGenerations</span><span class="p">.</span><span class="nc">IAbraham</span><span class="o">)</span> <span class="o">=</span> <span class="bp">true</span>
</span><span class='line'><span class="k">let</span> <span class="n">descendentOfDavid</span>
</span><span class='line'>        <span class="o">(_</span> <span class="o">:</span>
</span><span class='line'>            <span class="o">#</span><span class="nn">JesusGenerations</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Abraham</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Isaac</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Jacob</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Judah</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Perez</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Hezron</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Ram</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Amminadab</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Nahshon</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Salmon</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Boaz</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Obed</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Jesse</span>
</span><span class='line'>                <span class="p">.</span><span class="nc">IDavid</span><span class="o">)</span> <span class="o">=</span> <span class="bp">true</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// This compiles...</span>
</span><span class='line'><span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="o">&lt;|</span> <span class="n">descendentOfAbraham</span> <span class="o">({</span> <span class="k">new</span> <span class="nn">JesusGenerations</span><span class="p">.</span><span class="nn">Abraham</span><span class="p">.</span><span class="nc">IIsaac</span> <span class="o">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// So does this:</span>
</span><span class='line'><span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="o">&lt;|</span>
</span><span class='line'>    <span class="n">descendentOfDavid</span>
</span><span class='line'>        <span class="o">({</span> <span class="k">new</span> <span class="nn">JesusGenerations</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Abraham</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Isaac</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Jacob</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Judah</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Perez</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Hezron</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Ram</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Amminadab</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Nahshon</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Salmon</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Boaz</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Obed</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Jesse</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">David</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Solomon</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Rehoboam</span>
</span><span class='line'>                <span class="p">.</span><span class="nc">IAbijah</span> <span class="o">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This doesn&#39;t - how cool is that?</span>
</span><span class='line'><span class="c">(* printfn &quot;%A&quot; &lt;|</span>
</span><span class='line'><span class="c">    descendentOfDavid ({ new JesusGenerations.Abraham.IIsaac }) *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which personally I think is pretty awesome.</p>

<p>There is, unfortunately, only one problem. Whilst we now have compile time propositional logic&hellip; unfortunately our code fails at runtime with a type load error. Whilst the compiler is happy with the IL my random hacking has turned at, apparently the runtime is not.</p>

<p>Maybe next year&hellip;</p>

<p>I hope you enjoyed this random journey down the rabbit hole of type providers; and if you&rsquo;re interested in looking into the genealogy a bit further <a href="http://christianity.about.com/od/biblefactsandlists/a/jesusgenealogy.htm">this article</a> gives a brief overview of a few things, like why we think Jesus has two different genealogies in the bible and how Jewish genealogies didn&rsquo;t always include every generation.</p>

<p>See you next time: and if anyone can get the inheritance to work properly, I&rsquo;ll owe you a beverage of (reasonable) choice!</p>

<p>The code from this blog post can, as normal be found on github in the <a href="https://github.com/mavnn/Advent2014">Advent2014</a> repository.</p>

<p>It&rsquo;s set up to be developed in Vim or Emacs without project files on a nix system, but it will probably play nicely with Visual Studio as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cutting Quotations Down to Size]]></title>
    <link href="http://blog.mavnn.co.uk/cutting-quotations-down-to-size/"/>
    <updated>2014-10-07T21:30:58+01:00</updated>
    <id>http://blog.mavnn.co.uk/cutting-quotations-down-to-size</id>
    <content type="html"><![CDATA[<blockquote><p>This is part 2 in my quotations series, following on from <a href="http://blog.mavnn.co.uk/tap/">Tap, Tap, Tapping on the Door</a>.</p></blockquote>

<p>As promised in the first part of this series, here we&rsquo;re going to take a look at manipulating quotations. I mean, we&rsquo;ve got this <a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a> &ndash; now what are we going to do with it?</p>

<p>Let&rsquo;s start with something fairly straightforward; <a href="http://en.wikipedia.org/wiki/Boolean_algebra">boolean algebra</a>.</p>

<p>First, let&rsquo;s get a look at how some boolean expressions are represented in quotations.</p>

<p>Firing up F# Interactive, we&rsquo;ll feed a few in and see what happens:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&lt;@@</span> <span class="bp">true</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : Expr =</span>
</span><span class='line'><span class="c">      Value (true)</span>
</span><span class='line'><span class="c">        {CustomAttributes = [NewTuple (Value (&quot;DebugRange&quot;),</span>
</span><span class='line'><span class="c">              NewTuple (Value (&quot;stdin&quot;), Value (4), Value (4), Value (4), Value (8)))];</span>
</span><span class='line'><span class="c">         Type = System.Boolean;} *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmm. That&rsquo;s&hellip; not as nice as we might want. The custom attributes are being added by F# interactive for debugging purposes, but hopefully the general shape is clear: our expression consists of a single value of <code>true</code>.</p>

<p>I&rsquo;ll cut out the custom attributes from now on to make reading things a bit easier.</p>

<p>Next!</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&lt;@@</span> <span class="bp">true</span> <span class="o">&amp;&amp;</span> <span class="bp">true</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : Expr =</span>
</span><span class='line'><span class="c">      IfThenElse (Value (true), Value (true), Value (false))</span>
</span><span class='line'><span class="c">        {CustomAttributes = ...;</span>
</span><span class='line'><span class="c">         Type = System.Boolean;} *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So. Looks like someone has decided to represent the <code>&amp;&amp;</code> operator with the expression tree of an <code>if</code> statement. Useful in some ways; after all, any logic we can apply to an <code>&amp;&amp;</code> operator will equally apply to a logically equivalent <code>if</code> statement. Checking the <a href="http://msdn.microsoft.com/en-us/library/ee370408.aspx">MSDN documentation for Expr.IfThenElse</a> tells if that the 3 values above are <code>guard</code>, <code>thenExpr</code> and <code>elseExpr</code>. Which kind of makes sense; our <code>&lt;@@ true &amp;&amp; true @@&gt;</code> is being turned (loosely) into <code>if true then true else false</code> &ndash; which is equivalent.</p>

<p>Let&rsquo;s put something other than plain boolean constants in to see if we can make it clearer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&lt;@@</span> <span class="s2">&quot;b&quot;</span> <span class="o">=</span> <span class="s2">&quot;b&quot;</span> <span class="o">&amp;&amp;</span> <span class="s2">&quot;t&quot;</span> <span class="o">=</span> <span class="s2">&quot;t&quot;</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : Expr =</span>
</span><span class='line'><span class="c">      IfThenElse (Call (None, op_Equality, [Value (&quot;b&quot;), Value (&quot;b&quot;)]),</span>
</span><span class='line'><span class="c">                Call (None, op_Equality, [Value (&quot;t&quot;), Value (&quot;t&quot;)]), Value (false))</span>
</span><span class='line'><span class="c">        {CustomAttributes = ...;</span>
</span><span class='line'><span class="c">         Type = System.Boolean;} *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks hopeful. As a last check, let&rsquo;s take advantage of the fact that quotations are structurally comparable to double check our understanding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&lt;@@</span> <span class="k">if</span> <span class="s2">&quot;b&quot;</span> <span class="o">=</span> <span class="s2">&quot;b&quot;</span> <span class="k">then</span> <span class="s2">&quot;t&quot;</span> <span class="o">=</span> <span class="s2">&quot;t&quot;</span> <span class="k">else</span> <span class="bp">false</span> <span class="o">@@&gt;</span> <span class="o">=</span> <span class="o">&lt;@@</span> <span class="s2">&quot;b&quot;</span> <span class="o">=</span> <span class="s2">&quot;b&quot;</span> <span class="o">&amp;&amp;</span> <span class="s2">&quot;t&quot;</span> <span class="o">=</span> <span class="s2">&quot;t&quot;</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = true *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome!</p>

<p>I&rsquo;m going to take a wild punt that the <code>||</code> operator does something similar:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&lt;@@</span> <span class="k">if</span> <span class="s2">&quot;b&quot;</span> <span class="o">=</span> <span class="s2">&quot;t&quot;</span> <span class="k">then</span> <span class="bp">true</span> <span class="k">else</span> <span class="s2">&quot;t&quot;</span> <span class="o">=</span> <span class="s2">&quot;b&quot;</span> <span class="o">@@&gt;</span> <span class="o">=</span> <span class="o">&lt;@@</span> <span class="s2">&quot;b&quot;</span> <span class="o">=</span> <span class="s2">&quot;t&quot;</span> <span class="o">||</span> <span class="s2">&quot;t&quot;</span> <span class="o">=</span> <span class="s2">&quot;b&quot;</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = true *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it does. Excellent.</p>

<p>We&rsquo;ve now got an idea what the expression trees are going to look like, but how do we go about manipulating them? The answer is the answer we always hope for when traversing data structure in F#: pattern matching.</p>

<p>The <code>Expr</code> types are all recognized by a set of <a href="http://msdn.microsoft.com/en-us/library/ee370259.aspx">active patterns</a> in the <code>Microsoft.FSharp.Quotations.Patterns</code> module. The only problem is that there are about 40 cases in the active patterns, and at the moment we&rsquo;re only interested in one: the <code>IfThenElse</code> case.</p>

<p>That&rsquo;s sounding rather verbose for a language that&rsquo;s normally as succinct as F# and fortunately the language designers agreed. As well as the specific cases in the main <code>Patterns</code> module, there are a number of other modules under the <code>Microsoft.FSharp.Quotations</code> namespace that contain &ldquo;broader&rdquo; active patterns, and helper methods for rebuilding expressions.</p>

<p>Let&rsquo;s take the broadest set, from the <code>ExprShape</code> module, and have a look at a method that takes in an expression, recursively works it way through the tree, and rebuilds it exactly as it was before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Quotations</span><span class="p">.</span><span class="nc">ExprShape</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">id</span> <span class="n">q</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">q</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ShapeVar</span> <span class="n">v</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Var</span> <span class="n">v</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ShapeLambda</span> <span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">e</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Lambda</span><span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">id</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ShapeCombination</span> <span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">es</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">RebuildShapeCombination</span><span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">es</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="n">id</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, as we recurse down there are three possibilities for our expression on any one pass through the <code>id</code> function:</p>

<ul>
<li>We&rsquo;ve hit a <code>Var</code>: this is a leaf node holding a variable, we&rsquo;re done with this branch of the tree.</li>
<li>We&rsquo;ve hit a lambda function, with a variable being bound and an expression representing the body of the function. We apply <code>id</code> to the body to continue recursing down.</li>
<li>We&rsquo;ve hit something else; anything else. The <code>ShapeCombination</code> pattern knows how to take the structure apart, and the <code>RebuildShapeCombination</code> method from the same module knows how to use the object <code>ShapeCombination</code> spits to put it back together again. In the mean time, we still apply <code>id</code> to all the sub-expressions of the combination, whatever they may be.</li>
</ul>


<p>(As an aside, don&rsquo;t actually call your functions <code>id</code> &ndash; there&rsquo;s already a function called that in the standard library.)</p>

<p>Of course, on it&rsquo;s own that&rsquo;s not very exciting. But how about if before moving onto these very broad shapes, we first check some specific cases?</p>

<p>Let&rsquo;s see if we can detect <code>true</code> literals within an expression.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Quotations</span><span class="p">.</span><span class="nc">ExprShape</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Quotations</span><span class="p">.</span><span class="nc">Patterns</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">detectTrue</span> <span class="n">q</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">q</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Value</span> <span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">t</span><span class="o">)</span> <span class="k">when</span> <span class="n">t</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">o</span> <span class="o">:?&gt;</span> <span class="kt">bool</span><span class="o">)</span> <span class="o">=</span> <span class="bp">true</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ShapeVar</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="bp">false</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ShapeLambda</span> <span class="o">(_,</span> <span class="n">e</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">detectTrue</span> <span class="n">e</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ShapeCombination</span> <span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">es</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">es</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="n">detectTrue</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">fold</span> <span class="o">(||)</span> <span class="bp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Value</code> pattern gives us an object representing a literal and it&rsquo;s type as a tuple. We&rsquo;ll add a guard condition to the pattern to specify that we&rsquo;re only interested when the type is <code>bool</code> and (taking advantage of short circuiting to make sure we don&rsquo;t try and cast if it&rsquo;s not a bool!) when the value is <code>true</code>. After that, we move back to our broader patterns, but this time we&rsquo;re happy to throw away most of the information at each step as we&rsquo;re not interested in
reconstructing the tree afterwards.</p>

<p>Loading up the function in F# Interactive, we can feed it some test inputs and see how we&rsquo;re doing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">detectTrue</span> <span class="o">&lt;@@</span> <span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="bp">true</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = true *)</span>
</span><span class='line'><span class="n">detectTrue</span> <span class="o">&lt;@@</span> <span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="bp">false</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = false *)</span>
</span><span class='line'><span class="n">detectTrue</span> <span class="o">&lt;@@</span> <span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="bp">false</span> <span class="o">||</span> <span class="bp">true</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = true *)</span>
</span><span class='line'><span class="n">detectTrue</span> <span class="o">&lt;@@</span> <span class="k">fun</span> <span class="n">x</span> <span class="n">y</span> <span class="o">-&gt;</span> <span class="n">y</span> <span class="o">||</span> <span class="n">x</span> <span class="bp">true</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = true *)</span>
</span><span class='line'><span class="n">detectTrue</span> <span class="o">&lt;@@</span> <span class="k">fun</span> <span class="n">x</span> <span class="n">y</span> <span class="o">-&gt;</span> <span class="n">y</span> <span class="o">||</span> <span class="n">x</span> <span class="o">=</span> <span class="bp">true</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = true *)</span>
</span><span class='line'><span class="n">detectTrue</span> <span class="o">&lt;@@</span> <span class="s2">&quot;bob&quot;</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = false *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking good.</p>

<p>Looks like we need just one final step before we start playing with the rules of boolean algebra; let&rsquo;s check we can detect the <code>||</code> and <code>&amp;&amp;</code> operators.</p>

<p>First, let&rsquo;s give ourselves some helper active patterns of our own to detect literal <code>true</code> and <code>false</code> values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Quotations</span><span class="p">.</span><span class="nc">ExprShape</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Quotations</span><span class="p">.</span><span class="nc">Patterns</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">True&#39;</span><span class="o">|_|)</span> <span class="n">expr</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">expr</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Value</span> <span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">t</span><span class="o">)</span> <span class="k">when</span> <span class="n">t</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">o</span> <span class="o">:?&gt;</span> <span class="kt">bool</span><span class="o">)</span> <span class="o">=</span> <span class="bp">true</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="n">expr</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">None</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">False&#39;</span><span class="o">|_|)</span> <span class="n">expr</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">expr</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Value</span> <span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">t</span><span class="o">)</span> <span class="k">when</span> <span class="n">t</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">o</span> <span class="o">:?&gt;</span> <span class="kt">bool</span><span class="o">)</span> <span class="o">=</span> <span class="bp">false</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="n">expr</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s add some more for <code>||</code> and <code>&amp;&amp;</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">Or&#39;</span><span class="o">|_|)</span> <span class="n">expr</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">expr</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">IfThenElse</span> <span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="nc">True&#39;</span> <span class="o">_,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">None</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">And&#39;</span><span class="o">|_|)</span> <span class="n">expr</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">expr</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">IfThenElse</span> <span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">,</span> <span class="nc">False&#39;</span> <span class="o">_)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because you can nest patterns within a pattern match, here we&rsquo;re only matching <code>IfThenElse</code> expressions where the &lsquo;then&rsquo; clause (<code>||</code>) is always <code>true</code> or the &lsquo;else&rsquo; clause (<code>&amp;&amp;</code>) is always <code>false</code>.</p>

<p>And now, with all our pieces in place, let&rsquo;s pick one of the rules of boolean algebra and see if we can apply it. Commutativity sounds like it&rsquo;s probably the simplest:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">commute</span> <span class="n">quote</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">quote</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Or&#39;</span> <span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">&lt;@@</span> <span class="o">%%</span><span class="n">right</span> <span class="o">||</span> <span class="o">%%</span><span class="n">left</span> <span class="o">@@&gt;</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">And&#39;</span> <span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">&lt;@@</span> <span class="o">%%</span><span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="o">%%</span><span class="n">left</span> <span class="o">@@&gt;</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">quote</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty simple: if we see a <code>&amp;&amp;</code> or a <code>||</code> as the top expression in a quotation, swap the arguments. There&rsquo;s no recursion, so we won&rsquo;t go through the tree swapping every <code>&amp;&amp;</code> or <code>||</code> expression, although we could if we wanted&hellip;</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// basic usage</span>
</span><span class='line'><span class="o">&lt;@@</span> <span class="bp">true</span> <span class="o">||</span> <span class="bp">false</span> <span class="o">@@&gt;</span> <span class="o">=</span> <span class="n">commute</span> <span class="o">&lt;@@</span> <span class="bp">false</span> <span class="o">||</span> <span class="bp">true</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = true *)</span>
</span><span class='line'><span class="o">&lt;@@</span> <span class="s2">&quot;bob&quot;</span> <span class="o">=</span> <span class="s2">&quot;fred&quot;</span> <span class="o">||</span> <span class="s2">&quot;fred&quot;</span> <span class="o">=</span> <span class="s2">&quot;bob&quot;</span> <span class="o">@@&gt;</span> <span class="o">=</span> <span class="n">commute</span> <span class="o">&lt;@@</span> <span class="s2">&quot;fred&quot;</span> <span class="o">=</span> <span class="s2">&quot;bob&quot;</span> <span class="o">||</span> <span class="s2">&quot;bob&quot;</span> <span class="o">=</span> <span class="s2">&quot;fred&quot;</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = true *)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// only operates at the top level though</span>
</span><span class='line'><span class="o">&lt;@@</span> <span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="bp">true</span> <span class="o">||</span> <span class="bp">false</span> <span class="o">@@&gt;</span> <span class="o">=</span> <span class="n">commute</span> <span class="o">&lt;@@</span> <span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="bp">false</span> <span class="o">||</span> <span class="bp">true</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = false *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>A nice simple function, to apply a nice simple rule. Generally you&rsquo;ll want to choose when to apply something like the <code>commute</code> function, hence not making it recursive. But what about something like the identity law?</p>

<p>The identity law states that <code>true &amp;&amp; x = x</code> and <code>false || x = x</code> for all x. This looks like it might allow us to remove redundant statements from our boolean expressions without changing the logical result, and if we&rsquo;re interested in carrying out this operation at all we almost certainly want to apply it recursively down through the expression.</p>

<p>Time to break out our broad <code>ExprShape</code> patterns again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">identity</span> <span class="n">quote</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">rec</span> <span class="n">transform</span> <span class="n">q</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">q</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">And&#39;</span> <span class="o">(</span><span class="nc">True&#39;</span> <span class="o">_,</span> <span class="n">p</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">And&#39;</span> <span class="o">(</span><span class="n">p</span><span class="o">,</span> <span class="nc">True&#39;</span> <span class="o">_)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Or&#39;</span> <span class="o">(</span><span class="nc">False&#39;</span> <span class="o">_,</span> <span class="n">p</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Or&#39;</span> <span class="o">(</span><span class="n">p</span><span class="o">,</span> <span class="nc">False&#39;</span> <span class="o">_)</span>
</span><span class='line'>            <span class="o">-&gt;</span> <span class="n">transform</span> <span class="n">p</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">ShapeVar</span> <span class="n">v</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Var</span> <span class="n">v</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">ShapeLambda</span> <span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">e</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Lambda</span><span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">transform</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">ShapeCombination</span> <span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">es</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nc">RebuildShapeCombination</span><span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">es</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="n">transform</span><span class="o">)</span>
</span><span class='line'>    <span class="n">transform</span> <span class="n">quote</span>
</span></code></pre></td></tr></table></div></figure>


<p>Firstly, we check if the top of the quotation matches any of the four relevant conditions for the identity law. If any of them do, we bind the proposition that we&rsquo;re reducing to to the name <code>p</code>, and then we carry on recursing down the tree.</p>

<p>Otherwise, we&rsquo;re back to the <code>id</code> function above: a <code>Var</code> is a leaf node, we <code>transform</code> the body of any lambdas and if we hit a combination we <code>transform</code> all of it&rsquo;s constituent expressions.</p>

<p>This is starting to reach the stage it&rsquo;s worth unit testing, so let&rsquo;s break out xUnit and add some &ldquo;facts&rdquo; (you&rsquo;ll need to reference xUnit manually or via NuGet to build the tests.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">Algebra</span><span class="p">.</span><span class="nc">Boolean</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Xunit</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Fact</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="o">``</span><span class="nc">Identity</span> <span class="n">reduction</span> <span class="o">&amp;&amp;``</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Assert</span><span class="p">.</span><span class="nc">Equal</span> <span class="o">(&lt;@@</span> <span class="bp">false</span> <span class="o">@@&gt;,</span> <span class="n">identity</span> <span class="o">&lt;@@</span> <span class="bp">true</span> <span class="o">&amp;&amp;</span> <span class="bp">false</span> <span class="o">@@&gt;)</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Fact</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="o">``</span><span class="nc">Identity</span> <span class="n">reduction</span> <span class="o">||``</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Assert</span><span class="p">.</span><span class="nc">Equal</span> <span class="o">(&lt;@@</span> <span class="bp">true</span> <span class="o">@@&gt;,</span> <span class="n">identity</span> <span class="o">&lt;@@</span> <span class="bp">true</span> <span class="o">||</span> <span class="bp">false</span> <span class="o">@@&gt;)</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Fact</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="o">``</span><span class="nc">Identity</span> <span class="n">reduction</span> <span class="n">recurses</span><span class="o">``</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Assert</span><span class="p">.</span><span class="nc">Equal</span> <span class="o">(&lt;@@</span> <span class="bp">true</span> <span class="o">@@&gt;,</span> <span class="n">identity</span> <span class="o">&lt;@@</span> <span class="o">(</span><span class="bp">true</span> <span class="o">||</span> <span class="bp">false</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="bp">true</span> <span class="o">@@&gt;)</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Fact</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="o">``</span><span class="nc">Identity</span> <span class="n">reduction</span> <span class="n">recurses</span> <span class="k">with</span> <span class="n">none</span> <span class="n">boolean</span><span class="o">``</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Assert</span><span class="p">.</span><span class="nc">Equal</span> <span class="o">(&lt;@@</span> <span class="s2">&quot;bob&quot;</span> <span class="o">=</span> <span class="s2">&quot;fred&quot;</span> <span class="o">@@&gt;,</span> <span class="n">identity</span> <span class="o">&lt;@@</span> <span class="o">(</span><span class="s2">&quot;bob&quot;</span> <span class="o">=</span> <span class="s2">&quot;fred&quot;</span> <span class="o">||</span> <span class="bp">false</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="bp">true</span> <span class="o">@@&gt;)</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Fact</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="o">``</span><span class="nc">Identity</span> <span class="n">reduction</span> <span class="n">recurses</span> <span class="k">with</span> <span class="n">none</span> <span class="n">boolean</span> <span class="mi">2</span><span class="o">``</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Assert</span><span class="p">.</span><span class="nc">Equal</span> <span class="o">(&lt;@@</span> <span class="s2">&quot;bob&quot;</span> <span class="o">=</span> <span class="s2">&quot;fred&quot;</span> <span class="o">@@&gt;,</span> <span class="n">identity</span> <span class="o">&lt;@@</span> <span class="o">(</span><span class="bp">false</span> <span class="o">||</span> <span class="s2">&quot;bob&quot;</span> <span class="o">=</span> <span class="s2">&quot;fred&quot;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="bp">true</span> <span class="o">@@&gt;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there you have it, a function that takes an expression tree and manipulates it in a potentially useful fashion.</p>

<p>Why did we go to all this trouble? Well, I&rsquo;m afraid for that, dear reader, you&rsquo;ll have to either wait for the next installment or come along to my session at <a href="https://skillsmatter.com/conferences/1926-progressive-f-tutorials-2014#program">Progressive F# London 2014</a> where we look at translating quotations into other languages.</p>

<p>If you want to look into this further yourself in the mean time, an implementation of all of the rules of boolean algebra and a basic test suite can be found in a <a href="https://gist.github.com/mavnn/9acfb52c8c311879266b">gist on github</a>.</p>

<p>If you&rsquo;re feeling really brave, I also highly recommend looking into &ldquo;A Practical Theory of Language-Integrated Query&rdquo;:</p>

<ul>
<li><a href="https://skillsmatter.com/skillscasts/4486-a-practical-theory-of-language-integrated-query">Talk by Philip Wadler</a></li>
<li><a href="http://homepages.inf.ed.ac.uk/slindley/papers/practical-theory-of-linq.pdf">Academic paper describing the techniques</a> &ndash; the first few sections are very readable even without a background in programming language research, and definitely worth looking at before you get to&hellip;</li>
<li><a href="https://github.com/fsprojects/FSharp.Linq.ComposableQuery">The practical implementation</a> &ndash; if you want to watch people much cleverer than me <strong>really</strong> apply some of these principles.</li>
</ul>


<p>That&rsquo;s all till next time, and I hope your brains recover sooner than mine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If I Ruled the World... Remote Working]]></title>
    <link href="http://blog.mavnn.co.uk/remote-working/"/>
    <updated>2014-07-15T20:43:06+01:00</updated>
    <id>http://blog.mavnn.co.uk/remote-working</id>
    <content type="html"><![CDATA[<p>Welcome to a new category of posts for my blog. It&rsquo;s the &ldquo;Rule the World&rdquo; category, where I spout opinions on a subject with gay abandon, even if I can&rsquo;t actually offer that much beyond anecdotal evidence to back the opinion up.</p>

<p>On this occasion I even feel justified as someone has actively asked my opinion about something.</p>

<p>Well, that was foolish now, wasn&rsquo;t it?</p>

<!-- more -->


<h2>In the Blue Corner</h2>

<p>These questions are coming from a friend who is heading up the development team of a small but reasonably established start up in London. Hiring is competitive, wages are high, and all of their production services are running in a remote data center somewhere else anyway.</p>

<p>He&rsquo;d also like to be able to go surfing before work some mornings, which is hard in central London.</p>

<p>All of this has lead to an interest in both remote working and working from home.</p>

<h2>In the Red Corner</h2>

<p>I&rsquo;ve never been a fully remote worker, but for family reasons I&rsquo;ve been working somewhere between one and two days a week from home for about 6 years now. I&rsquo;ve also worked occasional periods of a week or two completely remotely. I&rsquo;ve therefore lived one of the scenarios that is concern to my surfing friend: can you mix and match remote/home working and office based workers, or do you have to really go the whole hog and be a fully distributed company if you want to open up the
option at all?</p>

<h2>Let&rsquo;s get started!</h2>

<p>The questions were originally sent to me by email, which I asked for permission to reproduce here, slightly reformatted and with a few bits redacted to protect the potentially innocent:</p>

<blockquote><p>At [our company] the &ldquo;default&rdquo; is very much in the office. I want to actively encourage/enable people to work remotely without it evolving into a &ldquo;second class&rdquo; citizen? Partly because I think it&rsquo;s a &ldquo;good&rdquo; thing, and so we can genuinely hire the best possible talent. And the longer the company exists the harder it will be to establish that culture. I for one would like to try surfing in the morning and working later&hellip; and I can&rsquo;t do that in London!</p>

<p>Current tools/workflow:</p>

<ul>
<li>We all use [chat software] already &ndash; I <em>think</em> we&rsquo;ll just need more discipline to ensure as much chat as possible is on [chat software] even if it&rsquo;s discussed in the office.</li>
<li>All dev goes through pull requests, which should work fine remotely too. We&rsquo;ve experimented with ScreenHero for pair programming, which in theory would work though haven&rsquo;t tried more than once or twice.</li>
</ul>


<p>Current unknowns:</p>

<ul>
<li>Are we talking working remotely, but commutable in to the office, or genuinely distributed team? Pros/cons.</li>
<li>Core working hours? How do we deal with non-devs and ensuring we have customer support covered as a company?</li>
<li>More ad-hoc catch ups? How to deal with weekly planning/priorities?</li>
<li>What kinds of machines do we buy people? Currently they&rsquo;re fast desktops, but you won&rsquo;t get the same spec on a laptop unless it&rsquo;s a brick. Jon is experimenting with top of the range 15&#8221; macbook, but personally I wouldn&rsquo;t want to lug that to the office either.</li>
<li>Web cams / other things like Sqwiggle? Do we care?</li>
</ul>
</blockquote>

<p>There&rsquo;s a fair amount of stuff there, so let&rsquo;s start knocking questions out :).</p>

<p>Starting with the easy ones first&hellip;</p>

<h2>Kit</h2>

<blockquote><ul>
<li>What kinds of machines do we buy people? Currently they&rsquo;re fast desktops, but you won&rsquo;t get the same spec on a laptop unless it&rsquo;s a brick. Jon is experimenting with top of the range 15&#8221; macbook, but personally I wouldn&rsquo;t want to lug that to the office either.</li>
<li>Web cams / other things like Sqwiggle? Do we care?</li>
</ul>
</blockquote>

<p>I do a fair amount of heavy dev work as part of my current job. My working from home kit? A <a href="http://shop.lenovo.com/gb/en/laptops/lenovo/yoga/yoga-13/#tab-tech_specs">Yoga IdeaPad</a> and a headset. It&rsquo;s a relatively high end model, and I&rsquo;d probably recommend the ThinkPad version now it exists, but really &ndash; it&rsquo;s good enough.</p>

<p>Between having an SSD and 8gb of RAM, you can easily run several copies of Visual Studio, a couple of virtual machines and all your normal background apps (email, chat, browser, etc) without noticeable slow down. It&rsquo;s light weight, has a long battery life and is comfortable to use on the move. I&rsquo;m with Hanselman &ndash; <a href="http://www.hanselman.com/blog/MyNextPCWillBeAnUltrabook.aspx">the ultrabook has arrived</a> as a development environment, and that was two years ago.</p>

<p>Is it slower than the desktop the guy next to me uses? Yes. Do I notice in day to day, even heavy weight development? No.</p>

<p>As a bonus, most ultrabooks also have a web cam built in. But you want the headset. Oh, yes. You want the headset.</p>

<p>For small groups at least, Google Hangouts or Skype appear to work pretty well. I&rsquo;ve not had reason to try anything heavier weight, although I could see some of the pair programming tools being helpful.</p>

<h2>Core working hours</h2>

<blockquote><ul>
<li>Core working hours? How do we deal with non-devs and ensuring we have customer support covered as a company?</li>
</ul>
</blockquote>

<p><strong>&hellip;rant mode: on&hellip;</strong></p>

<p>So: <a href="http://heeris.id.au/2013/this-is-why-you-shouldnt-interrupt-a-programmer/">you</a> <a href="http://lifehacker.com/how-to-stay-productive-in-an-open-working-environment-1443536319">shouldn&rsquo;t</a> <a href="http://mattrogish.com/blog/2012/03/17/open-plan-offices-must-die/">interrupt</a> <a href="http://www.thesoundagency.com/2011/sound-news/more-damaging-evidence-on-open-plan-offices/">programmers</a>. Those are just the first few results on Google, I haven&rsquo;t even started digging into the actual
scientific references.</p>

<p><strong>&hellip;rant mode: off&hellip;</strong></p>

<p>Given that you&rsquo;re not interrupting your programmers, what do you want? Well &ndash; you want asynchronous communication channels (chat, email) for when your programmer choose to interrupt themselves and you want at least each person to have at least one time a day when they&rsquo;re online with a group simultaneously. I was going to say when you have everyone on at the same time, but I&rsquo;m not actually sure that&rsquo;s a prerequisite.</p>

<p>One thing I&rsquo;ve often felt working from home in an environment where it isn&rsquo;t the norm is the pressure to &ldquo;appear to be online&rdquo; in the same way that there&rsquo;s the pressure to be &ldquo;sitting at the desk&rdquo; when you&rsquo;re in the office. In reality, both are stupid; you&rsquo;ll get better code out of me between 8pm and 10pm if I&rsquo;ve taken 3pm-5pm off to pick up my son from school and spend some time with him. In the same way, you&rsquo;ll get better code out of me after I&rsquo;ve nipped out of
the office to get a coffee than if I sit at my desk pretending to be productive when I&rsquo;m stuck on a difficult mental problem.</p>

<p>It&rsquo;s hard to judge how much of this pressure is real, and how much is in my head. But if I ruled the world, er, company, the lack of core hours would be explicit.</p>

<p>Are there exceptions to this? Yes, especially during planning phases of projects where it&rsquo;s helpful to have more people on at the same time more often. Also, as mentioned above, support isn&rsquo;t something you can turn on and off depending who happens to be online. You might not be able to allow unpredictable working hours; but that doesn&rsquo;t mean everyone has to have the same working hours.</p>

<h2>There isn&rsquo;t a water cooler!</h2>

<blockquote><ul>
<li>More ad-hoc catch ups? How to deal with weekly planning/priorities?</li>
</ul>
</blockquote>

<p>Ok, so I miss white boards when I&rsquo;m not in the office.</p>

<p>Having said that, because we don&rsquo;t like interrupting each other too much, in practice the teams I&rsquo;ve worked best with have done a great deal of their catching up via chat <em>even when they&rsquo;ve all been sitting next to each other</em>. Why? No interruptions, instant record of decisions.</p>

<p>When I&rsquo;m in the office, I do take advantage of being able to call someone over and point at the screen. It&rsquo;s a genuine downside of not being physically present that you can&rsquo;t do that when you&rsquo;re working remotely, but screen sharing tech covers most of the same ground.</p>

<h2>How does it work?</h2>

<blockquote><ul>
<li>Are we talking working remotely, but commutable in to the office, or genuinely distributed team? Pros/cons.</li>
</ul>
</blockquote>

<p>I&rsquo;ve deliberately left the most interesting question till last.</p>

<p>All of the places where I&rsquo;ve regularly worked from home have been primarily office based organisations (two have been local councils). This has had some consequences on occasion.</p>

<p>Most importantly, if you want fully remote workers and you want them to feel involved my experience suggests you will have to work <strong>hard</strong> at it to make it work. As someone who works from home some of the time, I often find I&rsquo;ve missed things when I&rsquo;ve been out of the office because they didn&rsquo;t make it onto chat or email but I then spot them when I come back in. But for me, that&rsquo;s a delay of just a day or two. For a fully remote worker, that content is just lost. The exchange
is that on the days I&rsquo;m out of the office I feel I get a lot more done, especially if I&rsquo;m working on heavily conceptual problems, and it adds an extra flexibility to the home work balance exchange that makes it massively easier to stay sane. In fact, at times (with a young child and a wife who was suffering from a chronic health condition) it has been the only way I could work full time hours. The overhead of the commute and more fixed working times would have left me unable to
get close to full time otherwise.</p>

<p>This might make it sound like I&rsquo;m claiming that the ideal is people who regularly commute into the office, and regularly work from home. And we&rsquo;ll just ignore all those hard issues with fully remote workers and building in all that deliberate extra communication.</p>

<p>But actually, I&rsquo;m not convinced.</p>

<p>Why not?</p>

<p>1) <em>That extra communication is useful anyway.</em> A lot of this stuff is things that should really, <strong>really</strong> be written down regardless, but we&rsquo;re human so we don&rsquo;t bother if there isn&rsquo;t an immediate reason.</p>

<p>2) <em>There is a high possibility you&rsquo;ll end up with fully remote workers anyway.</em> I nearly moved to Italy this year to help look after my elderly parents-in-law. If I had, I wouldn&rsquo;t have wanted to stop working for my current employer, and they didn&rsquo;t really want to let me go. And then you have the whole 24 hour support question &ndash; doesn&rsquo;t just setting up an Australian office make more sense? (Which is, in fact, what the current company have ended up doing.)</p>

<p>3) <em>You&rsquo;re already paying for the infrastructure &ndash; but not getting the cost benefits.</em> If you want to allow people to work from home, there are some cost implications. You&rsquo;ll probably want a VPN, possibly phone forwarding, etc. But you&rsquo;re still paying everyone a full London salary. And you&rsquo;ve still got as many desks as you used to. You&rsquo;re not getting all the pain, but you&rsquo;re not getting all the benefits either.</p>

<p>4) <em>Talent.</em> Not all the clever people live in [substitute your town/country here]. Most programming communities are full of online, highly English literate people (almost by definition) who <em>do not live where you do</em>. Why waste the opportunity?</p>

<p>On a more general note, things that have helped or hurt my remote working:</p>

<ul>
<li>A sensible VPN set up is great; don&rsquo;t make me bounce Spotify over <em>your</em> bandwidth.</li>
<li>Speaking of which: a basic build shouldn&rsquo;t require you to be on the VPN. Some of the integration tests may need it, but a basic build shouldn&rsquo;t. An unreliable VPN connection should be a minor inconvenience, not a reason to pack up and play tennis.</li>
<li>Video chat is sometimes nice &ndash; text based chat is invaluable. Text based chat <strong>should not go through the VPN</strong>. It&rsquo;s how you tell people the VPN isn&rsquo;t working. You might think I&rsquo;ve experienced some VPN issues over the years, I couldn&rsquo;t possibly comment.</li>
<li>If there are a group based in an office, it&rsquo;s worth investing in some kit. Having tried it, trying to have a multi-party video chat with headsets where two or more people are in the same room is painful. Get the group microphone/speaker with noise cancellation, it&rsquo;s worth it.</li>
</ul>


<h2>So &ndash; if I ruled the world&hellip;</h2>

<p>I&rsquo;d be looking at making sure that my company was fully remote worker friendly, even if I didn&rsquo;t have remote workers yet. And I&rsquo;d be doing it as early as possible.</p>

<p>YMMV :)</p>

<p>(especially if you&rsquo;re not running a software house, which I&rsquo;ve kind of assumed here)</p>
]]></content>
  </entry>
  
</feed>
