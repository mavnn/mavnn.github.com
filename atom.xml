<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mavnn's blog]]></title>
  <link href="http://blog.mavnn.co.uk/atom.xml" rel="self"/>
  <link href="http://blog.mavnn.co.uk/"/>
  <updated>2015-02-04T09:55:32+00:00</updated>
  <id>http://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Persistent Data Structures]]></title>
    <link href="http://blog.mavnn.co.uk/persistent-data-structures/"/>
    <updated>2015-02-02T15:36:51+00:00</updated>
    <id>http://blog.mavnn.co.uk/persistent-data-structures</id>
    <content type="html"><![CDATA[<p>In last week&rsquo;s <a href="http://blog.mavnn.co.uk/keeping-up-with-the-latest-hammer/">Developer Education session</a> at <a href="http://15below.com">15below</a> we had a look at immutable and persistent data structures, and why you&rsquo;d want to use them.</p>

<blockquote><p>TL;DR version: are you writing performance critical, real time code? Do you have less memory available than a low end smart phone? No?</p>

<p>Use immutable data types everywhere you can.</p></blockquote>

<p>The session was inspired by <a href="https://twitter.com/ScottWlaschin">Scott Wlaschin</a>&rsquo;s excellent <a href="http://fsharpforfunandprofit.com/posts/is-your-language-unreasonable/">is your programming language unreasonable?</a> post. If you haven&rsquo;t read it yet, go and do so &ndash; it&rsquo;s much better than the rest of this post, and you can always come back here later if you remember.</p>

<p>One of the points that Scott raises is that code written with mutable data structures (ones that you can change after they&rsquo;ve been created) is very hard to reason about. In the very literal sense of working out the reason why things happen.</p>

<!-- more -->


<p>So we kicked off with a couple of examples of the dangers of mutability. Consider the following C# code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">mercurial</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="p">{</span> <span class="s">&quot;Bob&quot;</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">DoWork</span><span class="p">(</span><span class="n">mercurial</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mercurial</span><span class="p">.</span><span class="n">First</span><span class="p">()</span> <span class="p">==</span> <span class="s">&quot;Bob&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Yay! We have Bob!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">DoSomeOtherWork</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// Actually get around to doing some work.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mercurial</span><span class="p">.</span><span class="n">First</span><span class="p">()</span> <span class="p">==</span> <span class="s">&quot;Bob&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Success&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Oops, I updated {0}&#39;s record by mistake.&quot;</span><span class="p">,</span> <span class="n">mercurial</span><span class="p">.</span><span class="n">First</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Does it update Bob&rsquo;s record, or someone else&rsquo;s? Well &ndash; this is Scott&rsquo;s point. We&rsquo;ve passed the mutable <code>mercurial</code> object (here a <code>List</code>, but it could be anything mutable) into a function (<code>DoWork</code>), and now we don&rsquo;t know what will be done to it. Even if we check that it has the value we were expecting (line 6) there&rsquo;s no guarantee that it won&rsquo;t be changed under our nose. Which in fact, it is, because the rest of the code looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">DoSomeOtherWork</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">System</span><span class="p">.</span><span class="n">Threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">500</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="k">async</span> <span class="k">void</span> <span class="nf">DoWork</span><span class="p">(</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Mercurial</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="n">Immutable</span><span class="p">.</span><span class="n">Thing</span><span class="p">(</span><span class="s">&quot;Hello world&quot;</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="n">Delay</span><span class="p">(</span><span class="m">100</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Mercurial</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Mercurial</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Fred&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This example is clearly contrived &ndash; but these kinds of bugs crop up in code a lot, and it doesn&rsquo;t even need to be asynchronous for it to happen.</p>

<p>We then discussed equality, and the fact that it can be very hard to decide what equality means for a mutable object. Is a customer object the same as another customer object because they both have the same Id? Because they&rsquo;re both the same object in memory? Because they have the same value in all of their fields? What happens if one of the fields is changed? Overriding equality in .net <a href="http://visualstudiomagazine.com/articles/2011/02/01/equality-in-net.aspx">is not trivial</a>. Edit: found a
better article on the subject of <a href="http://www.aaronstannard.com/overriding-equality-in-dotnet/">C# equality</a> by Aaron Stannard.</p>

<p>Immutable objects cannot be changed, which means that they are nearly always defined as having value based equality. If all of the fields are equal, the object is equal &ndash; and it can&rsquo;t change, so you don&rsquo;t have to worry about it shifting under you. This is such a useful property (especially if you&rsquo;re loading data from another source that you want to run comparisons on) that we&rsquo;ve even had occasions here where we&rsquo;ve considered implementing our data types as <a href="https://msdn.microsoft.com/en-us/library/dd233184.aspx">F# records</a> even when writing C# services.</p>

<p>For example, you can define an F# record like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Yes, this is the entire file</span>
</span><span class='line'><span class="k">module</span> <span class="nc">Immutable</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Thing</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="nc">One</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>        <span class="nc">Two</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then use it from C# like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// You do need to reference the project with Thing in</span>
</span><span class='line'><span class="k">static</span> <span class="kt">bool</span> <span class="nf">UseRecordTypeFromCSharp</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">myThing</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Immutable</span><span class="p">.</span><span class="n">Thing</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="m">11</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">myThing2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Immutable</span><span class="p">.</span><span class="n">Thing</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="m">11</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">myThing</span> <span class="p">==</span> <span class="n">myThing2</span><span class="p">;</span> <span class="c1">// Always returns true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If all you need is an immutable collection, rather than an immutable
object with nice value based properties then you don&rsquo;t even need to
leave the comfort of your C# window. Microsoft themselves have bought
into the concept of immutable data structures sufficiently to release
an <a href="https://msdn.microsoft.com/en-us/library/dn385366%28v=vs.110%29.aspx">Immutable Collections</a> library.</p>

<h3>But what about the memory? Think of the RAM, the poor RAM!</h3>

<p>We also discussed the downsides of immutable data types. There are two concerns which are raised most frequently. The first is performance &ndash; in .net, using immutable data structures and then doing a lot of transforms on the data will create a lot of objects. This can have a significant effect in very performance critical areas of your code. This is a valid concern where performance is paramount, and the normal way around this is to wrap a private mutable object (or raw array, for
that matter) in a function that does all of your heavy manipulation. In that way you can take advantage of the speed of imperative coding techniques whilst keeping their scope small enough to reason about the effects.</p>

<p>Of course, even if <strong>speed</strong> isn&rsquo;t of paramount importance &ndash; what about <strong>memory</strong>? After all, these allocations must be adding up on the memory side of things as well, no?</p>

<p>Well, not as much as you might think, for two reasons. One is that if your code is asynchronous, you&rsquo;re almost certainly taking copies of your mutable data structures all over the place anyway to guarantee thread safety. Well, either that or you&rsquo;re taking a lot of locks, and you&rsquo;re back into performance issues.</p>

<p>The second, and much more interesting, reason is that a very bright guy called Chris Okasaki realised back in 1996 (despite the recent surge of interest in functional programming, it&rsquo;s not new&hellip;) that you can take advantage of the fact that an object is immutable to avoid copying all of it when a new, similar object is required.</p>

<p>For example, if you add a new object to the end of an immutable list, the new list you get back doesn&rsquo;t need to be a complete copy &ndash; it can just be the single new item with a pointer back to the original list. To the person using the list, it appears to be a three item list and they are none the wiser. Because it&rsquo;s immutable, the first two values never change, so it&rsquo;s never a concern to you whether your list is a completely new one, or a &ldquo;pointer&rdquo; list. Okasaki called these data
types &ldquo;persistent&rdquo; data types as they &ldquo;persist&rdquo; a previous version of themselves when &ldquo;modified&rdquo;. You can read more about them in a <a href="https://en.wikipedia.org/wiki/Persistent_data_structure">surprisingly complete wikipedia article</a>.</p>

<p>In .net land, both the F# immutable records and collections, and the <code>System.Collections.Immutable</code> library from Microsoft mentioned above are persistent data types. So unless you&rsquo;re extremely memory constrained, you should be good to go.</p>

<p>And there you have it. An introduction to immutable data types: officially approved for use almost everywhere by your local Technical Architect.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Difficult vs Impossible]]></title>
    <link href="http://blog.mavnn.co.uk/difficult-vs-impossible/"/>
    <updated>2015-01-20T15:40:57+00:00</updated>
    <id>http://blog.mavnn.co.uk/difficult-vs-impossible</id>
    <content type="html"><![CDATA[<p>Although <a href="http://blog.mavnn.co.uk/keeping-up-with-the-latest-hammer/">programming is young</a> and we often don&rsquo;t know much about the &ldquo;best&rdquo; way to do things, we&rsquo;re not totally shooting in the dark.</p>

<p>Every so often, you come up against problems that people have investigated in detail, and given programming&rsquo;s mathematical roots this even leads on occasion to a proof about a certain type of system. It would be impossible to keep up with all of the research; but there are a few places where it&rsquo;s very helpful to know about general results.</p>

<p>I&rsquo;m going to claim here that it makes a big difference to how you handle feature requests both as a developer, and as a business, when you&rsquo;re asked to produce systems which are actually impossible.</p>

<p>Let&rsquo;s take the one that comes up most often in my experience&hellip; Consistency in distributed systems.</p>

<p>So &ndash; this comes up the moment that somebody (customer, internal stakeholder, whatever) declares that having just a single service running on a single server is just not reliable enough. At some point, something will go wrong &ndash; and when it does, the service is a SPOF (single point of failure) and your processes which use it stop.</p>

<blockquote><p>Unacceptable!</p>

<p><cite>Every product owner, ever</cite></p></blockquote>

<p>&ldquo;We must have a cluster!&rdquo; the service developer is told. &ldquo;Load balancing!&rdquo;</p>

<p>&ldquo;Hmmmm.&rdquo; says the developer to themselves. &ldquo;Distributed computing. That can get a little tricky. Let&rsquo;s see if I can nail down the actual requirements a bit more.&rdquo;</p>

<p>The Q&amp;A session goes something a bit like this:</p>

<ul>
<li>Dev: So&hellip; Let&rsquo;s start easy and assume two nodes for now. How important is it that <strong>every</strong> write is replicated to both nodes before it&rsquo;s readable?</li>
<li>PO: Critical!</li>
<li>Dev: And&hellip; How important is it that the system stays available when one node is down?</li>
<li>PO: Critical!</li>
<li>Dev <em>pausing</em>: Ah&hellip; We won&rsquo;t be able to replicate writes at that point &ndash; the second node is down.</li>
<li>PO: Oh. Right, makes sense &ndash; read availability is critical though.</li>
<li>Dev: It would make life easier if writes can only be made to one of the two nodes &ndash; let&rsquo;s call it master. That OK?</li>
<li>PO <em>thinks for while</em>: OK. It&rsquo;s not ideal, but we&rsquo;ve got a deadline. Go for it.</li>
<li>Dev: How about consistency &ndash; if Bob writes to the first node, and then immediately reads from the second, is it okay if he gets slightly out of date data?</li>
<li>PO: Absolutely not.</li>
<li>Dev: OK. Give me a moment.</li>
<li>PO: Just a moment &ndash; one last thing! This has to be super user friendly to use. So make sure it&rsquo;s completely transparent to the client consumer that they&rsquo;re talking to a cluster.</li>
<li>Dev: &hellip;right.</li>
</ul>


<p>Little known to our PO, their requirements are at this point strictly impossible. The impossibility here is a particular edge case; what happens if the &ldquo;master&rdquo; node receives a write, sends it to the &ldquo;slave&rdquo; to replicate, but then <strong>never gets a response</strong>. What does it do? Return an error to the client? Well &ndash; no. If the slave comes back up, and the replication had been successful before the slave became unavailable, then we&rsquo;d have an inconsistent history between slave and master.</p>

<p>Does it return a success? Well &ndash; no. In that case, we&rsquo;re violating our restriction that every write is replicated before it&rsquo;s considered available to read.</p>

<p>So it has to return something else &ndash; a &ldquo;pending&rdquo;, &ldquo;this write will probably be replicated some day&rdquo; response. But that violates the restriction that it shouldn&rsquo;t add any complexity to the consumer. We now have a corner case that the server can&rsquo;t handle, so it has to be passed back to the client.</p>

<p>After this first write, we do have a little bit more flexibility &ndash; we can stop accepting new writes until we&rsquo;ve heard from the slave that it&rsquo;s back up and available and just throw an error. But we&rsquo;re still left with that first, awkward write to deal with. (Perceptive readers will also realise that this set up actually leaves us less reliable for writes than a single node solution &ndash; proofs left as an exercise to the reader).</p>

<p>In reality, this impossibility is a subset of the more widely know CAP theorem: a distributed system cannot be always &ldquo;Consistent&rdquo; and always &ldquo;Available&rdquo; and still behave predictably under network &ldquo;Partitions&rdquo;. The three terms in CAP have pretty specific meanings &ndash; check out a nice introduction at <a href="http://codahale.com/you-cant-sacrifice-partition-tolerance/">You Can&rsquo;t Sacrifice Partition Tolerance</a>.</p>

<p>This is the point where reality diverges, Sliding Doors style, depending on what the developer does next. The branches are numerous, but let&rsquo;s have a look at some of the most common. As an aside, I&rsquo;ve fallen into pretty much all of these categories at different points.</p>

<h3>Option 1: The developer doesn&rsquo;t know this is impossible either</h3>

<p>At this point, we end up with a response that goes something along the lines of: &ldquo;Well &ndash; I can do you a temporary solution where we return a pending result in situation x. Bit of a pain; put it on the technical debt register, and we&rsquo;ll sort it out when we have a bit more time.&rdquo;</p>

<p>Or: &ldquo;I can&rsquo;t think of a completely fool proof solution right now; how about in situation x we return a failure for now. It&rsquo;ll be a bit confusing when a user gets told the write failed, and then it shows up later &ndash; but we&rsquo;ll get it sorted before the final release.&rdquo;</p>

<p>Neither of these solutions are wrong, as such: but the building of impossible expectations will inevitably sour the relationship between product owner and developer, and can cause serious business issues if an external customer has been promised impossible results. There may even be direct financial penalty clauses involved.</p>

<h3>Option 2: The developer knows it&rsquo;s impossible, and thinks the product owner does too</h3>

<p>Here the developer <strong>says</strong> &ldquo;Well, I can return a pending result&hellip;&rdquo; and the PO adds mentally &ldquo;&hellip;which is a OK stop gap measure, I&rsquo;ll schedule some time to clean it up later.&rdquo;</p>

<p>This leads to pretty much the same outcomes as &ldquo;Option 1&rdquo;, except the developer gets an unhealthy injection of smug self-righteousness for knowing that he never promised the impossible. In general, this is not helpful.</p>

<h3>Option 3: The developer knows it&rsquo;s impossible, tries to explain&hellip; And fails</h3>

<p>This is very similar in outcome to Options 1 &amp; 2. Just more frustrating to the developer, especially if the product owner then claims the developer is &ldquo;negative&rdquo; or &ldquo;incompetent&rdquo;.</p>

<h3>Option 4: The developer knows it&rsquo;s impossible and explains to the product owner how and why</h3>

<p>This is hard on two levels. On the first: the proof of why something can&rsquo;t be done might be genuinely difficult to understand.  On the second: it can be hard to work out if you&rsquo;ve avoided Option 3, or if people are just nodding and smiling.</p>

<p>We nearly hit one of these scenarios this week; fortunately our QA department spotted the mismatch in expectations (yay QA!). Where things got a bit strange is that it was raised as Option 3: &ldquo;hey! Can we put a bit more effort in, and make this nicer to use?&rdquo; At the QAT phase this much easier to deal with though &ndash; you don&rsquo;t have angry customers, commercial agreements and these other bits hanging over your heads (well &ndash; not if you&rsquo;re writing an internal service anyway).</p>

<h2>What can we take away from all of this?</h2>

<p>A few things.</p>

<h3>Developers</h3>

<ol>
<li>As a developer, you must know the basics of the domain you&rsquo;re working in. Keep on learning, folks.</li>
<li>You must be able to communicate as a developer. A lot of developers are introverts, myself included. This is not an excuse. Introvert means that you can&rsquo;t recharge around other people, not that you can&rsquo;t talk to them.</li>
<li>You cannot remove your developers from your customer communications, or completely separate commercial proposals and technical evaluation. You must have technical input into your business process, because sometimes its isn&rsquo;t a question of how much time you spend, how well you design or how skilled a developer you assign to the problem: it might just be impossible.</li>
</ol>


<h3>&ldquo;Product Owners&rdquo; (whatever your actual job title is)</h3>

<ol>
<li>Listen to your developers, and pay attention to the wording. If they say something is impossible (not hard, not delayed) check you understand why.</li>
<li>Be careful how you define the business problem to your developers. You may end up specifying a problem that is unsolvable if you end up layering up too many technical restrictions &ndash; while your developer may be able to suggest something that meets the business criteria without falling foul of technical (or more importantly mathematical) limitations to what is possible.</li>
<li>If you place a technical requirement (&ldquo;it must be clustered &ndash; no single points of failure!&rdquo;) make sure you understand the technical trade offs that you are imposing. This may take a long time. Alternatively, and preferably, rephrase your requirement to be your actual business requirement (&ldquo;We promised 98% uptime &ndash; what&rsquo;s your design to make sure it happens?&rdquo;).</li>
<li>You must be able and willing to say &ldquo;no&rdquo; to a customer when they ask for something impossible. You can offer alternatives, work arounds &ndash; but don&rsquo;t promise the impossible. It will come back, and it will hurt you.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping Up With the Latest Hammer]]></title>
    <link href="http://blog.mavnn.co.uk/keeping-up-with-the-latest-hammer/"/>
    <updated>2014-12-22T12:07:02+00:00</updated>
    <id>http://blog.mavnn.co.uk/keeping-up-with-the-latest-hammer</id>
    <content type="html"><![CDATA[<h2>Making Sure Your Developers Keep Developing</h2>

<p>Software development is a strange profession, mostly because it&rsquo;s so young and because the tools are changing so fast. I&rsquo;ve not been an established enough craftsman in any other trade to know whether other professions are moving as quickly these days, but at least in my imagination once a carpenter learns to use a hammer, it doesn&rsquo;t get discontinued after 2 years and the hammer taken off the market. Or a new hammer released that hammers nails ten times as fast, but has a different
shaped handle and you have to hammer sideways instead of down.</p>

<p>We don&rsquo;t even seem to be able to decide whether it&rsquo;s a craft or a science. You can earn Computer Science degrees &ndash; but then well known software professionals choose titles like <a href="https://twitter.com/unclebobmartin">Software Craftsman</a>.</p>

<p>Despite all of our claims of best practice and shared knowledge, it largely boils down to: developers don&rsquo;t know what they&rsquo;re doing yet. We&rsquo;re a new profession, and we&rsquo;re still learning &ndash; not just as individuals, but as a profession.</p>

<p>This means that both as an individual developers, and as software houses &ndash; if we stop learning, we sink. The competitive advantage of keeping up with what&rsquo;s happening in the industry so outweighs the cost of doing the research that it would be foolish not to. Because while we might not yet know the <em>right</em> way to do things, we&rsquo;re still definitely finding <em>better</em> ways to do things.</p>

<p>So: how do we do keep up to date, as <a href="http://blog.mavnn.co.uk/keeping-up-with-the-latest-hammer/#individuals">individuals</a> and as <a href="http://blog.mavnn.co.uk/keeping-up-with-the-latest-hammer/#companies">companies</a>?</p>

<!-- More -->


<h2><a name="individuals"></a> As individuals</h2>

<h3>Books and Blogs</h3>

<p>Firstly of course, you need to read. Technical books are still excellent when you need a deep dive into a specific subject, but in general a lot of the information is now becoming available in blog posts which seem to be developers main method of swapping information, ideas, and &ldquo;best practice&rdquo;. In general, if you need a deep dive into an established technology or you need to read up on a subject at a conceptual level (Test Driven Development, Functional Programming, etc.)
then a book can be very helpful. If you&rsquo;re looking into something new, or very specific (AngularJS, a particular unit testing framework) then it&rsquo;s time to hit google and read up on some blog posts. Otherwise you&rsquo;ll just have a stack of dead trees to be taking to the recycling center every six months.</p>

<h3>Conferences</h3>

<p>Sometimes, there&rsquo;s nothing like seeing somebody do something. Or hearing from someone who&rsquo;s actually done the thing you&rsquo;re thinking of doing.</p>

<p>Conferences come into their own in these situations; large conferences can be nice because of the big name speakers and the wide range of subjects but in my experience small specialist conferences have two big advantages. They give you much more access to the speakers outside the sessions, and they tend to be much cheaper!</p>

<p>Speaking at conferences is a great way to attend them cheaply, and is also a great way of ending up at things like speaker&rsquo;s dinners and making some contacts as well as learning the particular skill you went for. If you or your company is doing something well &ndash; pretty much anything well &ndash; get yourself out there. It provides great opportunities for you, and other people&rsquo;s gratefulness is a currency you can&rsquo;t buy with money.</p>

<p>And&hellip; ssssh, don&rsquo;t tell everyone: it&rsquo;s actually really easy to get speaking gigs at specialist conferences if you know about a relevant specialist subject. Why? Because people like you don&rsquo;t bother applying, and so the organisers tend to be a bit desperate. Yes, you&rsquo;ll need to do some public speaking &ndash; but that&rsquo;s not exactly a bad skill to have under your belt anyway, is it now?</p>

<h3>Research Papers</h3>

<p>Keeping up with computer science research would be a more than full time job in its own right &ndash; but the research that is turning out to have practical applications is often referenced in talks and blog posts by the people who are basing projects off it. If the project looks interesting to you, don&rsquo;t be afraid to go back and read the original research papers! There&rsquo;s generally more in there than the current project needs which might help you even further &ndash; and they are often
surprisingly readable.</p>

<h3>Training Courses</h3>

<p>And for some skills, you just need the hands on training. It can be expensive, but on occasion its worth it to pay your money and actually be taught to do something.</p>

<h3>Discernment</h3>

<p>It&rsquo;s not a word that comes up very often, but discernment is critical to software developers. Remember what I was saying above about it being a new profession? Well, one of the side effects of that is we&rsquo;re still learning from our mistakes and we&rsquo;re still repeating them. Not everything that people say is new is actually new &ndash; try and check back in the (relatively short) history of computer science to see if it&rsquo;s already been tried and failed.</p>

<p>A classic example of this is distributed computing; making lots of computers do lots of things at the same time is actually pretty hard to get right. A lot of the &ldquo;new&rdquo; solutions to the problem you see being suggested are actually ideas that people have already tried and do not work; if you need to work with distributed systems it&rsquo;s worth doing enough background research to have a hope of spotting these issues.</p>

<p>This doesn&rsquo;t necessarily mean you have to be an expert on everything you consider touching. It does mean you&rsquo;ll have to do enough research to discover the people who <em>are</em> experts so that you can get well thought out feedback about the ideas you&rsquo;re considering using.</p>

<p>This extends even to things like choosing which blogs to follow. You won&rsquo;t be able to follow all of them, so if you can find a &ldquo;core&rdquo; of people whose opinion you value they can act as a pre-filter for you on interesting new ideas, with out you trying to track all of their sources independently.</p>

<h2><a name="companies"></a> As a Company</h2>

<p>This is all great &ndash; but all of these things give knowledge to an individual. How do you share the learning around?</p>

<p>Some of these things carry across directly, of course: you should have a conference budget. You should have a training budget, too &ndash; and you should almost certainly be providing in house training for your own in house tools and procedures.</p>

<p>But that only really helps for the things that people know they don&rsquo;t know; when they&rsquo;ve realised they&rsquo;ve hit a problem and they need some knowledge. How do you share the more nebulous things? No one is going to wake up one morning and realise that the problem they&rsquo;re currently tackling would be better solved by a functional programming technique if they don&rsquo;t know what functional programming <em>is</em>.</p>

<p><a href="https://mikehadlow.com">Mike Hadlow</a> came up with a solution for this years ago that he implemented at <a href="http://15below.com">15below</a> which we&rsquo;re still using.</p>

<p>His proposal was deceptive simple: one hour a week is spent on group &ldquo;Developer Education.&rdquo; Someone prepares a topic and promises to provide notes (or a recording) afterwards &ndash; everyone else just turns up. We call them DevEds, and they run every Friday morning at 9:00am.</p>

<p>It doesn&rsquo;t sound much, does it? But actually, it&rsquo;s had a huge impact in the company. And we keep on getting asked how we do it, and how it works, so I&rsquo;m going to try and explain!</p>

<h3>What subjects?</h3>

<p>We&rsquo;re not completely random in subject choices &ndash; but we are deliberately broad. Basically, the subjects fall into three main categories:</p>

<p>1) Communication of internal changes</p>

<p>A team releases a new service for our core product. A new internal code review process is put in place. For these kind of events, we use the DevEd as a vehicle for communication to developers within the company, making sure everyone is aware of the change and allowing people to ask questions. Sometimes we&rsquo;ll put a requirement on a DevEd of this type that at least one developer from each team needs to be there (DevEds are not compulsory &ndash; just highly recommended).</p>

<p>2) Things we could be using already</p>

<p>We use Microsoft&rsquo;s .net languages for development, so (for example) we run sessions on the new features in the latest version of C# each time we upgrade. These are things that developers can go back out into the office and use today; also in this category are things like open source libraries we&rsquo;re already using.</p>

<p>3) Potential new tools and general programming knowledge</p>

<p><a href="http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29">SOLID</a> programming. Why you shouldn&rsquo;t do thread management by hand. <a href="http://blog.mavnn.co.uk/property-checking-start-challenge/">Property based testing</a> (that link is a write up of an actual DevEd session, if you&rsquo;re interested). This is where we try and introduce people to ideas they should be aware of, introduce new tools and languages that we are considering using but aren&rsquo;t yet or try and teach people how to <em>think</em> about development rather than how to <em>do</em> development. We also
tend to throw some fairly odd ball things into this category to keep people thinking, and to avoid people only knowing about things within &ldquo;our expertise.&rdquo; For example, although we&rsquo;re a Windows .net programming house we&rsquo;ve run sessions on using Emacs and Vim. Why? Because a lot of programmers use these tools, and get a great deal of value from them. Which means they probably have things to teach us if we care to learn. And yes &ndash; this blog post was written in Vim!</p>

<p>The idea in this category is not normally that a person will come out of the session being able to use something straight away &ndash; but they should now be aware it exists, and know what to look up if they do need to use it.</p>

<h3>But I don&rsquo;t learn listening to lectures!</h3>

<p>Different people learn in different ways. So we try and teach in different ways: most of our sessions are live coding demos, but some are straight up presentations; others are white board round table discussions (thrown Lego pieces optional); and we&rsquo;re trying to build in more and more practical sessions as we go forward, with groups of two or three people (preferably from different teams) working together to explore the &lsquo;thing&rsquo; we&rsquo;re looking at.</p>

<h3>The benefits</h3>

<p>What does all this buy us?</p>

<p>Well: a few things. The benefits of having a built in internal comms session is a big benefit in it&rsquo;s own right. Breaking changes to our auto-deploy system can be announced up front in a format that has more impact than any email would ever had. We don&rsquo;t always have the luxury (or remember to use it!) but when we have, it&rsquo;s worked well.</p>

<p>For keeping people up to date on the technologies and techniques within the company, I count it as invaluable. For an old-ish code base, you&rsquo;ll find C# 5.0 async/await, F# code, LINQ usage in our core product&hellip; all the types of shiny new things that save bucket loads of time when you&rsquo;re coding, but a lot of &ldquo;enterprise&rdquo; development houses will tell you not to use in case &lsquo;not everyone can understand and maintain the code&rsquo;. For us, this is much less of a problem: if a DevEd has already happened, you&rsquo;ve
either been exposed to the concepts or you can look up the presenter and, hey presto, you have an expert to ask. If there hasn&rsquo;t been one, you just ask for it &ndash; and you&rsquo;re guaranteed to have a suitable expert to deliver the session (the author of the code in question).</p>

<p>The blue sky sessions sound the least practical, but I suspect they actually have the largest impact. As software houses, we tend to specialise: a particular programming language, a particular operating system, preferred libraries, preferred database server, the list goes on. On the one hand, this is good: you <em>must</em> be expert in the tools of your trade. On the other hand, this can be crippling: if you stop evaluating the new things that come along, you&rsquo;ll go out of date. This
causes two big problems: firstly, you&rsquo;re no longer using the best tools for the job. Secondly, the staff you want most will leave.</p>

<p>They will. The people who you really want building your code will be doing all of the things from the first half of this post <em>in their own time anyway</em>. That means they&rsquo;ll know that the grass is greener. That there&rsquo;s a better way to do things. That there&rsquo;s already a respected open source project that does the thing you&rsquo;ve asked them to create on a shoe string time and testing budget. They&rsquo;ll know, they&rsquo;ll skill up, and they&rsquo;ll leave. This doesn&rsquo;t mean you should always be using the
latest &ldquo;new and shiny&rdquo; just because it is &ldquo;new and shiny&rdquo; &ndash; but it does mean that if one of your developers comes to you and says &lsquo;there is a better way!&rsquo;, you really should listen and find out if there is. And then tell the rest of the developers, so they stay excited about staying too.</p>

<h3>Preparation time</h3>

<p>Ok, so if you&rsquo;re a manager this has probably all sounded great up until this point. I mean, an hour on Friday morning when the Developers are still normally rubbing the sleep out of their eyes anyway? Good deal!</p>

<p>Let&rsquo;s hit pause for a moment.</p>

<p>These sessions are something we take reasonably seriously; some of them get more prep than others, but I can safely say that a lot of them take a full working day between preparation and post session write up (or recording upload etc). That&rsquo;s a lot of time.</p>

<p>I&rsquo;ve had a lot of questions about how we make this work, and frankly the answer is mostly me. Not me, the individual person. But me, my role: having a person who has as a serious job priority internal technical training and communication. It&rsquo;s not my only responsibility, but it&rsquo;s up there on my list in a way that it isn&rsquo;t for our other developers. This means that I have a back up session planned most of the time for if an other developer has to drop doing a session because a
project is running late. I make sure (most of the time!) that there are a few future sessions planned in. I provide support for people who know a subject but aren&rsquo;t comfortable presenting to do their first sessions.</p>

<p>I do end up also delivering the majority of the sessions; I&rsquo;ve a fairly broad range of background knowledge and as I&rsquo;m not generally running on a project critical path I&rsquo;m the &ldquo;goto&rdquo; guy if no one else is available. But that&rsquo;s not the most important thing I provide: it&rsquo;s the ongoing push to make sure these sessions don&rsquo;t just happen this week, but that they keep on happening in the future. Which means I&rsquo;m not doing other things for the company.</p>

<p>So I suppose the final message here is: if you&rsquo;re in a company where this isn&rsquo;t happening, and you have time/resource allocation responsibilities&hellip; read the benefits section again and ask yourself how your company is meeting those needs. If you&rsquo;re a developer in a company where this kind of thing or an equivalent doesn&rsquo;t happen, you pretty much only have two choices: make it happen yourself with &ldquo;brown bag&rdquo; sessions and lunch breaks &ndash; being aware that you&rsquo;re basically training yourself, and
others, to be ready to leave. Or try and convince the decision makers that keeping the business up to date is worth it. I hope this post helps.</p>

<p>If you are already doing something: awesome! Tell us about it in the comments. We like what we&rsquo;ve got, but we&rsquo;re not above stealing better ideas.</p>

<h2>Appendix</h2>

<p>Whenever I get asked about this whole process over a conference beer, the follow up is always: what subjects have you covered?</p>

<p>In terms of what the output looks like, <a href="http://blog.mavnn.co.uk/blog/categories/15below/">this blog&rsquo;s achieves will give you a selection of DevEd write ups</a>.</p>

<p>More generally, here&rsquo;s a selection of session titles from the last few years (with purely internal communication subjects removed, obviously):</p>

<ul>
<li><p>GitFlow Intro</p></li>
<li><p>Database Normalisation</p></li>
<li><p>SQL Server Storage and IO</p></li>
<li><p>Error handling with Choice</p></li>
<li><p>Introduction to NodaTime And Humanizer</p></li>
<li><p>Text Editing with vim &amp; emacs</p></li>
<li><p>Functionally SOLID</p></li>
<li><p>Influx</p></li>
<li><p>WebSQL</p></li>
<li><p>Intro to Threading</p></li>
<li><p>FsUnit and TickSpec</p></li>
<li><p>Mobile apps using PhoneGap</p></li>
<li><p>Adaptive Programming to Reduce Config</p></li>
<li><p>What is a Reverse Proxy</p></li>
<li><p>Meet EmoteBot &ndash; C# Async and Await</p></li>
<li><p>SemVers and Nuget</p></li>
<li><p>AOP &ndash; Aspect Oriented Programming</p></li>
<li><p>How To Write Scalable Services</p></li>
<li><p>A refactoring example</p></li>
<li><p>DDD 2 &ndash; Applying Strategic Design</p></li>
<li><p>DDD Strategic Design</p></li>
<li><p>Introduction to F#</p></li>
<li><p>What is REST</p></li>
<li><p>The basics of TCP/IP</p></li>
<li><p>RabbitMQ</p></li>
<li><p>LINQ To Objects from scratch</p></li>
<li><p>Estimation game</p></li>
<li><p>Real world SRP</p></li>
<li><p>Approval Tests</p></li>
<li><p>Web API</p></li>
<li><p>Octopus and Teamcity</p></li>
<li><p>Solid</p></li>
<li><p>Safe Refactoring</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modelling Inheritance With Inheritance]]></title>
    <link href="http://blog.mavnn.co.uk/modelling-inheritance-with-inheritance/"/>
    <updated>2014-12-18T12:01:41+00:00</updated>
    <id>http://blog.mavnn.co.uk/modelling-inheritance-with-inheritance</id>
    <content type="html"><![CDATA[<blockquote><p>This post is part of the <a href="https://sergeytihon.wordpress.com/tag/fsadvent/">F# Advent Calendar</a> 2014, which is stuffed full of other interesting posts. Go have a read!</p></blockquote>

<p>Note: This post is epic in length. If you just want to see the final resulting script of much silliness, skip straight to <a href="#conclusion">the conclusion</a>!</p>

<p>Note 2: If you just want to see an example of a sane generated type provider, <a href="https://github.com/mavnn/FPDays.TypeProvider/">the code from my FPDays tutorial</a> is a much better bet.</p>

<p>Note 3: There is a lot of code below. If you&rsquo;re viewing this on a desktop, I suggest collapsing the sidebar to the right otherwise you&rsquo;ll have a lot of horizontal scroll bars. If you&rsquo;re on a mobile device, you might want to bookmark for later.</p>

<p>So&hellip; I&rsquo;ve been playing with generated (not erased) type providers for a bit, and meaning to write something up about them. Most of the documentation out there is for erased type providers, and to be honest they have a lot of advantages in terms of performance.</p>

<p>But they also have two fundamental limitations:</p>

<ul>
<li>You can&rsquo;t used erased F# types in any other .net language</li>
<li>You can&rsquo;t use reflection on erased types (even in F#)</li>
</ul>


<p>So let&rsquo;s see if we can have a play with generated types, and then &ndash; given this is Christmas, and all &ndash; let&rsquo;s see if we can build Jesus&#8217; family tree in the .net type system. After all, if you&rsquo;re going to use inheritance to model something, how about modelling inheritance?</p>

<!-- more -->


<blockquote><p>If you need a reminder of type provider basics, check out <a href="http://blog.mavnn.co.uk/type-providers-from-the-ground-up/">Type Providers from the Ground Up</a></p></blockquote>

<p>Let&rsquo;s start with a really basic example of a generative type provider. We&rsquo;ll just create a single type with a static property on it.</p>

<p>First, our input. We&rsquo;re going to grab <a href="https://www.biblegateway.com/passage/?search=matthew+1%3A2-16&amp;version=NIV">the genealogy of Jesus from Matthew</a> and then massage the content just enough that the first name on each line is a &ldquo;parent&rdquo;, and any other names on a line are&hellip; other people. We&rsquo;ll assume they&rsquo;re siblings, although actually not all of them are.</p>

<pre><code>Abraham was the father of Isaac,
Isaac the father of Jacob,
Jacob the father of Judah and his brothers,
Judah the father of Perez and Zerah, whose mother was Tamar,
Perez the father of Hezron,
Hezron the father of Ram,
Ram the father of Amminadab,
... (some other people here) ...
Akim the father of Elihud,
Elihud the father of Eleazar,
Eleazar the father of Matthan,
Matthan the father of Jacob,
Jacob the father of Joseph, the husband of Mary, 
and Mary was the mother of Jesus who is called the Messiah.
</code></pre>

<p>For round one, we&rsquo;re just going to put this string into a type as a property.</p>

<p>Our type provider file looks a bit like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">AdventProvider</span>
</span><span class='line'><span class="o">#</span><span class="k">if</span> <span class="nc">INTERACTIVE</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fsi&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fs&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">AdventProvider</span> <span class="o">(</span><span class="n">cfg</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;Advent.Provided&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">tempAsmPath</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">ChangeExtension</span><span class="o">(</span><span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetTempFileName</span><span class="bp">()</span><span class="o">,</span> <span class="s2">&quot;.dll&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">tempAsm</span> <span class="o">=</span> <span class="nc">ProvidedAssembly</span> <span class="n">tempAsmPath</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;Family&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span><span class="nc">ProvidedStaticParameter</span><span class="o">(</span><span class="s2">&quot;Genealogy&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">DefineStaticParameters</span><span class="o">(</span>
</span><span class='line'>            <span class="n">parameters</span><span class="o">,</span>
</span><span class='line'>            <span class="k">fun</span> <span class="n">typeName</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">genealogy</span> <span class="o">=</span> <span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:?&gt;</span> <span class="kt">string</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">inputFile</span> <span class="o">=</span>
</span><span class='line'>                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">cfg</span><span class="o">.</span><span class="nc">ResolutionFolder</span><span class="o">,</span> <span class="n">genealogy</span><span class="o">)</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">raw</span> <span class="o">=</span>
</span><span class='line'>                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllLines</span> <span class="n">inputFile</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">g</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span>
</span><span class='line'>                            <span class="n">asm</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">ns</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">typeName</span><span class="o">,</span>
</span><span class='line'>                            <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span>
</span><span class='line'>                            <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;Raw&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span> <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">rawStr</span> <span class="o">=</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">raw</span>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="nc">GetterCode</span> <span class="o">&lt;-</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Value</span> <span class="n">rawStr</span>
</span><span class='line'>                <span class="n">g</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">g</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">g</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">RegisterRuntimeAssemblyLocationAsProbingFolder</span> <span class="n">cfg</span>
</span><span class='line'>        <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">t</span><span class="o">]</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">t</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span> <span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s with the <code>#if INTERACTIVE</code> bits? Well, that&rsquo;ll be the subject of another blog post soon; I&rsquo;m doing must of my type provider dev in Vim these days to avoid the Visual Studio restart cycle, so I thought I might as well skip the fsproj file completely.</p>

<p>In the actual provider itself, there&rsquo;s a few new things to note if you&rsquo;ve only previously done erased type provider development.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">tempAsmPath</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">ChangeExtension</span><span class="o">(</span><span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetTempFileName</span><span class="bp">()</span><span class="o">,</span> <span class="s2">&quot;.dll&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">tempAsm</span> <span class="o">=</span> <span class="nc">ProvidedAssembly</span> <span class="n">tempAsmPath</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generative type providers, unlike erased type providers, actually pass IL (.net byte code) to the compiler rather than just a quotation. To achieve that, we need to write the IL into an actual assembly that the compiler will then merge into the dll it&rsquo;s compiling.</p>

<p>Let&rsquo;s try that again, slower. The compiler will be building a piece of code that uses your type provider into <code>Output.dll</code>. It will call into your type provider, which needs to write the IL of the type/codes it&rsquo;s generating to disk into <code>Temp.dll</code>. The compiler will then take the IL from <code>Temp.dll</code> and insert it into <code>Output.dll</code>. At this point, we have no further use for <code>Temp.dll</code>, hence why we&rsquo;re using <code>GetTempFileName</code> to get a file in the OS temporary file
folder.</p>

<p>The <code>ProvidedTypes</code> API knows how to create these temporary dlls, so we wrap our filename in the <code>ProvidedAssembly</code> type.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="n">this</span><span class="o">.</span><span class="nc">RegisterRuntimeAssemblyLocationAsProbingFolder</span> <span class="n">cfg</span>
</span><span class='line'>    <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">t</span><span class="o">]</span>
</span><span class='line'>    <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">t</span><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also need to specify which types need adding to the temporary assembly. Here we&rsquo;re specifying that the parameterized type (the one that takes a filename) should be added; on line 46 of the main code you&rsquo;ll see the type generated when a parameter is supplied being added. We also need to tell the type provider where the runtime dll is being created &ndash; fortunately, a helper method works this out for us when given the config item from the type provider constructor.</p>

<p>It&rsquo;s important to note that nested types <em>should not</em> be added to the temporary assembly. That&rsquo;s handled by adding the root.</p>

<p>So, if you compile this code down you can invoke it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">#!/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">fsharpi</span>
</span><span class='line'><span class="c1">// Put all of this in a file called something like Families.fsx</span>
</span><span class='line'><span class="c1">// Yes, that hashbang line means if you make it executable it</span>
</span><span class='line'><span class="c1">// will run on linux/mac</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;AdventProvider.dll&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">AdventProvider</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Advent</span><span class="p">.</span><span class="nc">Provided</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">JesusGenerations</span> <span class="o">=</span> <span class="nc">Family</span><span class="o">&lt;</span><span class="s2">&quot;Genealogy.txt&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">printfn</span> <span class="s2">&quot;%s&quot;</span> <span class="nn">JesusGenerations</span><span class="p">.</span><span class="nc">Raw</span>
</span></code></pre></td></tr></table></div></figure>


<p>Excellent! A real, valid .net type. You can only invoke the type provider from F#, but the types generated are usable across the .net language universe &ndash; and reflection works fine.</p>

<p>So&hellip; phase two. Let&rsquo;s see if we can parse something sane out of our plain text mess to turn into types. I&rsquo;m not going to go into this in detail, but because I wanted to avoid the complication of external dependencies I just wrote a very simple regex based parser for this.</p>

<p>Behold! The <code>Parser.fs</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Parser</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Text</span><span class="p">.</span><span class="nc">RegularExpressions</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Person</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="nc">Name</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>        <span class="nc">Heir</span> <span class="o">:</span> <span class="nc">Person</span> <span class="n">option</span>
</span><span class='line'>        <span class="nc">Others</span> <span class="o">:</span> <span class="kt">string</span> <span class="kt">list</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">namesRegex</span> <span class="o">=</span> <span class="nc">Regex</span><span class="o">(@</span><span class="s2">&quot;(?&lt;name&gt;[A-Z][a-z]+)&quot;</span><span class="o">,</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">Compiled</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nc">ParseToNames</span> <span class="n">line</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">namesRegex</span><span class="o">.</span><span class="nc">Matches</span><span class="o">(</span><span class="n">line</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">cast</span><span class="o">&lt;</span><span class="nc">Match</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">m</span> <span class="o">-&gt;</span> <span class="n">m</span><span class="o">.</span><span class="nn">Groups</span><span class="p">.</span><span class="err">[&quot;</span><span class="n">name</span><span class="s2">&quot;].Value)</span>
</span><span class='line'><span class="s2">    |&gt; Seq.filter (fun n -&gt; n &lt;&gt; &quot;</span><span class="nc">King</span><span class="s2">&quot; &amp;&amp; n &lt;&gt; &quot;</span><span class="nc">Messiah</span><span class="s2">&quot; &amp;&amp; n &lt;&gt; &quot;</span><span class="nc">Babylon</span><span class="s2">&quot;)</span>
</span><span class='line'><span class="s2">    |&gt; Seq.toList</span>
</span><span class='line'><span class="s2">    |&gt; function h::t -&gt; h, t | [] -&gt; failwith &quot;</span><span class="nc">No</span> <span class="n">blank</span> <span class="n">lines</span><span class="o">!</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">let rec NamesToPerson names =</span>
</span><span class='line'><span class="s2">    match names with</span>
</span><span class='line'><span class="s2">    | [] -&gt; None</span>
</span><span class='line'><span class="s2">    | (father,others)::t -&gt;</span>
</span><span class='line'><span class="s2">        let heir =</span>
</span><span class='line'><span class="s2">            match t with</span>
</span><span class='line'><span class="s2">            | [] -&gt; None</span>
</span><span class='line'><span class="s2">            | (heir, _)::_ -&gt; Some heir</span>
</span><span class='line'><span class="s2">        Some {</span>
</span><span class='line'><span class="s2">            Name = father</span>
</span><span class='line'><span class="s2">            Heir = NamesToPerson t</span>
</span><span class='line'><span class="s2">            Others =</span>
</span><span class='line'><span class="s2">                others</span>
</span><span class='line'><span class="s2">                |&gt; List.filter</span>
</span><span class='line'><span class="s2">                    (fun c -&gt;</span>
</span><span class='line'><span class="s2">                        match heir with</span>
</span><span class='line'><span class="s2">                        | Some h -&gt; c &lt;&gt; h</span>
</span><span class='line'><span class="s2">                        | None -&gt; true)</span>
</span><span class='line'><span class="s2">        }</span>
</span><span class='line'>
</span><span class='line'><span class="s2">let Parse lines =</span>
</span><span class='line'><span class="s2">    lines</span>
</span><span class='line'><span class="s2">    |&gt; List.map ParseToNames</span>
</span><span class='line'><span class="s2">    |&gt; NamesToPerson</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nb. Never, ever, ever build a parser like this for production code. Treat this as a &ldquo;how not to build a parser&rdquo; example, and go read something like <a href="http://trelford.com/blog/post/parser.aspx">Phil&rsquo;s excellent parsing posts</a> instead.</p>

<p>So&hellip; what can we do this this?</p>

<p>Let&rsquo;s start be parsing our file, and seeing if we can build a nested set of types representing the family tree.</p>

<p>Recursive type building! Go!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">AdventProvider</span>
</span><span class='line'><span class="o">#</span><span class="k">if</span> <span class="nc">INTERACTIVE</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fsi&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fs&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;Parser.fs&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Parser</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">AdventProvider</span> <span class="o">(</span><span class="n">cfg</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;Advent.Provided&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">tempAsmPath</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">ChangeExtension</span><span class="o">(</span><span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetTempFileName</span><span class="bp">()</span><span class="o">,</span> <span class="s2">&quot;.dll&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">tempAsm</span> <span class="o">=</span> <span class="nc">ProvidedAssembly</span> <span class="n">tempAsmPath</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;Family&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span><span class="nc">ProvidedStaticParameter</span><span class="o">(</span><span class="s2">&quot;Genealogy&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">DefineStaticParameters</span><span class="o">(</span>
</span><span class='line'>            <span class="n">parameters</span><span class="o">,</span>
</span><span class='line'>            <span class="k">fun</span> <span class="n">typeName</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">genealogy</span> <span class="o">=</span> <span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:?&gt;</span> <span class="kt">string</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">inputFile</span> <span class="o">=</span>
</span><span class='line'>                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">cfg</span><span class="o">.</span><span class="nc">ResolutionFolder</span><span class="o">,</span> <span class="n">genealogy</span><span class="o">)</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">raw</span> <span class="o">=</span>
</span><span class='line'>                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllLines</span> <span class="n">inputFile</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">input</span> <span class="o">=</span>
</span><span class='line'>                    <span class="n">raw</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toList</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nc">Parse</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">g</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span>
</span><span class='line'>                            <span class="n">asm</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">ns</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">typeName</span><span class="o">,</span>
</span><span class='line'>                            <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span>
</span><span class='line'>                            <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>                <span class="n">g</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Class</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;Raw&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span> <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">rawStr</span> <span class="o">=</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">raw</span>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="nc">GetterCode</span> <span class="o">&lt;-</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Value</span> <span class="n">rawStr</span>
</span><span class='line'>                <span class="n">g</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="k">rec</span> <span class="n">personToType</span> <span class="o">(</span><span class="n">father</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">(</span><span class="n">person</span> <span class="o">:</span> <span class="nc">Person</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="o">(</span><span class="n">father</span> <span class="o">:&gt;</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Type</span><span class="o">),</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">t</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Class</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">father</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">t</span>
</span><span class='line'>                    <span class="k">match</span> <span class="n">person</span><span class="o">.</span><span class="nc">Heir</span> <span class="k">with</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">personToType</span> <span class="n">t</span> <span class="n">p</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">match</span> <span class="n">input</span> <span class="k">with</span>
</span><span class='line'>                <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="n">personToType</span> <span class="n">g</span> <span class="n">p</span>
</span><span class='line'>                <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">g</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">g</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">RegisterRuntimeAssemblyLocationAsProbingFolder</span> <span class="n">cfg</span>
</span><span class='line'>        <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">t</span><span class="o">]</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">t</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span> <span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s not looking too bad&hellip; but we&rsquo;re also getting our first hint of trouble to come. The first time I tried to use this provider, I didn&rsquo;t have lines 46 and 55. It turns out that the default attributes of a <code>ProvidedTypeDefinition</code> set the <code>Sealed</code> attribute on the class that&rsquo;s generated. If you then try and build a type that inherits from it, you get an error when you try and consume the types from the provider.</p>

<p>But, hey? We&rsquo;ve worked around that, right? I&rsquo;m sure there&rsquo;s no reason it&rsquo;s set that way by default&hellip;</p>

<p>And: we have types. Lots of types:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">#!/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">fsharpi</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;AdventProvider.dll&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">AdventProvider</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Advent</span><span class="p">.</span><span class="nc">Provided</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">JesusGenerations</span> <span class="o">=</span> <span class="nc">Family</span><span class="o">&lt;</span><span class="s2">&quot;Genealogy.txt&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">printfn</span> <span class="s2">&quot;%s&quot;</span> <span class="nn">JesusGenerations</span><span class="p">.</span><span class="nc">Raw</span>
</span><span class='line'>
</span><span class='line'><span class="nn">JesusGenerations</span><span class="p">.</span><span class="nn">Abraham</span><span class="p">.</span><span class="nn">Isaac</span><span class="p">.</span><span class="nn">Jacob</span><span class="p">.</span><span class="nn">Judah</span><span class="p">.</span><span class="nn">Perez</span><span class="p">.</span><span class="nn">Hezron</span><span class="p">.</span><span class="nn">Ram</span><span class="p">.</span><span class="nc">Amminadab</span>
</span><span class='line'><span class="c1">// ... there&#39;s more where that came from</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can even do things like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="nc">DescendedFromAbraham</span> <span class="o">(</span><span class="n">person</span> <span class="o">:</span> <span class="nn">JesusGenerations</span><span class="p">.</span><span class="nc">Abraham</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="bp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compile time family tree checking &ndash; pretty nifty. Except&hellip; when we try and call this function we realise we have a problem. None of these classes have constructors.</p>

<p>Hmmm.</p>

<p>Let&rsquo;s try and add one. Nothing fancy &ndash; just a default constructor.</p>

<p>We&rsquo;ll replace the <code>personToType</code> method with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">personToType</span> <span class="o">(</span><span class="n">father</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">(</span><span class="n">person</span> <span class="o">:</span> <span class="nc">Person</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="o">(</span><span class="n">father</span> <span class="o">:&gt;</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Type</span><span class="o">),</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Class</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">)</span>
</span><span class='line'>    <span class="n">c</span><span class="o">.</span><span class="nc">InvokeCode</span> <span class="o">&lt;-</span>
</span><span class='line'>        <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">args</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="n">failwith</span> <span class="s2">&quot;Generated constructors should always pass the instance as the first argument!&quot;</span>
</span><span class='line'>            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="o">&lt;@@</span> <span class="bp">()</span> <span class="o">@@&gt;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">c</span>
</span><span class='line'>    <span class="n">father</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">t</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">person</span><span class="o">.</span><span class="nc">Heir</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">personToType</span> <span class="n">t</span> <span class="n">p</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>All looks good. In here you can see one of the first differences between erased and generated type. For a generated type, the first input arg to the constructor is the instance of the type to be initialized &ndash; and the return type of the constructor should be null.</p>

<p>The only problem is that our type provider errors immediately on usage with an &ldquo;Argument cannot be null. Parameter name: obj&rdquo; error. Not immediately informative.</p>

<p>A quick check with a type provider providing a single type later, we can confirm that the constructor above is valid; sounds like we&rsquo;re having issues with the fact that we&rsquo;re inheriting from a provided type. Maybe they&rsquo;re sealed for a reason after all. Still; we&rsquo;re not to be deterred so easily!</p>

<p><em>Cue dramatic music of choice!</em></p>

<p>Taking an guess, we&rsquo;ll assume this might have something to do with the <code>JesusGenerations</code> type not having a constructor; we&rsquo;ll add one and try again and&hellip; no dice. Same error.</p>

<p>Which is round about the time I noticed that provided constructors also have a <code>BaseConstructorCall</code> property. Time for a slightly more invasive rewrite, leaving us an overall type provider that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">AdventProvider</span>
</span><span class='line'><span class="o">#</span><span class="k">if</span> <span class="nc">INTERACTIVE</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fsi&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fs&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;Parser.fs&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Parser</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">AdventProvider</span> <span class="o">(</span><span class="n">cfg</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;Advent.Provided&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">tempAsmPath</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">ChangeExtension</span><span class="o">(</span><span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetTempFileName</span><span class="bp">()</span><span class="o">,</span> <span class="s2">&quot;.dll&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">tempAsm</span> <span class="o">=</span> <span class="nc">ProvidedAssembly</span> <span class="n">tempAsmPath</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;Family&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span><span class="nc">ProvidedStaticParameter</span><span class="o">(</span><span class="s2">&quot;Genealogy&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">DefineStaticParameters</span><span class="o">(</span>
</span><span class='line'>            <span class="n">parameters</span><span class="o">,</span>
</span><span class='line'>            <span class="k">fun</span> <span class="n">typeName</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">genealogy</span> <span class="o">=</span> <span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:?&gt;</span> <span class="kt">string</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">inputFile</span> <span class="o">=</span>
</span><span class='line'>                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">cfg</span><span class="o">.</span><span class="nc">ResolutionFolder</span><span class="o">,</span> <span class="n">genealogy</span><span class="o">)</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">raw</span> <span class="o">=</span>
</span><span class='line'>                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllLines</span> <span class="n">inputFile</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">input</span> <span class="o">=</span>
</span><span class='line'>                    <span class="n">raw</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toList</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nc">Parse</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">g</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span>
</span><span class='line'>                            <span class="n">asm</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">ns</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">typeName</span><span class="o">,</span>
</span><span class='line'>                            <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span>
</span><span class='line'>                            <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>                <span class="n">g</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Class</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;Raw&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span> <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">rawStr</span> <span class="o">=</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">raw</span>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="nc">GetterCode</span> <span class="o">&lt;-</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Value</span> <span class="n">rawStr</span>
</span><span class='line'>                <span class="n">g</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">)</span>
</span><span class='line'>                <span class="n">c</span><span class="o">.</span><span class="nc">InvokeCode</span> <span class="o">&lt;-</span>
</span><span class='line'>                    <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                        <span class="k">match</span> <span class="n">args</span> <span class="k">with</span>
</span><span class='line'>                        <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span>
</span><span class='line'>                            <span class="n">failwith</span> <span class="s2">&quot;Generated constructors should always pass the instance as the first argument!&quot;</span>
</span><span class='line'>                        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>                            <span class="o">&lt;@@</span> <span class="bp">()</span> <span class="o">@@&gt;</span>
</span><span class='line'>                <span class="n">g</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">c</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="k">rec</span> <span class="n">personToType</span> <span class="o">(</span><span class="n">father</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="n">fatherCtor</span> <span class="o">(</span><span class="n">person</span> <span class="o">:</span> <span class="nc">Person</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="o">(</span><span class="n">father</span> <span class="o">:&gt;</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Type</span><span class="o">),</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">t</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Class</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span><span class="o">)</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">c</span><span class="o">.</span><span class="nc">BaseConstructorCall</span> <span class="o">&lt;-</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">fatherCtor</span><span class="o">,</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">c</span><span class="o">.</span><span class="nc">InvokeCode</span> <span class="o">&lt;-</span>
</span><span class='line'>                        <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                            <span class="k">match</span> <span class="n">args</span> <span class="k">with</span>
</span><span class='line'>                            <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span>
</span><span class='line'>                                <span class="n">failwith</span> <span class="s2">&quot;Generated constructors should always pass the instance as the first argument!&quot;</span>
</span><span class='line'>                            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>                                <span class="o">&lt;@@</span> <span class="bp">()</span> <span class="o">@@&gt;</span>
</span><span class='line'>                    <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">c</span>
</span><span class='line'>                    <span class="n">father</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">t</span>
</span><span class='line'>                    <span class="k">match</span> <span class="n">person</span><span class="o">.</span><span class="nc">Heir</span> <span class="k">with</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">personToType</span> <span class="n">t</span> <span class="n">c</span> <span class="n">p</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">match</span> <span class="n">input</span> <span class="k">with</span>
</span><span class='line'>                <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="n">personToType</span> <span class="n">g</span> <span class="n">c</span> <span class="n">p</span>
</span><span class='line'>                <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">g</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">g</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">RegisterRuntimeAssemblyLocationAsProbingFolder</span> <span class="n">cfg</span>
</span><span class='line'>        <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">t</span><span class="o">]</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">t</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span> <span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>It all builds, we can reference it&hellip; and then we get:</p>

<pre><code>The type provider 'AdventProvider+AdventProvider' reported an error: User defined subclasses of System.Type are not yet supported
</code></pre>

<p>Hmm. Irritating. Especially as the error message is actually incorrect; we&rsquo;re not subclassing System.Type and we know that that was working correctly as the types were being generated correctly before we tried to add constructors to them. But it looks like we might have hit the limits of what the current type provider implementation allows.</p>

<p>But we&rsquo;re still not quite done yet; let&rsquo;s turn the insanity up a notch.</p>

<p><em>Cue your choice of even more dramatic music or Benny Hill here</em></p>

<p>As well as actual inheritance in .net, we have interfaces which can be used to model inheritance. Let&rsquo;s have a last throw of the dice, and see whether we can create generated interfaces to do compile time ancestry checking.</p>

<p>Adding an <code>Interface</code> at every level turns out to be fairly easy, and it appears we can create generated interfaces &ndash; a useful trick to have up your sleeve. Let&rsquo;s have a look what that looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">AdventProvider</span>
</span><span class='line'><span class="o">#</span><span class="k">if</span> <span class="nc">INTERACTIVE</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fsi&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fs&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;Parser.fs&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Parser</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">AdventProvider</span> <span class="o">(</span><span class="n">cfg</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;Advent.Provided&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">tempAsmPath</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">ChangeExtension</span><span class="o">(</span><span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetTempFileName</span><span class="bp">()</span><span class="o">,</span> <span class="s2">&quot;.dll&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">tempAsm</span> <span class="o">=</span> <span class="nc">ProvidedAssembly</span> <span class="n">tempAsmPath</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;Family&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span><span class="nc">ProvidedStaticParameter</span><span class="o">(</span><span class="s2">&quot;Genealogy&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">DefineStaticParameters</span><span class="o">(</span>
</span><span class='line'>            <span class="n">parameters</span><span class="o">,</span>
</span><span class='line'>            <span class="k">fun</span> <span class="n">typeName</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">genealogy</span> <span class="o">=</span> <span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:?&gt;</span> <span class="kt">string</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">inputFile</span> <span class="o">=</span>
</span><span class='line'>                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">cfg</span><span class="o">.</span><span class="nc">ResolutionFolder</span><span class="o">,</span> <span class="n">genealogy</span><span class="o">)</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">raw</span> <span class="o">=</span>
</span><span class='line'>                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllLines</span> <span class="n">inputFile</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">input</span> <span class="o">=</span>
</span><span class='line'>                    <span class="n">raw</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toList</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nc">Parse</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">g</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span>
</span><span class='line'>                            <span class="n">asm</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">ns</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">typeName</span><span class="o">,</span>
</span><span class='line'>                            <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span>
</span><span class='line'>                            <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;Raw&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span> <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">rawStr</span> <span class="o">=</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">raw</span>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="nc">GetterCode</span> <span class="o">&lt;-</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Value</span> <span class="n">rawStr</span>
</span><span class='line'>                <span class="n">g</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">let</span> <span class="k">rec</span> <span class="n">personToType</span> <span class="o">(</span><span class="n">father</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">(</span><span class="n">fatherInterfaces</span> <span class="o">:</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Type</span> <span class="kt">list</span><span class="o">)</span> <span class="o">(</span><span class="n">person</span> <span class="o">:</span> <span class="nc">Person</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">parentInterface</span> <span class="o">=</span>
</span><span class='line'>                        <span class="k">match</span> <span class="n">fatherInterfaces</span> <span class="k">with</span>
</span><span class='line'>                        <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span> <span class="nc">None</span>
</span><span class='line'>                        <span class="o">|</span> <span class="n">h</span><span class="o">::_</span> <span class="o">-&gt;</span> <span class="nc">Some</span> <span class="n">h</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">i</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="s2">&quot;I&quot;</span> <span class="o">+</span> <span class="n">person</span><span class="o">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">None</span><span class="o">,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">i</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Interface</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Abstract</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">father</span><span class="o">.</span><span class="nc">AddMembers</span> <span class="o">[</span><span class="n">t</span><span class="o">;</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>                    <span class="k">match</span> <span class="n">person</span><span class="o">.</span><span class="nc">Heir</span> <span class="k">with</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">personToType</span> <span class="n">t</span> <span class="o">(</span><span class="n">i</span> <span class="o">:&gt;</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Type</span><span class="o">::</span><span class="n">fatherInterfaces</span><span class="o">)</span> <span class="n">p</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">match</span> <span class="n">input</span> <span class="k">with</span>
</span><span class='line'>                <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="n">personToType</span> <span class="n">g</span> <span class="bp">[]</span> <span class="n">p</span>
</span><span class='line'>                <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">g</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">g</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">RegisterRuntimeAssemblyLocationAsProbingFolder</span> <span class="n">cfg</span>
</span><span class='line'>        <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">t</span><span class="o">]</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">t</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span> <span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Line 58 and 59 do all the work &ndash; normally an interface has no base type, and we need to reset the type attributes to make the interface look like an interface to the compiler. This all works well &ndash; but doesn&rsquo;t, of course, give us any inheritance. Lets see if we can use those &ldquo;fatherInterfaces&rdquo; I&rsquo;ve fed into the function to get us any closer.</p>

<p>A brief experiment with <code>IDisposable</code> shows us that if we change the base type of the interface to <code>Some typeof&lt;System.IDisposable&gt;</code>, that actually works. Again &ndash; useful type provider knowledge, but doesn&rsquo;t help us here. No dice on using the parent interface as the base type &ndash; we just start getting into more of the problems we were having above inheriting from other generated types.</p>

<p>So let&rsquo;s see what happens if instead we use implement interface instead of trying to inherit the interface; it seems about as reasonable as anything else we&rsquo;re tried so far&hellip;</p>

<p>We&rsquo;ll add this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">fatherInterfaces</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="n">i</span><span class="o">.</span><span class="nc">AddInterfaceImplementation</span>
</span></code></pre></td></tr></table></div></figure>


<p>after line 59 of the version above and see what happens.</p>

<h2><a name="conclusion"></a> Conclusion</h2>

<p>And suddenly&hellip; hey presto! We can do things like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">#!/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">fsharpi</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;AdventProvider.dll&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">AdventProvider</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Advent</span><span class="p">.</span><span class="nc">Provided</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">JesusGenerations</span> <span class="o">=</span> <span class="nc">Family</span><span class="o">&lt;</span><span class="s2">&quot;Genealogy.txt&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">printfn</span> <span class="s2">&quot;%s&quot;</span> <span class="o">(</span><span class="nn">JesusGenerations</span><span class="p">.</span><span class="nn">Raw</span><span class="p">.</span><span class="nc">Substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">20</span><span class="o">)</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">descendentOfAbraham</span> <span class="o">(_</span> <span class="o">:</span> <span class="o">#</span><span class="nn">JesusGenerations</span><span class="p">.</span><span class="nc">IAbraham</span><span class="o">)</span> <span class="o">=</span> <span class="bp">true</span>
</span><span class='line'><span class="k">let</span> <span class="n">descendentOfDavid</span>
</span><span class='line'>        <span class="o">(_</span> <span class="o">:</span>
</span><span class='line'>            <span class="o">#</span><span class="nn">JesusGenerations</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Abraham</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Isaac</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Jacob</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Judah</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Perez</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Hezron</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Ram</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Amminadab</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Nahshon</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Salmon</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Boaz</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Obed</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Jesse</span>
</span><span class='line'>                <span class="p">.</span><span class="nc">IDavid</span><span class="o">)</span> <span class="o">=</span> <span class="bp">true</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// This compiles...</span>
</span><span class='line'><span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="o">&lt;|</span> <span class="n">descendentOfAbraham</span> <span class="o">({</span> <span class="k">new</span> <span class="nn">JesusGenerations</span><span class="p">.</span><span class="nn">Abraham</span><span class="p">.</span><span class="nc">IIsaac</span> <span class="o">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// So does this:</span>
</span><span class='line'><span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="o">&lt;|</span>
</span><span class='line'>    <span class="n">descendentOfDavid</span>
</span><span class='line'>        <span class="o">({</span> <span class="k">new</span> <span class="nn">JesusGenerations</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Abraham</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Isaac</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Jacob</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Judah</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Perez</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Hezron</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Ram</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Amminadab</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Nahshon</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Salmon</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Boaz</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Obed</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Jesse</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">David</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Solomon</span>
</span><span class='line'>                <span class="p">.</span><span class="nn">Rehoboam</span>
</span><span class='line'>                <span class="p">.</span><span class="nc">IAbijah</span> <span class="o">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This doesn&#39;t - how cool is that?</span>
</span><span class='line'><span class="c">(* printfn &quot;%A&quot; &lt;|</span>
</span><span class='line'><span class="c">    descendentOfDavid ({ new JesusGenerations.Abraham.IIsaac }) *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which personally I think is pretty awesome.</p>

<p>There is, unfortunately, only one problem. Whilst we now have compile time propositional logic&hellip; unfortunately our code fails at runtime with a type load error. Whilst the compiler is happy with the IL my random hacking has turned at, apparently the runtime is not.</p>

<p>Maybe next year&hellip;</p>

<p>I hope you enjoyed this random journey down the rabbit hole of type providers; and if you&rsquo;re interested in looking into the genealogy a bit further <a href="http://christianity.about.com/od/biblefactsandlists/a/jesusgenealogy.htm">this article</a> gives a brief overview of a few things, like why we think Jesus has two different genealogies in the bible and how Jewish genealogies didn&rsquo;t always include every generation.</p>

<p>See you next time: and if anyone can get the inheritance to work properly, I&rsquo;ll owe you a beverage of (reasonable) choice!</p>

<p>The code from this blog post can, as normal be found on github in the <a href="https://github.com/mavnn/Advent2014">Advent2014</a> repository.</p>

<p>It&rsquo;s set up to be developed in Vim or Emacs without project files on a nix system, but it will probably play nicely with Visual Studio as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cutting Quotations Down to Size]]></title>
    <link href="http://blog.mavnn.co.uk/cutting-quotations-down-to-size/"/>
    <updated>2014-10-07T21:30:58+01:00</updated>
    <id>http://blog.mavnn.co.uk/cutting-quotations-down-to-size</id>
    <content type="html"><![CDATA[<blockquote><p>This is part 2 in my quotations series, following on from <a href="http://blog.mavnn.co.uk/tap/">Tap, Tap, Tapping on the Door</a>.</p></blockquote>

<p>As promised in the first part of this series, here we&rsquo;re going to take a look at manipulating quotations. I mean, we&rsquo;ve got this <a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a> &ndash; now what are we going to do with it?</p>

<p>Let&rsquo;s start with something fairly straightforward; <a href="http://en.wikipedia.org/wiki/Boolean_algebra">boolean algebra</a>.</p>

<p>First, let&rsquo;s get a look at how some boolean expressions are represented in quotations.</p>

<p>Firing up F# Interactive, we&rsquo;ll feed a few in and see what happens:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&lt;@@</span> <span class="bp">true</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : Expr =</span>
</span><span class='line'><span class="c">      Value (true)</span>
</span><span class='line'><span class="c">        {CustomAttributes = [NewTuple (Value (&quot;DebugRange&quot;),</span>
</span><span class='line'><span class="c">              NewTuple (Value (&quot;stdin&quot;), Value (4), Value (4), Value (4), Value (8)))];</span>
</span><span class='line'><span class="c">         Type = System.Boolean;} *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmm. That&rsquo;s&hellip; not as nice as we might want. The custom attributes are being added by F# interactive for debugging purposes, but hopefully the general shape is clear: our expression consists of a single value of <code>true</code>.</p>

<p>I&rsquo;ll cut out the custom attributes from now on to make reading things a bit easier.</p>

<p>Next!</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&lt;@@</span> <span class="bp">true</span> <span class="o">&amp;&amp;</span> <span class="bp">true</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : Expr =</span>
</span><span class='line'><span class="c">      IfThenElse (Value (true), Value (true), Value (false))</span>
</span><span class='line'><span class="c">        {CustomAttributes = ...;</span>
</span><span class='line'><span class="c">         Type = System.Boolean;} *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So. Looks like someone has decided to represent the <code>&amp;&amp;</code> operator with the expression tree of an <code>if</code> statement. Useful in some ways; after all, any logic we can apply to an <code>&amp;&amp;</code> operator will equally apply to a logically equivalent <code>if</code> statement. Checking the <a href="http://msdn.microsoft.com/en-us/library/ee370408.aspx">MSDN documentation for Expr.IfThenElse</a> tells if that the 3 values above are <code>guard</code>, <code>thenExpr</code> and <code>elseExpr</code>. Which kind of makes sense; our <code>&lt;@@ true &amp;&amp; true @@&gt;</code> is being turned (loosely) into <code>if true then true else false</code> &ndash; which is equivalent.</p>

<p>Let&rsquo;s put something other than plain boolean constants in to see if we can make it clearer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&lt;@@</span> <span class="s2">&quot;b&quot;</span> <span class="o">=</span> <span class="s2">&quot;b&quot;</span> <span class="o">&amp;&amp;</span> <span class="s2">&quot;t&quot;</span> <span class="o">=</span> <span class="s2">&quot;t&quot;</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : Expr =</span>
</span><span class='line'><span class="c">      IfThenElse (Call (None, op_Equality, [Value (&quot;b&quot;), Value (&quot;b&quot;)]),</span>
</span><span class='line'><span class="c">                Call (None, op_Equality, [Value (&quot;t&quot;), Value (&quot;t&quot;)]), Value (false))</span>
</span><span class='line'><span class="c">        {CustomAttributes = ...;</span>
</span><span class='line'><span class="c">         Type = System.Boolean;} *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks hopeful. As a last check, let&rsquo;s take advantage of the fact that quotations are structurally comparable to double check our understanding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&lt;@@</span> <span class="k">if</span> <span class="s2">&quot;b&quot;</span> <span class="o">=</span> <span class="s2">&quot;b&quot;</span> <span class="k">then</span> <span class="s2">&quot;t&quot;</span> <span class="o">=</span> <span class="s2">&quot;t&quot;</span> <span class="k">else</span> <span class="bp">false</span> <span class="o">@@&gt;</span> <span class="o">=</span> <span class="o">&lt;@@</span> <span class="s2">&quot;b&quot;</span> <span class="o">=</span> <span class="s2">&quot;b&quot;</span> <span class="o">&amp;&amp;</span> <span class="s2">&quot;t&quot;</span> <span class="o">=</span> <span class="s2">&quot;t&quot;</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = true *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome!</p>

<p>I&rsquo;m going to take a wild punt that the <code>||</code> operator does something similar:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&lt;@@</span> <span class="k">if</span> <span class="s2">&quot;b&quot;</span> <span class="o">=</span> <span class="s2">&quot;t&quot;</span> <span class="k">then</span> <span class="bp">true</span> <span class="k">else</span> <span class="s2">&quot;t&quot;</span> <span class="o">=</span> <span class="s2">&quot;b&quot;</span> <span class="o">@@&gt;</span> <span class="o">=</span> <span class="o">&lt;@@</span> <span class="s2">&quot;b&quot;</span> <span class="o">=</span> <span class="s2">&quot;t&quot;</span> <span class="o">||</span> <span class="s2">&quot;t&quot;</span> <span class="o">=</span> <span class="s2">&quot;b&quot;</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = true *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it does. Excellent.</p>

<p>We&rsquo;ve now got an idea what the expression trees are going to look like, but how do we go about manipulating them? The answer is the answer we always hope for when traversing data structure in F#: pattern matching.</p>

<p>The <code>Expr</code> types are all recognized by a set of <a href="http://msdn.microsoft.com/en-us/library/ee370259.aspx">active patterns</a> in the <code>Microsoft.FSharp.Quotations.Patterns</code> module. The only problem is that there are about 40 cases in the active patterns, and at the moment we&rsquo;re only interested in one: the <code>IfThenElse</code> case.</p>

<p>That&rsquo;s sounding rather verbose for a language that&rsquo;s normally as succinct as F# and fortunately the language designers agreed. As well as the specific cases in the main <code>Patterns</code> module, there are a number of other modules under the <code>Microsoft.FSharp.Quotations</code> namespace that contain &ldquo;broader&rdquo; active patterns, and helper methods for rebuilding expressions.</p>

<p>Let&rsquo;s take the broadest set, from the <code>ExprShape</code> module, and have a look at a method that takes in an expression, recursively works it way through the tree, and rebuilds it exactly as it was before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Quotations</span><span class="p">.</span><span class="nc">ExprShape</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">id</span> <span class="n">q</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">q</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ShapeVar</span> <span class="n">v</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Var</span> <span class="n">v</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ShapeLambda</span> <span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">e</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Lambda</span><span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">id</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ShapeCombination</span> <span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">es</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">RebuildShapeCombination</span><span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">es</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="n">id</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, as we recurse down there are three possibilities for our expression on any one pass through the <code>id</code> function:</p>

<ul>
<li>We&rsquo;ve hit a <code>Var</code>: this is a leaf node holding a variable, we&rsquo;re done with this branch of the tree.</li>
<li>We&rsquo;ve hit a lambda function, with a variable being bound and an expression representing the body of the function. We apply <code>id</code> to the body to continue recursing down.</li>
<li>We&rsquo;ve hit something else; anything else. The <code>ShapeCombination</code> pattern knows how to take the structure apart, and the <code>RebuildShapeCombination</code> method from the same module knows how to use the object <code>ShapeCombination</code> spits to put it back together again. In the mean time, we still apply <code>id</code> to all the sub-expressions of the combination, whatever they may be.</li>
</ul>


<p>(As an aside, don&rsquo;t actually call your functions <code>id</code> &ndash; there&rsquo;s already a function called that in the standard library.)</p>

<p>Of course, on it&rsquo;s own that&rsquo;s not very exciting. But how about if before moving onto these very broad shapes, we first check some specific cases?</p>

<p>Let&rsquo;s see if we can detect <code>true</code> literals within an expression.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Quotations</span><span class="p">.</span><span class="nc">ExprShape</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Quotations</span><span class="p">.</span><span class="nc">Patterns</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">detectTrue</span> <span class="n">q</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">q</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Value</span> <span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">t</span><span class="o">)</span> <span class="k">when</span> <span class="n">t</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">o</span> <span class="o">:?&gt;</span> <span class="kt">bool</span><span class="o">)</span> <span class="o">=</span> <span class="bp">true</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ShapeVar</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="bp">false</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ShapeLambda</span> <span class="o">(_,</span> <span class="n">e</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">detectTrue</span> <span class="n">e</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ShapeCombination</span> <span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">es</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">es</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="n">detectTrue</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">fold</span> <span class="o">(||)</span> <span class="bp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Value</code> pattern gives us an object representing a literal and it&rsquo;s type as a tuple. We&rsquo;ll add a guard condition to the pattern to specify that we&rsquo;re only interested when the type is <code>bool</code> and (taking advantage of short circuiting to make sure we don&rsquo;t try and cast if it&rsquo;s not a bool!) when the value is <code>true</code>. After that, we move back to our broader patterns, but this time we&rsquo;re happy to throw away most of the information at each step as we&rsquo;re not interested in
reconstructing the tree afterwards.</p>

<p>Loading up the function in F# Interactive, we can feed it some test inputs and see how we&rsquo;re doing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">detectTrue</span> <span class="o">&lt;@@</span> <span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="bp">true</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = true *)</span>
</span><span class='line'><span class="n">detectTrue</span> <span class="o">&lt;@@</span> <span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="bp">false</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = false *)</span>
</span><span class='line'><span class="n">detectTrue</span> <span class="o">&lt;@@</span> <span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="bp">false</span> <span class="o">||</span> <span class="bp">true</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = true *)</span>
</span><span class='line'><span class="n">detectTrue</span> <span class="o">&lt;@@</span> <span class="k">fun</span> <span class="n">x</span> <span class="n">y</span> <span class="o">-&gt;</span> <span class="n">y</span> <span class="o">||</span> <span class="n">x</span> <span class="bp">true</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = true *)</span>
</span><span class='line'><span class="n">detectTrue</span> <span class="o">&lt;@@</span> <span class="k">fun</span> <span class="n">x</span> <span class="n">y</span> <span class="o">-&gt;</span> <span class="n">y</span> <span class="o">||</span> <span class="n">x</span> <span class="o">=</span> <span class="bp">true</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = true *)</span>
</span><span class='line'><span class="n">detectTrue</span> <span class="o">&lt;@@</span> <span class="s2">&quot;bob&quot;</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = false *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking good.</p>

<p>Looks like we need just one final step before we start playing with the rules of boolean algebra; let&rsquo;s check we can detect the <code>||</code> and <code>&amp;&amp;</code> operators.</p>

<p>First, let&rsquo;s give ourselves some helper active patterns of our own to detect literal <code>true</code> and <code>false</code> values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Quotations</span><span class="p">.</span><span class="nc">ExprShape</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Quotations</span><span class="p">.</span><span class="nc">Patterns</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">True&#39;</span><span class="o">|_|)</span> <span class="n">expr</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">expr</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Value</span> <span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">t</span><span class="o">)</span> <span class="k">when</span> <span class="n">t</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">o</span> <span class="o">:?&gt;</span> <span class="kt">bool</span><span class="o">)</span> <span class="o">=</span> <span class="bp">true</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="n">expr</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">None</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">False&#39;</span><span class="o">|_|)</span> <span class="n">expr</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">expr</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Value</span> <span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">t</span><span class="o">)</span> <span class="k">when</span> <span class="n">t</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">o</span> <span class="o">:?&gt;</span> <span class="kt">bool</span><span class="o">)</span> <span class="o">=</span> <span class="bp">false</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="n">expr</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s add some more for <code>||</code> and <code>&amp;&amp;</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">Or&#39;</span><span class="o">|_|)</span> <span class="n">expr</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">expr</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">IfThenElse</span> <span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="nc">True&#39;</span> <span class="o">_,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">None</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">And&#39;</span><span class="o">|_|)</span> <span class="n">expr</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">expr</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">IfThenElse</span> <span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">,</span> <span class="nc">False&#39;</span> <span class="o">_)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because you can nest patterns within a pattern match, here we&rsquo;re only matching <code>IfThenElse</code> expressions where the &lsquo;then&rsquo; clause (<code>||</code>) is always <code>true</code> or the &lsquo;else&rsquo; clause (<code>&amp;&amp;</code>) is always <code>false</code>.</p>

<p>And now, with all our pieces in place, let&rsquo;s pick one of the rules of boolean algebra and see if we can apply it. Commutativity sounds like it&rsquo;s probably the simplest:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">commute</span> <span class="n">quote</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">quote</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Or&#39;</span> <span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">&lt;@@</span> <span class="o">%%</span><span class="n">right</span> <span class="o">||</span> <span class="o">%%</span><span class="n">left</span> <span class="o">@@&gt;</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">And&#39;</span> <span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">&lt;@@</span> <span class="o">%%</span><span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="o">%%</span><span class="n">left</span> <span class="o">@@&gt;</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">quote</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty simple: if we see a <code>&amp;&amp;</code> or a <code>||</code> as the top expression in a quotation, swap the arguments. There&rsquo;s no recursion, so we won&rsquo;t go through the tree swapping every <code>&amp;&amp;</code> or <code>||</code> expression, although we could if we wanted&hellip;</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// basic usage</span>
</span><span class='line'><span class="o">&lt;@@</span> <span class="bp">true</span> <span class="o">||</span> <span class="bp">false</span> <span class="o">@@&gt;</span> <span class="o">=</span> <span class="n">commute</span> <span class="o">&lt;@@</span> <span class="bp">false</span> <span class="o">||</span> <span class="bp">true</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = true *)</span>
</span><span class='line'><span class="o">&lt;@@</span> <span class="s2">&quot;bob&quot;</span> <span class="o">=</span> <span class="s2">&quot;fred&quot;</span> <span class="o">||</span> <span class="s2">&quot;fred&quot;</span> <span class="o">=</span> <span class="s2">&quot;bob&quot;</span> <span class="o">@@&gt;</span> <span class="o">=</span> <span class="n">commute</span> <span class="o">&lt;@@</span> <span class="s2">&quot;fred&quot;</span> <span class="o">=</span> <span class="s2">&quot;bob&quot;</span> <span class="o">||</span> <span class="s2">&quot;bob&quot;</span> <span class="o">=</span> <span class="s2">&quot;fred&quot;</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = true *)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// only operates at the top level though</span>
</span><span class='line'><span class="o">&lt;@@</span> <span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="bp">true</span> <span class="o">||</span> <span class="bp">false</span> <span class="o">@@&gt;</span> <span class="o">=</span> <span class="n">commute</span> <span class="o">&lt;@@</span> <span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="bp">false</span> <span class="o">||</span> <span class="bp">true</span> <span class="o">@@&gt;;;</span>
</span><span class='line'><span class="c">(* val it : bool = false *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>A nice simple function, to apply a nice simple rule. Generally you&rsquo;ll want to choose when to apply something like the <code>commute</code> function, hence not making it recursive. But what about something like the identity law?</p>

<p>The identity law states that <code>true &amp;&amp; x = x</code> and <code>false || x = x</code> for all x. This looks like it might allow us to remove redundant statements from our boolean expressions without changing the logical result, and if we&rsquo;re interested in carrying out this operation at all we almost certainly want to apply it recursively down through the expression.</p>

<p>Time to break out our broad <code>ExprShape</code> patterns again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">identity</span> <span class="n">quote</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">rec</span> <span class="n">transform</span> <span class="n">q</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">q</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">And&#39;</span> <span class="o">(</span><span class="nc">True&#39;</span> <span class="o">_,</span> <span class="n">p</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">And&#39;</span> <span class="o">(</span><span class="n">p</span><span class="o">,</span> <span class="nc">True&#39;</span> <span class="o">_)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Or&#39;</span> <span class="o">(</span><span class="nc">False&#39;</span> <span class="o">_,</span> <span class="n">p</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Or&#39;</span> <span class="o">(</span><span class="n">p</span><span class="o">,</span> <span class="nc">False&#39;</span> <span class="o">_)</span>
</span><span class='line'>            <span class="o">-&gt;</span> <span class="n">transform</span> <span class="n">p</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">ShapeVar</span> <span class="n">v</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Var</span> <span class="n">v</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">ShapeLambda</span> <span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">e</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Lambda</span><span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">transform</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">ShapeCombination</span> <span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">es</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nc">RebuildShapeCombination</span><span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">es</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="n">transform</span><span class="o">)</span>
</span><span class='line'>    <span class="n">transform</span> <span class="n">quote</span>
</span></code></pre></td></tr></table></div></figure>


<p>Firstly, we check if the top of the quotation matches any of the four relevant conditions for the identity law. If any of them do, we bind the proposition that we&rsquo;re reducing to to the name <code>p</code>, and then we carry on recursing down the tree.</p>

<p>Otherwise, we&rsquo;re back to the <code>id</code> function above: a <code>Var</code> is a leaf node, we <code>transform</code> the body of any lambdas and if we hit a combination we <code>transform</code> all of it&rsquo;s constituent expressions.</p>

<p>This is starting to reach the stage it&rsquo;s worth unit testing, so let&rsquo;s break out xUnit and add some &ldquo;facts&rdquo; (you&rsquo;ll need to reference xUnit manually or via NuGet to build the tests.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">Algebra</span><span class="p">.</span><span class="nc">Boolean</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Xunit</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Fact</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="o">``</span><span class="nc">Identity</span> <span class="n">reduction</span> <span class="o">&amp;&amp;``</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Assert</span><span class="p">.</span><span class="nc">Equal</span> <span class="o">(&lt;@@</span> <span class="bp">false</span> <span class="o">@@&gt;,</span> <span class="n">identity</span> <span class="o">&lt;@@</span> <span class="bp">true</span> <span class="o">&amp;&amp;</span> <span class="bp">false</span> <span class="o">@@&gt;)</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Fact</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="o">``</span><span class="nc">Identity</span> <span class="n">reduction</span> <span class="o">||``</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Assert</span><span class="p">.</span><span class="nc">Equal</span> <span class="o">(&lt;@@</span> <span class="bp">true</span> <span class="o">@@&gt;,</span> <span class="n">identity</span> <span class="o">&lt;@@</span> <span class="bp">true</span> <span class="o">||</span> <span class="bp">false</span> <span class="o">@@&gt;)</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Fact</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="o">``</span><span class="nc">Identity</span> <span class="n">reduction</span> <span class="n">recurses</span><span class="o">``</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Assert</span><span class="p">.</span><span class="nc">Equal</span> <span class="o">(&lt;@@</span> <span class="bp">true</span> <span class="o">@@&gt;,</span> <span class="n">identity</span> <span class="o">&lt;@@</span> <span class="o">(</span><span class="bp">true</span> <span class="o">||</span> <span class="bp">false</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="bp">true</span> <span class="o">@@&gt;)</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Fact</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="o">``</span><span class="nc">Identity</span> <span class="n">reduction</span> <span class="n">recurses</span> <span class="k">with</span> <span class="n">none</span> <span class="n">boolean</span><span class="o">``</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Assert</span><span class="p">.</span><span class="nc">Equal</span> <span class="o">(&lt;@@</span> <span class="s2">&quot;bob&quot;</span> <span class="o">=</span> <span class="s2">&quot;fred&quot;</span> <span class="o">@@&gt;,</span> <span class="n">identity</span> <span class="o">&lt;@@</span> <span class="o">(</span><span class="s2">&quot;bob&quot;</span> <span class="o">=</span> <span class="s2">&quot;fred&quot;</span> <span class="o">||</span> <span class="bp">false</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="bp">true</span> <span class="o">@@&gt;)</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Fact</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="o">``</span><span class="nc">Identity</span> <span class="n">reduction</span> <span class="n">recurses</span> <span class="k">with</span> <span class="n">none</span> <span class="n">boolean</span> <span class="mi">2</span><span class="o">``</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Assert</span><span class="p">.</span><span class="nc">Equal</span> <span class="o">(&lt;@@</span> <span class="s2">&quot;bob&quot;</span> <span class="o">=</span> <span class="s2">&quot;fred&quot;</span> <span class="o">@@&gt;,</span> <span class="n">identity</span> <span class="o">&lt;@@</span> <span class="o">(</span><span class="bp">false</span> <span class="o">||</span> <span class="s2">&quot;bob&quot;</span> <span class="o">=</span> <span class="s2">&quot;fred&quot;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="bp">true</span> <span class="o">@@&gt;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there you have it, a function that takes an expression tree and manipulates it in a potentially useful fashion.</p>

<p>Why did we go to all this trouble? Well, I&rsquo;m afraid for that, dear reader, you&rsquo;ll have to either wait for the next installment or come along to my session at <a href="https://skillsmatter.com/conferences/1926-progressive-f-tutorials-2014#program">Progressive F# London 2014</a> where we look at translating quotations into other languages.</p>

<p>If you want to look into this further yourself in the mean time, an implementation of all of the rules of boolean algebra and a basic test suite can be found in a <a href="https://gist.github.com/mavnn/9acfb52c8c311879266b">gist on github</a>.</p>

<p>If you&rsquo;re feeling really brave, I also highly recommend looking into &ldquo;A Practical Theory of Language-Integrated Query&rdquo;:</p>

<ul>
<li><a href="https://skillsmatter.com/skillscasts/4486-a-practical-theory-of-language-integrated-query">Talk by Philip Wadler</a></li>
<li><a href="http://homepages.inf.ed.ac.uk/slindley/papers/practical-theory-of-linq.pdf">Academic paper describing the techniques</a> &ndash; the first few sections are very readable even without a background in programming language research, and definitely worth looking at before you get to&hellip;</li>
<li><a href="https://github.com/fsprojects/FSharp.Linq.ComposableQuery">The practical implementation</a> &ndash; if you want to watch people much cleverer than me <strong>really</strong> apply some of these principles.</li>
</ul>


<p>That&rsquo;s all till next time, and I hope your brains recover sooner than mine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If I Ruled the World... Remote Working]]></title>
    <link href="http://blog.mavnn.co.uk/remote-working/"/>
    <updated>2014-07-15T20:43:06+01:00</updated>
    <id>http://blog.mavnn.co.uk/remote-working</id>
    <content type="html"><![CDATA[<p>Welcome to a new category of posts for my blog. It&rsquo;s the &ldquo;Rule the World&rdquo; category, where I spout opinions on a subject with gay abandon, even if I can&rsquo;t actually offer that much beyond anecdotal evidence to back the opinion up.</p>

<p>On this occasion I even feel justified as someone has actively asked my opinion about something.</p>

<p>Well, that was foolish now, wasn&rsquo;t it?</p>

<!-- more -->


<h2>In the Blue Corner</h2>

<p>These questions are coming from a friend who is heading up the development team of a small but reasonably established start up in London. Hiring is competitive, wages are high, and all of their production services are running in a remote data center somewhere else anyway.</p>

<p>He&rsquo;d also like to be able to go surfing before work some mornings, which is hard in central London.</p>

<p>All of this has lead to an interest in both remote working and working from home.</p>

<h2>In the Red Corner</h2>

<p>I&rsquo;ve never been a fully remote worker, but for family reasons I&rsquo;ve been working somewhere between one and two days a week from home for about 6 years now. I&rsquo;ve also worked occasional periods of a week or two completely remotely. I&rsquo;ve therefore lived one of the scenarios that is concern to my surfing friend: can you mix and match remote/home working and office based workers, or do you have to really go the whole hog and be a fully distributed company if you want to open up the
option at all?</p>

<h2>Let&rsquo;s get started!</h2>

<p>The questions were originally sent to me by email, which I asked for permission to reproduce here, slightly reformatted and with a few bits redacted to protect the potentially innocent:</p>

<blockquote><p>At [our company] the &ldquo;default&rdquo; is very much in the office. I want to actively encourage/enable people to work remotely without it evolving into a &ldquo;second class&rdquo; citizen? Partly because I think it&rsquo;s a &ldquo;good&rdquo; thing, and so we can genuinely hire the best possible talent. And the longer the company exists the harder it will be to establish that culture. I for one would like to try surfing in the morning and working later&hellip; and I can&rsquo;t do that in London!</p>

<p>Current tools/workflow:</p>

<ul>
<li>We all use [chat software] already &ndash; I <em>think</em> we&rsquo;ll just need more discipline to ensure as much chat as possible is on [chat software] even if it&rsquo;s discussed in the office.</li>
<li>All dev goes through pull requests, which should work fine remotely too. We&rsquo;ve experimented with ScreenHero for pair programming, which in theory would work though haven&rsquo;t tried more than once or twice.</li>
</ul>


<p>Current unknowns:</p>

<ul>
<li>Are we talking working remotely, but commutable in to the office, or genuinely distributed team? Pros/cons.</li>
<li>Core working hours? How do we deal with non-devs and ensuring we have customer support covered as a company?</li>
<li>More ad-hoc catch ups? How to deal with weekly planning/priorities?</li>
<li>What kinds of machines do we buy people? Currently they&rsquo;re fast desktops, but you won&rsquo;t get the same spec on a laptop unless it&rsquo;s a brick. Jon is experimenting with top of the range 15&#8221; macbook, but personally I wouldn&rsquo;t want to lug that to the office either.</li>
<li>Web cams / other things like Sqwiggle? Do we care?</li>
</ul>
</blockquote>

<p>There&rsquo;s a fair amount of stuff there, so let&rsquo;s start knocking questions out :).</p>

<p>Starting with the easy ones first&hellip;</p>

<h2>Kit</h2>

<blockquote><ul>
<li>What kinds of machines do we buy people? Currently they&rsquo;re fast desktops, but you won&rsquo;t get the same spec on a laptop unless it&rsquo;s a brick. Jon is experimenting with top of the range 15&#8221; macbook, but personally I wouldn&rsquo;t want to lug that to the office either.</li>
<li>Web cams / other things like Sqwiggle? Do we care?</li>
</ul>
</blockquote>

<p>I do a fair amount of heavy dev work as part of my current job. My working from home kit? A <a href="http://shop.lenovo.com/gb/en/laptops/lenovo/yoga/yoga-13/#tab-tech_specs">Yoga IdeaPad</a> and a headset. It&rsquo;s a relatively high end model, and I&rsquo;d probably recommend the ThinkPad version now it exists, but really &ndash; it&rsquo;s good enough.</p>

<p>Between having an SSD and 8gb of RAM, you can easily run several copies of Visual Studio, a couple of virtual machines and all your normal background apps (email, chat, browser, etc) without noticeable slow down. It&rsquo;s light weight, has a long battery life and is comfortable to use on the move. I&rsquo;m with Hanselman &ndash; <a href="http://www.hanselman.com/blog/MyNextPCWillBeAnUltrabook.aspx">the ultrabook has arrived</a> as a development environment, and that was two years ago.</p>

<p>Is it slower than the desktop the guy next to me uses? Yes. Do I notice in day to day, even heavy weight development? No.</p>

<p>As a bonus, most ultrabooks also have a web cam built in. But you want the headset. Oh, yes. You want the headset.</p>

<p>For small groups at least, Google Hangouts or Skype appear to work pretty well. I&rsquo;ve not had reason to try anything heavier weight, although I could see some of the pair programming tools being helpful.</p>

<h2>Core working hours</h2>

<blockquote><ul>
<li>Core working hours? How do we deal with non-devs and ensuring we have customer support covered as a company?</li>
</ul>
</blockquote>

<p><strong>&hellip;rant mode: on&hellip;</strong></p>

<p>So: <a href="http://heeris.id.au/2013/this-is-why-you-shouldnt-interrupt-a-programmer/">you</a> <a href="http://lifehacker.com/how-to-stay-productive-in-an-open-working-environment-1443536319">shouldn&rsquo;t</a> <a href="http://mattrogish.com/blog/2012/03/17/open-plan-offices-must-die/">interrupt</a> <a href="http://www.thesoundagency.com/2011/sound-news/more-damaging-evidence-on-open-plan-offices/">programmers</a>. Those are just the first few results on Google, I haven&rsquo;t even started digging into the actual
scientific references.</p>

<p><strong>&hellip;rant mode: off&hellip;</strong></p>

<p>Given that you&rsquo;re not interrupting your programmers, what do you want? Well &ndash; you want asynchronous communication channels (chat, email) for when your programmer choose to interrupt themselves and you want at least each person to have at least one time a day when they&rsquo;re online with a group simultaneously. I was going to say when you have everyone on at the same time, but I&rsquo;m not actually sure that&rsquo;s a prerequisite.</p>

<p>One thing I&rsquo;ve often felt working from home in an environment where it isn&rsquo;t the norm is the pressure to &ldquo;appear to be online&rdquo; in the same way that there&rsquo;s the pressure to be &ldquo;sitting at the desk&rdquo; when you&rsquo;re in the office. In reality, both are stupid; you&rsquo;ll get better code out of me between 8pm and 10pm if I&rsquo;ve taken 3pm-5pm off to pick up my son from school and spend some time with him. In the same way, you&rsquo;ll get better code out of me after I&rsquo;ve nipped out of
the office to get a coffee than if I sit at my desk pretending to be productive when I&rsquo;m stuck on a difficult mental problem.</p>

<p>It&rsquo;s hard to judge how much of this pressure is real, and how much is in my head. But if I ruled the world, er, company, the lack of core hours would be explicit.</p>

<p>Are there exceptions to this? Yes, especially during planning phases of projects where it&rsquo;s helpful to have more people on at the same time more often. Also, as mentioned above, support isn&rsquo;t something you can turn on and off depending who happens to be online. You might not be able to allow unpredictable working hours; but that doesn&rsquo;t mean everyone has to have the same working hours.</p>

<h2>There isn&rsquo;t a water cooler!</h2>

<blockquote><ul>
<li>More ad-hoc catch ups? How to deal with weekly planning/priorities?</li>
</ul>
</blockquote>

<p>Ok, so I miss white boards when I&rsquo;m not in the office.</p>

<p>Having said that, because we don&rsquo;t like interrupting each other too much, in practice the teams I&rsquo;ve worked best with have done a great deal of their catching up via chat <em>even when they&rsquo;ve all been sitting next to each other</em>. Why? No interruptions, instant record of decisions.</p>

<p>When I&rsquo;m in the office, I do take advantage of being able to call someone over and point at the screen. It&rsquo;s a genuine downside of not being physically present that you can&rsquo;t do that when you&rsquo;re working remotely, but screen sharing tech covers most of the same ground.</p>

<h2>How does it work?</h2>

<blockquote><ul>
<li>Are we talking working remotely, but commutable in to the office, or genuinely distributed team? Pros/cons.</li>
</ul>
</blockquote>

<p>I&rsquo;ve deliberately left the most interesting question till last.</p>

<p>All of the places where I&rsquo;ve regularly worked from home have been primarily office based organisations (two have been local councils). This has had some consequences on occasion.</p>

<p>Most importantly, if you want fully remote workers and you want them to feel involved my experience suggests you will have to work <strong>hard</strong> at it to make it work. As someone who works from home some of the time, I often find I&rsquo;ve missed things when I&rsquo;ve been out of the office because they didn&rsquo;t make it onto chat or email but I then spot them when I come back in. But for me, that&rsquo;s a delay of just a day or two. For a fully remote worker, that content is just lost. The exchange
is that on the days I&rsquo;m out of the office I feel I get a lot more done, especially if I&rsquo;m working on heavily conceptual problems, and it adds an extra flexibility to the home work balance exchange that makes it massively easier to stay sane. In fact, at times (with a young child and a wife who was suffering from a chronic health condition) it has been the only way I could work full time hours. The overhead of the commute and more fixed working times would have left me unable to
get close to full time otherwise.</p>

<p>This might make it sound like I&rsquo;m claiming that the ideal is people who regularly commute into the office, and regularly work from home. And we&rsquo;ll just ignore all those hard issues with fully remote workers and building in all that deliberate extra communication.</p>

<p>But actually, I&rsquo;m not convinced.</p>

<p>Why not?</p>

<p>1) <em>That extra communication is useful anyway.</em> A lot of this stuff is things that should really, <strong>really</strong> be written down regardless, but we&rsquo;re human so we don&rsquo;t bother if there isn&rsquo;t an immediate reason.</p>

<p>2) <em>There is a high possibility you&rsquo;ll end up with fully remote workers anyway.</em> I nearly moved to Italy this year to help look after my elderly parents-in-law. If I had, I wouldn&rsquo;t have wanted to stop working for my current employer, and they didn&rsquo;t really want to let me go. And then you have the whole 24 hour support question &ndash; doesn&rsquo;t just setting up an Australian office make more sense? (Which is, in fact, what the current company have ended up doing.)</p>

<p>3) <em>You&rsquo;re already paying for the infrastructure &ndash; but not getting the cost benefits.</em> If you want to allow people to work from home, there are some cost implications. You&rsquo;ll probably want a VPN, possibly phone forwarding, etc. But you&rsquo;re still paying everyone a full London salary. And you&rsquo;ve still got as many desks as you used to. You&rsquo;re not getting all the pain, but you&rsquo;re not getting all the benefits either.</p>

<p>4) <em>Talent.</em> Not all the clever people live in [substitute your town/country here]. Most programming communities are full of online, highly English literate people (almost by definition) who <em>do not live where you do</em>. Why waste the opportunity?</p>

<p>On a more general note, things that have helped or hurt my remote working:</p>

<ul>
<li>A sensible VPN set up is great; don&rsquo;t make me bounce Spotify over <em>your</em> bandwidth.</li>
<li>Speaking of which: a basic build shouldn&rsquo;t require you to be on the VPN. Some of the integration tests may need it, but a basic build shouldn&rsquo;t. An unreliable VPN connection should be a minor inconvenience, not a reason to pack up and play tennis.</li>
<li>Video chat is sometimes nice &ndash; text based chat is invaluable. Text based chat <strong>should not go through the VPN</strong>. It&rsquo;s how you tell people the VPN isn&rsquo;t working. You might think I&rsquo;ve experienced some VPN issues over the years, I couldn&rsquo;t possibly comment.</li>
<li>If there are a group based in an office, it&rsquo;s worth investing in some kit. Having tried it, trying to have a multi-party video chat with headsets where two or more people are in the same room is painful. Get the group microphone/speaker with noise cancellation, it&rsquo;s worth it.</li>
</ul>


<h2>So &ndash; if I ruled the world&hellip;</h2>

<p>I&rsquo;d be looking at making sure that my company was fully remote worker friendly, even if I didn&rsquo;t have remote workers yet. And I&rsquo;d be doing it as early as possible.</p>

<p>YMMV :)</p>

<p>(especially if you&rsquo;re not running a software house, which I&rsquo;ve kind of assumed here)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Property Checking Start Challenge]]></title>
    <link href="http://blog.mavnn.co.uk/property-checking-start-challenge/"/>
    <updated>2014-06-25T12:25:17+01:00</updated>
    <id>http://blog.mavnn.co.uk/property-checking-start-challenge</id>
    <content type="html"><![CDATA[<p>Almost a year ago now, I wrote up a <a href="http://blog.mavnn.co.uk/fscheck-breaking-your-code-in-new-and-exciting-ways/">blog post</a> on using <a href="https://github.com/fsharp/FsCheck">FsCheck</a>. I still rate it as an excellent tool, but unfortunately we don&rsquo;t manage to use it that much. The reasons for this basically boil down to the fact that a) we tend to forget it exists and b) a good deal of our code is written in C# or VB.net, and the original API is not very friendly from those languages.</p>

<p>So as part of the <a href="http://15below.com/">15below</a> developer education sessions we&rsquo;re going to try an exercise to see if we can bring a bit more property based testing into our code base!</p>

<!-- more -->


<h2>Never trust the user&hellip;</h2>

<p>One of the things we do quite a lot of as a company is sending either automated voice calls or SMS messages. The phone number we&rsquo;re trying to contact is often free text provided by the customer, while the voice/SMS companies tend to be very keen on phone numbers that are in (something at least similar to) the <a href="http://en.wikipedia.org/wiki/E.164">international E.164</a> phone number format.</p>

<p>Unfortunately, users don&rsquo;t tend to very good at sticking to standards in free text fields &ndash; so it some point your code needs to make the call about whether you&rsquo;re convinced the phone number you have is valid or not&hellip;</p>

<p>For the exercise, I&rsquo;ve created idiomatic stubs of a <code>PhoneNumber</code> class in both F# and C# with methods for creating them that check if the input string is valid. The C# version uses <code>PhoneNumber.TryParse</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Text.RegularExpressions</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">CSharp.FsCheck</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">PhoneNumber</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">int</span> <span class="n">CountryCode</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">int</span> <span class="n">IdentificationCode</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">int</span> <span class="n">SubscriberNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">private</span> <span class="nf">PhoneNumber</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">private</span> <span class="nf">PhoneNumber</span><span class="p">(</span><span class="kt">int</span> <span class="n">countryCode</span><span class="p">,</span> <span class="kt">int</span> <span class="n">identificationCode</span><span class="p">,</span> <span class="kt">int</span> <span class="n">subscriberNumber</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">CountryCode</span> <span class="p">=</span> <span class="n">countryCode</span><span class="p">;</span>
</span><span class='line'>            <span class="n">IdentificationCode</span> <span class="p">=</span> <span class="n">identificationCode</span><span class="p">;</span>
</span><span class='line'>            <span class="n">SubscriberNumber</span> <span class="p">=</span> <span class="n">subscriberNumber</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">TryParse</span><span class="p">(</span><span class="kt">string</span> <span class="n">number</span><span class="p">,</span> <span class="k">out</span> <span class="n">PhoneNumber</span> <span class="n">ph</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">reg</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Regex</span><span class="p">(</span><span class="s">@&quot;\+(?&lt;cc&gt;\d+) (?&lt;ic&gt;\d+) (?&lt;sn&gt;\d+)&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(!</span><span class="n">reg</span><span class="p">.</span><span class="n">IsMatch</span><span class="p">(</span><span class="n">number</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">ph</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">match</span> <span class="p">=</span> <span class="n">reg</span><span class="p">.</span><span class="n">Match</span><span class="p">(</span><span class="n">number</span><span class="p">);</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">countryCode</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="s">&quot;cc&quot;</span><span class="p">].</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">identificationCode</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="s">&quot;ic&quot;</span><span class="p">].</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">subscriberNumber</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="s">&quot;sn&quot;</span><span class="p">].</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>            <span class="n">ph</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PhoneNumber</span><span class="p">(</span><span class="n">countryCode</span><span class="p">,</span> <span class="n">identificationCode</span><span class="p">,</span> <span class="n">subscriberNumber</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whilst the F# version uses a discriminated union:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nn">FsCheck</span><span class="p">.</span><span class="nc">PhoneNumber</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Text</span><span class="p">.</span><span class="nc">RegularExpressions</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">PossibleNumber</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">CountryCode</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">IdentificationCode</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">SubscriberNumber</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">PhoneNumber</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ValidPhoneNumber</span> <span class="k">of</span> <span class="nc">PossibleNumber</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">InvalidPhoneNumber</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Shadow the name so that no one else</span>
</span><span class='line'><span class="c1">// can create &quot;ValidPhoneNumber&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="nc">ValidPhoneNumber</span> <span class="n">input</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">reg</span> <span class="o">=</span> <span class="nc">Regex</span><span class="o">(@</span><span class="s2">&quot;</span><span class="err">\</span><span class="s2">+(?&lt;cc&gt;</span><span class="err">\</span><span class="s2">d+) (?&lt;ic&gt;</span><span class="err">\</span><span class="s2">d+) (?&lt;sn&gt;</span><span class="err">\</span><span class="s2">d+)&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">reg</span><span class="o">.</span><span class="nc">IsMatch</span><span class="o">(</span><span class="n">input</span><span class="o">)</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="bp">true</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">groups</span> <span class="o">=</span> <span class="n">reg</span><span class="o">.</span><span class="nc">Match</span><span class="o">(</span><span class="n">input</span><span class="o">).</span><span class="nc">Groups</span>
</span><span class='line'>        <span class="nc">ValidPhoneNumber</span> <span class="o">{</span>
</span><span class='line'>            <span class="nc">CountryCode</span> <span class="o">=</span> <span class="n">groups</span><span class="o">.[</span><span class="s2">&quot;cc&quot;</span><span class="o">].</span><span class="nc">Value</span> <span class="o">|&gt;</span> <span class="kt">int</span>
</span><span class='line'>            <span class="nc">IdentificationCode</span> <span class="o">=</span> <span class="n">groups</span><span class="o">.[</span><span class="s2">&quot;ic&quot;</span><span class="o">].</span><span class="nc">Value</span> <span class="o">|&gt;</span> <span class="kt">int</span>
</span><span class='line'>            <span class="nc">SubscriberNumber</span> <span class="o">=</span> <span class="n">groups</span><span class="o">.[</span><span class="s2">&quot;sn&quot;</span><span class="o">].</span><span class="nc">Value</span> <span class="o">|&gt;</span> <span class="kt">int</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="bp">false</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">InvalidPhoneNumber</span> <span class="s2">&quot;No good&quot;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>The challenge will be to use property checking to take the stub to a class that fulfils the following properties:</p>

<ul>
<li>Country code between 1 and 3 digits</li>
<li>Identification code 4 or less digits (may be missing)</li>
<li>Subscription number between 1 and (15 &ndash; country code &ndash; identification code) digits</li>
<li>Less than 15 total digits</li>
</ul>


<p>These all come straight from the specification &ndash; we&rsquo;re going to ignore country groups for now.</p>

<p>Each of the two projects also includes a PropertyChecks file that contains the skeleton of an NUnit based FsCheck test suite. We only have an hour for our DevEd sessions, so the project includes a reasonable amount to get you going. Each one has a &ldquo;sanity check&rdquo; test with a known good phone number, and property based checks for the length of the country code and whether all valid numbers are recognised as valid. To make the second property test work, they also both include a custom
generator for valid phone numbers.</p>

<p>The C# version ended up looking like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">NUnit.Framework</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">FsCheck.Fluent</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">FsCheck</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Microsoft.FSharp.Collections</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">CSharp.FsCheck</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">    [TestFixture]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">ManualChecks</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'><span class="na">        [Test]</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">SanityCheck</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">PhoneNumber</span> <span class="n">ph</span><span class="p">;</span>
</span><span class='line'>            <span class="n">PhoneNumber</span><span class="p">.</span><span class="n">TryParse</span><span class="p">(</span><span class="s">&quot;+44 123 456789&quot;</span><span class="p">,</span> <span class="k">out</span> <span class="n">ph</span><span class="p">);</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">ph</span><span class="p">.</span><span class="n">CountryCode</span><span class="p">,</span> <span class="m">44</span><span class="p">);</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">ph</span><span class="p">.</span><span class="n">IdentificationCode</span><span class="p">,</span> <span class="m">123</span><span class="p">);</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">ph</span><span class="p">.</span><span class="n">SubscriberNumber</span><span class="p">,</span> <span class="m">456789</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="na">    [TestFixture]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">PropertyChecks</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">class</span> <span class="nc">GeneratedValidNumber</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">public</span> <span class="kt">int</span> <span class="n">Country</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">public</span> <span class="kt">int?</span> <span class="n">Identification</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">public</span> <span class="kt">int</span> <span class="n">Subscriber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">public</span> <span class="kt">string</span> <span class="n">InputString</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">public</span> <span class="nf">GeneratedValidNumber</span><span class="p">(</span><span class="kt">int</span> <span class="n">country</span><span class="p">,</span> <span class="kt">int?</span> <span class="n">identification</span><span class="p">,</span> <span class="kt">int</span> <span class="n">subscriber</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Country</span> <span class="p">=</span> <span class="n">country</span><span class="p">;</span>
</span><span class='line'>                <span class="n">Identification</span> <span class="p">=</span> <span class="n">identification</span><span class="p">;</span>
</span><span class='line'>                <span class="n">Subscriber</span> <span class="p">=</span> <span class="n">subscriber</span><span class="p">;</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">idString</span> <span class="p">=</span>
</span><span class='line'>                    <span class="n">identification</span><span class="p">.</span><span class="n">HasValue</span> <span class="p">?</span> <span class="s">&quot; &quot;</span> <span class="p">+</span> <span class="n">identification</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="p">:</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="n">InputString</span> <span class="p">=</span> <span class="s">&quot;+&quot;</span> <span class="p">+</span> <span class="n">country</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="p">+</span> <span class="n">idString</span> <span class="p">+</span> <span class="s">&quot; &quot;</span> <span class="p">+</span> <span class="n">subscriber</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="s">&quot;&lt;&quot;</span> <span class="p">+</span> <span class="n">InputString</span> <span class="p">+</span> <span class="s">&quot;&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="n">Gen</span><span class="p">&lt;</span><span class="n">GeneratedValidNumber</span><span class="p">&gt;</span> <span class="n">ValidPhoneNumberGenerator</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">nullableGen</span> <span class="p">=</span>
</span><span class='line'>                <span class="k">from</span> <span class="n">i</span> <span class="k">in</span> <span class="n">Any</span><span class="p">.</span><span class="n">IntBetween</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">9999</span><span class="p">)</span>
</span><span class='line'>                <span class="k">select</span> <span class="k">new</span> <span class="n">Nullable</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">numberGen</span> <span class="p">=</span>
</span><span class='line'>                <span class="k">from</span> <span class="n">country</span> <span class="k">in</span> <span class="n">Any</span><span class="p">.</span><span class="n">IntBetween</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">999</span><span class="p">)</span>
</span><span class='line'>                <span class="k">from</span> <span class="n">identification</span> <span class="k">in</span> <span class="n">Any</span><span class="p">.</span><span class="n">GeneratorIn</span><span class="p">&lt;</span><span class="kt">int?</span><span class="p">&gt;(</span><span class="n">nullableGen</span><span class="p">,</span> <span class="n">Any</span><span class="p">.</span><span class="n">Value</span><span class="p">&lt;</span><span class="kt">int?</span><span class="p">&gt;(</span><span class="k">null</span><span class="p">))</span>
</span><span class='line'>                <span class="k">from</span> <span class="n">subscriber</span> <span class="k">in</span> <span class="n">Any</span><span class="p">.</span><span class="n">IntBetween</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">99999999</span><span class="p">)</span>
</span><span class='line'>                <span class="k">select</span> <span class="k">new</span> <span class="nf">GeneratedValidNumber</span><span class="p">(</span><span class="n">country</span><span class="p">,</span> <span class="n">identification</span><span class="p">,</span> <span class="n">subscriber</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">numberGen</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="na">        [Test]</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">CountryCodeLessThan4digits</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Spec</span><span class="p">.</span><span class="n">ForAny</span><span class="p">(</span>
</span><span class='line'>                <span class="p">(</span><span class="n">DontSize</span><span class="p">&lt;</span><span class="kt">uint</span><span class="p">&gt;</span> <span class="n">country</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="kt">var</span> <span class="n">cc</span> <span class="p">=</span> <span class="n">country</span><span class="p">.</span><span class="n">Item</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">PhoneNumber</span> <span class="n">ph</span><span class="p">;</span>
</span><span class='line'>                    <span class="kt">var</span> <span class="n">ec</span> <span class="p">=</span> <span class="n">PhoneNumber</span><span class="p">.</span><span class="n">TryParse</span><span class="p">(</span><span class="s">&quot;+&quot;</span> <span class="p">+</span> <span class="n">cc</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="p">+</span> <span class="s">&quot; 1234 123456&quot;</span><span class="p">,</span> <span class="k">out</span> <span class="n">ph</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">ph</span><span class="p">.</span><span class="n">CountryCode</span> <span class="p">&lt;</span> <span class="m">1000</span><span class="p">;</span>
</span><span class='line'>                <span class="p">})</span>
</span><span class='line'>                <span class="p">.</span><span class="n">QuickCheckThrowOnFailure</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">        [Test]</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">ValidNumbersAreRecognized</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Spec</span><span class="p">.</span><span class="n">For</span><span class="p">(</span><span class="n">ValidPhoneNumberGenerator</span><span class="p">(),</span>
</span><span class='line'>                <span class="p">(</span><span class="n">GeneratedValidNumber</span> <span class="n">n</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">PhoneNumber</span> <span class="n">ph</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">PhoneNumber</span><span class="p">.</span><span class="n">TryParse</span><span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="n">InputString</span><span class="p">,</span> <span class="k">out</span> <span class="n">ph</span><span class="p">);</span>
</span><span class='line'>                <span class="p">})</span>
</span><span class='line'>                <span class="p">.</span><span class="n">QuickCheckThrowOnFailure</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>while the F# version looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nn">FsCheck</span><span class="p">.</span><span class="nc">PropertyChecks</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">FsCheck</span>
</span><span class='line'><span class="k">open</span> <span class="nn">NUnit</span><span class="p">.</span><span class="nc">Framework</span>
</span><span class='line'><span class="k">open</span> <span class="nc">PhoneNumber</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">GeneratedValidNumber</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Country</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">Identifier</span> <span class="o">:</span> <span class="kt">int</span> <span class="n">option</span>
</span><span class='line'>      <span class="nc">Subscriber</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">InputString</span> <span class="o">:</span> <span class="kt">string</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">validNumberGen</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">c</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">999</span><span class="o">)</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">i</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">oneof</span> <span class="o">[</span> <span class="n">gen</span> <span class="o">{</span> <span class="k">let</span><span class="o">!</span> <span class="n">i</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">9999</span><span class="o">)</span>
</span><span class='line'>                                   <span class="k">return</span> <span class="o">(</span><span class="nc">Some</span> <span class="n">i</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>                             <span class="n">gen</span> <span class="o">{</span> <span class="k">return</span> <span class="nc">None</span> <span class="o">}</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">maxSubLength</span> <span class="o">=</span>
</span><span class='line'>            <span class="kt">float</span> <span class="o">&lt;|</span> <span class="mi">15</span> <span class="o">-</span> <span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="nc">ToString</span><span class="bp">()</span><span class="o">.</span><span class="nc">Length</span><span class="o">)</span> <span class="o">-</span> <span class="o">(</span><span class="k">match</span> <span class="n">i</span> <span class="k">with</span>
</span><span class='line'>                                                   <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="mi">0</span>
</span><span class='line'>                                                   <span class="o">|</span> <span class="nc">Some</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="nc">ToString</span><span class="bp">()</span><span class="o">.</span><span class="nc">Length</span><span class="o">)</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">s</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span> <span class="o">&lt;|</span> <span class="mi">10</span><span class="o">.</span> <span class="o">**</span> <span class="n">maxSubLength</span><span class="o">)</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">{</span> <span class="nc">Country</span> <span class="o">=</span> <span class="n">c</span>
</span><span class='line'>                 <span class="nc">Identifier</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>                 <span class="nc">Subscriber</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>                 <span class="nc">InputString</span> <span class="o">=</span>
</span><span class='line'>                     <span class="n">sprintf</span> <span class="s2">&quot;+%d%s %d&quot;</span> <span class="n">c</span> <span class="o">(</span><span class="k">match</span> <span class="n">i</span> <span class="k">with</span>
</span><span class='line'>                                           <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>                                           <span class="o">|</span> <span class="nc">Some</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">sprintf</span> <span class="s2">&quot; %d&quot;</span> <span class="n">x</span><span class="o">)</span> <span class="n">s</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">PhoneNumberGenerators</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">Valid</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">{</span> <span class="k">new</span> <span class="nc">Arbitrary</span><span class="o">&lt;</span><span class="nc">GeneratedValidNumber</span><span class="o">&gt;</span><span class="bp">()</span> <span class="k">with</span>
</span><span class='line'>            <span class="k">override</span> <span class="n">x</span><span class="o">.</span><span class="nc">Generator</span> <span class="o">=</span> <span class="n">validNumberGen</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Test</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="o">``</span><span class="nc">Sanity</span> <span class="n">check</span><span class="o">``</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="nc">ValidPhoneNumber</span> <span class="s2">&quot;+44 1234 123456&quot;</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ValidPhoneNumber</span> <span class="n">n</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nn">Assert</span><span class="p">.</span><span class="nc">AreEqual</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="nc">CountryCode</span><span class="o">,</span> <span class="mi">44</span><span class="o">)</span>
</span><span class='line'>        <span class="nn">Assert</span><span class="p">.</span><span class="nc">AreEqual</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="nc">IdentificationCode</span><span class="o">,</span> <span class="mi">1234</span><span class="o">)</span>
</span><span class='line'>        <span class="nn">Assert</span><span class="p">.</span><span class="nc">AreEqual</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="nc">SubscriberNumber</span><span class="o">,</span> <span class="mi">123456</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">InvalidPhoneNumber</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Assert</span><span class="p">.</span><span class="nc">Fail</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Test</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="o">``</span><span class="nc">Insanity</span> <span class="n">check</span><span class="o">``</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="nc">ValidPhoneNumber</span> <span class="s2">&quot;I&#39;m not a phone number&quot;</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ValidPhoneNumber</span> <span class="n">n</span> <span class="o">-&gt;</span> <span class="nn">Assert</span><span class="p">.</span><span class="nc">Fail</span><span class="bp">()</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">InvalidPhoneNumber</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Test</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="o">``</span><span class="nc">Country</span> <span class="n">code</span> <span class="n">less</span> <span class="n">than</span> <span class="mi">4</span> <span class="n">digits</span><span class="o">``</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">genNumber</span> <span class="o">(</span><span class="nc">DontSize</span><span class="o">(</span><span class="n">cc</span> <span class="o">:</span> <span class="kt">uint32</span><span class="o">))</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">match</span> <span class="nc">ValidPhoneNumber</span><span class="o">(</span><span class="s2">&quot;+&quot;</span> <span class="o">+</span> <span class="n">cc</span><span class="o">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">+</span> <span class="s2">&quot; 1234 123456&quot;</span><span class="o">)</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">ValidPhoneNumber</span> <span class="n">n</span> <span class="o">-&gt;</span> <span class="nn">Assert</span><span class="p">.</span><span class="nc">IsTrue</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="nn">CountryCode</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span><span class="o">.</span><span class="nc">Length</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">InvalidPhoneNumber</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>    <span class="nn">Check</span><span class="p">.</span><span class="nc">QuickThrowOnFailure</span> <span class="n">genNumber</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Test</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="o">``</span><span class="nc">Valid</span> <span class="n">numbers</span> <span class="n">are</span> <span class="n">counted</span> <span class="k">as</span> <span class="n">valid</span><span class="o">``</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Arb</span><span class="p">.</span><span class="n">register</span><span class="o">&lt;</span><span class="nc">PhoneNumberGenerators</span><span class="o">&gt;</span> <span class="bp">()</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>    <span class="nn">Check</span><span class="p">.</span><span class="nc">VerboseThrowOnFailure</span> <span class="o">(</span>
</span><span class='line'>        <span class="k">fun</span> <span class="o">(</span><span class="n">v</span><span class="o">:</span><span class="nc">GeneratedValidNumber</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">match</span> <span class="nc">ValidPhoneNumber</span> <span class="n">v</span><span class="o">.</span><span class="nc">InputString</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">ValidPhoneNumber</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">true</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">InvalidPhoneNumber</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">false</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>These run fine as NUnit tests &ndash; apart from the fact that in true TDD style, they fail.</p>

<h2>The challenge!</h2>

<p>So, the challenge (which is open to people outside 15below as well). Basically, fork the <a href="https://github.com/mavnn/DevEd.PropertyChecks">git repository</a> and then check out locally. This contains everything, including both projects and the binaries of all their dependencies to avoid any NuGet issues. Within 15below, we&rsquo;ll be working in pairs &ndash; otherwise when you&rsquo;re sitting at your own computer with &ldquo;real work&rdquo; to do, it&rsquo;s very hard to actually take the hour out on the exercise.</p>

<p>In the order of your choice:</p>

<ol>
<li>Add property checks for the missing properties above</li>
<li>Update the PhoneNumber class to pass all of the tests</li>
<li><em>Extra credit</em>: Add a generator for local numbers from a known country (i.e. the UK) and property test your conversion method</li>
<li><em>Extra credit 2</em>: complete any of all of the above in both F# and C#</li>
<li><em>Completely carried away:</em> pick a real piece of production code and add a property test to it&hellip;</li>
</ol>


<p>Once you&rsquo;ve got as far as you&rsquo;re going to, commit your changes and push back up to GitHub, then send a pull request with progress back to the parent repository. I won&rsquo;t merge these, but the different implementations of both the phone number class and property tests will form the basis of the DevEd session the week after, possibly with votes for the most elegant/robust solutions. If you&rsquo;re not a member of staff here at 15below, I&rsquo;ll try and update your pull request with any
feedback from our discussions!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tap, Tap, Tapping on the Door]]></title>
    <link href="http://blog.mavnn.co.uk/tap/"/>
    <updated>2014-05-30T11:45:35+01:00</updated>
    <id>http://blog.mavnn.co.uk/tap</id>
    <content type="html"><![CDATA[<p>In my investigations into <a href="http://blog.mavnn.co.uk/blog/categories/typeprovider/">type providers</a>, I started digging into a feature of F# called quotations. These blur the boundary between code and data; a representation of an expression tree that you can then evaluate or manipulate.</p>

<p>Why is this useful? Well; it&rsquo;s used in a number of places in various F# libraries. As mentioned above, type providers use them as a mechanism for providing the invocation code for the types that are being provided. The compiler can then take that expression tree and turn in into clr code.</p>

<p>They can also be useful as a way of defining code within your F# that can then be translated into other programming languages. The linq to sql implementation does this (turning your linq into SQL, fairly obviously!) while the FunScript project compiles your F# quotations into JavaScript.</p>

<p>So; linked features, often used in concert: quotations allow you to generate expressions at runtime, manipulate them at run time and evaluate them at run time &ndash; where evaluation covers everything from running the code on the clr to outputting it as a different language.</p>

<!-- more -->


<p>Creating expressions is fairly straightforward. If you have a valid F# expression, you can wrap it in <code>&lt;@ ... @&gt;</code> (or <code>&lt;@@ ... @@&gt;</code>, see below&hellip;):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">quote1</span> <span class="o">=</span> <span class="o">&lt;@</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">@&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// val quote1 : Expr&lt;int&gt; = Call (None, op_Addition, [Value (1), Value (2)])</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">quote2</span> <span class="o">=</span> <span class="o">&lt;@@</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">@@&gt;;;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// val quote2 : Expr = Call (None, op_Addition, [Value (2), Value (1)])</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s the difference between the two? Well, the first with it&rsquo;s strong typing provides you with greater safety if you know what types you&rsquo;re expecting an expression tree to evaluate to &ndash; but those same type restraints prevent you from writing methods which can transform and return expressions whose types are unknown at compile time. There are also, apparently, some performance implications to carrying around the type information.</p>

<p>You can also generate the expression trees directly using the <code>Expr</code> module in the <code>Microsoft.FSharp.Quotations</code> namespace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'>
</span><span class='line'><span class="nn">Expr</span><span class="p">.</span><span class="nc">Call</span><span class="o">(</span><span class="n">typeof</span><span class="o">&lt;</span><span class="nn">System</span><span class="p">.</span><span class="nc">Math</span><span class="o">&gt;.</span><span class="nc">GetMethod</span><span class="o">(</span><span class="s2">&quot;Cos&quot;</span><span class="o">),</span> <span class="o">[</span><span class="nn">Expr</span><span class="p">.</span><span class="nc">Value</span><span class="o">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">)])</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// val it : Expr = Call (None, Cos, [Value (1.0)]) {CustomAttributes = [];</span>
</span><span class='line'><span class="c1">//                                                 Type = System.Double;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above being identical to: <code>&lt;@@ System.Math.Cos(1.0) @@&gt;</code>. Building directly with the classes becomes especially useful when doing things like recursively building expression trees; the F# compilers type inference tends to get a little unhappy trying to infer the types of the quotations and the expressions you&rsquo;re splicing into them on occasion.</p>

<p>Splicing?</p>

<p>Okay, so I slightly snuck that one in there. If you&rsquo;re building expressions with the <code>Expr</code> module it&rsquo;s obviously how you could create functions that could compose into larger expression trees. But the F# quotation syntax also allows you to do something similar, splicing values in with the <code>%</code> and <code>%%</code> operators.</p>

<p>An example is worth 1,000 words in these situations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">splice</span> <span class="n">otherExpr</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">&lt;@</span>
</span><span class='line'>        <span class="nn">System</span><span class="p">.</span><span class="nn">Math</span><span class="p">.</span><span class="nc">Cos</span><span class="o">(%</span><span class="n">otherExpr</span><span class="o">)</span>
</span><span class='line'>    <span class="o">@&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// val splice : otherExpr:Expr&lt;float&gt; -&gt; Expr&lt;float&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">complete</span> <span class="o">=</span> <span class="n">splice</span> <span class="o">&lt;@</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="o">@&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// val complete : Expr&lt;float&gt; = Call (None, Cos, [Value (1.0)])</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// And the untyped (and less safe) option:</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">splice&#39;</span> <span class="n">otherExpr</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">&lt;@@</span>
</span><span class='line'>        <span class="nn">System</span><span class="p">.</span><span class="nn">Math</span><span class="p">.</span><span class="nc">Cos</span><span class="o">(%%</span><span class="n">otherExpr</span><span class="o">)</span>
</span><span class='line'>    <span class="o">@@&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// val splice&#39; : otherExpr:Expr -&gt; Expr</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">complete&#39;</span> <span class="o">=</span> <span class="n">splice&#39;</span> <span class="o">&lt;@@</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="o">@@&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// val complete&#39; : Expr = Call (None, Cos, [Value (1.0)])</span>
</span></code></pre></td></tr></table></div></figure>


<p>As an aside, the generic <code>Expr</code> type has the <code>Raw</code> property which exposes the untyped version of the quotation. Which, as quotations have value based equality, allows us to do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">complete</span><span class="o">.</span><span class="nc">Raw</span> <span class="o">=</span> <span class="n">complete&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// val it : bool = true</span>
</span></code></pre></td></tr></table></div></figure>


<p>And of course we can build up more complex trees if we wish:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">moreComplexComplete</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">value</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">&lt;@</span>
</span><span class='line'>            <span class="nn">System</span><span class="p">.</span><span class="nn">Math</span><span class="p">.</span><span class="nc">Max</span><span class="o">(</span>
</span><span class='line'>                <span class="o">-</span><span class="mi">0</span><span class="o">.</span><span class="mi">8</span><span class="o">,</span>
</span><span class='line'>                <span class="nn">System</span><span class="p">.</span><span class="nn">Math</span><span class="p">.</span><span class="nc">Min</span><span class="o">(</span>
</span><span class='line'>                    <span class="mi">0</span><span class="o">.</span><span class="mi">8</span><span class="o">,</span>
</span><span class='line'>                    <span class="nn">System</span><span class="p">.</span><span class="nn">Math</span><span class="p">.</span><span class="nc">Sin</span><span class="o">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">)))</span>
</span><span class='line'>        <span class="o">@&gt;</span>
</span><span class='line'>    <span class="n">splice</span> <span class="n">value</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// val moreComplexComplete : Expr&lt;float&gt; =</span>
</span><span class='line'><span class="c1">//   Call (None, Cos,</span>
</span><span class='line'><span class="c1">//       [Call (None, Max,</span>
</span><span class='line'><span class="c1">//              [Value (-0.8),</span>
</span><span class='line'><span class="c1">//               Call (None, Min, [Value (0.8), Call (None, Sin, [Value (2.0)])])])])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finished here? Time to check out part 2 about how to manipulate quotations once you have them: <a href="http://blog.mavnn.co.uk/cutting-quotations-down-to-size/">Cutting Quotations Down to Size</a>.</p>

<p><em>Yes, I know the title quote is inaccurate &ndash; but I&rsquo;m afraid I prefer it this way.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functionally SOLID 2]]></title>
    <link href="http://blog.mavnn.co.uk/functionally-solid-2/"/>
    <updated>2014-05-09T13:43:02+01:00</updated>
    <id>http://blog.mavnn.co.uk/functionally-solid-2</id>
    <content type="html"><![CDATA[<p><em>This post follows on directly from <a href="http://blog.mavnn.co.uk/going-functionally-solid">Going Functionally SOLID</a></em></p>

<p>In our first session looking at <a href="http://en.wikipedia.org/wiki/Solid_%28object-oriented_design%29">SOLID</a> and functional programming, we tried to apply some SOLID principles to an example piece of code.</p>

<p>We ended up with a set of interfaces like those below, and robot classes could then implement the interfaces to define their capabilities and state. I mentioned the example code was for a giant robot game, yes?</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">IDestructable</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Armour</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Dodge</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Hits</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Destroyed</span> <span class="o">:</span> <span class="kt">bool</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">TakeDamage</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="nc">IDestructable</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">IWalk</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Walk</span> <span class="o">:</span> <span class="nc">Direction</span> <span class="o">*</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="nc">Location</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">IJump</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Jump</span> <span class="o">:</span> <span class="nc">Direction</span> <span class="o">*</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="nc">Location</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">IFly</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Fly</span> <span class="o">:</span> <span class="nc">Direction</span> <span class="o">*</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="nc">Location</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">IHazWeapon</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Fire</span> <span class="o">:</span> <span class="nc">IDestructable</span> <span class="o">*</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="nc">IDestructable</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">IHazWeapons</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">WMDs</span> <span class="o">:</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">IHazWeapon</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">IHazCannon</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">IHazWeapon</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">IHazMissiles</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">IHazWeapon</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ITransforming</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Mode</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="o">``</span><span class="nc">Transform</span><span class="o">!``</span> <span class="o">:</span> <span class="kt">string</span> <span class="o">-&gt;</span> <span class="nc">ITransforming</span>
</span></code></pre></td></tr></table></div></figure>


<p>For anyone who&rsquo;s worked with SOLID OO code before, this should be looking fairly familiar, and it should be obvious how you could build a class that accepted implementations of these interfaces in it&rsquo;s constructor and then carried the state of the robot (location, hits remaining, etc) around as mutable fields.</p>

<p>But&hellip; this is a turn based game, and we&rsquo;ve decided that we want to use a <a href="http://en.wikipedia.org/wiki/Minimax">minimax</a> approach to choosing moves for the computer player. Minimax is effectively a tree search, which means that implementing it looks like it would be a prime moment for a bit of concurrency. Each branch of the tree can be calculated independently, after all.</p>

<p>Unfortunately&hellip; our SOLID OO approach is not looking very thread safe. Functional programming revolves around the idea that code is <a href="http://en.wikipedia.org/wiki/Referential_transparency_%28computer_science%29">referentially transparent</a> and that data types are <a href="http://en.wikipedia.org/wiki/Immutable_object">immutable</a>. These two properties immediately lead to thread safe code.</p>

<p>So the rest of the session was spent trying out how different parts of the API code be modelled in a more functional way &ndash; splitting out state into separate immutable value objects, using functions in the place of single method interfaces and playing with discriminated unions (not strictly functional programming related, but they do seem to crop up regularly in functional style languages).</p>

<p>The end results, raw from the discussion, are below. A bit of a mix of the &ldquo;interface&rdquo; and experiments in how you would use it. I think it came out quite nicely, showing how all of the SOLID principles (apart from maybe &ldquo;L&rdquo;!) fall out naturally in nicely designed functional code just as they do in good OO code. In fact some of them, such as &ldquo;Interface Segregation&rdquo; and &ldquo;Single Responsibility&rdquo; are things you almost have to work to avoid &ndash; they both fall out naturally from passing around
pure functions to implement behaviour.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Destructable</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="nc">Armour</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>        <span class="nc">Dodge</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>        <span class="nc">Hits</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>        <span class="nc">Destroyed</span> <span class="o">:</span> <span class="kt">bool</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Interface segregation and </span>
</span><span class='line'><span class="c1">// Single responsibility at work</span>
</span><span class='line'><span class="k">type</span> <span class="nc">WeaponFunc</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">Destructable</span> <span class="o">-&gt;</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="nc">Destructable</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Weapon</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Missile</span> <span class="k">of</span> <span class="nc">WeaponFunc</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Cannon</span> <span class="k">of</span> <span class="nc">WeaponFunc</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">MoveFunc</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">Location</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="nc">Direction</span> <span class="o">*</span> <span class="kt">int</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Location</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Move</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Run</span> <span class="k">of</span> <span class="nc">MoveFunc</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Jump</span> <span class="k">of</span> <span class="nc">MoveFunc</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Fly</span> <span class="k">of</span> <span class="nc">MoveFunc</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Robot</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="nc">Id</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>        <span class="nc">MovementTypes</span> <span class="o">:</span> <span class="nc">Move</span> <span class="kt">list</span>
</span><span class='line'>        <span class="nc">Weapons</span> <span class="o">:</span> <span class="nc">Weapon</span> <span class="kt">list</span>
</span><span class='line'>        <span class="nc">Location</span> <span class="o">:</span> <span class="nc">Location</span>
</span><span class='line'>        <span class="nc">DamageStatus</span> <span class="o">:</span> <span class="nc">Destructable</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Dependency inversion!</span>
</span><span class='line'><span class="k">let</span> <span class="nc">GiantRobo</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="nc">Id</span> <span class="o">=</span> <span class="s2">&quot;GiantRobo&quot;</span>
</span><span class='line'>        <span class="nc">MovementTypes</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">Run</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="n">l</span> <span class="n">m</span> <span class="o">-&gt;</span> <span class="n">l</span> <span class="o">]</span>
</span><span class='line'>        <span class="nc">Weapons</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">Cannon</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="n">d</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="n">d</span> <span class="o">]</span>
</span><span class='line'>        <span class="nc">Location</span> <span class="o">=</span> <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span> <span class="nc">Altitude</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
</span><span class='line'>        <span class="nc">DamageStatus</span> <span class="o">=</span> <span class="o">{</span> <span class="nc">Armour</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span> <span class="nc">Dodge</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span> <span class="nc">Hits</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span> <span class="nc">Destroyed</span> <span class="o">=</span> <span class="bp">false</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Open/closed principle via higher order</span>
</span><span class='line'><span class="c1">// functions</span>
</span><span class='line'><span class="k">let</span> <span class="n">makeFly</span> <span class="n">runFunc</span> <span class="n">l</span> <span class="n">m</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">newPosition</span> <span class="o">=</span> <span class="n">runFunc</span> <span class="n">l</span> <span class="n">m</span>
</span><span class='line'>    <span class="o">{</span> <span class="n">newPosition</span> <span class="k">with</span> <span class="nc">Altitude</span> <span class="o">=</span> <span class="mi">100</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nc">TinyRobo</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="nc">Id</span> <span class="o">=</span> <span class="s2">&quot;TinyRobo&quot;</span>
</span><span class='line'>        <span class="nc">MovementTypes</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">Run</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="n">l</span> <span class="n">m</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">l</span> <span class="k">with</span> <span class="nc">Position</span> <span class="o">=</span> <span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span> <span class="o">}</span> <span class="o">]</span>
</span><span class='line'>        <span class="nc">Weapons</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">Cannon</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="n">d</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="n">d</span> <span class="o">]</span>
</span><span class='line'>        <span class="nc">Location</span> <span class="o">=</span> <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span> <span class="nc">Altitude</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
</span><span class='line'>        <span class="nc">DamageStatus</span> <span class="o">=</span> <span class="o">{</span> <span class="nc">Armour</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span> <span class="nc">Dodge</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span> <span class="nc">Hits</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span> <span class="nc">Destroyed</span> <span class="o">=</span> <span class="bp">false</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Separating behaviour and state</span>
</span><span class='line'><span class="k">module</span> <span class="nc">BlowThingsUp</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="nc">TakeDamage</span> <span class="n">destructable</span> <span class="n">damage</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">newHits</span> <span class="o">=</span> <span class="n">destructable</span><span class="o">.</span><span class="nc">Hits</span> <span class="o">-</span> <span class="n">damage</span>
</span><span class='line'>        <span class="o">{</span>   <span class="n">destructable</span> <span class="k">with</span>
</span><span class='line'>                <span class="nc">Hits</span> <span class="o">=</span> <span class="n">newHits</span>
</span><span class='line'>                <span class="nc">Destroyed</span> <span class="o">=</span> <span class="n">newHits</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Different possibilities for</span>
</span><span class='line'><span class="c1">// extending that would normally be handled</span>
</span><span class='line'><span class="c1">// by inheritance in OO</span>
</span><span class='line'><span class="k">module</span> <span class="nc">TransformVF1</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">transform</span> <span class="n">robot</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">robot</span> <span class="k">with</span>
</span><span class='line'>                <span class="nc">MovementTypes</span> <span class="o">=</span> <span class="o">[</span><span class="nc">Fly</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="n">l</span> <span class="n">m</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">l</span> <span class="k">with</span> <span class="nc">Altitude</span> <span class="o">=</span> <span class="mi">100</span> <span class="o">}]</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">TransformFunc</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">Robot</span> <span class="o">-&gt;</span> <span class="nc">Robot</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">RobotModel</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">NormalRobot</span> <span class="k">of</span> <span class="nc">Robot</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">TransformingRobot</span> <span class="k">of</span> <span class="nc">Robot</span> <span class="o">*</span> <span class="nc">TransformFunc</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">MaybeTransformFunc</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">MaybeTransformingRobot</span> <span class="o">-&gt;</span> <span class="nc">MaybeTransformingRobot</span>
</span><span class='line'>
</span><span class='line'><span class="k">and</span> <span class="nc">MaybeTransformingRobot</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="nc">Id</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>        <span class="nc">MovementTypes</span> <span class="o">:</span> <span class="nc">Move</span> <span class="kt">list</span>
</span><span class='line'>        <span class="nc">Weapons</span> <span class="o">:</span> <span class="nc">Weapon</span> <span class="kt">list</span>
</span><span class='line'>        <span class="nc">Location</span> <span class="o">:</span> <span class="nc">Location</span>
</span><span class='line'>        <span class="nc">DamageStatus</span> <span class="o">:</span> <span class="nc">Destructable</span>
</span><span class='line'>        <span class="nc">Transform</span> <span class="o">:</span> <span class="nc">MaybeTransformFunc</span> <span class="n">option</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nc">Transform</span> <span class="n">mtr</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">mtr</span><span class="o">.</span><span class="nc">Transform</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">mtr</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Some</span> <span class="n">trans</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">trans</span> <span class="n">mtr</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enjoy, and comments welcome &ndash; this was live coded in a group environment, so I&rsquo;m sure plenty of opportunities for nicer code were missed!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type Safe Printf via Type Providers]]></title>
    <link href="http://blog.mavnn.co.uk/type-safe-printf-via-type-providers/"/>
    <updated>2014-05-06T15:33:15+01:00</updated>
    <id>http://blog.mavnn.co.uk/type-safe-printf-via-type-providers</id>
    <content type="html"><![CDATA[<p><a href="http://twitter.com/puffnfresh">Brian McKenna</a> posted an interesting <a href="http://www.youtube.com/watch?v=fVBck2Zngjo">video</a> and <a href="https://gist.github.com/puffnfresh/11202637">gist</a> on implementing a type safe printf in Idris with dependent types.</p>

<p>This led me down a nice little rabbit hole wondering if something similar could be achieved with an F# type provider.</p>

<p>With a <a href="http://stackoverflow.com/questions/23375469/how-can-i-build-an-arbitary-curried-function-in-an-f-type-provider">bit of help from Tomas</a> the final solution turned out to be surprisingly nice, although not quite so clean as the Idris original.</p>

<!-- more -->


<p>Taking the format string and parsing it looks very similar to the Idris version, what with the common ML history of the two languages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Format</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">FString</span> <span class="k">of</span> <span class="nc">Format</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">FInt</span> <span class="k">of</span> <span class="nc">Format</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Other</span> <span class="k">of</span> <span class="kt">char</span> <span class="o">*</span> <span class="nc">Format</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">End</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">parseFormatString</span> <span class="n">str</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">rec</span> <span class="n">parseFormat</span> <span class="n">chars</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">chars</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="sc">&#39;%&#39;</span><span class="o">::</span><span class="sc">&#39;d&#39;</span><span class="o">::</span><span class="n">t</span> <span class="o">-&gt;</span> <span class="nc">FInt</span> <span class="o">(</span><span class="n">parseFormat</span> <span class="n">t</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="sc">&#39;%&#39;</span><span class="o">::</span><span class="sc">&#39;s&#39;</span><span class="o">::</span><span class="n">t</span> <span class="o">-&gt;</span> <span class="nc">FString</span> <span class="o">(</span><span class="n">parseFormat</span> <span class="n">t</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="n">c</span><span class="o">::</span><span class="n">t</span> <span class="o">-&gt;</span> <span class="nc">Other</span> <span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">parseFormat</span> <span class="n">t</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span> <span class="nc">End</span>
</span><span class='line'>    <span class="n">parseFormat</span> <span class="o">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">toList</span> <span class="n">str</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This might not be the most efficient or flexible parsing method, but that&rsquo;s not really the point of the current exercise and it&rsquo;s very clear what it&rsquo;s doing.</p>

<p>Next, we want to create a <a href="http://msdn.microsoft.com/en-us/library/dd233212.aspx">quotation</a> that represents a curried function based on our format type. This is where I needed Tomas&#8217; help &ndash; it turns out there isn&rsquo;t any easy way to do this with the <code>&lt;@@ ... @@&gt;</code> syntax I&rsquo;ve usually used to build quotations for type providers.</p>

<p>Tomas reminded me that the <code>Microsoft.FSharp.Quotations</code> namespace gives direct access to the underlying classes that represent the expression tree of the quotation. This allows us to build an expression tree recusively; check out <a href="http://stackoverflow.com/a/23375794/68457">Tomas&#8217; explanation</a>  of the technique for more details of how it works.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'>
</span><span class='line'><span class="c">(* ... *)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">invoker</span> <span class="n">printers</span> <span class="n">format</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">format</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">End</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">arr</span> <span class="o">=</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">NewArray</span><span class="o">(</span><span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span> <span class="nn">List</span><span class="p">.</span><span class="n">rev</span> <span class="n">printers</span><span class="o">)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">conc</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;.</span><span class="nc">GetMethod</span><span class="o">(</span><span class="s2">&quot;Concat&quot;</span><span class="o">,</span> <span class="o">[|</span><span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="bp">[]</span><span class="o">&gt;|])</span>
</span><span class='line'>        <span class="nn">Expr</span><span class="p">.</span><span class="nc">Call</span><span class="o">(</span><span class="n">conc</span><span class="o">,</span> <span class="o">[</span><span class="n">arr</span><span class="o">])</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Other</span> <span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">t</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">invoker</span> <span class="o">(&lt;@@</span> <span class="kt">string</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">c</span> <span class="o">@@&gt;</span> <span class="o">::</span> <span class="n">printers</span><span class="o">)</span> <span class="n">t</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">FInt</span> <span class="n">t</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">v</span> <span class="o">=</span> <span class="nc">Var</span><span class="o">(</span><span class="s2">&quot;v&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">printer</span> <span class="o">=</span> <span class="o">&lt;@@</span> <span class="kt">string</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">(%%(</span><span class="nn">Expr</span><span class="p">.</span><span class="nc">Var</span> <span class="n">v</span><span class="o">))</span> <span class="o">@@&gt;</span>
</span><span class='line'>        <span class="nn">Expr</span><span class="p">.</span><span class="nc">Lambda</span><span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">invoker</span> <span class="o">(</span><span class="n">printer</span><span class="o">::</span><span class="n">printers</span><span class="o">)</span> <span class="n">t</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">FString</span> <span class="n">t</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">v</span> <span class="o">=</span> <span class="nc">Var</span><span class="o">(</span><span class="s2">&quot;v&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">printer</span> <span class="o">=</span> <span class="o">&lt;@@</span> <span class="o">%%(</span><span class="nn">Expr</span><span class="p">.</span><span class="nc">Var</span> <span class="n">v</span><span class="o">):</span><span class="kt">string</span> <span class="o">@@&gt;</span>
</span><span class='line'>        <span class="nn">Expr</span><span class="p">.</span><span class="nc">Lambda</span><span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">invoker</span> <span class="o">(</span><span class="n">printer</span><span class="o">::</span><span class="n">printers</span><span class="o">)</span> <span class="n">t</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s the hard stuff out of the way! Now we just have some type provider boiler plate. We&rsquo;re going to provide a type provider named <code>TPrint</code> which takes a single parameter (our format string). Once the parameter is supplied, we provide a single static property which is an FSharpFunc type which matches the signature required by the format string.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'>
</span><span class='line'><span class="c">(* ... *)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">toMethod</span> <span class="n">format</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">invokeCode</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">invoker</span> <span class="bp">[]</span> <span class="n">format</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">invokeType</span> <span class="o">=</span> <span class="n">invokeCode</span><span class="o">.</span><span class="nc">Type</span>
</span><span class='line'>    <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;show&quot;</span><span class="o">,</span> <span class="n">invokeType</span><span class="o">,</span> <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span> <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">invokeCode</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">TPrintProvider</span> <span class="o">(</span><span class="n">config</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;TypeSet.Provided&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">tPrintProvider</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;TPrint&quot;</span><span class="o">,</span> <span class="nc">Some</span><span class="o">(</span><span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span><span class="nc">ProvidedStaticParameter</span><span class="o">(</span><span class="s2">&quot;FormatString&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span> <span class="n">tPrintProvider</span><span class="o">.</span><span class="nc">DefineStaticParameters</span><span class="o">(</span><span class="n">parameters</span><span class="o">,</span> <span class="k">fun</span> <span class="n">typeName</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">formatString</span> <span class="o">=</span> <span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:?&gt;</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">provider</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="n">typeName</span><span class="o">,</span> <span class="nc">Some</span><span class="o">(</span><span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;))</span>
</span><span class='line'>        <span class="n">provider</span><span class="o">.</span><span class="nc">HideObjectMethods</span> <span class="o">&lt;-</span> <span class="bp">true</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">formatString</span> <span class="o">|&gt;</span> <span class="n">parseFormatString</span> <span class="o">|&gt;</span> <span class="n">toMethod</span> <span class="o">|&gt;</span> <span class="n">provider</span><span class="o">.</span><span class="nc">AddMember</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">provider</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">tPrintProvider</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span> <span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, put it all together and you get a type provider which allows you to do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="nc">TPrint</span><span class="o">&lt;</span><span class="s2">&quot;A %s string! %s %d&quot;</span><span class="o">&gt;.</span><span class="n">show</span> <span class="s2">&quot;hello&quot;</span> <span class="s2">&quot;world&quot;</span> <span class="mi">32</span>
</span><span class='line'><span class="c1">// val it : string = &quot;A hello string! world 32&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nc">TPrint</span><span class="o">&lt;</span><span class="s2">&quot;Number one: %d! Number two: %d! A string: %s!&quot;</span><span class="o">&gt;.</span><span class="n">show</span> <span class="mi">1</span> <span class="mi">2</span> <span class="s2">&quot;My string!&quot;</span>
</span><span class='line'><span class="c1">// val it : string = &quot;Number one: 1! Number two: 2! A string: My string!!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So; nothing there that the built in <code>printf</code> doesn&rsquo;t already do for you. But, this does start opening up some options for providing much more idiomatic F# style APIs then I&rsquo;ve really seen so far from Type Providers, which tend to provide very OO style interfaces. Should be some interesting ideas in there to explore!</p>

<p>Full code can be found <a href="https://github.com/mavnn/TypeSet">at Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going Functionally SOLID]]></title>
    <link href="http://blog.mavnn.co.uk/going-functionally-solid/"/>
    <updated>2014-04-11T11:45:47+01:00</updated>
    <id>http://blog.mavnn.co.uk/going-functionally-solid</id>
    <content type="html"><![CDATA[<p><em>The one giant robot every programmer should know and love! Meet Big O!</em></p>

<p><img src="http://blog.mavnn.co.uk/images/Big_o.jpg" alt="Big O" /></p>

<p><em>For all your algorithmic complexity needs. And any giant mecha in need of a good pounding.</em></p>

<p>And now, back to your regularly scheduled blog post&hellip;</p>

<p>Inspired both by <a href="http://blog.ploeh.dk/2014/03/10/solid-the-next-step-is-functional/">Mark Seemann&rsquo;s excellent blog post</a> and by my ongoing campaign to introduce functional programming techniques to <a href="http://www.15below.com/">15below</a> developers who aren&rsquo;t familiar with them yet, I decided it was time to run a mini-series on applying good principles like <a href="http://en.wikipedia.org/wiki/Solid_%28object-oriented_design%29">SOLID</a> in a functional world.</p>

<p>We run weekly one hour &ldquo;Developer Education&rdquo; sessions. For this series I started with a badly written piece of code (it came naturally, given I had limited prep time&hellip;) in a style of someone who has kind of heard about SOLID and functional programming:</p>

<ul>
<li><strong>SOLID</strong>: &ldquo;So, eh, I need some interfaces and things. Concrete bad, interface good. In wonder what the whole DI thing is?&rdquo;</li>
<li><strong>Functional</strong>: &ldquo;And, erm. Chainable functions? Fluent APIs, maybe? That&rsquo;s kind of functional, right?&rdquo;</li>
</ul>


<!-- More -->


<p>And then we had a open house suggesting modifications to the code where I made the changes live as we went along. In this first session, we only got as far as making the code a bit more solid &ndash; tune back in next month for the make it functional session..</p>

<p>Deciding that we needed a more interesting example domain than sending emails for once, I decided to go the whole hog. Below you&rsquo;ll find the before and after versions of &ldquo;HeavyGearSOLID&rdquo;&rsquo;s unit representation code.</p>

<p>Because everything is better with giant robots.</p>

<p>The session was a fun change of pace from other things we&rsquo;ve done, and sparked off a nice bit of discussion (although not as much as I hoped&hellip; heckle more, 15below people!). I&rsquo;m quite looking forward to the next part of the series.</p>

<h2>Before</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">namespace</span> <span class="o">``</span><span class="err">メタルギアソリッド</span><span class="o">``</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Utils</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">IMecha</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Walk</span> <span class="o">:</span> <span class="nc">Direction</span> <span class="o">*</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="nc">IMecha</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Jump</span> <span class="o">:</span> <span class="nc">Direction</span> <span class="o">*</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="nc">IMecha</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Fly</span> <span class="o">:</span> <span class="nc">Direction</span> <span class="o">*</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="nc">IMecha</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Position</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">*</span> <span class="kt">int</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Hits</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Destroyed</span> <span class="o">:</span> <span class="kt">bool</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Dodge</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Armour</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">TakeDamage</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="nc">IMecha</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">FireCannon</span> <span class="o">:</span> <span class="nc">IMecha</span> <span class="o">*</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="nc">IMecha</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">FireMissiles</span> <span class="o">:</span> <span class="nc">IMecha</span> <span class="o">*</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="nc">IMecha</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">GiantRobo</span> <span class="o">(</span><span class="n">position</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">position</span> <span class="o">=</span> <span class="n">ref</span> <span class="n">position</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">hits</span> <span class="o">=</span> <span class="n">ref</span> <span class="mi">100</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">destroyed</span> <span class="o">=</span> <span class="n">ref</span> <span class="bp">false</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">dodge</span> <span class="o">=</span> <span class="n">ref</span> <span class="mi">5</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">armour</span> <span class="o">=</span> <span class="n">ref</span> <span class="mi">20</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">rand</span> <span class="o">=</span> <span class="nc">Random</span><span class="bp">()</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">IMecha</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Walk</span> <span class="o">(</span><span class="n">dir</span><span class="o">,</span> <span class="n">distance</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">iMecha</span> <span class="o">=</span> <span class="n">x</span> <span class="o">:&gt;</span> <span class="nc">IMecha</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">distance</span> <span class="o">&gt;</span> <span class="mi">4</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">failwith</span> <span class="s2">&quot;GiantRobo is slow!&quot;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="o">_</span><span class="n">position</span> <span class="o">:=</span> <span class="nc">Move</span> <span class="o">(!_</span><span class="n">position</span><span class="o">)</span> <span class="n">dir</span> <span class="n">distance</span>
</span><span class='line'>                <span class="n">iMecha</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Jump</span> <span class="o">(_,</span> <span class="o">_)</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">raise</span> <span class="o">&lt;|</span> <span class="nc">NotImplementedException</span><span class="o">(</span><span class="s2">&quot;GiantRobo can&#39;t jump&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Fly</span> <span class="o">(_,</span> <span class="o">_)</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">raise</span> <span class="o">&lt;|</span> <span class="nc">NotImplementedException</span><span class="o">(</span><span class="s2">&quot;GiantRobo can&#39;t fly&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Position</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">!_</span><span class="n">position</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Hits</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">!_</span><span class="n">hits</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Destroyed</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">!_</span><span class="n">destroyed</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Dodge</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">!_</span><span class="n">dodge</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Armour</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">!_</span><span class="n">armour</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">TakeDamage</span> <span class="n">damage</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">_</span><span class="n">hits</span> <span class="o">:=</span> <span class="o">!_</span><span class="n">hits</span> <span class="o">-</span> <span class="n">damage</span>
</span><span class='line'>            <span class="o">_</span><span class="n">destroyed</span> <span class="o">:=</span> <span class="o">!_</span><span class="n">hits</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="n">x</span> <span class="o">:&gt;</span> <span class="nc">IMecha</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">FireCannon</span> <span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">roll</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">roll</span> <span class="o">&gt;</span> <span class="n">target</span><span class="o">.</span><span class="nc">Dodge</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">target</span><span class="o">.</span><span class="nc">TakeDamage</span> <span class="o">(</span><span class="n">max</span> <span class="mi">0</span> <span class="o">(</span><span class="mi">60</span> <span class="o">-</span> <span class="n">target</span><span class="o">.</span><span class="nc">Armour</span><span class="o">))</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">target</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">FireMissiles</span> <span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">roll</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">raise</span> <span class="o">&lt;|</span> <span class="nc">NotImplementedException</span><span class="o">(</span><span class="s2">&quot;Giant Robo has no missiles&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ITransformingMecha</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">IMecha</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Mode</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="o">``</span><span class="nc">Transform</span><span class="o">!``</span> <span class="o">:</span> <span class="kt">string</span> <span class="o">-&gt;</span> <span class="nc">ITransformingMecha</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">VF1</span> <span class="o">(</span><span class="n">position</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">position</span> <span class="o">=</span> <span class="n">ref</span> <span class="n">position</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">hits</span> <span class="o">=</span> <span class="n">ref</span> <span class="mi">50</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">destroyed</span> <span class="o">=</span> <span class="n">ref</span> <span class="bp">false</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">dodge</span> <span class="o">=</span> <span class="n">ref</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">armour</span> <span class="o">=</span> <span class="n">ref</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">mode</span> <span class="o">=</span> <span class="n">ref</span> <span class="s2">&quot;Battroid&quot;</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">ITransformingMecha</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Walk</span> <span class="o">(</span><span class="n">dir</span><span class="o">,</span> <span class="n">distance</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">iMecha</span> <span class="o">=</span> <span class="n">x</span> <span class="o">:&gt;</span> <span class="nc">IMecha</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">!_</span><span class="n">mode</span> <span class="o">=</span> <span class="s2">&quot;Fighter&quot;</span> <span class="k">then</span> <span class="n">failwith</span> <span class="s2">&quot;No legs in Fighter mode!&quot;</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">distance</span> <span class="o">&gt;</span> <span class="mi">6</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">failwith</span> <span class="s2">&quot;VF-1 isn&#39;t that fast!&quot;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="o">_</span><span class="n">position</span> <span class="o">:=</span> <span class="nc">Move</span> <span class="o">(!_</span><span class="n">position</span><span class="o">)</span> <span class="n">dir</span> <span class="n">distance</span>
</span><span class='line'>                <span class="n">iMecha</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Jump</span> <span class="o">(</span><span class="n">dir</span><span class="o">,</span> <span class="n">distance</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">iMecha</span> <span class="o">=</span> <span class="n">x</span> <span class="o">:&gt;</span> <span class="nc">IMecha</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">!_</span><span class="n">mode</span> <span class="o">=</span> <span class="s2">&quot;Fighter&quot;</span> <span class="k">then</span> <span class="n">failwith</span> <span class="s2">&quot;Jumping in Fighter mode makes no sense!&quot;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">maxDistance</span> <span class="o">=</span>
</span><span class='line'>                <span class="k">match</span> <span class="o">!_</span><span class="n">mode</span> <span class="k">with</span>
</span><span class='line'>                <span class="o">|</span> <span class="s2">&quot;GERWALK&quot;</span> <span class="o">-&gt;</span> <span class="mi">8</span>
</span><span class='line'>                <span class="o">|</span> <span class="s2">&quot;Battroid&quot;</span> <span class="o">-&gt;</span> <span class="mi">6</span>
</span><span class='line'>                <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">failwith</span> <span class="s2">&quot;No good&quot;</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">distance</span> <span class="o">&gt;</span> <span class="n">maxDistance</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">failwith</span> <span class="s2">&quot;VF-1 isn&#39;t that fast!&quot;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="o">_</span><span class="n">position</span> <span class="o">:=</span> <span class="nc">Move</span> <span class="o">(!_</span><span class="n">position</span><span class="o">)</span> <span class="n">dir</span> <span class="n">distance</span>
</span><span class='line'>                <span class="n">iMecha</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Fly</span> <span class="o">(</span><span class="n">dir</span><span class="o">,</span> <span class="n">distance</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">iMecha</span> <span class="o">=</span> <span class="n">x</span> <span class="o">:&gt;</span> <span class="nc">IMecha</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">!_</span><span class="n">mode</span> <span class="o">=</span> <span class="s2">&quot;Battroid&quot;</span> <span class="k">then</span> <span class="n">failwith</span> <span class="s2">&quot;Battroid mode can&#39;t fly&quot;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">maxDistance</span> <span class="o">=</span>
</span><span class='line'>                <span class="k">match</span> <span class="o">!_</span><span class="n">mode</span> <span class="k">with</span>
</span><span class='line'>                <span class="o">|</span> <span class="s2">&quot;Fighter&quot;</span> <span class="o">-&gt;</span> <span class="mi">20</span>
</span><span class='line'>                <span class="o">|</span> <span class="s2">&quot;GERWALK&quot;</span> <span class="o">-&gt;</span> <span class="mi">15</span>
</span><span class='line'>                <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">failwith</span> <span class="s2">&quot;No good&quot;</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">distance</span> <span class="o">&gt;</span> <span class="n">maxDistance</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">failwith</span> <span class="s2">&quot;VF-1 isn&#39;t that fast!&quot;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="o">_</span><span class="n">position</span> <span class="o">:=</span> <span class="nc">Move</span> <span class="o">(!_</span><span class="n">position</span><span class="o">)</span> <span class="n">dir</span> <span class="n">distance</span>
</span><span class='line'>                <span class="n">iMecha</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Position</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">!_</span><span class="n">position</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Hits</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">!_</span><span class="n">hits</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Destroyed</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">!_</span><span class="n">destroyed</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Dodge</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">!_</span><span class="n">dodge</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Armour</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">!_</span><span class="n">armour</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">TakeDamage</span> <span class="n">damage</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">_</span><span class="n">hits</span> <span class="o">:=</span> <span class="o">!_</span><span class="n">hits</span> <span class="o">-</span> <span class="n">damage</span>
</span><span class='line'>            <span class="o">_</span><span class="n">destroyed</span> <span class="o">:=</span> <span class="o">!_</span><span class="n">hits</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="n">x</span> <span class="o">:&gt;</span> <span class="nc">IMecha</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">FireCannon</span> <span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">roll</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">roll</span> <span class="o">&gt;</span> <span class="n">target</span><span class="o">.</span><span class="nc">Dodge</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">target</span><span class="o">.</span><span class="nc">TakeDamage</span> <span class="o">(</span><span class="n">max</span> <span class="mi">0</span> <span class="o">(</span><span class="mi">20</span> <span class="o">-</span> <span class="n">target</span><span class="o">.</span><span class="nc">Armour</span><span class="o">))</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">target</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">FireMissiles</span> <span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">roll</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">roll</span> <span class="o">&gt;</span> <span class="o">(</span><span class="n">target</span><span class="o">.</span><span class="nc">Dodge</span> <span class="o">/</span> <span class="mi">2</span><span class="o">)</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">target</span><span class="o">.</span><span class="nc">TakeDamage</span> <span class="o">(</span><span class="n">max</span> <span class="mi">0</span> <span class="o">(</span><span class="mi">60</span> <span class="o">-</span> <span class="n">target</span><span class="o">.</span><span class="nc">Armour</span><span class="o">))</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">target</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Mode</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">!_</span><span class="n">mode</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.``</span><span class="nc">Transform</span><span class="o">!``</span> <span class="n">mode</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">mode</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="s2">&quot;Fighter&quot;</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="o">_</span><span class="n">mode</span> <span class="o">:=</span> <span class="s2">&quot;Fighter&quot;</span>
</span><span class='line'>            <span class="o">|</span> <span class="s2">&quot;GERWALK&quot;</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="o">_</span><span class="n">mode</span> <span class="o">:=</span> <span class="s2">&quot;GERWALK&quot;</span>
</span><span class='line'>            <span class="o">|</span> <span class="s2">&quot;Battroid&quot;</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="o">_</span><span class="n">mode</span> <span class="o">:=</span> <span class="s2">&quot;Battroid&quot;</span>
</span><span class='line'>            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="n">failwith</span> <span class="s2">&quot;Not a valid VF-1 mode&quot;</span>
</span><span class='line'>            <span class="n">x</span> <span class="o">:&gt;</span> <span class="nc">ITransformingMecha</span>
</span></code></pre></td></tr></table></div></figure>


<h2>After</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">namespace</span> <span class="o">``</span><span class="err">メタルギアソリッド</span><span class="o">``</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Utils</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Location</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="nc">Position</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">*</span> <span class="kt">int</span>
</span><span class='line'>        <span class="nc">Altitude</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">IDestructable</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Armour</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Dodge</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Hits</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Destroyed</span> <span class="o">:</span> <span class="kt">bool</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">TakeDamage</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="nc">IDestructable</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">IWalk</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Walk</span> <span class="o">:</span> <span class="nc">Direction</span> <span class="o">*</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="nc">Location</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">IJump</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Jump</span> <span class="o">:</span> <span class="nc">Direction</span> <span class="o">*</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="nc">Location</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">IFly</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Fly</span> <span class="o">:</span> <span class="nc">Direction</span> <span class="o">*</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="nc">Location</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">IHazWeapon</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Fire</span> <span class="o">:</span> <span class="nc">IDestructable</span> <span class="o">*</span> <span class="kt">int</span> <span class="o">-&gt;</span> <span class="nc">IDestructable</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">IHazWeapons</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">WMDs</span> <span class="o">:</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">IHazWeapon</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">IHazCannon</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">IHazWeapon</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">IHazMissiles</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">IHazWeapon</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">NormalDestructable</span> <span class="o">(</span><span class="n">hits</span><span class="o">,</span> <span class="n">dodge</span><span class="o">,</span> <span class="n">armour</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">hits</span> <span class="o">=</span> <span class="n">ref</span> <span class="mi">100</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">destroyed</span> <span class="o">=</span> <span class="n">ref</span> <span class="bp">false</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">dodge</span> <span class="o">=</span> <span class="n">ref</span> <span class="mi">5</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">armour</span> <span class="o">=</span> <span class="n">ref</span> <span class="mi">20</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">IDestructable</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Hits</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">!_</span><span class="n">hits</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Destroyed</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">!_</span><span class="n">destroyed</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Dodge</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">!_</span><span class="n">dodge</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Armour</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">!_</span><span class="n">armour</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">TakeDamage</span> <span class="n">damage</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">_</span><span class="n">hits</span> <span class="o">:=</span> <span class="o">!_</span><span class="n">hits</span> <span class="o">-</span> <span class="n">damage</span>
</span><span class='line'>            <span class="o">_</span><span class="n">destroyed</span> <span class="o">:=</span> <span class="o">!_</span><span class="n">hits</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="n">x</span> <span class="o">:&gt;</span> <span class="nc">IDestructable</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">GiantRobo</span> <span class="o">(</span><span class="n">position</span><span class="o">,</span> <span class="n">destructable</span> <span class="o">:</span> <span class="o">#</span><span class="nc">IDestructable</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">position</span> <span class="o">=</span> <span class="n">ref</span> <span class="n">position</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Position</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">!_</span><span class="n">position</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">IWalk</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Walk</span> <span class="o">(</span><span class="n">dir</span><span class="o">,</span> <span class="n">distance</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">distance</span> <span class="o">&gt;</span> <span class="mi">4</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">failwith</span> <span class="s2">&quot;GiantRobo is slow!&quot;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="nc">Move</span> <span class="o">(!_</span><span class="n">position</span><span class="o">)</span> <span class="n">dir</span> <span class="n">distance</span><span class="o">;</span> <span class="nc">Altitude</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">IDestructable</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Hits</span> <span class="o">=</span> <span class="n">destructable</span><span class="o">.</span><span class="nc">Hits</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Destroyed</span> <span class="o">=</span> <span class="n">destructable</span><span class="o">.</span><span class="nc">Destroyed</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Dodge</span> <span class="o">=</span> <span class="n">destructable</span><span class="o">.</span><span class="nc">Dodge</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Armour</span> <span class="o">=</span> <span class="n">destructable</span><span class="o">.</span><span class="nc">Armour</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">TakeDamage</span> <span class="n">damage</span> <span class="o">=</span> <span class="n">destructable</span><span class="o">.</span><span class="nc">TakeDamage</span> <span class="n">damage</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">IHazWeapons</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">WMDs</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">[{</span> <span class="k">new</span> <span class="nc">IHazCannon</span> <span class="k">with</span>
</span><span class='line'>                <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Fire</span> <span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">roll</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">roll</span> <span class="o">&gt;</span> <span class="n">target</span><span class="o">.</span><span class="nc">Dodge</span> <span class="k">then</span>
</span><span class='line'>                        <span class="n">target</span><span class="o">.</span><span class="nc">TakeDamage</span> <span class="o">(</span><span class="n">max</span> <span class="mi">0</span> <span class="o">(</span><span class="mi">60</span> <span class="o">-</span> <span class="n">target</span><span class="o">.</span><span class="nc">Armour</span><span class="o">))</span>
</span><span class='line'>                    <span class="k">else</span>
</span><span class='line'>                        <span class="n">target</span> <span class="o">}]</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ITransforming</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Mode</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="o">``</span><span class="nc">Transform</span><span class="o">!``</span> <span class="o">:</span> <span class="kt">string</span> <span class="o">-&gt;</span> <span class="nc">ITransforming</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">VF1</span> <span class="o">(</span><span class="n">position</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">position</span> <span class="o">=</span> <span class="n">ref</span> <span class="n">position</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">_</span><span class="n">mode</span> <span class="o">=</span> <span class="n">ref</span> <span class="s2">&quot;Battroid&quot;</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Position</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">!_</span><span class="n">position</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">IWalk</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Walk</span> <span class="o">(</span><span class="n">dir</span><span class="o">,</span> <span class="n">distance</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">!_</span><span class="n">mode</span> <span class="o">=</span> <span class="s2">&quot;Fighter&quot;</span> <span class="k">then</span> <span class="n">failwith</span> <span class="s2">&quot;No legs in Fighter mode!&quot;</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">distance</span> <span class="o">&gt;</span> <span class="mi">6</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">failwith</span> <span class="s2">&quot;VF-1 isn&#39;t that fast!&quot;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="nc">Move</span> <span class="o">(!_</span><span class="n">position</span><span class="o">)</span> <span class="n">dir</span> <span class="n">distance</span><span class="o">;</span> <span class="nc">Altitude</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">IJump</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Jump</span> <span class="o">(</span><span class="n">dir</span><span class="o">,</span> <span class="n">distance</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">!_</span><span class="n">mode</span> <span class="o">=</span> <span class="s2">&quot;Fighter&quot;</span> <span class="k">then</span> <span class="n">failwith</span> <span class="s2">&quot;Jumping in Fighter mode makes no sense!&quot;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">maxDistance</span> <span class="o">=</span>
</span><span class='line'>                <span class="k">match</span> <span class="o">!_</span><span class="n">mode</span> <span class="k">with</span>
</span><span class='line'>                <span class="o">|</span> <span class="s2">&quot;GERWALK&quot;</span> <span class="o">-&gt;</span> <span class="mi">8</span>
</span><span class='line'>                <span class="o">|</span> <span class="s2">&quot;Battroid&quot;</span> <span class="o">-&gt;</span> <span class="mi">6</span>
</span><span class='line'>                <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">failwith</span> <span class="s2">&quot;No good&quot;</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">distance</span> <span class="o">&gt;</span> <span class="n">maxDistance</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">failwith</span> <span class="s2">&quot;VF-1 isn&#39;t that fast!&quot;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="nc">Move</span> <span class="o">(!_</span><span class="n">position</span><span class="o">)</span> <span class="n">dir</span> <span class="n">distance</span><span class="o">;</span> <span class="nc">Altitude</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">IFly</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Fly</span> <span class="o">(</span><span class="n">dir</span><span class="o">,</span> <span class="n">distance</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">!_</span><span class="n">mode</span> <span class="o">=</span> <span class="s2">&quot;Battroid&quot;</span> <span class="k">then</span> <span class="n">failwith</span> <span class="s2">&quot;Battroid mode can&#39;t fly&quot;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">maxDistance</span> <span class="o">=</span>
</span><span class='line'>                <span class="k">match</span> <span class="o">!_</span><span class="n">mode</span> <span class="k">with</span>
</span><span class='line'>                <span class="o">|</span> <span class="s2">&quot;Fighter&quot;</span> <span class="o">-&gt;</span> <span class="mi">20</span>
</span><span class='line'>                <span class="o">|</span> <span class="s2">&quot;GERWALK&quot;</span> <span class="o">-&gt;</span> <span class="mi">15</span>
</span><span class='line'>                <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">failwith</span> <span class="s2">&quot;No good&quot;</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">distance</span> <span class="o">&gt;</span> <span class="n">maxDistance</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">failwith</span> <span class="s2">&quot;VF-1 isn&#39;t that fast!&quot;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="nc">Move</span> <span class="o">(!_</span><span class="n">position</span><span class="o">)</span> <span class="n">dir</span> <span class="n">distance</span><span class="o">;</span> <span class="nc">Altitude</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">IHazWeapons</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">WMDs</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">[</span>
</span><span class='line'>                <span class="o">{</span> <span class="k">new</span> <span class="nc">IHazCannon</span> <span class="k">with</span>
</span><span class='line'>                    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Fire</span> <span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">roll</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>                        <span class="k">if</span> <span class="n">roll</span> <span class="o">&gt;</span> <span class="n">target</span><span class="o">.</span><span class="nc">Dodge</span> <span class="k">then</span>
</span><span class='line'>                            <span class="n">target</span><span class="o">.</span><span class="nc">TakeDamage</span> <span class="o">(</span><span class="n">max</span> <span class="mi">0</span> <span class="o">(</span><span class="mi">20</span> <span class="o">-</span> <span class="n">target</span><span class="o">.</span><span class="nc">Armour</span><span class="o">))</span>
</span><span class='line'>                        <span class="k">else</span>
</span><span class='line'>                            <span class="n">target</span> <span class="o">};</span>
</span><span class='line'>                 <span class="o">{</span> <span class="k">new</span> <span class="nc">IHazMissiles</span> <span class="k">with</span>
</span><span class='line'>                    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Fire</span> <span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">roll</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>                        <span class="k">if</span> <span class="n">roll</span> <span class="o">&gt;</span> <span class="o">(</span><span class="n">target</span><span class="o">.</span><span class="nc">Dodge</span> <span class="o">/</span> <span class="mi">2</span><span class="o">)</span> <span class="k">then</span>
</span><span class='line'>                            <span class="n">target</span><span class="o">.</span><span class="nc">TakeDamage</span> <span class="o">(</span><span class="n">max</span> <span class="mi">0</span> <span class="o">(</span><span class="mi">60</span> <span class="o">-</span> <span class="n">target</span><span class="o">.</span><span class="nc">Armour</span><span class="o">))</span>
</span><span class='line'>                        <span class="k">else</span>
</span><span class='line'>                            <span class="n">target</span> <span class="o">}</span>
</span><span class='line'>            <span class="o">]</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">ITransforming</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Mode</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">!_</span><span class="n">mode</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.``</span><span class="nc">Transform</span><span class="o">!``</span> <span class="n">mode</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">mode</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="s2">&quot;Fighter&quot;</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="o">_</span><span class="n">mode</span> <span class="o">:=</span> <span class="s2">&quot;Fighter&quot;</span>
</span><span class='line'>            <span class="o">|</span> <span class="s2">&quot;GERWALK&quot;</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="o">_</span><span class="n">mode</span> <span class="o">:=</span> <span class="s2">&quot;GERWALK&quot;</span>
</span><span class='line'>            <span class="o">|</span> <span class="s2">&quot;Battroid&quot;</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="o">_</span><span class="n">mode</span> <span class="o">:=</span> <span class="s2">&quot;Battroid&quot;</span>
</span><span class='line'>            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="n">failwith</span> <span class="s2">&quot;Not a valid VF-1 mode&quot;</span>
</span><span class='line'>            <span class="n">x</span> <span class="o">:&gt;</span> <span class="nc">ITransforming</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>This series continues in the imaginatively named &ldquo;<a href="http://blog.mavnn.co.uk/functionally-solid-2/">Functionally SOLID 2</a>&rdquo;</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type Providers From the First Floor]]></title>
    <link href="http://blog.mavnn.co.uk/type-providers-from-the-first-floor/"/>
    <updated>2014-03-19T21:06:05+00:00</updated>
    <id>http://blog.mavnn.co.uk/type-providers-from-the-first-floor</id>
    <content type="html"><![CDATA[<p><em>This post follows on directly from my previous post <a href="http://blog.mavnn.co.uk/type-providers-from-the-ground-up/">Type Providers from the Ground Up</a>. I highly recommend that you read that first, and check out the relevant example code from GitHub.</em></p>

<p><em>It&rsquo;s also a bit epic&hellip; grab yourself a coffee before you start.</em></p>

<p>So we have a working type provider now. Unfortunately, we&rsquo;re missing out on at least two major features that your new type provider will almost certainly want to make use of.</p>

<p>The first is that in our example, we&rsquo;re reading the metadata that defines our types from a fixed file location. In almost every real life case, you will want to be able to parametrize your provider to specify where this instance is getting it&rsquo;s metadata from.</p>

<p>The second is that in many cases getting the metadata will be slow, and the number of types available to generate may be very large. In these situations, you really want to be able to only generate the types that are required as they are requested, especially because this will reduce the size of the final compiled output. This is particularly important for type providers that read from large network based data sources like the Freebase provider.</p>

<p>We&rsquo;ll take the second first, because it&rsquo;s easy &ndash; and we like easy&hellip;</p>

<!-- more -->


<h2>Generating types on demand</h2>

<p>This is in many ways one of the features that makes type providers uniquely powerful compared to code generation. Because the types are being requested by the compiler as needed, type providers can give meaningful access to literally infinite type hierarchies.</p>

<p>So, does all this power come with great cost and complexity? Not really, no.</p>

<p>Let&rsquo;s take the our node creation function, with some bits snipped out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">createNodeType</span> <span class="n">id</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">Node</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">nodeType</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="n">node</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">nodeInstance</span><span class="o">&gt;)</span>
</span><span class='line'>    <span class="c1">// ... snip constructors</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">outputs</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="s2">&quot;Outputs&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">outputCtor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">,</span> <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="n">obj</span><span class="bp">()</span> <span class="o">@@&gt;)</span>
</span><span class='line'>    <span class="n">outputs</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">outputCtor</span><span class="o">)</span>
</span><span class='line'>    <span class="n">outputs</span><span class="o">.</span><span class="nc">HideObjectMethods</span> <span class="o">&lt;-</span> <span class="bp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">inputs</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="s2">&quot;Inputs&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">inputCtor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">,</span> <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="n">obj</span><span class="bp">()</span> <span class="o">@@&gt;)</span>
</span><span class='line'>    <span class="n">inputs</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">inputCtor</span><span class="o">)</span>
</span><span class='line'>    <span class="n">inputs</span><span class="o">.</span><span class="nc">HideObjectMethods</span> <span class="o">&lt;-</span> <span class="bp">true</span>
</span><span class='line'>    <span class="n">addPorts</span> <span class="n">inputs</span> <span class="n">outputs</span> <span class="n">node</span><span class="o">.</span><span class="nc">Ports</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add the inputs and outputs types of nested types under the Node type</span>
</span><span class='line'>    <span class="n">nodeType</span><span class="o">.</span><span class="nc">AddMembers</span><span class="o">([</span><span class="n">inputs</span><span class="o">;</span><span class="n">outputs</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Now add some instance properties to expose them on a node instance.</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">outputPorts</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;OutputPorts&quot;</span><span class="o">,</span> <span class="n">outputs</span><span class="o">,</span> <span class="bp">[]</span><span class="o">,</span>
</span><span class='line'>                        <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="n">obj</span><span class="bp">()</span> <span class="o">@@&gt;)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">inputPorts</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;InputPorts&quot;</span><span class="o">,</span> <span class="n">inputs</span><span class="o">,</span> <span class="bp">[]</span><span class="o">,</span>
</span><span class='line'>                        <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="n">obj</span><span class="bp">()</span> <span class="o">@@&gt;)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nodeType</span><span class="o">.</span><span class="nc">AddMembers</span><span class="o">([</span><span class="n">inputPorts</span><span class="o">;</span><span class="n">outputPorts</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nodeType</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make the ports deferred, we simply change the <code>AddMembers</code> call at the end to <code>AddMembersDelayed</code> and wrap the creation of the array in a function that takes <code>unit</code>.</p>

<p>It ends up looking like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">createNodeType</span> <span class="n">id</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">Node</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">nodeType</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="n">node</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">nodeInstance</span><span class="o">&gt;)</span>
</span><span class='line'>    <span class="c1">// ... snip out the constructor again...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">addInputOutput</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">outputs</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="s2">&quot;Outputs&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">outputCtor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">,</span> <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="n">obj</span><span class="bp">()</span> <span class="o">@@&gt;)</span>
</span><span class='line'>        <span class="n">outputs</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">outputCtor</span><span class="o">)</span>
</span><span class='line'>        <span class="n">outputs</span><span class="o">.</span><span class="nc">HideObjectMethods</span> <span class="o">&lt;-</span> <span class="bp">true</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">inputs</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="s2">&quot;Inputs&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">inputCtor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">,</span> <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="n">obj</span><span class="bp">()</span> <span class="o">@@&gt;)</span>
</span><span class='line'>        <span class="n">inputs</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">inputCtor</span><span class="o">)</span>
</span><span class='line'>        <span class="n">inputs</span><span class="o">.</span><span class="nc">HideObjectMethods</span> <span class="o">&lt;-</span> <span class="bp">true</span>
</span><span class='line'>        <span class="n">addPorts</span> <span class="n">inputs</span> <span class="n">outputs</span> <span class="n">node</span><span class="o">.</span><span class="nc">Ports</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add the inputs and outputs types of nested types under the Node type</span>
</span><span class='line'>        <span class="n">nodeType</span><span class="o">.</span><span class="nc">AddMembers</span><span class="o">([</span><span class="n">inputs</span><span class="o">;</span><span class="n">outputs</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Now add some instance properties to expose them on a node instance.</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">outputPorts</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;OutputPorts&quot;</span><span class="o">,</span> <span class="n">outputs</span><span class="o">,</span> <span class="bp">[]</span><span class="o">,</span>
</span><span class='line'>                            <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="n">obj</span><span class="bp">()</span> <span class="o">@@&gt;)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">inputPorts</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;InputPorts&quot;</span><span class="o">,</span> <span class="n">inputs</span><span class="o">,</span> <span class="bp">[]</span><span class="o">,</span>
</span><span class='line'>                            <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="n">obj</span><span class="bp">()</span> <span class="o">@@&gt;)</span>
</span><span class='line'>        <span class="o">[</span><span class="n">inputPorts</span><span class="o">;</span><span class="n">outputPorts</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nodeType</span><span class="o">.</span><span class="nc">AddMembersDelayed</span><span class="o">(</span><span class="n">addInputOutput</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nodeType</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the input and output ports of a node will only be generated the first time that the compiler needs them available. If you don&rsquo;t use a particular node in your program, then the compiler will never generate it&rsquo;s ports, and they will not be including in your final build output.</p>

<p>Of course, in this case we&rsquo;re pre-loading all of our metadata anyway, but hopefully this gives you an idea.</p>

<h2>Parametrizing the Data Source</h2>

<p>Currently, we&rsquo;re reading the json that&rsquo;s generating our types like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">nodes</span> <span class="o">=</span> <span class="nn">JsonConvert</span><span class="p">.</span><span class="nc">DeserializeObject</span><span class="o">&lt;</span><span class="n">seq</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;&gt;(</span><span class="nn">IO</span><span class="p">.</span><span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllText</span><span class="o">(@</span><span class="s2">&quot;c:</span><span class="err">\</span><span class="s2">Temp</span><span class="err">\</span><span class="s2">Graph.json&quot;</span><span class="o">))</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nn">UniqueId</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span><span class="o">,</span> <span class="n">n</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nn">Map</span><span class="p">.</span><span class="n">ofSeq</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lovely.</p>

<p>Now, you&rsquo;ll probably of noticed from playing with other type providers that they allow you to do funky things like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="n">myThing</span> <span class="o">=</span> <span class="nc">FancyProvider</span><span class="o">&lt;</span><span class="s2">&quot;configStringThing&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is actually one of the things that kept me going for longest in writing my first type provider, and I have to admit I&rsquo;m still not fully certain why it&rsquo;s done this way.</p>

<p>At the moment, if we strip out all of the type creation logic, our type provider looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">MavnnProvider</span> <span class="o">(</span><span class="n">config</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;Mavnn.Blog.TypeProvider.Provided&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ... massive snip</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">createNodeType</span> <span class="n">id</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">Node</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">nodeType</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="n">node</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">nodeInstance</span><span class="o">&gt;)</span>
</span><span class='line'>        <span class="c1">// ... more snipped here ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">createTypes</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">nodes</span> <span class="o">|&gt;</span> <span class="nn">Map</span><span class="p">.</span><span class="n">map</span> <span class="n">createNodeType</span> <span class="o">|&gt;</span> <span class="nn">Map</span><span class="p">.</span><span class="n">toList</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">v</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="n">createTypes</span><span class="bp">()</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we add the types to the namespace during the initialization of the MavnnProvider type.</p>

<p>This is no good if we want to add parameters &ndash; after all, we don&rsquo;t know what they are yet. And the same provider might be used several times with different parameters. Also, when we create our provided type (<code>let nodeType = ...</code>) we&rsquo;re putting into a fixed space in the assemblies namespace. Again, this is no good if we want to be able to use more than one of our provider with different parameters.</p>

<p>To get around these issues, we create a &ldquo;parent&rdquo; provided type within the type provider which will host an isolated namespace for each parametrized provider instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">mavnnProvider</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;MavnnProvider&quot;</span><span class="o">,</span> <span class="nc">Some</span><span class="o">(</span><span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we define some &lsquo;static parameters&rsquo; and call the <code>DefineStaticParameters</code> method on the parent provided type, still within the construction of the type provider:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span><span class="nc">ProvidedStaticParameter</span><span class="o">(</span><span class="s2">&quot;PathToJson&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)]</span>
</span><span class='line'>
</span><span class='line'><span class="k">do</span> <span class="n">mavnnProvider</span><span class="o">.</span><span class="nc">DefineStaticParameters</span><span class="o">(</span><span class="n">parameters</span><span class="o">,</span> <span class="k">fun</span> <span class="n">typeName</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">pathToJson</span> <span class="o">=</span> <span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:?&gt;</span> <span class="kt">string</span>
</span><span class='line'>    <span class="c1">// ... do all our type creation logic in here ...</span>
</span><span class='line'>    <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and then we amend the base TypeProvider type so that the only type it adds to the namespace is the <code>mavnnProvider</code> type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// was: do this.AddNamespace(ns, createTypes())</span>
</span><span class='line'><span class="k">do</span> <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">mavnnProvider</span><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, we&rsquo;re creating an independent environment for each instance of the type provider. Unfortunately we need to make several changes to the type creation logic to make this work.</p>

<p>Firstly, we loaded quite a few things globally in the original version &ndash; things like the node list now need to happen within the context of <code>DefineStaticParameters</code>. You&rsquo;ll also notice that <code>DefineStaticParameters</code> gets given a <code>typeName</code> as one of the parameters on the callback. This is a compiler generated type name for this instance of the which is passed in when a parameterised provider is defined, and the callback method needs to return a provided type with that name.</p>

<p>So, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// In a script file called: Script.fsx</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;../../Mavnn.Blog.TypeProvider/Mavnn.Blog.TypeProvider/bin/Debug/Newtonsoft.Json.dll&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;../../Mavnn.Blog.TypeProvider/Mavnn.Blog.TypeProvider/bin/Debug/Mavnn.Blog.TypeProvider.dll&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Mavnn</span><span class="p">.</span><span class="nn">Blog</span><span class="p">.</span><span class="nn">TypeProvider</span><span class="p">.</span><span class="nc">Provided</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="n">thisOne</span> <span class="o">=</span> <span class="nc">MavnnProvider</span><span class="o">&lt;</span><span class="s2">&quot;c:</span><span class="err">\</span><span class="s2">Temp</span><span class="err">\</span><span class="s2">Graph.json&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will pass in <code>"Script.thisOne" [| box "c:\Temp\Graph.json" |]</code> to the callback method, and expect to get back a provided type. So the first thing we&rsquo;ll do in the callback is create the new type which we will then add all of our nodes to.</p>

<p>Keeping all of the amendments separate in your head just gets harder and harder at this point, so let&rsquo;s just few the final annotated method and get an overview of the final result. It&rsquo;s long, but hopefully worth it!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">do</span> <span class="n">mavnnProvider</span><span class="o">.</span><span class="nc">DefineStaticParameters</span><span class="o">(</span><span class="n">parameters</span><span class="o">,</span> <span class="k">fun</span> <span class="n">typeName</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c1">// All args arrive as type obj - you&#39;ll need to cast them back to what</span>
</span><span class='line'>    <span class="c1">// you specified for actual usage</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">pathToJson</span> <span class="o">=</span> <span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:?&gt;</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// This is the type that is going to host all the other types</span>
</span><span class='line'>    <span class="c1">// and get returned at the end of the method</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">provider</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="n">typeName</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> <span class="nc">HideObjectMethods</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ---------- set up ----------</span>
</span><span class='line'>    <span class="c1">// This section contains all the methods that where previously global</span>
</span><span class='line'>    <span class="c1">// to the module, but now need to be constrained to this instance of</span>
</span><span class='line'>    <span class="c1">// the provider</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">nodes</span> <span class="o">=</span> <span class="nn">JsonConvert</span><span class="p">.</span><span class="nc">DeserializeObject</span><span class="o">&lt;</span><span class="n">seq</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;&gt;(</span><span class="nn">IO</span><span class="p">.</span><span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllText</span><span class="o">(</span><span class="n">pathToJson</span><span class="o">))</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nn">UniqueId</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span><span class="o">,</span> <span class="n">n</span><span class="o">)</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Map</span><span class="p">.</span><span class="n">ofSeq</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="nc">GetNode</span> <span class="n">id</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">nodes</span><span class="o">.[</span><span class="n">id</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ports</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">nodes</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Map</span><span class="p">.</span><span class="n">toSeq</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(_,</span> <span class="n">node</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">node</span><span class="o">.</span><span class="nc">Ports</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">concat</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nn">UniqueId</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span><span class="o">,</span> <span class="n">p</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Map</span><span class="p">.</span><span class="n">ofSeq</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="nc">GetPort</span> <span class="n">id</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">ports</span><span class="o">.[</span><span class="n">id</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">addInputPort</span> <span class="o">(</span><span class="n">inputs</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">(</span><span class="n">port</span> <span class="o">:</span> <span class="nc">Port</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">port</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>                        <span class="n">port</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nc">Name</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">InputPort</span><span class="o">&gt;,</span>
</span><span class='line'>                        <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                            <span class="k">let</span> <span class="n">id</span> <span class="o">=</span> <span class="n">port</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nn">UniqueId</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span>
</span><span class='line'>                            <span class="o">&lt;@@</span> <span class="nc">GetPort</span> <span class="n">id</span> <span class="o">|&gt;</span> <span class="nc">InputPort</span> <span class="o">@@&gt;)</span>
</span><span class='line'>        <span class="n">inputs</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">port</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">addOutputPort</span> <span class="o">(</span><span class="n">outputs</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">(</span><span class="n">port</span> <span class="o">:</span> <span class="nc">Port</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">port</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>                        <span class="n">port</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nc">Name</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">OutputPort</span><span class="o">&gt;,</span>
</span><span class='line'>                        <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                            <span class="k">let</span> <span class="n">id</span> <span class="o">=</span> <span class="n">port</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nn">UniqueId</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span>
</span><span class='line'>                            <span class="o">&lt;@@</span> <span class="nc">GetPort</span> <span class="n">id</span> <span class="o">|&gt;</span> <span class="nc">OutputPort</span> <span class="o">@@&gt;)</span>
</span><span class='line'>        <span class="n">outputs</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">port</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">addPorts</span> <span class="n">inputs</span> <span class="n">outputs</span> <span class="o">(</span><span class="n">portList</span> <span class="o">:</span> <span class="n">seq</span><span class="o">&lt;</span><span class="nc">Port</span><span class="o">&gt;)</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">portList</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">port</span> <span class="o">-&gt;</span>
</span><span class='line'>                        <span class="k">match</span> <span class="n">port</span><span class="o">.</span><span class="nc">Type</span> <span class="k">with</span>
</span><span class='line'>                        <span class="o">|</span> <span class="s2">&quot;input&quot;</span> <span class="o">-&gt;</span> <span class="n">addInputPort</span> <span class="n">inputs</span> <span class="n">port</span>
</span><span class='line'>                        <span class="o">|</span> <span class="s2">&quot;output&quot;</span> <span class="o">-&gt;</span> <span class="n">addOutputPort</span> <span class="n">outputs</span> <span class="n">port</span>
</span><span class='line'>                        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">failwithf</span> <span class="s2">&quot;Unknown port type for port %s/%s&quot;</span> <span class="n">port</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nc">Name</span> <span class="o">(</span><span class="n">port</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nn">UniqueId</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ---------- end set up ----------</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">createNodeType</span> <span class="n">id</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">Node</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">nodeType</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">nodeInstance</span><span class="o">&gt;)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">ctor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span>
</span><span class='line'>                    <span class="o">[</span>
</span><span class='line'>                        <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="s2">&quot;Name&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)</span>
</span><span class='line'>                        <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="s2">&quot;UniqueId&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">Guid</span><span class="o">&gt;)</span>
</span><span class='line'>                        <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="s2">&quot;Config&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)</span>
</span><span class='line'>                    <span class="o">],</span>
</span><span class='line'>                    <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">[</span><span class="n">name</span><span class="o">;</span><span class="n">unique</span><span class="o">;</span><span class="n">config</span><span class="o">]</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="nn">NodeInstance</span><span class="p">.</span><span class="n">create</span> <span class="o">(</span><span class="nc">GetNode</span> <span class="n">id</span><span class="o">)</span> <span class="o">(%%</span><span class="n">name</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">(%%</span><span class="n">unique</span><span class="o">:</span><span class="nc">Guid</span><span class="o">)</span> <span class="o">(%%</span><span class="n">config</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">@@&gt;)</span>
</span><span class='line'>        <span class="n">nodeType</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">ctor</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">addInputOutput</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">outputs</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="s2">&quot;Outputs&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">outputCtor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">,</span> <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="n">obj</span><span class="bp">()</span> <span class="o">@@&gt;)</span>
</span><span class='line'>            <span class="n">outputs</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">outputCtor</span><span class="o">)</span>
</span><span class='line'>            <span class="n">outputs</span><span class="o">.</span><span class="nc">HideObjectMethods</span> <span class="o">&lt;-</span> <span class="bp">true</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">let</span> <span class="n">inputs</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="s2">&quot;Inputs&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">inputCtor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">,</span> <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="n">obj</span><span class="bp">()</span> <span class="o">@@&gt;)</span>
</span><span class='line'>            <span class="n">inputs</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">inputCtor</span><span class="o">)</span>
</span><span class='line'>            <span class="n">inputs</span><span class="o">.</span><span class="nc">HideObjectMethods</span> <span class="o">&lt;-</span> <span class="bp">true</span>
</span><span class='line'>            <span class="n">addPorts</span> <span class="n">inputs</span> <span class="n">outputs</span> <span class="n">node</span><span class="o">.</span><span class="nc">Ports</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Add the inputs and outputs types of nested types under the Node type</span>
</span><span class='line'>            <span class="n">nodeType</span><span class="o">.</span><span class="nc">AddMembers</span><span class="o">([</span><span class="n">inputs</span><span class="o">;</span><span class="n">outputs</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Now add some instance properties to expose them on a node instance.</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">outputPorts</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;OutputPorts&quot;</span><span class="o">,</span> <span class="n">outputs</span><span class="o">,</span> <span class="bp">[]</span><span class="o">,</span>
</span><span class='line'>                                <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="n">obj</span><span class="bp">()</span> <span class="o">@@&gt;)</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">inputPorts</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;InputPorts&quot;</span><span class="o">,</span> <span class="n">inputs</span><span class="o">,</span> <span class="bp">[]</span><span class="o">,</span>
</span><span class='line'>                                <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="n">obj</span><span class="bp">()</span> <span class="o">@@&gt;)</span>
</span><span class='line'>            <span class="o">[</span><span class="n">inputPorts</span><span class="o">;</span><span class="n">outputPorts</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">nodeType</span><span class="o">.</span><span class="nc">AddMembersDelayed</span><span class="o">(</span><span class="n">addInputOutput</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">provider</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">nodeType</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// And this is where we actually interate through the loaded nodes,</span>
</span><span class='line'>    <span class="c1">// using createNodeType to add each one to the parent provider type.</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">createTypes</span> <span class="n">pathToJson</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">nodes</span> <span class="o">|&gt;</span> <span class="nn">Map</span><span class="p">.</span><span class="n">map</span> <span class="n">createNodeType</span> <span class="o">|&gt;</span> <span class="nn">Map</span><span class="p">.</span><span class="n">toList</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">v</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">createTypes</span> <span class="n">pathToJson</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// And then we return our fully populated provider.</span>
</span><span class='line'>    <span class="n">provider</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s just check this all still works&hellip;</p>

<p><img src="http://blog.mavnn.co.uk/images/tp-oh-no.png" alt="Losing!" /></p>

<p>Ah. No. No, it doesn&rsquo;t.</p>

<p>This is where type provider development can get a bit more frustrating. The compiler allows the code above to compile &ndash; it&rsquo;s completely valid F# that looks like it should do the right thing. But now, our quotations are doing something different; and evaluating them at runtime fails.</p>

<p>Let&rsquo;s take a look at the constructor that&rsquo;s throwing the error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="nc">InvokeCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">[</span><span class="n">name</span><span class="o">;</span><span class="n">unique</span><span class="o">;</span><span class="n">config</span><span class="o">]</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="nn">NodeInstance</span><span class="p">.</span><span class="n">create</span> <span class="o">(</span><span class="nc">GetNode</span> <span class="n">id</span><span class="o">)</span> <span class="o">(%%</span><span class="n">name</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">(%%</span><span class="n">unique</span><span class="o">:</span><span class="nc">Guid</span><span class="o">)</span> <span class="o">(%%</span><span class="n">config</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">@@&gt;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Previously, <code>GetNode</code> was referring to a public method in the type provider assembly. But if you look above now, it&rsquo;s actually a private method with in the type provider class that we are closing over. But our generated type is in the assembly that&rsquo;s being created, not in the type provider assembly so <em>it can&rsquo;t access this method</em>. Even if it was in the same assembly, this method is actually private to the class, so we&rsquo;d still be stuck. Bearing that in mind, let&rsquo;s try a
rewrite to see if we can get all of our quotations into better shape.</p>

<p>What are our options? Well, we can either capture all private state in types that the quotation evaluator knows about (<code>string</code>, mostly!). Or we can make sure that any methods called in the quotations are public.</p>

<p>The first gives us a cleaner interface for the outside world (the <code>GetNode</code> method should never really have been public in the first place), so let&rsquo;s give it a try.</p>

<p>In our first version of the type provider, we were using the <code>GetNode</code> method to avoid having to embed the <code>Node</code> in the constructor directly. But how would we go about putting the node in directly? We need something that creates an <code>Expr&lt;Node&gt;</code>; but <code>Node</code> isn&rsquo;t a completely trivial type &ndash; it&rsquo;s members (<code>Id</code> and <code>Ports</code>) are made of more complex types themselves. Let&rsquo;s start with a simpler challenge, and see if we can make an <code>Expr&lt;Id&gt;</code>.</p>

<p>We already know that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">embeddedId</span> <span class="o">(</span><span class="n">identifier</span> <span class="o">:</span> <span class="nc">Id</span><span class="o">)</span> <span class="o">=</span> <span class="o">&lt;@</span> <span class="n">identifier</span> <span class="o">@&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>isn&rsquo;t going to work. The expression evaluator won&rsquo;t know what to do with the <code>Id</code> type. But <code>Id</code>&rsquo;s constructor is a public method, as is the <code>Guid</code> constructor. Let&rsquo;s try it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">embeddedId</span> <span class="o">(</span><span class="n">id</span> <span class="o">:</span> <span class="nc">Id</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">guid</span> <span class="o">=</span> <span class="n">sprintf</span> <span class="s2">&quot;%A&quot;</span> <span class="o">(</span><span class="n">id</span><span class="o">.</span><span class="nc">UniqueId</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">name</span> <span class="o">=</span> <span class="n">id</span><span class="o">.</span><span class="nc">Name</span>
</span><span class='line'>    <span class="o">&lt;@</span> <span class="nc">Id</span><span class="o">(</span><span class="nc">UniqueId</span> <span class="o">=</span> <span class="nc">Guid</span><span class="o">(</span><span class="n">guid</span><span class="o">),</span> <span class="nc">Name</span> <span class="o">=</span> <span class="n">name</span><span class="o">)</span> <span class="o">@&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool. It works, and even has the right signature. Looks like we might be getting somewhere. The <code>Port</code> type is nearly as straight forward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">embeddedPort</span> <span class="o">(</span><span class="n">port</span> <span class="o">:</span> <span class="nc">Port</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">idExpr</span> <span class="o">=</span> <span class="n">embeddedId</span> <span class="n">port</span><span class="o">.</span><span class="nc">Id</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">type&#39;</span> <span class="o">=</span> <span class="n">port</span><span class="o">.</span><span class="nc">Type</span>
</span><span class='line'>    <span class="o">&lt;@</span> <span class="nc">Port</span><span class="o">(</span><span class="nc">Id</span> <span class="o">=</span> <span class="o">%</span><span class="n">idExpr</span><span class="o">,</span> <span class="nc">Type</span> <span class="o">=</span> <span class="k">type&#39;</span><span class="o">)</span> <span class="o">@&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re using our embeddedId method to &lsquo;lift&rsquo; the port&rsquo;s <code>Id</code> into an expression, and then splicing that expression into a call to create a new port.</p>

<p>We&rsquo;re on a roll! Just need to do the same for the <code>Node</code> type itself, with it&rsquo;s&hellip; <code>List</code> of <code>Port</code>s. Ah.</p>

<p>There&rsquo;s probably a more elegant way of doing this, but given this is a functional first language, let&rsquo;s grab the first tool that springs to mind.</p>

<p>Recursion.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">embeddedNode</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">Node</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">idExpr</span> <span class="o">=</span> <span class="n">embeddedId</span> <span class="n">node</span><span class="o">.</span><span class="nc">Id</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">portsExpr</span> <span class="n">adder</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">&lt;@</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">outPorts</span> <span class="o">=</span> <span class="nn">Collections</span><span class="p">.</span><span class="nn">Generic</span><span class="p">.</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Port</span><span class="o">&gt;</span><span class="bp">()</span>
</span><span class='line'>            <span class="o">(%</span><span class="n">adder</span><span class="o">)</span> <span class="n">outPorts</span>
</span><span class='line'>            <span class="n">outPorts</span>
</span><span class='line'>        <span class="o">@&gt;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">adder</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">portExprs</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">port</span> <span class="o">-&gt;</span> <span class="n">embeddedPort</span> <span class="n">port</span><span class="o">)</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="nc">Ports</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toList</span>
</span><span class='line'>        <span class="k">let</span> <span class="k">rec</span> <span class="n">builder</span> <span class="n">expr</span> <span class="n">remaining</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">remaining</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="n">h</span><span class="o">::</span><span class="n">t</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="n">builder</span>
</span><span class='line'>                    <span class="o">&lt;@</span> <span class="k">fun</span> <span class="o">(</span><span class="n">ports</span> <span class="o">:</span> <span class="nn">Collections</span><span class="p">.</span><span class="nn">Generic</span><span class="p">.</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Port</span><span class="o">&gt;)</span> <span class="o">-&gt;</span>
</span><span class='line'>                            <span class="o">(%</span><span class="n">expr</span><span class="o">)</span> <span class="n">ports</span>
</span><span class='line'>                            <span class="n">ports</span><span class="o">.</span><span class="nc">Add</span><span class="o">(%</span><span class="n">h</span><span class="o">)</span> <span class="o">@&gt;</span>
</span><span class='line'>                    <span class="n">t</span>
</span><span class='line'>            <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="n">expr</span>
</span><span class='line'>        <span class="n">builder</span>
</span><span class='line'>            <span class="o">&lt;@</span> <span class="k">fun</span> <span class="o">(</span><span class="n">ports</span> <span class="o">:</span> <span class="nn">Collections</span><span class="p">.</span><span class="nn">Generic</span><span class="p">.</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Port</span><span class="o">&gt;)</span> <span class="o">-&gt;</span> <span class="bp">()</span> <span class="o">@&gt;</span>
</span><span class='line'>            <span class="n">portExprs</span>
</span><span class='line'>    <span class="o">&lt;@</span> <span class="nc">Node</span><span class="o">(</span><span class="nc">Id</span> <span class="o">=</span> <span class="o">%</span><span class="n">idExpr</span><span class="o">,</span> <span class="nc">Ports</span> <span class="o">=</span> <span class="o">(%</span><span class="n">portsExpr</span> <span class="n">adder</span><span class="o">))</span> <span class="o">@&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, from the top down. <code>portsExpr</code> creates a quotation that takes an <code>adder</code> quotation (<code>Expr&lt;List&lt;Port&gt;&gt; -&gt; unit</code>) and returns an <code>Expr&lt;List&lt;Port&gt;&gt;</code>. This is what we&rsquo;re going to use in our <code>Node</code> construction quotation; but first we need the <code>adder</code>; some kind of magic method that takes a List and adds each of the ports from the node that&rsquo;s being passed into <code>embeddedNode</code>. I&rsquo;ve built it as a recursive function; the &lsquo;zero&rsquo; state that&rsquo;s passed in looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&lt;@</span> <span class="k">fun</span> <span class="o">(</span><span class="n">ports</span> <span class="o">:</span> <span class="nn">Collections</span><span class="p">.</span><span class="nn">Generic</span><span class="p">.</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Port</span><span class="o">&gt;)</span> <span class="o">-&gt;</span> <span class="bp">()</span> <span class="o">@&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is what will happen if the port list on the input node is empty. If it&rsquo;s not empty, we repeated build up nested calls to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&lt;@</span> <span class="k">fun</span> <span class="o">(</span><span class="n">ports</span> <span class="o">:</span> <span class="nn">Collections</span><span class="p">.</span><span class="nn">Generic</span><span class="p">.</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Port</span><span class="o">&gt;)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">(%</span><span class="n">expr</span><span class="o">)</span> <span class="n">ports</span>
</span><span class='line'>        <span class="n">ports</span><span class="o">.</span><span class="nc">Add</span><span class="o">(%</span><span class="n">h</span><span class="o">)</span> <span class="o">@&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where <code>h</code> is the next port from the list. By the end of the process we have a chain of anonymous functions, each in turn closing over the quotation of a port from the input. Finally, we can splice that into the expression that actually creates our node.</p>

<p>Now we can use our new <code>embeddedX</code> expressions in our provided constructors and methods; for example, the constructor above becomes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">ctor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span>
</span><span class='line'>            <span class="o">[</span>
</span><span class='line'>                <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="s2">&quot;Name&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)</span>
</span><span class='line'>                <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="s2">&quot;UniqueId&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">Guid</span><span class="o">&gt;)</span>
</span><span class='line'>                <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="s2">&quot;Config&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)</span>
</span><span class='line'>            <span class="o">],</span>
</span><span class='line'>            <span class="nc">InvokeCode</span> <span class="o">=</span>
</span><span class='line'>                <span class="k">fun</span> <span class="o">[</span><span class="n">name</span><span class="o">;</span><span class="n">unique</span><span class="o">;</span><span class="n">config</span><span class="o">]</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">nodeExpr</span> <span class="o">=</span> <span class="n">embeddedNode</span> <span class="o">&lt;|</span> <span class="nc">GetNode</span> <span class="n">id</span>
</span><span class='line'>                    <span class="o">&lt;@@</span> <span class="nn">NodeInstance</span><span class="p">.</span><span class="n">create</span> <span class="o">(%</span><span class="n">nodeExpr</span><span class="o">)</span> <span class="o">(%%</span><span class="n">name</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">(%%</span><span class="n">unique</span><span class="o">:</span><span class="nc">Guid</span><span class="o">)</span> <span class="o">(%%</span><span class="n">config</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">@@&gt;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can you see the difference? Now, rather than closing over the <code>GetNode</code> method, we&rsquo;re closing over the quotation of the node that it returns.</p>

<p>With a sense of deja vu, let&rsquo;s just check this all works&hellip;</p>

<p><img src="http://blog.mavnn.co.uk/images/tp_quotations.png" alt="Winning!" /></p>

<p>And somewhat surprisingly &ndash; it does.</p>

<p>If you want to see and play with the code, the version for this post can be found in <a href="https://github.com/mavnn/Mavnn.Blog.TypeProvider/tree/FirstFloor">the FirstFloor branch of the project on GitHub</a>.</p>

<p>As with the first post in the series, let me know your questions and comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Single File Websites With Suave]]></title>
    <link href="http://blog.mavnn.co.uk/single-file-websites-with-suave/"/>
    <updated>2014-02-28T09:54:46+00:00</updated>
    <id>http://blog.mavnn.co.uk/single-file-websites-with-suave</id>
    <content type="html"><![CDATA[<blockquote><p>As of a few days ago, the embedded module <a href="https://github.com/SuaveIO/suave/pull/100/files">was merged</a> into Suave master. Enjoy!</p></blockquote>

<p>I&rsquo;m a great fan of <a href="http://suave.io/">Suave</a> for simple web development in F#. I highly recommend checking out the site for details, but in the mean time I&rsquo;d like to share a little trick I&rsquo;ve been using for rapid prototyping that I&rsquo;m finding very useful.</p>

<p>The Suave.Http module contains a few helpers for serving static files from disk. Unfortunately, depending on use case and deployment strategy, relying on the location of a bunch of files on disk can be problematic.</p>

<p>So (open source to the rescue!) I cracked open the code and wrote a small alternative implementation that serves files from the current assembly&rsquo;s embedded resources. I&rsquo;m finding it especially useful for single page JavaScript apps where you have a small number of resources and then a lot of end points providing api functionality.</p>

<p>Setting up your website looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Website</span>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Suave</span><span class="p">.</span><span class="nc">Http</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Suave</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Embedded</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">app</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">choose</span> <span class="o">[</span>
</span><span class='line'>        <span class="c1">// serve the embedded index.html for &quot;/&quot;</span>
</span><span class='line'>        <span class="nc">GET</span> <span class="o">&gt;&gt;=</span> <span class="n">url</span> <span class="s2">&quot;/&quot;</span> <span class="o">&gt;&gt;=</span> <span class="n">resource</span> <span class="s2">&quot;index.html&quot;</span>
</span><span class='line'>        <span class="c1">// check if the request matches the name of an embedded resource</span>
</span><span class='line'>        <span class="c1">// if it does, serve it up with a reasonable cache</span>
</span><span class='line'>        <span class="nc">GET</span> <span class="o">&gt;&gt;=</span> <span class="n">browse_embedded</span>
</span><span class='line'>        <span class="c1">// If it doesn&#39;t, try and trigger your api end points</span>
</span><span class='line'>        <span class="nc">GET</span> <span class="o">&gt;&gt;=</span> <span class="n">url</span> <span class="s2">&quot;/json&quot;</span> <span class="o">&gt;&gt;==</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">serveJson</span> <span class="o">&lt;|</span> <span class="n">makeData</span><span class="bp">()</span><span class="o">)</span>
</span><span class='line'>        <span class="nc">GET</span> <span class="o">&gt;&gt;=</span> <span class="n">url</span> <span class="s2">&quot;/carrier&quot;</span> <span class="o">&gt;&gt;==</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">getCarrierCodes</span> <span class="bp">()</span><span class="o">)</span>
</span><span class='line'>        <span class="c1">// Nothing else has worked - 404</span>
</span><span class='line'>        <span class="nc">NOT_FOUND</span> <span class="s2">&quot;Sorry, couldn&#39;t find your page&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">web_server</span> <span class="n">default_config</span> <span class="n">app</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the embedded module looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Embedded</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Suave</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Suave</span><span class="p">.</span><span class="nc">Http</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Suave</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Suave</span><span class="p">.</span><span class="nc">Socket</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">ass</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">resources</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">ass</span><span class="o">.</span><span class="nc">GetManifestResourceNames</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="nc">CACHE_CONTROL_MAX_AGE</span> <span class="o">=</span> <span class="mi">600</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">lastModified</span> <span class="o">=</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">send_embedded</span> <span class="n">resourceName</span> <span class="n">r</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">write_embedded</span> <span class="n">file</span> <span class="o">(</span><span class="n">r</span> <span class="o">:</span> <span class="nc">HttpRequest</span><span class="o">)</span> <span class="o">=</span> <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">use</span> <span class="n">s</span> <span class="o">=</span> <span class="n">ass</span><span class="o">.</span><span class="nc">GetManifestResourceStream</span><span class="o">(</span><span class="n">resourceName</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="nc">Length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="n">L</span> <span class="k">then</span>
</span><span class='line'>        <span class="k">do</span><span class="o">!</span> <span class="n">async_writeln</span> <span class="n">r</span><span class="o">.</span><span class="n">connection</span> <span class="o">(</span><span class="n">sprintf</span> <span class="s2">&quot;Content-Length: %d&quot;</span> <span class="n">s</span><span class="o">.</span><span class="nc">Length</span><span class="o">)</span> <span class="n">r</span><span class="o">.</span><span class="n">line_buffer</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">do</span><span class="o">!</span> <span class="n">async_writeln</span> <span class="n">r</span><span class="o">.</span><span class="n">connection</span> <span class="s2">&quot;&quot;</span> <span class="n">r</span><span class="o">.</span><span class="n">line_buffer</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="nc">Length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="n">L</span> <span class="k">then</span>
</span><span class='line'>        <span class="k">do</span><span class="o">!</span> <span class="n">transfer_x</span> <span class="n">r</span><span class="o">.</span><span class="n">connection</span> <span class="n">s</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">async</span> <span class="o">{</span> <span class="k">do</span><span class="o">!</span> <span class="n">response_f</span> <span class="mi">200</span> <span class="s2">&quot;OK&quot;</span> <span class="o">(</span><span class="n">write_embedded</span> <span class="n">resourceName</span><span class="o">)</span> <span class="n">r</span> <span class="o">}</span> <span class="o">|&gt;</span> <span class="n">succeed</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">resource</span> <span class="n">resourceName</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">resources</span> <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">exists</span> <span class="o">((=)</span> <span class="n">resourceName</span><span class="o">)</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">send_it</span> <span class="o">_</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">mimes</span> <span class="o">=</span> <span class="n">mime_type</span> <span class="o">&lt;|</span> <span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetExtension</span> <span class="n">resourceName</span>
</span><span class='line'>        <span class="o">#</span><span class="k">if</span> <span class="nc">DEBUG</span>
</span><span class='line'>        <span class="n">set_mime_type</span> <span class="n">mimes</span>
</span><span class='line'>        <span class="o">&gt;&gt;</span> <span class="n">send_embedded</span> <span class="o">(</span><span class="n">resourceName</span><span class="o">)</span>
</span><span class='line'>        <span class="o">#</span><span class="k">else</span>
</span><span class='line'>        <span class="n">set_header</span> <span class="s2">&quot;Cache-Control&quot;</span> <span class="o">(</span><span class="n">sprintf</span> <span class="s2">&quot;max-age=%d&quot;</span> <span class="nc">CACHE_CONTROL_MAX_AGE</span><span class="o">)</span>
</span><span class='line'>        <span class="o">&gt;&gt;</span> <span class="n">set_header</span> <span class="s2">&quot;Last-Modified&quot;</span> <span class="o">(</span><span class="n">lastModified</span><span class="o">.</span><span class="nc">ToString</span><span class="o">(</span><span class="s2">&quot;R&quot;</span><span class="o">))</span>
</span><span class='line'>        <span class="o">&gt;&gt;</span> <span class="n">set_header</span> <span class="s2">&quot;Expires&quot;</span> <span class="o">(</span><span class="nn">DateTime</span><span class="p">.</span><span class="nn">UtcNow</span><span class="p">.</span><span class="nc">AddSeconds</span><span class="o">(</span><span class="kt">float</span><span class="o">(</span><span class="nc">CACHE_CONTROL_MAX_AGE</span><span class="o">)).</span><span class="nc">ToString</span><span class="o">(</span><span class="s2">&quot;R&quot;</span><span class="o">))</span>
</span><span class='line'>        <span class="o">&gt;&gt;</span> <span class="n">set_mime_type</span> <span class="n">mimes</span>
</span><span class='line'>        <span class="o">&gt;&gt;</span> <span class="n">send_embedded</span> <span class="o">(</span><span class="n">resourceName</span><span class="o">)</span>
</span><span class='line'>        <span class="o">#</span><span class="n">endif</span>
</span><span class='line'>      <span class="n">warbler</span> <span class="o">(</span> <span class="k">fun</span> <span class="o">(</span><span class="n">r</span><span class="o">:</span><span class="nc">HttpRequest</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">modified_since</span> <span class="o">=</span> <span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="n">headers</span> <span class="o">?</span> <span class="o">``</span><span class="k">if</span><span class="o">-</span><span class="n">modified</span><span class="o">-</span><span class="n">since</span><span class="o">``</span> <span class="o">)</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">modified_since</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">v</span> <span class="o">-&gt;</span> <span class="k">let</span> <span class="n">date</span> <span class="o">=</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">Parse</span> <span class="n">v</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">lastModified</span> <span class="o">&gt;</span> <span class="n">date</span> <span class="k">then</span> <span class="n">send_it</span> <span class="bp">()</span>
</span><span class='line'>                    <span class="k">else</span> <span class="nc">NOT_MODIFIED</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">None</span>   <span class="o">-&gt;</span> <span class="n">send_it</span> <span class="bp">()</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">never</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">browse_embedded</span> <span class="o">:</span> <span class="nc">WebPart</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">warbler</span> <span class="o">(</span><span class="k">fun</span> <span class="n">req</span> <span class="o">-&gt;</span> <span class="n">resource</span> <span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="n">url</span><span class="o">.</span><span class="nc">TrimStart</span><span class="o">([|</span> <span class="sc">&#39;/&#39;</span> <span class="o">|])))</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://twitter.com/ad3mar">@ad3mar</a> if you feel like rolling this into Suave, you can consider it licenced under what ever is most convenient. An official licence file would make me much happier using Suave in production, by the way (hint, hint).</p>

<p>Edit: ad3mar has pointed out in the comments that Suave is already Apache2 licensed, I just failed to find the file last time I looked.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type Provider ProTip]]></title>
    <link href="http://blog.mavnn.co.uk/type-provider-protip/"/>
    <updated>2014-01-10T12:15:15+00:00</updated>
    <id>http://blog.mavnn.co.uk/type-provider-protip</id>
    <content type="html"><![CDATA[<p>While type providers are incredibly powerful, the ProvidedTypes api for creating them is sometimes a bit rough around the edges. And not always as functional as you might hope.</p>

<p>At some point I&rsquo;d like to do something about that, but for the moment I&rsquo;m just going to collect a few helpful tips and hints (mostly for own reference).</p>

<p>Tip one is in the case where you have XmlDocs to add to ProvidedTypes, ProvidedMethods and ProvidedProperties; in our case we have an optional description field in our metadata and the boiler plate was getting tiresome.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">inline</span> <span class="n">addDoc</span> <span class="o">(</span><span class="n">desc</span> <span class="o">:</span> <span class="nc">Descriptor</span><span class="o">)</span> <span class="n">def</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">desc</span><span class="o">.</span><span class="nc">Description</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Some</span> <span class="n">d</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">(^</span><span class="nc">T</span> <span class="o">:</span> <span class="o">(</span><span class="k">member</span> <span class="nc">AddXmlDoc</span> <span class="o">:</span> <span class="kt">string</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">(</span><span class="n">def</span><span class="o">,</span> <span class="n">d</span><span class="o">))</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function takes a <code>Descriptor</code> with a <code>string option</code> Description field and any <code>def</code> with an AddXmlDoc member with the noted signature &ndash; and adds description as the xml doc if it exists.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pygments]]></title>
    <link href="http://blog.mavnn.co.uk/pygments/"/>
    <updated>2014-01-03T12:23:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/pygments</id>
    <content type="html"><![CDATA[<p>Apparently I should be able to do inline F# code using one of the Octopress plugins, rather than having to use gists every where.</p>

<p>Let&rsquo;s try it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">hello</span> <span class="o">=</span> <span class="s2">&quot;world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks <a href="https://twitter.com/ovatsus/status/411496863591067648">Gustavo</a></p>

<p>Only issue is that having Python 3.x installed broke Octopress&#8217; Pygments support. Which kept me going for a while&hellip;</p>

<p>Given I&rsquo;m not currently doing any Python development, a uninstall and adding 2.7 to the path did the job.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type Providers From the Ground Up]]></title>
    <link href="http://blog.mavnn.co.uk/type-providers-from-the-ground-up/"/>
    <updated>2013-12-05T11:28:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/type-providers-from-the-ground-up</id>
    <content type="html"><![CDATA[<p><em>This post is part of a series: <a href="http://blog.mavnn.co.uk/type-providers-from-the-first-floor/">part 2</a> follows on directly from this post.</em></p>

<p>In the ground tradition of blog posts as both documentation and augmented memory, I&rsquo;ve just added our first <a href="http://blogs.msdn.com/b/dsyme/archive/2013/01/30/twelve-type-providers-in-pictures.aspx">Type Provider</a> to the code base. Time to write up the details before a) I forget them and b) anyone else needs to modify the code.</p>

<p>So, first things first. Before we get to the actual problem space at hand, let&rsquo;s try and provide a type. Any type&hellip;</p>

<p>1) Create yourself a new Visual Studio F# library project (2012 or up should work).</p>

<p>2a) Install the <a href="https://www.nuget.org/packages/FSharp.TypeProviders.StarterPack/">F# TypeProvider Starter Pack</a> or</p>

<p>2b) add <a href="https://raw.github.com/fsharp/FSharp.Data/master/src/CommonProviderImplementation/ProvidedTypes.fs">ProvidedTypes.fs</a> and <a href="https://raw.github.com/fsharp/FSharp.Data/master/src/CommonProviderImplementation/ProvidedTypes.fsi">ProvidedTypes.fsi</a> to the project as the first couple of files.</p>

<p>In either case, make sure that the .fsi file appears before the .fs file in your project listing, and that both appear before any type provider code &ndash; you will probably have to manually re-order them.</p>

<p>These are provided as code files rather than as compiled dlls due to complications with security and AppDomains when referencing dlls in the type provider assembly. For now just add them in &ndash; you really don&rsquo;t want to be re-creating the code in there by hand.</p>

<p>3) Replace the contents of Library1.fs with something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">Mavnn</span><span class="p">.</span><span class="nn">Blog</span><span class="p">.</span><span class="nc">TypeProvider</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">MavnnProvider</span> <span class="o">(</span><span class="n">config</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span> <span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, that&rsquo;s great and it builds. We have a type provider class and an assembly that knows it&rsquo;s a type providing assembly. Unfortunately, it doesn&rsquo;t actually provide any types yet. Let&rsquo;s try it.</p>

<!--more-->


<p>Update Library1.fs in your solution with something that looks like this, and then we&rsquo;ll run through what&rsquo;s going on, and how to test it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">Mavnn</span><span class="p">.</span><span class="nn">Blog</span><span class="p">.</span><span class="nc">TypeProvider</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">MavnnProvider</span> <span class="o">(</span><span class="n">config</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;Mavnn.Blog.TypeProvider.Provided&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">createTypes</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">myType</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;MyType&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">myProp</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;MyProperty&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span> <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>                                        <span class="nc">GetterCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;Hello world&quot;</span> <span class="o">@@&gt;))</span>
</span><span class='line'>        <span class="n">myType</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">myProp</span><span class="o">)</span>
</span><span class='line'>        <span class="o">[</span><span class="n">myType</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="n">createTypes</span><span class="bp">()</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span> <span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>First things first &ndash; it looks like it should provide a class with a static property, but how do we test it?</p>

<p>It turns out it&rsquo;s harder than it looks. If you reference your brand new type provider in Visual Studio, that instance of Visual Studio will promptly lock the dll file. Which means you can&rsquo;t recompile it. So referencing the dll from within the instance of Visual Studio you&rsquo;re using to develop it is a no go.</p>

<p>Fire up a second copy of Visual Studio (you went for the extra RAM option on your hardware, yes?) and create an F# project in it. Add an fsx file that looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Your path may vary...</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;../../Mavnn.Blog.TypeProvider/Mavnn.Blog.TypeProvider/bin/Debug/Mavnn.Blog.TypeProvider.dll&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">Mavnn</span><span class="p">.</span><span class="nn">Blog</span><span class="p">.</span><span class="nn">TypeProvider</span><span class="p">.</span><span class="nc">Provided</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Type `MyType.MyProperty` on next line down.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Start typing, and&hellip; hurrah! Intellisense on your new, provided type with static property. Evaluate the script in F# interactive for one of the longest &ldquo;Hello World&rdquo; programs you&rsquo;ve ever seen.</p>

<p><em>You will need to close this instance of Visual Studio every time you want to recompile the type provider.</em></p>

<h2>What&rsquo;s going on here?</h2>

<p>We&rsquo;re declaring a new namespace and detecting the current assembly so we can inject things into it. During our initializing for the type provider, we then add that namespace to the assembly (<code>this.AddNamespace(...)</code>) along with a type created in the slightly (at the moment) misnamed <code>createTypes</code> method.</p>

<p>In <code>createTypes</code> we&rsquo;re first creating a type (<code>MyType</code>) which will be a direct member of the namespace we&rsquo;re creating (we&rsquo;ll get onto nested types shortly), then we&rsquo;re creating a static property and adding it to the type. <code>AddNamespace</code> takes a list of types, so will add the one we have to a list and pass it back.</p>

<p><code>MyType</code>&rsquo;s underlying representation in the CLR has been defined as <code>obj</code>, which means that if you try and access it in a non-F# language it will appear to the compiler as an <code>object</code>.</p>

<p>All well and good&hellip; except for the rather bizarre <code>&lt;@@ ... @@&gt;</code> syntax in our static property. Obviously, in some way it&rsquo;s creating a get method for the property that returns <code>"Hello world"</code>, but how does it do it?</p>

<p>This syntax represents a <a href="http://msdn.microsoft.com/en-us/library/dd233212.aspx">code quotation</a>, and rather than being compiled into your program it will compile to an object that represents an expression.</p>

<p>Did that make your brain hurt? Mine too&hellip; I&rsquo;m not going to go into quotations in great detail here (partly as I don&rsquo;t understand them well enough!) but we&rsquo;ll need to cover a couple of basics.</p>

<p>To give you a flavour, the quotation <code>&lt;@@ 1 + 2 @@&gt;</code> compiles to <code>Quotations.Expr = Call (None, op_Addition, [Value (1), Value (2)])</code>. Not very exciting so far, but how about:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">addI</span> <span class="n">i</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">&lt;@@</span> <span class="mi">1</span> <span class="o">+</span> <span class="o">(%%</span><span class="n">i</span><span class="o">)</span> <span class="o">@@&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives a function of <code>Expr -&gt; Expr</code>, and now we can do things like <code>let add2 = addI &lt;@@ 2 @@&gt;</code> (gives <code>val add2 : Expr = Call (None, op_Addition, [Value (1), Value (2)])</code>) or <code>let add2MultipliedByX x = addI &lt;@@ 2 * x @@&gt;</code> (gives <code>val add2MultipliedByX : x:int -&gt; Expr</code>) and what we get back is effectively the AST of the first F# expression with the second spliced in to evaluate as you will. So in our <code>GetterCode</code> above, we are actually providing the AST that will be compiled into the <code>get_MyPropertyMethod</code> of the type when it is created.</p>

<p>The second thing that you need to know about quotations for current purposes is that the thing evaluating them may or may not be able to handle the F# expression you&rsquo;ve created. Which again we&rsquo;ll get back to in a moment!</p>

<p>So far, our type isn&rsquo;t very exciting. You can&rsquo;t even construct an instance of it. Let&rsquo;s see what we can do about that, with a replacement <code>createTypes</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">createTypes</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">myType</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;MyType&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">myProp</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;MyProperty&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span> <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>                                    <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;Hello world&quot;</span> <span class="o">@@&gt;)</span>
</span><span class='line'>    <span class="n">myType</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">myProp</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ctor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">,</span> <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;My internal state&quot;</span> <span class="o">:&gt;</span> <span class="n">obj</span> <span class="o">@@&gt;)</span>
</span><span class='line'>    <span class="n">myType</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">ctor</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ctor2</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span>
</span><span class='line'>                    <span class="o">[</span><span class="nc">ProvidedParameter</span><span class="o">(</span><span class="s2">&quot;InnerState&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)],</span>
</span><span class='line'>                    <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="o">(%%(</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]):</span><span class="kt">string</span><span class="o">)</span> <span class="o">:&gt;</span> <span class="n">obj</span> <span class="o">@@&gt;)</span>
</span><span class='line'>    <span class="n">myType</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">ctor2</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">innerState</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;InnerState&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>                        <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="o">(%%(</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">])</span> <span class="o">:&gt;</span> <span class="n">obj</span><span class="o">)</span> <span class="o">:?&gt;</span> <span class="kt">string</span> <span class="o">@@&gt;)</span>
</span><span class='line'>    <span class="n">myType</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">innerState</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span><span class="n">myType</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="n">createTypes</span><span class="bp">()</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can construct our type (in two ways, no less). As the underlying CLR type is an <code>object</code> we can store pretty much anything as the internal representation of an instance of our type. The <code>InvokeCode</code> parameter of the constructors needs to return a quotation that will return the internal representation of the object when it&rsquo;s evaluated. We&rsquo;re going to return a string (which we need to cast to an obj), and using the splicing syntax above we can inject the parameters of the constructor into the quotation (for the constructor which has a parameter).</p>

<p>Similarly, we also add a property (notice that we&rsquo;re not setting it to be a static property this time). Because this property is not static, the first item in the <code>args</code> Array is the instance of the type itself (similar to the way that you define an extension method). So we can splice that into our method quotation (remembering to cast it from <code>obj</code> to <code>string</code>) and expose the underlying state of the object for all the world to see.</p>

<p>And now you can do things like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Your path may vary...</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;../../Mavnn.Blog.TypeProvider/Mavnn.Blog.TypeProvider/bin/Debug/Mavnn.Blog.TypeProvider.dll&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">Mavnn</span><span class="p">.</span><span class="nn">Blog</span><span class="p">.</span><span class="nn">TypeProvider</span><span class="p">.</span><span class="nc">Provided</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">thing</span> <span class="o">=</span> <span class="nc">MyType</span><span class="bp">()</span>
</span><span class='line'><span class="k">let</span> <span class="n">thingInnerState</span> <span class="o">=</span> <span class="n">thing</span><span class="o">.</span><span class="nc">InnerState</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">thing2</span> <span class="o">=</span> <span class="nc">MyType</span><span class="o">(</span><span class="s2">&quot;Some other text&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">thing2InnerState</span> <span class="o">=</span> <span class="n">thing2</span><span class="o">.</span><span class="nc">InnerState</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// val thing : Mavnn.Blog.TypeProvider.Provided.MyType = &quot;My internal state&quot;</span>
</span><span class='line'><span class="c1">// val thingInnerState : string = &quot;My internal state&quot;</span>
</span><span class='line'><span class="c1">// val thing2 : Mavnn.Blog.TypeProvider.Provided.MyType = &quot;Some other text&quot;</span>
</span><span class='line'><span class="c1">// val thing2InnerState : string = &quot;Some other text&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>And the point is?</h2>

<p>Well &ndash; this is great, except the perceptive among you will have noticed that we&rsquo;re just generating a static type here. We could have just declared it using normal syntax.</p>

<p>So let&rsquo;s try going a step further. Let&rsquo;s say that we have some Json definitions of graph nodes types, each with a defined set of input and output &ldquo;ports&rdquo;. All of these graph bits are given to us as a Json array, and each Node type and port has a Guid identifier and a friendly name.</p>

<p>Our input JSON looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Id&quot;</span><span class="p">:{</span>
</span><span class='line'>         <span class="nt">&quot;Name&quot;</span><span class="p">:</span><span class="s2">&quot;Simple&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;UniqueId&quot;</span><span class="p">:</span><span class="s2">&quot;0ab82262-0ad3-47d3-a026-615b84352822&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;Ports&quot;</span><span class="p">:[</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Id&quot;</span><span class="p">:{</span>
</span><span class='line'>               <span class="nt">&quot;Name&quot;</span><span class="p">:</span><span class="s2">&quot;Input&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;UniqueId&quot;</span><span class="p">:</span><span class="s2">&quot;4b69408e-82d2-4c36-ab78-0d2327268622&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nt">&quot;Type&quot;</span><span class="p">:</span><span class="s2">&quot;input&quot;</span>
</span><span class='line'>         <span class="p">},</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Id&quot;</span><span class="p">:{</span>
</span><span class='line'>               <span class="nt">&quot;Name&quot;</span><span class="p">:</span><span class="s2">&quot;Output&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;UniqueId&quot;</span><span class="p">:</span><span class="s2">&quot;92ae5a96-6900-4d77-832f-d272329f8a90&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nt">&quot;Type&quot;</span><span class="p">:</span><span class="s2">&quot;output&quot;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>   <span class="p">},</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Id&quot;</span><span class="p">:{</span>
</span><span class='line'>         <span class="nt">&quot;Name&quot;</span><span class="p">:</span><span class="s2">&quot;Join&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;UniqueId&quot;</span><span class="p">:</span><span class="s2">&quot;162c0981-4370-4db3-8e3f-149f13c001da&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;Ports&quot;</span><span class="p">:[</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Id&quot;</span><span class="p">:{</span>
</span><span class='line'>               <span class="nt">&quot;Name&quot;</span><span class="p">:</span><span class="s2">&quot;Input1&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;UniqueId&quot;</span><span class="p">:</span><span class="s2">&quot;c0fea7ff-456e-4d4e-b5a4-9539ca134344&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nt">&quot;Type&quot;</span><span class="p">:</span><span class="s2">&quot;input&quot;</span>
</span><span class='line'>         <span class="p">},</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Id&quot;</span><span class="p">:{</span>
</span><span class='line'>               <span class="nt">&quot;Name&quot;</span><span class="p">:</span><span class="s2">&quot;Input2&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;UniqueId&quot;</span><span class="p">:</span><span class="s2">&quot;4e93c3b1-11bc-422a-91b8-e53204368714&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nt">&quot;Type&quot;</span><span class="p">:</span><span class="s2">&quot;input&quot;</span>
</span><span class='line'>         <span class="p">},</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Id&quot;</span><span class="p">:{</span>
</span><span class='line'>               <span class="nt">&quot;Name&quot;</span><span class="p">:</span><span class="s2">&quot;Output&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;UniqueId&quot;</span><span class="p">:</span><span class="s2">&quot;fb54728b-9602-4220-ba08-ad160d92d5a4&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nt">&quot;Type&quot;</span><span class="p">:</span><span class="s2">&quot;output&quot;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>   <span class="p">},</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Id&quot;</span><span class="p">:{</span>
</span><span class='line'>         <span class="nt">&quot;Name&quot;</span><span class="p">:</span><span class="s2">&quot;Split&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;UniqueId&quot;</span><span class="p">:</span><span class="s2">&quot;c3e44941-9182-41c3-921c-863a82097ba8&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;Ports&quot;</span><span class="p">:[</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Id&quot;</span><span class="p">:{</span>
</span><span class='line'>               <span class="nt">&quot;Name&quot;</span><span class="p">:</span><span class="s2">&quot;Input&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;UniqueId&quot;</span><span class="p">:</span><span class="s2">&quot;0ec2537c-3346-4503-9f5a-d0bb49e9e431&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nt">&quot;Type&quot;</span><span class="p">:</span><span class="s2">&quot;input&quot;</span>
</span><span class='line'>         <span class="p">},</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Id&quot;</span><span class="p">:{</span>
</span><span class='line'>               <span class="nt">&quot;Name&quot;</span><span class="p">:</span><span class="s2">&quot;Output1&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;UniqueId&quot;</span><span class="p">:</span><span class="s2">&quot;77b5a50c-3d11-4a67-b14d-52d6246e78c5&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nt">&quot;Type&quot;</span><span class="p">:</span><span class="s2">&quot;output&quot;</span>
</span><span class='line'>         <span class="p">},</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;Id&quot;</span><span class="p">:{</span>
</span><span class='line'>               <span class="nt">&quot;Name&quot;</span><span class="p">:</span><span class="s2">&quot;Output2&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="nt">&quot;UniqueId&quot;</span><span class="p">:</span><span class="s2">&quot;d4d1e928-5347-4d51-be54-8650bdfe9bac&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nt">&quot;Type&quot;</span><span class="p">:</span><span class="s2">&quot;output&quot;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Things start getting a bit more in depth here, so you might want to check out the full code for this post, available on <a href="https://github.com/mavnn/Mavnn.Blog.TypeProvider">GitHub</a>, and follow along in your favourite development environment.</p>

<p>We&rsquo;ll let someone else deal with the parsing &ndash; add a Nuget reference to <code>Newtonsoft.Json</code> to your type provider, and let&rsquo;s have a third reprise of <code>createTypes</code>.</p>

<p>First, we&rsquo;ll need some classes to deserialize the Json into. Out of the box Newtonsoft doesn&rsquo;t do a great job on F# core classes (although that&rsquo;s changing), so for the moment we&rsquo;ll create some classic OO style mutable types:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Id</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">member</span> <span class="k">val</span> <span class="nc">UniqueId</span> <span class="o">=</span> <span class="nc">Guid</span><span class="bp">()</span> <span class="k">with</span> <span class="n">get</span><span class="o">,</span> <span class="n">set</span>
</span><span class='line'>    <span class="k">member</span> <span class="k">val</span> <span class="nc">Name</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="k">with</span> <span class="n">get</span><span class="o">,</span> <span class="n">set</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Port</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">member</span> <span class="k">val</span> <span class="nc">Id</span> <span class="o">=</span> <span class="nc">Id</span><span class="bp">()</span> <span class="k">with</span> <span class="n">get</span><span class="o">,</span> <span class="n">set</span>
</span><span class='line'>    <span class="k">member</span> <span class="k">val</span> <span class="nc">Type</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="k">with</span> <span class="n">get</span><span class="o">,</span> <span class="n">set</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Node</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">member</span> <span class="k">val</span> <span class="nc">Id</span> <span class="o">=</span> <span class="nc">Id</span><span class="bp">()</span> <span class="k">with</span> <span class="n">get</span><span class="o">,</span> <span class="n">set</span>
</span><span class='line'>    <span class="k">member</span> <span class="k">val</span> <span class="nc">Ports</span> <span class="o">=</span> <span class="nn">Collections</span><span class="p">.</span><span class="nn">Generic</span><span class="p">.</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Port</span><span class="o">&gt;</span><span class="bp">()</span> <span class="k">with</span> <span class="n">get</span><span class="o">,</span> <span class="n">set</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Don&rsquo;t worry though, these aren&rsquo;t what we&rsquo;ll actually expose as the main interface.)</p>

<p>Turning our Json into the our new CLR types is straight forward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">nodes</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">JsonConvert</span><span class="p">.</span><span class="nc">DeserializeObject</span><span class="o">&lt;</span><span class="n">seq</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;&gt;(</span><span class="nn">IO</span><span class="p">.</span><span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllText</span><span class="o">(@</span><span class="s2">&quot;c:</span><span class="err">\</span><span class="s2">Temp</span><span class="err">\</span><span class="s2">Graph.json&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the interesting part. To build a graph out of these nodes, we need to be able to do a few things.</p>

<p>Firstly, we need to be able to build a specific instance of a node type: which <code>Split</code> node is this?</p>

<p>Let&rsquo;s help ourselves out by having a concrete type as an the underlying type for our instances:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="n">nodeInstance</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="nc">Node</span> <span class="o">:</span> <span class="nc">Node</span>
</span><span class='line'>        <span class="nc">InstanceId</span> <span class="o">:</span> <span class="nc">Id</span>
</span><span class='line'>        <span class="nc">Config</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="k">private</span> <span class="nc">NodeInstance</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">create</span> <span class="n">node</span> <span class="n">name</span> <span class="n">guid</span> <span class="n">config</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">{</span> <span class="nc">Node</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span> <span class="nc">InstanceId</span> <span class="o">=</span> <span class="nc">Id</span><span class="o">(</span><span class="nc">Name</span> <span class="o">=</span> <span class="n">name</span><span class="o">,</span> <span class="nc">UniqueId</span> <span class="o">=</span> <span class="n">guid</span><span class="o">);</span> <span class="nc">Config</span> <span class="o">=</span> <span class="n">config</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then constructing a more specific type with a constructor for each node type we&rsquo;ve read from the Json:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">nodeType</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="n">node</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">nodeInstance</span><span class="o">&gt;)</span>
</span><span class='line'><span class="k">let</span> <span class="n">ctor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span>
</span><span class='line'>            <span class="o">[</span>
</span><span class='line'>                <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="s2">&quot;Name&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)</span>
</span><span class='line'>                <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="s2">&quot;UniqueId&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">Guid</span><span class="o">&gt;)</span>
</span><span class='line'>                <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="s2">&quot;Config&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)</span>
</span><span class='line'>            <span class="o">],</span>
</span><span class='line'>            <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">[</span><span class="n">name</span><span class="o">;</span><span class="n">unique</span><span class="o">;</span><span class="n">config</span><span class="o">]</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="nn">NodeInstance</span><span class="p">.</span><span class="n">create</span> <span class="o">(</span><span class="nc">GetNode</span> <span class="n">id</span><span class="o">)</span> <span class="o">(%%</span><span class="n">name</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">(%%</span><span class="n">unique</span><span class="o">:</span><span class="nc">Guid</span><span class="o">)</span> <span class="o">(%%</span><span class="n">config</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">@@&gt;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now we can construct (look back at the json) a <code>Simple</code> node instance by using <code>let simple = Simple("simpleInstance", Guid.NewGuid(),"MyConfig")</code>. And it already has our <code>InstanceId</code>, <code>Config</code> and <code>Node</code> properties from the underlying type.</p>

<p>Good progress &ndash; but we don&rsquo;t have a nice way of representing the inputs and outputs? We want to be able to write some kind of connection builder function afterwards that won&rsquo;t allow you to connect to outputs to each other, or similar silliness, so we&rsquo;re going to need separate types for inputs and outputs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Check out the excellent article at F# for Fun and Profit</span>
</span><span class='line'><span class="c1">// on using single case Discriminated Unions for data modelling</span>
</span><span class='line'><span class="c1">// http://fsharpforfunandprofit.com/posts/designing-with-types-single-case-dus/</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">InputPort</span> <span class="o">=</span> <span class="o">|</span> <span class="nc">InputPort</span> <span class="k">of</span> <span class="nc">Port</span>
</span><span class='line'><span class="k">type</span> <span class="nc">OutputPort</span> <span class="o">=</span> <span class="o">|</span> <span class="nc">OutputPort</span> <span class="k">of</span> <span class="nc">Port</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally, we&rsquo;ll update our node creation function to add two subtypes to each node type called <code>Inputs</code> and <code>Outputs</code>, and then create properties on those objects to represent each port. Our full type creation for a node now looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">addInputPort</span> <span class="o">(</span><span class="n">inputs</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">(</span><span class="n">port</span> <span class="o">:</span> <span class="nc">Port</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">port</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">port</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nc">Name</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">InputPort</span><span class="o">&gt;,</span>
</span><span class='line'>                    <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                        <span class="k">let</span> <span class="n">id</span> <span class="o">=</span> <span class="n">port</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nn">UniqueId</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span>
</span><span class='line'>                        <span class="o">&lt;@@</span> <span class="nc">GetPort</span> <span class="n">id</span> <span class="o">@@&gt;)</span>
</span><span class='line'>    <span class="n">inputs</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">port</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">addOutputPort</span> <span class="o">(</span><span class="n">outputs</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">(</span><span class="n">port</span> <span class="o">:</span> <span class="nc">Port</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">port</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">port</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nc">Name</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">OutputPort</span><span class="o">&gt;,</span>
</span><span class='line'>                    <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                        <span class="k">let</span> <span class="n">id</span> <span class="o">=</span> <span class="n">port</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nn">UniqueId</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span>
</span><span class='line'>                        <span class="o">&lt;@@</span> <span class="nc">GetPort</span> <span class="n">id</span> <span class="o">@@&gt;)</span>
</span><span class='line'>    <span class="n">outputs</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">port</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">addPorts</span> <span class="n">inputs</span> <span class="n">outputs</span> <span class="o">(</span><span class="n">portList</span> <span class="o">:</span> <span class="n">seq</span><span class="o">&lt;</span><span class="nc">Port</span><span class="o">&gt;)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">portList</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">port</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="k">match</span> <span class="n">port</span><span class="o">.</span><span class="nc">Type</span> <span class="k">with</span>
</span><span class='line'>                    <span class="o">|</span> <span class="s2">&quot;input&quot;</span> <span class="o">-&gt;</span> <span class="n">addInputPort</span> <span class="n">inputs</span> <span class="n">port</span>
</span><span class='line'>                    <span class="o">|</span> <span class="s2">&quot;output&quot;</span> <span class="o">-&gt;</span> <span class="n">addOutputPort</span> <span class="n">outputs</span> <span class="n">port</span>
</span><span class='line'>                    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">failwithf</span> <span class="s2">&quot;Unknown port type for port %s/%s&quot;</span> <span class="n">port</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nc">Name</span> <span class="o">(</span><span class="n">port</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nn">UniqueId</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">createNodeType</span> <span class="n">id</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">Node</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">nodeType</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="n">node</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">nodeInstance</span><span class="o">&gt;)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">ctor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span>
</span><span class='line'>                <span class="o">[</span>
</span><span class='line'>                    <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="s2">&quot;Name&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)</span>
</span><span class='line'>                    <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="s2">&quot;UniqueId&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">Guid</span><span class="o">&gt;)</span>
</span><span class='line'>                    <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="s2">&quot;Config&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)</span>
</span><span class='line'>                <span class="o">],</span>
</span><span class='line'>                <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">[</span><span class="n">name</span><span class="o">;</span><span class="n">unique</span><span class="o">;</span><span class="n">config</span><span class="o">]</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="nn">NodeInstance</span><span class="p">.</span><span class="n">create</span> <span class="o">(</span><span class="nc">GetNode</span> <span class="n">id</span><span class="o">)</span> <span class="o">(%%</span><span class="n">name</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">(%%</span><span class="n">unique</span><span class="o">:</span><span class="nc">Guid</span><span class="o">)</span> <span class="o">(%%</span><span class="n">config</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">@@&gt;)</span>
</span><span class='line'>    <span class="n">nodeType</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">ctor</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">outputs</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="s2">&quot;Outputs&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">outputCtor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">,</span> <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="n">obj</span><span class="bp">()</span> <span class="o">@@&gt;)</span>
</span><span class='line'>    <span class="n">outputs</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">outputCtor</span><span class="o">)</span>
</span><span class='line'>    <span class="n">outputs</span><span class="o">.</span><span class="nc">HideObjectMethods</span> <span class="o">&lt;-</span> <span class="bp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">inputs</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="s2">&quot;Inputs&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">inputCtor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">,</span> <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="n">obj</span><span class="bp">()</span> <span class="o">@@&gt;)</span>
</span><span class='line'>    <span class="n">inputs</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">inputCtor</span><span class="o">)</span>
</span><span class='line'>    <span class="n">inputs</span><span class="o">.</span><span class="nc">HideObjectMethods</span> <span class="o">&lt;-</span> <span class="bp">true</span>
</span><span class='line'>    <span class="n">addPorts</span> <span class="n">inputs</span> <span class="n">outputs</span> <span class="n">node</span><span class="o">.</span><span class="nc">Ports</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add the inputs and outputs types of nested types under the Node type</span>
</span><span class='line'>    <span class="n">nodeType</span><span class="o">.</span><span class="nc">AddMembers</span><span class="o">([</span><span class="n">inputs</span><span class="o">;</span><span class="n">outputs</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Now add some instance properties to expose them on a node instance.</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">outputPorts</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;OutputPorts&quot;</span><span class="o">,</span> <span class="n">outputs</span><span class="o">,</span> <span class="bp">[]</span><span class="o">,</span>
</span><span class='line'>                        <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="n">obj</span><span class="bp">()</span> <span class="o">@@&gt;)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">inputPorts</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;InputPorts&quot;</span><span class="o">,</span> <span class="n">inputs</span><span class="o">,</span> <span class="bp">[]</span><span class="o">,</span>
</span><span class='line'>                        <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="n">obj</span><span class="bp">()</span> <span class="o">@@&gt;)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nodeType</span><span class="o">.</span><span class="nc">AddMembers</span><span class="o">([</span><span class="n">inputPorts</span><span class="o">;</span><span class="n">outputPorts</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nodeType</span>
</span></code></pre></td></tr></table></div></figure>


<p>Leaving only one final mystery. What are the <code>GetPort</code> and <code>GetNode</code> methods &ndash; and why am I using them in the quotations rather than just using something like <code>&lt;@@ node @@&gt;</code>?</p>

<p>Well, if you remember I mentioned earlier that the evaluation of a quotation is limited by the implementation of the evaluator used. The type provider files you included right at the beginning contain an evaluator that turn a quotation into IL instructions &ndash; but, it doesn&rsquo;t include support for literals of custom types. In fact, if you check in <a href="https://github.com/fsharp/FSharp.Data/blob/master/src/CommonProviderImplementation/ProvidedTypes.fs#L1876">the relevant part of ProvidedTypes.fs</a> you&rsquo;ll see that it&rsquo;s actually quite prescriptive.</p>

<p>So, what we do is we build a couple of private helper methods that know how to find the correct port or node from one of the types that is allowed &ndash; in this case, a <code>string</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">nodes</span> <span class="o">=</span> <span class="nn">JsonConvert</span><span class="p">.</span><span class="nc">DeserializeObject</span><span class="o">&lt;</span><span class="n">seq</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;&gt;(</span><span class="nn">IO</span><span class="p">.</span><span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllText</span><span class="o">(@</span><span class="s2">&quot;c:</span><span class="err">\</span><span class="s2">Temp</span><span class="err">\</span><span class="s2">Graph.json&quot;</span><span class="o">))</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nn">UniqueId</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span><span class="o">,</span> <span class="n">n</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nn">Map</span><span class="p">.</span><span class="n">ofSeq</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nc">GetNode</span> <span class="n">id</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">nodes</span><span class="o">.[</span><span class="n">id</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">ports</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">nodes</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Map</span><span class="p">.</span><span class="n">toSeq</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(_,</span> <span class="n">node</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">node</span><span class="o">.</span><span class="nc">Ports</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">concat</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="nn">Id</span><span class="p">.</span><span class="nn">UniqueId</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span><span class="o">,</span> <span class="n">p</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Map</span><span class="p">.</span><span class="n">ofSeq</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nc">GetPort</span> <span class="n">id</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">ports</span><span class="o">.[</span><span class="n">id</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, there you have it. A complete, working type provider that uses meta data supplied in Json format to create CLR types. Lots of things still to be added for production ready code (delayed loading, handling multiple ports with the same names, not hard coding the filename, etc).</p>

<p><img src="http://blog.mavnn.co.uk/images/typeprovider.png" alt="Winning..." /></p>

<p>Any questions or corrections, fire away. As mentioned, this is very much the first time I&rsquo;ve used type providers &ndash; but even this level of usage is providing a goodly amount of value for us.</p>

<p>And if you&rsquo;re ready for the next challenge&hellip; off to <a href="http://blog.mavnn.co.uk/type-providers-from-the-first-floor/">part 2</a> with you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To Infinity and Beyond]]></title>
    <link href="http://blog.mavnn.co.uk/to-infinity/"/>
    <updated>2013-10-31T07:41:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/to-infinity</id>
    <content type="html"><![CDATA[<p>So, a couple of weeks ago I went to the Brighton Functional Programmers meet up. It was a fun night, and at one point I ended up live coding in front of a room of functional programmers trying to give examples of lazy and strict evaluation.</p>

<p>The canonical go to tool for the job, is of course the infinite sequence and being stared at by a bunch of people and having syntax highlighting but no compiler, the first thing my brain pulled out of the air was this:</p>

<div><script src='https://gist.github.com/mavnn/7246744.js?file=Part1.fs'></script>
<noscript><pre><code>let ones =
    seq {
        while true do
            yield 1
    }
// seq [1; 1; 1; 1; ...]</code></pre></noscript></div>


<p>Which prompted one of the people attending (hi <a href="https://twitter.com/milessabin">Miles!</a>) to comment &ldquo;let&rsquo;s see that in Haskell without the bizarre looping generator&rdquo;. Roughly &ndash; I&rsquo;m slightly paraphrasing here given the couple of weeks in between. He has a bit of a point, this isn&rsquo;t the most functional looking sequence generator in the world, and it looks like quite a lot of code to just generate a lot of ones.</p>

<p>As always in these situations, I had of course thought of several other alternatives before I even reached my chair, so I thought I&rsquo;d have a quick survey of them and their advantages and disadvantages.</p>

<p>My first thought was that I&rsquo;d missed the obvious and succinct option of just generating a range. In F# (as in Haskell) the 1 .. 10 notation generates a list of the integers from 1 to 10. Unfortunately:</p>

<div><script src='https://gist.github.com/mavnn/7246744.js?file=Part2.fs'></script>
<noscript><pre><code>// Can't do this, unfortunately
// seq { 1 .. }
//
// or this:
// seq { 1 .. 0 .. 2 }
//
// Which I thought might be a nice hack.
</code></pre></noscript></div>


<p>Unlike Haskell, you can&rsquo;t have an unbounded range, nor can you set the &ldquo;step&rdquo; to zero to just keep on generating the same number. So you&rsquo;re limited to generating very big, but definitely not infinite sequences:</p>

<div><script src='https://gist.github.com/mavnn/7246744.js?file=Part3.fs'></script>
<noscript><pre><code>let notInfiniteOrOnes = seq { 1 .. System.Int32.MaxValue }
// seq [1; 2; 3; 4; ...]

let notInfinite = seq { for _ in 1 .. System.Int32.MaxValue -&gt; 1 }
// seq [1; 1; 1; 1; ...]
</code></pre></noscript></div>


<p>But hey! We&rsquo;re in functional world. So if we can&rsquo;t use sneaky built in syntax constructs, the next obvious choice is a recursive function:</p>

<div><script src='https://gist.github.com/mavnn/7246744.js?file=Part4.fs'></script>
<noscript><pre><code>let ones' =
    let rec gen () =
        seq {
            yield 1
            yield! gen ()
        }
    gen ()
// seq [1; 1; 1; 1; ...]
</code></pre></noscript></div>


<p>This is definitely infinite, and definitely functional in style. Bit verbose, of course, but it least it won&rsquo;t stack overflow as F# implements tail call recursion. It&rsquo;s verbose, but it does also have its advantages. It&rsquo;s trivial to pass things round in the recursive function (previous values from the sequence, etc) making this a very flexible way of generating sequences.</p>

<p>And, of course, let&rsquo;s not ignore the standard library. The <code>Seq</code> module gives us a couple of methods designed specifically for generating (potentially) infinite sequences.</p>

<p><code>Seq.initInfinite</code> just takes a function that returns a sequence value based on the index of that value:</p>

<div><script src='https://gist.github.com/mavnn/7246744.js?file=Part5.fs'></script>
<noscript><pre><code>let ones'' = Seq.initInfinite (fun _ -&gt; 1)
// seq [1; 1; 1; 1; ...]
</code></pre></noscript></div>


<p>As long as a simple mapping from index to value exists, this is both clear and concise. In theory, of course, it also suffers from the same issue as my range generators above: if your index exceeds the valid size of an Int32 you&rsquo;re out of luck.</p>

<p><code>Seq.unfold</code> may seem less intuitive, but in my mind is the more flexible and powerful solution. I tend to come across examples where it&rsquo;s easier to generate a sequence based on either some state or the previous term than by index, and that&rsquo;s exactly what unfold allows you to do:</p>

<div><script src='https://gist.github.com/mavnn/7246744.js?file=Part6.fs'></script>
<noscript><pre><code>let ones''' = Seq.unfold (fun _ -&gt; Some (1, ())) ()
// seq [1; 1; 1; 1; ...]
</code></pre></noscript></div>


<p>It will also happily generate sequences forever if your generating function allows.</p>

<p>So, how does it actually work? Let&rsquo;s look at a (slightly) more complex example that actually makes use of some state:</p>

<div><script src='https://gist.github.com/mavnn/7246744.js?file=Part7.fs'></script>
<noscript><pre><code>let moreInterestingUnfold =
    Seq.unfold
        (fun state -&gt;
            Some (state, state + 1)) 1
// seq [1; 2; 3; 4; ...]
</code></pre></noscript></div>


<p>What&rsquo;s going on here then? Well, <code>unfold</code> takes two arguments. The first is a function that takes a &lsquo;State and returns an Option&lt;&rsquo;T * &#8216;State>. In our simple example above, both &#8216;State and &rsquo;T are of type <code>int</code> but there&rsquo;s no requirement for them to be of the same type. If at any point the function returns <code>None</code>, the sequence ends. In our example, we always return <code>Some</code>, so our sequence is infinite (at least until it runs out of integers) and we&rsquo;re return a tuple of two values &ndash; the first of which will be used as the next term in the sequence, and the second which will become the new state.</p>

<p>The second argument to <code>unfold</code> is the starting state. In our case, this means the number that will be the first term in the sequence, and then we&rsquo;ll add one to it each time.</p>

<p>Let&rsquo;s round this out with an example that uses different types for the state and the terms of the sequence, which will hopefully now make some sense:</p>

<div><script src='https://gist.github.com/mavnn/7246744.js?file=Part8.fs'></script>
<noscript><pre><code>type Time =
    {
        Hour : int
        Minute : int
    }

let addMinute time =
    match time with
    | { Hour = 23; Minute = 59 } -&gt;
        { Hour = 0; Minute = 0 }
    | { Minute = 59 } -&gt;
        { Hour = time.Hour + 1; Minute = 0 }
    | _ -&gt;
        { Hour = time.Hour; Minute = time.Minute + 1 }

let unfold' =
    Seq.unfold
        (fun state -&gt;
            Some (sprintf &quot;%02d:%02d&quot; state.Hour state.Minute, addMinute state)
            ) { Hour = 22; Minute = 59 }
// seq [&quot;23:59&quot;; &quot;00:00&quot;; &quot;00:01&quot;; &quot;00:02&quot;; ...]
</code></pre></noscript></div>


<p>I&rsquo;m sure that you&rsquo;ve always needed a convenient way of cycling through every minute of the day repeatedly, with a nice readable string representation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing F# to Experienced Developers]]></title>
    <link href="http://blog.mavnn.co.uk/introducing-f-number-to-experienced-developers/"/>
    <updated>2013-10-14T12:30:00+01:00</updated>
    <id>http://blog.mavnn.co.uk/introducing-f-number-to-experienced-developers</id>
    <content type="html"><![CDATA[<p>So, as a follow up to <a href="" title="http://blog.mavnn.co.uk/teaching-f-number-to-c-number-devs/">this post</a> I&rsquo;m in the final stages of preparing a presentation for this Friday introducing an audience of (mostly) fairly experienced developers to F# and F# syntax. The main reason for this is to get a number of people up to speed enough on reading F# that they can have a better experience at <a href="" title="http://skillsmatter.com/event/scala/progressive-f-tutorials-2013">the Progressive F# Tutorials</a> at the end of the month. So the aim here isn&rsquo;t to get people fully autonomous and writing code <em>right now</em>, but to allow them to read the bulk of the example code in the tutorials and follow what&rsquo;s going on.</p>

<p>The general approach I&rsquo;ve gone for is to set up a Git repository that has a series of tagged snap shots I can check out as I work through the concepts I&rsquo;m planning to cover. This will enable me to actually demonstrate and run pieces of code, answer questions and make live modifications and then always jump back to a known starting point for the next section of the talk. Given the people involved have all done some .net development and I don&rsquo;t need to cover things like Visual Studio usage and projects, all of the code is contained in a single Program.fs file in a console app. I&rsquo;ve included the snapshot of the file from each tagged commit below, with a brief overview of what I&rsquo;m planning to introduce before skipping to the next snapshot.</p>

<p>With a full screen Visual Studio editing session, I should be able to make the code large enough to be visible and reasonably rapidly guide people to the areas where the code has changed.</p>

<p>A combination of the excellent <a href="http://papercut.codeplex.com/">PaperCut</a> project and a local &lsquo;http request to email&rsquo; service pretending to be an SMS sender, we should be able to see messages being generated by the code as we go along.</p>

<p>After the session, I&rsquo;m planning to mention <a href="https://github.com/ChrisMarinos/FSharpKoans">Chris Marinos&#8217; koans</a> and <a href="http://www.tryfsharp.org/">Try F#</a> (especially given that Rachel Reese is <a href="http://skillsmatter.com/podcast/scala/try-f-from-zero-to-data-science">running a session</a> at the tutorials for those who are going).</p>

<p>Please note that these are up here for comment and suggestions at this point &ndash; I&rsquo;ll be pushing up the actual Git repository and a screencast (I hope) after the event. The code is designed to be a prop for the talk rather than an independent resource &ndash; for that I&rsquo;d always point people to the koans/Try F# first.</p>

<p>So, show me the codez:</p>

<!--more-->


<h2>Tag &lsquo;1&rsquo;</h2>

<p>Nothing too exciting here :). This is just a place holder while giving the introduction, although I will also point out the lack of required boiler plate compared to C#.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part1.fs'></script>
<noscript><pre><code>// Let's send an email!
</code></pre></noscript></div>


<h2>Tag &lsquo;2&rsquo;</h2>

<p>Introduce the <code>open</code> keyword, <code>let</code> for value assignment, and give people a feel that they&rsquo;re not completely leaving their nice safe .net world behind.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part2.fs'></script>
<noscript><pre><code>// Let's send an email!

open System.Net.Mail

// We only use the 'new' keyword here because SmtpClient is disposable
let smtpClient = new SmtpClient(&quot;smtp.local&quot;)

// And given it's disposable, we should really dispose of it...
smtpClient.Dispose()</code></pre></noscript></div>


<h2>Tag &lsquo;3&rsquo;</h2>

<p>Talk about functions, show parameter application, introduce the pipe operator.</p>

<p>Some discussion about type inference will probably happen here.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part3.fs'></script>
<noscript><pre><code>open System.Net.Mail

let smtpClient = new SmtpClient(&quot;smtp.local&quot;)

// This is a function
let sendMessage client message =
    // We'd better do something here to actually
    // send a message...
    printfn &quot;I haven't sent a mail message!&quot;
    ()

sendMessage smtpClient &quot;My message&quot;

smtpClient.Dispose()

// And we'll add this so we can see the output
// before it disappears
System.Console.ReadLine() |&gt; ignore
// This line would be the same as writing:
//
// ignore (System.Console.Readline())
//
// but you have to admit that this is a bit 
// more readable</code></pre></noscript></div>


<h2>Tag &lsquo;4&rsquo;</h2>

<p>Introduce the <code>use</code> keyword, show property assignment with <code>&lt;-</code>.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part4.fs'></script>
<noscript><pre><code>open System.Net.Mail

let smtpClient = new SmtpClient(&quot;smtp.local&quot;)

let sendMessage client message =
    (* Because we used 'use' this will get
    disposed at the end of the declaring
    scope *)
    use mailMessage = new MailMessage(&quot;me@example.com&quot;, &quot;you@example.com&quot;)
    (* This is have you assign a parameter *)
    mailMessage.Subject &lt;- &quot;Message subject&quot;
    mailMessage.Body &lt;- message
    smtpClient.Send mailMessage
    printfn &quot;I've sent a mail message!&quot;

sendMessage smtpClient &quot;My message&quot;

smtpClient.Dispose()
System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>


<h2>Tag &lsquo;5&rsquo;</h2>

<p>List syntax and introduce the <code>Seq</code> module. Example of currying.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part5.fs'></script>
<noscript><pre><code>open System.Net.Mail

let smtpClient = new SmtpClient(&quot;smtp.local&quot;)

let sendMessage client message =
    use mailMessage = new MailMessage(&quot;me@example.com&quot;, &quot;you@example.com&quot;)
    mailMessage.Subject &lt;- &quot;Message subject&quot;
    mailMessage.Body &lt;- message
    smtpClient.Send mailMessage
    printfn &quot;I've sent a mail message!&quot;

(* But really, what you want computers for
is doing the same thing lots of times... *)
let myMessages =
    [
        &quot;My first message&quot;
        &quot;My second message&quot;
        &quot;My third and final message&quot;
    ]

myMessages
|&gt; Seq.iter (sendMessage smtpClient)
(* Let's have some vindaloo with that map *)

smtpClient.Dispose()
System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>


<h2>Tag &lsquo;6&rsquo;</h2>

<p>An async workflow. Turns out that <code>SmtpClient</code> is not as clean for that as you would hope &ndash; it&rsquo;s async send methods don&rsquo;t appear to be thread safe (wait, what?) and even the relatively recent looking <code>SendMailAsync</code> method returns a <code>Task</code> rather than a <code>Task&lt;'T&gt;</code>. Having said that, it shows that even in less than ideal circumstances, you can leverage the <code>async</code> stuff even when interfacing with older .net code from other languages.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part6.fs'></script>
<noscript><pre><code>open System.Net.Mail


(* But really, what you want computers for
is doing the same thing lots of times... 
at the same time! *)
let sendMessage message =
    async {
        // Move the client inside because...
        // have _you_ checked if it's thread safe?
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = new MailMessage(&quot;me@example.com&quot;, &quot;you@example.com&quot;)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- message
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }

let myMessages =
    [
        &quot;My first message&quot;
        &quot;My second message&quot;
        &quot;My third and final message&quot;
    ]

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>


<h2>Tag &lsquo;7&rsquo;</h2>

<p>Tuples! Showing both construction and deconstruction syntax. Also discuss that this is how we pass multiple parameters to methods on classes.</p>

<p>In the live coding for this one, I&rsquo;ll make sure to demonstrate adding and removing brackets in different places.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part7.fs'></script>
<noscript><pre><code>open System.Net.Mail

let sendMessage messageDetails =
    async {
        let address, body = messageDetails
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = new MailMessage(&quot;me@example.com&quot;, address)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- body
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }


(* But we probably don't want to send all of these
to the same person. *)
let myMessages =
    [
        &quot;first@example.com&quot;, &quot;My first message&quot;
        &quot;secord@example.com&quot;, &quot;My second message&quot;
        &quot;third@example.com&quot;, &quot;My third and final message&quot;
    ]

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>


<h2>Tag &lsquo;8&rsquo;</h2>

<p>Record syntax.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part8.fs'></script>
<noscript><pre><code>open System.Net.Mail

(* How about if I want to pass lots of different bits
of information in? *)
type messageDetails =
    {
        toAddress : string
        fromAddress : string
        body : string
    }

let sendMessage messageDetails =
    async {
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = 
            new MailMessage(
                messageDetails.fromAddress,
                messageDetails.toAddress)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- messageDetails.body
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }

let myMessages =
    [
        { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My first message&quot; }
        { toAddress = &quot;second@example.com&quot;; fromAddress = &quot;personal@example.com&quot;; body = &quot;My second message&quot; }
        { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My third message&quot; }
    ]

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>


<h2>Tag &lsquo;9&rsquo;</h2>

<p>Use discriminated unions for modeling business inputs. In this case, building a MessageDetails class that can contain the details of either an email or an SMS send request.</p>

<p>Also has a 2nd, maybe slightly more idiomatic implementation of an async workflow.</p>

<p>I&rsquo;m hoping to get at least this far in the session. The rest of it would be nice, but if we get here then I&rsquo;ll be happy I&rsquo;ve covered at least the basics.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part9.fs'></script>
<noscript><pre><code>open System.IO
open System.Net
open System.Net.Mail

(* But some people have given us mobile
numbers rather than email addresses *)
type EmailDetails =
    {
        toAddress : string
        fromAddress : string
        body : string
    }

type SmsDetails =
    {
        toNumber : string
        fromNumber : string
        message : string
    }

type MessageDetails =
    | Email of EmailDetails
    | Sms of SmsDetails

let sendEmail messageDetails =
    async {
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = 
            new MailMessage(
                messageDetails.fromAddress,
                messageDetails.toAddress)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- messageDetails.body
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }

let sendSms messageDetails =
    async {
        let http = HttpWebRequest.Create(&quot;http://sms.local&quot;) :?&gt; HttpWebRequest
        http.Method &lt;- &quot;POST&quot;
        let messagePayload =
            sprintf
                &quot;To: %s\nFrom: %s\nMessage: %s&quot;
                messageDetails.toNumber
                messageDetails.fromNumber
                messageDetails.message
        using 
            (http.GetRequestStream())
            (fun stream -&gt; 
                use sw = new StreamWriter(stream)
                sw.Write(messagePayload))
        let! response = http.GetResponseAsync() |&gt; Async.AwaitTask
        if (response :?&gt; HttpWebResponse).StatusCode &lt;&gt; HttpStatusCode.OK then
            failwith &quot;Http request failed!&quot;
        printfn &quot;I've sent an SMS!&quot;
    }

let sendMessage message =
    match message with
    | Email details -&gt; sendEmail details
    | Sms details -&gt; sendSms details

let myMessages =
    [
        Email { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My first message&quot; }
        Email { toAddress = &quot;second@example.com&quot;; fromAddress = &quot;personal@example.com&quot;; body = &quot;My second message&quot; }
        Email { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My third message&quot; }
        Sms { toNumber = &quot;+447777123123&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms&quot; }
        Sms { toNumber = &quot;+447777123124&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms x2&quot; }
        Sms { toNumber = &quot;+447777123123&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms x3&quot; }
    ]

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>


<h2>Tag &lsquo;10&rsquo;</h2>

<p>Validation with Active patterns.</p>

<div><script src='https://gist.github.com/mavnn/6973457.js?file=part10.fs'></script>
<noscript><pre><code>open System.IO
open System.Net
open System.Net.Mail

type EmailDetails =
    {
        toAddress : string
        fromAddress : string
        body : string
    }

type SmsDetails =
    {
        toNumber : string
        fromNumber : string
        message : string
    }

type MessageDetails =
    | Email of EmailDetails
    | Sms of SmsDetails

(* But what if some people have given us invalid data?

Our SMS sender requires full numbers with national
codes - let's add some validation! *)
let (|ValidSmsRequest|InvalidSmsRequest|) details =
    // Hmm. Bananas. My favourite.
    let regex = System.Text.RegularExpressions.Regex(@&quot;^\+\d\d&quot;)
    if regex.IsMatch(details.toNumber) &amp;&amp; regex.IsMatch(details.fromNumber) then
        ValidSmsRequest details
    else
        InvalidSmsRequest &quot;You must include the +xx country prefix on mobile numbers.&quot;

let sendEmail messageDetails =
    async {
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = 
            new MailMessage(
                messageDetails.fromAddress,
                messageDetails.toAddress)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- messageDetails.body
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }

(* We've moved the SMS post logic into this method
without change - no validation here.

We've marked it private so no one else can call it
by mistake *)
let private postSms messageDetails =
    async {
        let http = HttpWebRequest.Create(&quot;http://sms.local&quot;) :?&gt; HttpWebRequest
        http.Method &lt;- &quot;POST&quot;
        let messagePayload =
            sprintf
                &quot;To: %s\nFrom: %s\nMessage: %s&quot;
                messageDetails.toNumber
                messageDetails.fromNumber
                messageDetails.message
        using 
            (http.GetRequestStream())
            (fun stream -&gt; 
                use sw = new StreamWriter(stream)
                sw.Write(messagePayload))
        let! response = http.GetResponseAsync() |&gt; Async.AwaitTask
        if (response :?&gt; HttpWebResponse).StatusCode &lt;&gt; HttpStatusCode.OK then
            failwith &quot;Http request failed!&quot;
        printfn &quot;I've sent an SMS!&quot;
    }

(* And this is where we do our validation *)
let sendSms messageDetails =
    match messageDetails with
    | ValidSmsRequest details -&gt; postSms details
    | InvalidSmsRequest error -&gt; async { printfn &quot;Sms sending error: %s&quot; error }

let sendMessage message =
    match message with
    | Email details -&gt; sendEmail details
    | Sms details -&gt; sendSms details

let myMessages =
    [
        Email { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My first message&quot; }
        Email { toAddress = &quot;second@example.com&quot;; fromAddress = &quot;personal@example.com&quot;; body = &quot;My second message&quot; }
        Email { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My third message&quot; }
        Sms { toNumber = &quot;+447777123123&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms&quot; }
        Sms { toNumber = &quot;+447777123124&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms x2&quot; }
        Sms { toNumber = &quot;+447777123123&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms x3&quot; }
        Sms { toNumber = &quot;447777123123&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;I won't be sent!&quot; }
        Sms { toNumber = &quot;+447777123123&quot;; fromNumber = &quot;+ab7888321321&quot;; message = &quot;Neither will I!&quot; }
        Sms { toNumber = &quot;Bob&quot;; fromNumber = &quot;+ab7888321321&quot;; message = &quot;..and I definitely won't!&quot; }
    ]

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>


<h2>Tag &lsquo;11&rsquo;</h2>

<p>The extra credit section! I very much doubt I&rsquo;ll get this far in a one hour session, but if I do this is just some fun playing with type providers. Also covers randomness such as:</p>

<ul>
<li>generating infinite sequences using <code>seq</code> expressions</li>
<li>double back tick identifiers</li>
<li>pattern matching with guards</li>
<li>a bit more of a workout of the <code>Seq</code> module</li>
<li>we can have a lot of discussion of lazy evaluation, because this code is just insanely broken without it</li>
</ul>


<div><script src='https://gist.github.com/mavnn/6973457.js?file=part11.fs'></script>
<noscript><pre><code>open System
open System.IO
open System.Net
open System.Net.Mail
open System.Text.RegularExpressions

type EmailDetails =
    {
        toAddress : string
        fromAddress : string
        body : string
    }

type SmsDetails =
    {
        toNumber : string
        fromNumber : string
        message : string
    }

type MessageDetails =
    | Email of EmailDetails
    | Sms of SmsDetails

let (|ValidSmsRequest|InvalidSmsRequest|) details =
    let regex = Regex(@&quot;^\+\d\d&quot;)
    if regex.IsMatch(details.toNumber) &amp;&amp; regex.IsMatch(details.fromNumber) then
        ValidSmsRequest details
    else
        InvalidSmsRequest &quot;You must include the +xx country prefix on mobile numbers.&quot;

let sendEmail messageDetails =
    async {
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = 
            new MailMessage(
                messageDetails.fromAddress,
                messageDetails.toAddress)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- messageDetails.body
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }

let private postSms messageDetails =
    async {
        let http = HttpWebRequest.Create(&quot;http://sms.local&quot;) :?&gt; HttpWebRequest
        http.Method &lt;- &quot;POST&quot;
        let messagePayload =
            sprintf
                &quot;To: %s\nFrom: %s\nMessage: %s&quot;
                messageDetails.toNumber
                messageDetails.fromNumber
                messageDetails.message
        using 
            (http.GetRequestStream())
            (fun stream -&gt; 
                use sw = new StreamWriter(stream)
                sw.Write(messagePayload))
        let! response = http.GetResponseAsync() |&gt; Async.AwaitTask
        if (response :?&gt; HttpWebResponse).StatusCode &lt;&gt; HttpStatusCode.OK then
            failwith &quot;Http request failed!&quot;
        printfn &quot;I've sent an SMS!&quot;
    }

let sendSms messageDetails =
    match messageDetails with
    | ValidSmsRequest details -&gt; postSms details
    | InvalidSmsRequest error -&gt; async { printfn &quot;Sms sending error: %s&quot; error }

let sendMessage message =
    match message with
    | Email details -&gt; sendEmail details
    | Sms details -&gt; sendSms details
    
(* And now for something completely different...

Let's send a bunch of actors and celebrities a selection 
of astronomical data. Because, you know. Why not?

If you're running this code at home, you'll need
to install the nuget package from the packages.config
file *)
open FSharp.Data
let FreebaseKey =
    let rec getKey (dir : DirectoryInfo) =
        match dir.EnumerateFiles(&quot;freebase.key&quot;) with
        | files when Seq.isEmpty files -&gt; getKey (dir.Parent)
        | files -&gt; (Seq.head files).OpenText().ReadToEnd().Trim()
    let dir = DirectoryInfo(Directory.GetCurrentDirectory())
    getKey dir

type FreebaseProvider = FreebaseDataProvider&lt;Key=&quot;api key goes here&quot;&gt;

let freebase = FreebaseProvider.GetDataContext()

(* If you don't have an api key you can delete lines
88 to the end of this comment, and uncomment the line below.

It will limit how many times you can run the program
before it starts throwing authentication errors,
though - there's a fairly strict rate limit. *)
//let freebase = FreebaseData.GetDataContext()

let actors =
    freebase.``Arts and Entertainment``.Film.``Film actors``
    |&gt; Seq.filter (fun a -&gt; not &lt;| Seq.isEmpty a.``Film performances``)
    (* You get a (virtual) cookie if you can work out
    why I've added the filter below *)
    |&gt; Seq.filter (fun a -&gt; 
        (a.``Film performances`` |&gt; Seq.head)
            .Film.Name.[0 .. 0]
        |&gt; Regex(&quot;[a-zA-Z]&quot;).IsMatch)
    |&gt; Seq.filter (fun a -&gt; not &lt;| Seq.isEmpty a.``Country of nationality``)
    |&gt; Seq.take 20

let encode (str : string) =
    let clean = Regex(&quot;\W&quot;)
    clean.Replace(str, &quot;-&quot;)

let emailAddresses =
    seq { for actor in actors -&gt; 
            let name = actor.Name |&gt; encode
            let domain =
                (actor.``Film performances`` |&gt; Seq.head).Film.Name
                |&gt; encode
            let countryCode =
                match (actor.``Country of nationality`` |&gt; Seq.head).``ISO Alpha 2`` with
                | alpha when Seq.isEmpty alpha -&gt;
                    &quot;com&quot;
                | alpha when (Seq.head alpha).ToLower() = &quot;us&quot; -&gt;
                    &quot;com&quot;
                | alpha -&gt; sprintf &quot;co.%s&quot; &lt;| (Seq.head alpha).ToLower()
            sprintf &quot;%s@%s.%s&quot;
                name
                domain
                countryCode }

(* We're going to need 20 planets for our 20 celebrities,
so we'll repeat the planets as many times as we need *)
let planets =
    seq {
        while true do
            yield! freebase.``Science and Technology``.Astronomy.Planets
    }

let messages =
    seq { for planet in planets -&gt;
            sprintf &quot;&quot;&quot;Hi there!
We thought you might be interested to know that:

The planet %s has:
%d moons!
An average orbital velocity of %Am/s!

And is also known as:
%s

Regards,

Astro
                &quot;&quot;&quot;
                planet.Name
                (planet.``Orbited by`` |&gt; Seq.length)
                planet.``Average Orbital Speed``
                (planet.``Also known as`` |&gt; String.concat &quot;, &quot;) }

let combineAddressAndMessage (address, message) =
    Email {
        toAddress = address
        fromAddress = &quot;astro@random.org&quot;
        body = message
    }

let myMessages =
    Seq.zip emailAddresses messages
    |&gt; Seq.map combineAddressAndMessage

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being a Priest and Programming]]></title>
    <link href="http://blog.mavnn.co.uk/being-a-priest-and-programming/"/>
    <updated>2013-09-29T20:19:00+01:00</updated>
    <id>http://blog.mavnn.co.uk/being-a-priest-and-programming</id>
    <content type="html"><![CDATA[<blockquote><p>But you are a chosen people, a royal priesthood, a holy nation, God’s special possession, that you may declare the praises of him who called you out of darkness into his wonderful light. <a href="http://www.biblegateway.com/passage/?search=1%20Peter+2:9&amp;version=NIV">(1 Peter 2:9)</a></p></blockquote>

<p>Warning: this post may contain theology and other non-programming related
material. You have been warned&hellip;</p>

<p><a href="http://hrbc.org.uk">Our church</a> started a new sermon series last week, and as the
sermon was going on various other bits and pieces came together in my mind, and
I knew that I was going to have to at least try and get them down in writing or
they were going to run around my head for the next few days.</p>

<p>It comes up regularly for us as Christians that God isn&rsquo;t small enough to be
contained to Sunday mornings &ndash; he wants a larger part of our lives than that,
in fact the central part. But the idea of worshipping God with your whole
life often begins to get a bit weird when you actually stop and think about it.
Worship (&lsquo;to assign worth to something&rsquo;) is not a strange idea to any of us,
although we might not use that language &ndash; I&rsquo;m sure you can all think of a
respected author, favourite footballer or awe inspiring musician. And if you
buy into the whole Christian idea of who and what God is (infinitely powerful
and awesomely loving, perfect judge who offers grace, amazing sense of humour)
then the idea that a Christian is going to worship God also shouldn&rsquo;t seem that
strange.</p>

<p>But with your whole life? There&rsquo;s <a href="http://biblia.com/bible/esv/Romans%2012.1%E2%80%932">no doubt</a>
<a href="http://www.biblegateway.com/passage/?search=Deuteronomy+6&amp;version=NIV">biblically</a>
or in the teachings of both <a href="http://www.desiringgod.org/resource-library/sermons/all-of-life-as-worship">Christian teachers</a>
and <a href="http://www.jewfaq.org/prayer/shema.htm">Jewish tradition</a> that this is
precisely what is expected of us. But&hellip; when you write computer code as a day
job, what does that actually mean?</p>

<p>And then it struck me. It means being a <a href="https://people.gnome.org/~michael/">Michael Meeks</a> or a <a href="https://twitter.com/jonskeet/status/8423111419">Jon Skeet</a>. Probably not in the
specific details &ndash; I&rsquo;ve not met either of them personally, but in the attitude
they show to life and the people around them. If you&rsquo;re not in the programming
field (probably, if you don&rsquo;t happen to be in a similar area of the programming
field to me&hellip;) you&rsquo;re not likely to have heard of them. But they&rsquo;ve both
developed an enormous amount of respect in a field that is frequently full of
highly opinionated staunch atheists while being openly professing Christians.</p>

<p>So we wrap round to where we started &ndash; the idea from 1 Peter of
all Christians being priests. (I&rsquo;m not using the term here in the catholic
sense, so bear with me&hellip;). This comes up a lot when people relate one of the
core Christian doctrines &ndash; that people who have come into a relation with
Christ can come directly to God without an intermediary. But that wasn&rsquo;t the only
role of priests in the Old Testament. Yes, they were the only people who could
enter God&rsquo;s presence&hellip; but they weren&rsquo;t only going there for themselves. They
<em>were</em> the intermediaries, &lsquo;introducing&rsquo; others to God&rsquo;s presence, carrying
blessings from God to them and petitions from them to God.</p>

<p>Jon and Michael are dedicated to
what they do, they are good at it and they are &lsquo;graceful&rsquo;. In the sense that
they treat the people around them with respect and as professionals, teaching
and helping without regard to the others faith and without forcing argument and
discussion where it&rsquo;s not wanted. Both are obviously willing to talk to people
who want to (Michael even links to a fun page on <a href="http://christianthinktank.com/objedex.html">Christian Think Tank</a> for those who are
interested), but there isn&rsquo;t a pressure there.</p>

<p>And maybe that&rsquo;s what some small part of everyday worship looks like; I can&rsquo;t help feeling that by
being respectable (in the sense of, worthy of some respect) and making the fact
of their faith public, people like Jon and Michael have been doing their bit to
draw others closer to this God I worship. They&rsquo;ve caused a doubt and a second
look at what faith really means in the mind of those who would otherwise live
in an atheist bubble, carelessly dismissing the idea of God as the ramblings of
the obviously stupid and insane. Because these men are clearly neither.</p>

<p>This is encouraging to me, and I hope to a lot of out there who go to work, work hard
and tell people that you made it to church this Sunday. Because if you look
around you&rsquo;ll probably begin to see these people around you, the Jons and Michaels
who are making a difference just by living a life based on Christ&rsquo;s in the everyday.</p>

<p>And guess what? If you&rsquo;re a Christian, letting people know without pressure and
getting your coding/plumbing/teaching/building/etc. done you&rsquo;re probably making a difference
too. You might be the last to see
it, but I&rsquo;m sure others do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing Classic OO Style Code in F#]]></title>
    <link href="http://blog.mavnn.co.uk/implementing-classic-oo-style-code-in-f-number/"/>
    <updated>2013-09-24T14:21:00+01:00</updated>
    <id>http://blog.mavnn.co.uk/implementing-classic-oo-style-code-in-f-number</id>
    <content type="html"><![CDATA[<p>As part of writing up notes for introducing F# as a programming language to experienced C# devs I was looking for examples
of heavily OO code being implemented in F#. Then I realised that I&rsquo;d written at least one suitable example myself.</p>

<p>In the <a href="" title="https://github.com/mavnn/NuGetPlus">NuGetPlus project</a> I needed to implement a ProjectSystem class that was almost a direct copy of the MSBuildProjectSystem in the NuGet commandline client.</p>

<p>So without further ado, F# and then C# versions of a class with inheritance and which implements several interfaces.</p>

<!--more-->


<p>The <a href="" title="https://github.com/mavnn/NuGetPlus/blob/master/NuGetPlus.Core/ProjectSystem.fs">ProjectSystem class from NuGetPlus</a>:</p>

<div><script src='https://gist.github.com/mavnn/6684569.js?file=fsharp.fs'></script>
<noscript><pre><code>[&lt;AutoOpen&gt;]
module NuGetPlus.ProjectSystem

open System
open System.IO
open System.Collections.Generic
open System.Reflection
open Microsoft.Build.Evaluation
open NuGet

let TryGetProject projectFile = 
    ProjectCollection.GlobalProjectCollection.GetLoadedProjects(projectFile) 
    |&gt; Seq.tryFind(fun p -&gt; p.FullPath = projectFile)

type ProjectSystem(projectFile : string) = 
    inherit PhysicalFileSystem(Path.GetDirectoryName(projectFile))
    
    let project = 
        match TryGetProject projectFile with
        | Some project -&gt; project
        | None -&gt; Project(projectFile)
    
    let projectName = Path.GetFileNameWithoutExtension &lt;| project.FullPath
    let framework = 
        new Runtime.Versioning.FrameworkName(project.GetPropertyValue
                                                 (&quot;TargetFrameworkMoniker&quot;))
    
    let GetReferenceByName name =
        project.GetItems(&quot;Reference&quot;)
        |&gt; Seq.filter
               (fun i -&gt; 
                   i.EvaluatedInclude.StartsWith
                       (name, StringComparison.OrdinalIgnoreCase))
        |&gt; Seq.tryFind
               (fun i -&gt; 
                   AssemblyName(i.EvaluatedInclude)
                       .Name.Equals(name, StringComparison.OrdinalIgnoreCase))

    let GetReferenceByPath path = 
        let name = Path.GetFileNameWithoutExtension path
        GetReferenceByName name
    
    interface IProjectSystem with
        member x.TargetFramework with get () = framework
        member x.ProjectName with get () = projectName
        
        member x.AddReference(path, stream) = 
            let fullPath = PathUtility.GetAbsolutePath(x.Root, path)
            let relPath = 
                PathUtility.GetRelativePath(project.FullPath, fullPath)
            let includeName = Path.GetFileNameWithoutExtension fullPath
            project.AddItem
                (&quot;Reference&quot;, includeName, [|KeyValuePair(&quot;HintPath&quot;, relPath)|]) 
            |&gt; ignore
            project.Save()
        
        member x.AddFrameworkReference name = 
            project.AddItem(&quot;Reference&quot;, name) |&gt; ignore
            project.Save()
        
        member x.ReferenceExists path = 
            match GetReferenceByName path with
            | Some _ -&gt; true
            | None -&gt; false
        
        member x.RemoveReference path = 
            match GetReferenceByPath path with
            | Some i -&gt; 
                project.RemoveItem(i) |&gt; ignore
                project.Save()
            | None -&gt; ()
        
        member x.IsSupportedFile path = true
        member x.ResolvePath path = path
        member x.IsBindingRedirectSupported with get () = true
        
        member x.AddImport((targetPath : string), location) = 
            if project.Xml.Imports = null 
               || project.Xml.Imports 
                  |&gt; Seq.forall
                         (fun import -&gt; 
                             not 
                             &lt;| targetPath.Equals
                                    (import.Project, 
                                     StringComparison.OrdinalIgnoreCase)) then 
                project.Xml.AddImport(targetPath) |&gt; ignore
                project.ReevaluateIfNecessary()
                project.Save()
        
        member x.RemoveImport(targetPath : string) = 
            match project.Xml.Imports 
                  |&gt; Seq.tryFind
                         (fun import -&gt; 
                             targetPath.Equals
                                 (import.Project, 
                                  StringComparison.OrdinalIgnoreCase)) with
            | None -&gt; ()
            | Some i -&gt; 
                project.Xml.RemoveChild(i)
                project.ReevaluateIfNecessary()
                project.Save()
        
        member x.FileExistsInProject(path : string) = 
            project.Items 
            |&gt; Seq.exists
                   (fun i -&gt; 
                       i.EvaluatedInclude.Equals
                           (path, StringComparison.OrdinalIgnoreCase) 
                       &amp;&amp; (String.IsNullOrEmpty(i.ItemType) 
                           || i.ItemType.[0] &lt;&gt; '_'))
    
    interface IPropertyProvider with
        member x.GetPropertyValue name = project.GetPropertyValue(name) :&gt; obj</code></pre></noscript></div>


<p>and the <a href="" title="http://nuget.codeplex.com/SourceControl/latest#src/CommandLine/Common/MSBuildProjectSystem.cs">MSBuildProjectSystem class from NuGet</a>:</p>

<div><script src='https://gist.github.com/mavnn/6684569.js?file=csharp.cs'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Versioning;
using Microsoft.Build.Evaluation;

namespace NuGet.Common
{
    public class MSBuildProjectSystem : PhysicalFileSystem, IMSBuildProjectSystem
    {
        public MSBuildProjectSystem(string projectFile)
            : base(Path.GetDirectoryName(projectFile))
        {
            Project = GetProject(projectFile);
        }

        public bool IsBindingRedirectSupported
        {
            get
            {
                return true;
            }
        }

        private Project Project
        {
            get;
            set;
        }

        public void AddFrameworkReference(string name)
        {
            // No-op
        }

        public void AddReference(string referencePath, Stream stream)
        {
            string fullPath = PathUtility.GetAbsolutePath(Root, referencePath);
            string relativePath = PathUtility.GetRelativePath(Project.FullPath, fullPath);
            // REVIEW: Do we need to use the fully qualified the assembly name for strong named assemblies?
            string include = Path.GetFileNameWithoutExtension(fullPath);

            Project.AddItem(&quot;Reference&quot;,
                            include,
                            new[] { 
                                    new KeyValuePair&lt;string, string&gt;(&quot;HintPath&quot;, relativePath)
                                });
        }

        public dynamic GetPropertyValue(string propertyName)
        {
            return Project.GetPropertyValue(propertyName);
        }

        public bool IsSupportedFile(string path)
        {
            return true;
        }

        public string ProjectName
        {
            get
            {
                return Path.GetFileNameWithoutExtension(Project.FullPath);
            }
        }

        public bool ReferenceExists(string name)
        {
            return GetReference(name) != null;
        }

        public void RemoveReference(string name)
        {
            ProjectItem assemblyReference = GetReference(name);
            if (assemblyReference != null)
            {
                Project.RemoveItem(assemblyReference);
            }
        }

        private IEnumerable&lt;ProjectItem&gt; GetItems(string itemType, string name)
        {
            return Project.GetItems(itemType).Where(i =&gt; i.EvaluatedInclude.StartsWith(name, StringComparison.OrdinalIgnoreCase));
        }

        public ProjectItem GetReference(string name)
        {
            name = Path.GetFileNameWithoutExtension(name);
            return GetItems(&quot;Reference&quot;, name)
                .FirstOrDefault(
                    item =&gt;
                    new AssemblyName(item.EvaluatedInclude).Name.Equals(name, StringComparison.OrdinalIgnoreCase));
        }

        public FrameworkName TargetFramework
        {
            get
            {
                string moniker = GetPropertyValue(&quot;TargetFrameworkMoniker&quot;);
                if (String.IsNullOrEmpty(moniker))
                {
                    return null;
                }
                return new FrameworkName(moniker);
            }
        }

        public string ResolvePath(string path)
        {
            return path;
        }

        public void Save()
        {
            Project.Save();
        }

        public bool FileExistsInProject(string path)
        {
            // some ItemTypes which starts with _ are added by various MSBuild tasks for their own purposes
            // and they do not represent content files of the projects. Therefore, we exclude them when checking for file existence.
            return Project.Items.Any(
                i =&gt; i.EvaluatedInclude.Equals(path, StringComparison.OrdinalIgnoreCase) &amp;&amp; 
                     (String.IsNullOrEmpty(i.ItemType) || i.ItemType[0] != '_'));
        }

        private static Project GetProject(string projectFile)
        {
            return ProjectCollection.GlobalProjectCollection.GetLoadedProjects(projectFile).FirstOrDefault() ?? new Project(projectFile);
        }

        public void AddImport(string targetPath, ProjectImportLocation location)
        {
            if (targetPath == null)
            {
                throw new ArgumentNullException(&quot;targetPath&quot;);
            }

            // adds an &lt;Import&gt; element to this project file.
            if (Project.Xml.Imports == null ||
                Project.Xml.Imports.All(import =&gt; !targetPath.Equals(import.Project, StringComparison.OrdinalIgnoreCase)))
            {
                Project.Xml.AddImport(targetPath);
                NuGet.MSBuildProjectUtility.AddEnsureImportedTarget(Project, targetPath);
                Project.ReevaluateIfNecessary();
                Project.Save();
            }
        }

        public void RemoveImport(string targetPath)
        {
            if (targetPath == null)
            {
                throw new ArgumentNullException(&quot;targetPath&quot;);
            }

            if (Project.Xml.Imports != null)
            {
                // search for this import statement and remove it
                var importElement = Project.Xml.Imports.FirstOrDefault(
                    import =&gt; targetPath.Equals(import.Project, StringComparison.OrdinalIgnoreCase));

                if (importElement != null)
                {
                    Project.Xml.RemoveChild(importElement);
                    NuGet.MSBuildProjectUtility.RemoveEnsureImportedTarget(Project, targetPath);
                    Project.ReevaluateIfNecessary();
                    Project.Save();
                }
            }
        }
    }
}
</code></pre></noscript></div>


<p>I can&rsquo;t honestly remember if they do exactly the same thing, but they are pretty similar and implement the same interfaces and inheritance. As you can see, while F#&rsquo;s focus is being functional it will support OO code just fine, which is very useful indeed when you need to interop with .NET code from other languages and coding styles.</p>
]]></content>
  </entry>
  
</feed>
