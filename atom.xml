<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mavnn's blog]]></title>
  <link href="https://blog.mavnn.co.uk/atom.xml" rel="self"/>
  <link href="https://blog.mavnn.co.uk/"/>
  <updated>2018-02-02T21:40:38+00:00</updated>
  <id>https://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started With F# in Kubernetes]]></title>
    <link href="https://blog.mavnn.co.uk/getting-started-with-f-number-in-kubernetes/"/>
    <updated>2018-02-02T14:44:21+00:00</updated>
    <id>https://blog.mavnn.co.uk/getting-started-with-f-number-in-kubernetes</id>
    <content type="html"><![CDATA[<blockquote>
<p>Author&#39;s note: This post is a quick start to help you get a single F# based service up and running on Kubernetes. If you want the full story on how to design a distributed system, we offer <a href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/">commercial training</a> and <a href="https://mavnn.co.uk/">consulting services</a> to help you with that.</p>
</blockquote>

<p>&quot;Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications&quot; - in other words, it will handle more deployment, health monitoring and service discovery needs out of the box, as long as you can turn your application into a container. So, let&#39;s have a quick look at how to do that with an F# application.</p>

<!-- more -->

<h2>Prerequisites</h2>

<p>We going to use Minikube to start up a local Kubernetes &quot;cluster&quot; (it will only have a single node), and installation and first start depend slightly on operating system and which virtual machine backend you want it to use. Instructions on installing it can be found <a href="https://github.com/kubernetes/minikube">here</a>.</p>

<p>Note that Minikube depends in turn on <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">kubectl</a> which will also need to be installed.</p>

<p>The example application we&#39;re going to deploy is going to be a .NET Core app running on Linux, so you will also need the .NET Core SDK 2.0+ installed. We&#39;re going to leverage the <code>dotnet</code> command line tool a fair bit.</p>

<p>Finally, most of the commands you need to run will be given in bash syntax. Hopefully you have bash installed (via installing <code>git</code> if nothing else!), but if you don&#39;t it should be fairly clear how to carry the steps out in other consoles.</p>

<h2>Actually Doing Stuff</h2>

<p>First things first; start up minikube.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>minikube start <span class="c"># you may need options here depending on desired virtual machine software</span>
</span></code></pre></td></tr></table></div></figure>

<p>It will take a little while to get going, especially on the first run when it will download an ISO image to create its own virtual machine. You can carry on with other steps as it warms up.</p>

<p>While that&#39;s going on, let&#39;s lay out a nice project structure to store all the things we&#39;re going to need. All future command line snippets will assume you&#39;re running them from the root of this structure.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir kube <span class="c"># Stores Kubernetes config</span>
</span><span class='line'>mkdir src <span class="c"># our F# code</span>
</span><span class='line'>mkdir docker <span class="c"># docker config</span>
</span></code></pre></td></tr></table></div></figure>

<p>Before we can run an application in Kubernetes, we need an application. So let&#39;s start with that. We&#39;re going to use the .NET Core <a href="https://docs.freya.io/en/latest/">Freya</a> template to create a simple console application with a single HTTP endpoint on it.</p>

<p>If you don&#39;t have the Freya template installed, grab it first using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>dotnet new --install <span class="s2">&quot;Freya.Template::*&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we can create our project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>dotnet new freya -o src/WebHello
</span></code></pre></td></tr></table></div></figure>

<p>Run a restore just to make sure everything is as it should be, and then you should be able to start up your service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>dotnet restore src/WebHello/WebHello.fsproj
</span><span class='line'>dotnet run -p src/WebHello/WebHello.fsproj
</span></code></pre></td></tr></table></div></figure>

<p>It should tell you it has started a web server on socket 8080, and surfing to <code>http://localhost:8080/hello</code> should get you a &quot;Hello, world!&quot; response.</p>

<p>Great - it works! Hit ctrl-c to shut it down again.</p>

<p>We just need to make one change here; because we&#39;re going to deploy this on a container, we can&#39;t only listen on local host. Go into Program.fs, and change the <code>main</code> function to look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">[&lt;</span><span class="nc">EntryPoint</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="n">main</span> <span class="n">argv</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">myCfg</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">defaultConfig</span> <span class="k">with</span>
</span><span class='line'>            <span class="n">bindings</span> <span class="o">=</span> <span class="o">[</span> <span class="nn">HttpBinding</span><span class="p">.</span><span class="n">createSimple</span> <span class="nc">HTTP</span> <span class="s2">&quot;0.0.0.0&quot;</span> <span class="mi">8080</span> <span class="o">]</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">startWebServer</span>
</span><span class='line'>        <span class="n">myCfg</span>
</span><span class='line'>        <span class="o">(</span><span class="nn">Owin</span><span class="p">.</span><span class="nn">OwinApp</span><span class="p">.</span><span class="n">ofAppFunc</span> <span class="s2">&quot;/&quot;</span> <span class="o">(</span><span class="nn">OwinAppFunc</span><span class="p">.</span><span class="n">ofFreya</span> <span class="nn">Api</span><span class="p">.</span><span class="n">root</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we need to turn it into a docker container so it can run on Kubernetes.</p>

<p>Create a new file in the docker directory called <code>WebHelloDockerfile</code> (imaginative, I know). Docker will use this file to create a image based on our code. To make sure that the image created is the same as what we&#39;re going to deploy in production, we don&#39;t create the image from the compilation output on our development box - instead, we actually use a intermediate docker container to build our source code with a known version of the .NET Core tool chain. We use the exact same docker file (and therefore versions of the tool chain) for our continuous integration builds. <em>Thanks to <a href="http://twitter.com/stevejgordon">Steve Gordon</a> for pointing out this trick for me.</em></p>

<p>Into the file, put this contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="nc">FROM</span> <span class="n">microsoft</span><span class="o">/</span><span class="n">dotnet</span><span class="o">:</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">sdk</span> <span class="nc">AS</span> <span class="nc">BUILD</span>
</span><span class='line'><span class="nc">WORKDIR</span> <span class="o">/</span><span class="n">build</span>
</span><span class='line'><span class="nc">COPY</span> <span class="n">src</span> <span class="n">src</span>
</span><span class='line'><span class="nc">RUN</span> <span class="n">dotnet</span> <span class="n">restore</span> <span class="n">src</span><span class="o">/</span><span class="nc">WebHello</span><span class="o">/</span><span class="nn">WebHello</span><span class="p">.</span><span class="n">fsproj</span>
</span><span class='line'><span class="nc">RUN</span> <span class="n">dotnet</span> <span class="n">publish</span> <span class="n">src</span><span class="o">/</span><span class="nc">WebHello</span><span class="o">/</span><span class="nn">WebHello</span><span class="p">.</span><span class="n">fsproj</span> <span class="o">-</span><span class="n">o</span> <span class="n">out</span> <span class="o">-</span><span class="n">c</span> <span class="nc">Release</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">restore</span>
</span><span class='line'>
</span><span class='line'><span class="nc">FROM</span> <span class="n">microsoft</span><span class="o">/</span><span class="n">dotnet</span><span class="o">:</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">runtime</span>
</span><span class='line'><span class="nc">WORKDIR</span> <span class="o">/</span><span class="n">app</span>
</span><span class='line'><span class="nc">COPY</span> <span class="o">--</span><span class="n">from</span><span class="o">=</span><span class="nc">BUILD</span> <span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="nc">WebHello</span><span class="o">/</span><span class="n">out</span> <span class="o">.</span>
</span><span class='line'><span class="nc">EXPOSE</span> <span class="mi">8080</span>
</span><span class='line'><span class="nc">ENTRYPOINT</span> <span class="n">dotnet</span> <span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="nn">WebHello</span><span class="p">.</span><span class="n">dll</span>
</span></code></pre></td></tr></table></div></figure>

<p>This is a multistage docker build; we&#39;re asking docker to use the a container based on <code>microsoft/dotnet:2.0-sdk</code> to restore and build our code - but the final image we&#39;re creating (i.e. the last one in the file) is based on <code>microsoft/dotnet:2.0-runtime</code>, just copying across the result of running <code>dotnet publish</code>. Between the final image not having the SDK installed, and only copying exactly the files we need to run our application, we create a much smaller image this way.</p>

<p>Don&#39;t run a normal docker build straight away! Even if you have docker installed, we don&#39;t want to build this image on your computer&#39;s docker - we want to build it directly in minikube&#39;s docker so that Kubernetes can find it. Kubernetes also knows how to pull images from external docker repositories, but we don&#39;t want to set one up right now.</p>

<p>To run a command inside minikube, we can take advantage of minikube&#39;s ssh and mount functionality.</p>

<p>In a separate terminal (or as a detached process if you know what you&#39;re doing) in the same directory, run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>minikube mount .:/host
</span></code></pre></td></tr></table></div></figure>

<p>This will expose the current directory (<code>.</code>) to the minikube machine at the location <code>/host</code>. You might need to use a full path local under windows, quoting it so the <code>:</code> in the drive name doesn&#39;t confuse things.</p>

<p>Now (back in our original terminal) we can run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>minikube ssh <span class="s2">&quot;cd /host; docker build -f docker/WebHelloDockerfile -t webhello .&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>No need to even have docker installed on your host computer at all. Running this command will take quite a while the first time; don&#39;t worry too much, it caches everything so it will be pretty quick from now on.</p>

<p>So this is all great, and we now have a docker container. We still need to tell Kubernetes about it though. Create yourself an other file, this time in the kube directory. Call it <code>webhello.yml</code> and put this in it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>apiVersion: v1
</span><span class='line'>kind: Service
</span><span class='line'>metadata:
</span><span class='line'>  name: webhello
</span><span class='line'>spec:
</span><span class='line'>  selector:
</span><span class='line'>    app: webhello
</span><span class='line'>  ports:
</span><span class='line'>  - name: http
</span><span class='line'>    port: 8080
</span><span class='line'>    protocol: TCP
</span><span class='line'>    targetPort: http
</span><span class='line'>---
</span><span class='line'>apiVersion: extensions/v1beta1
</span><span class='line'>kind: Deployment
</span><span class='line'>metadata:
</span><span class='line'>  name: webhello
</span><span class='line'>spec:
</span><span class='line'>  selector:
</span><span class='line'>    matchLabels:
</span><span class='line'>      app: webhello
</span><span class='line'>  replicas: 3
</span><span class='line'>  strategy:
</span><span class='line'>    <span class="nb">type</span>: RollingUpdate
</span><span class='line'>    rollingUpdate:
</span><span class='line'>      maxUnavailable: 0
</span><span class='line'>  template:
</span><span class='line'>    metadata:
</span><span class='line'>      labels:
</span><span class='line'>        app: webhello
</span><span class='line'>    spec:
</span><span class='line'>      containers:
</span><span class='line'>      - image: <span class="s2">&quot;webhello&quot;</span>
</span><span class='line'>        imagePullPolicy: Never
</span><span class='line'>        name: webhello
</span><span class='line'>        resources:
</span><span class='line'>          requests:
</span><span class='line'>            memory: <span class="s2">&quot;128Mi&quot;</span>
</span><span class='line'>          limits:
</span><span class='line'>            memory: <span class="s2">&quot;256Mi&quot;</span>
</span><span class='line'>        ports:
</span><span class='line'>        - name: http
</span><span class='line'>          containerPort: 8080
</span><span class='line'>          protocol: TCP
</span><span class='line'>        readinessProbe:
</span><span class='line'>          httpGet:
</span><span class='line'>            path: <span class="s2">&quot;/hello&quot;</span>
</span><span class='line'>            port: http
</span><span class='line'>            scheme: HTTP
</span><span class='line'>          initialDelaySeconds: 10
</span><span class='line'>          periodSeconds: 5
</span><span class='line'>          failureThreshold: 10
</span><span class='line'>          successThreshold: 1
</span><span class='line'>          timeoutSeconds: 10
</span><span class='line'>        livenessProbe:
</span><span class='line'>          httpGet:
</span><span class='line'>            path: <span class="s2">&quot;/hello&quot;</span>
</span><span class='line'>            port: http
</span><span class='line'>            scheme: HTTP
</span><span class='line'>          failureThreshold: 2
</span><span class='line'>          initialDelaySeconds: 20
</span><span class='line'>          periodSeconds: 10
</span><span class='line'>          successThreshold: 1
</span><span class='line'>          timeoutSeconds: 5
</span></code></pre></td></tr></table></div></figure>

<p>Whoa! That&#39;s a wall of text. What&#39;s going on here?</p>

<p>Well, the first section is telling Kubernetes that we want a service called <code>webhello</code>; it should expose a port called <code>http</code> and it should route requests to it to <code>pods</code> that are part of the app called <code>webhello</code>.</p>

<p>What are these <code>pods</code>? Well, you can read more about that in the Kubernetes documentation, but for now we can assume they are instances of our application running. But our service won&#39;t do anything until it has pods to route to, which is where the second section of the file kicks in. Here we tell Kubernetes that we want to create a deployment with rules to govern how the <code>webhello</code> app should be deployed. We say that there should be 3 copies running, and that when new versions are rolled out that we want to start a pod with the new version and wait for it to be healthy before we shut down each old pod (the <code>maxUnavailable</code> bit).</p>

<p>Finally, we give a specification of how to create these 3 pods we&#39;ve asked for; we want to base it on the image <code>webhello</code> (using the local version, and not trying to check for updates&#8230;), it shouldn&#39;t need much memory (the limit helps the garbage collector kick in), it exposes a port and that it shouldn&#39;t be considered alive or ready if it doesn&#39;t respond with a success code on http requests to the endpoint <code>/hello</code>.</p>

<p>In yet an other terminal, fire up the command <code>kubectl proxy</code>. This will give you access to the Kubernetes api, including it&#39;s built in dashboard. If you now surf to the <a href="http://127.0.0.1:8001/api/v1/proxy/namespaces/kube-system/services/Kubernetes-dashboard/#!/pod?namespace=default">pods page</a> in the dashboard, it should tell you there are no pods deployed.</p>

<p>Back to our first terminal; run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>kubectl apply -f kube/
</span></code></pre></td></tr></table></div></figure>

<p>To apply all of the config files in the kube directory to the currently connected cluster.</p>

<p>Refresh your dashboard a few times, and you should slowly see your pods appearing and becoming live.</p>

<p>This is good progress - we have a service up and running. Unfortunately, we can&#39;t see it.</p>

<p>For our final step, let&#39;s configure Kubernetes to allow external access to this service. This is normally done by making use of the Ingress resource - what that actually represents is up to your Kubernetes provider, but in the case of Minikube it will use an nginx server as a proxy from the outside world to our services.</p>

<p>First, make sure minikube has ingress support enabled:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>minikube addons <span class="nb">enable </span>ingress
</span></code></pre></td></tr></table></div></figure>

<p>Now add a second file into the kube directory called <code>ingress.yml</code>. Stick the following content in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>---
</span><span class='line'>apiVersion: extensions/v1beta1
</span><span class='line'>kind: Ingress
</span><span class='line'>metadata:
</span><span class='line'>  name: ingress
</span><span class='line'>spec:
</span><span class='line'>  rules:
</span><span class='line'>  - http:
</span><span class='line'>      paths:
</span><span class='line'>        - path: /hello
</span><span class='line'>          backend:
</span><span class='line'>            serviceName: webhello
</span><span class='line'>            servicePort: http
</span></code></pre></td></tr></table></div></figure>

<p>Hopefully it should be fairly clear what this does!</p>

<p>Apply our config to the cluster again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>kubectl apply -f kube/
</span></code></pre></td></tr></table></div></figure>

<p>Setting up the ingress can take a moment, so run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>kubectl get ingress
</span></code></pre></td></tr></table></div></figure>

<p>a few times until you get a response in that contains an IP address. At this point, you should be able to hit the IP address listed by <code>kubectl</code> on the <code>/hello</code> or <code>/hello/yourName</code> paths; normally it will be <a href="http://192.168.99.100/hello">http://192.168.99.100/hello</a>. Depending on Minikube version, you might have to allow a self signed certificate called &quot;ingress.local&quot; to get through.</p>

<p>And there you have it - an F# service deployed in Kubernetes.</p>

<p>One last trick - because you&#39;re just pushing images direct into Minikube&#39;s docker rather than into a registry of any kind, Kubernetes won&#39;t pick up new versions of the image. If you do a build and want to deploy the changed image, try using something like this to add a <code>updated</code> timestamp to your deployment configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>kubectl patch deployment webhello -p<span class="o">=</span><span class="s2">&quot;{ \&quot;spec\&quot;: { \&quot;template\&quot;: {\&quot;metadata\&quot;: {\&quot;labels\&quot;:{\&quot;updated\&quot;: \&quot;$(date +&quot;</span>%s<span class="s2">&quot;)\&quot; }}}}}&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Because your deployment has changed, Kubernetes will then try and refresh all the pods with the latest version of the image. Enjoy watching your magic, zero down time deploy roll on through.</p>

<p>That&#39;s it for now!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Token Bearer Authentication in Freya]]></title>
    <link href="https://blog.mavnn.co.uk/token-bearer-authentication-in-freya/"/>
    <updated>2018-01-10T11:03:48+00:00</updated>
    <id>https://blog.mavnn.co.uk/token-bearer-authentication-in-freya</id>
    <content type="html"><![CDATA[<p>As part of my <a href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/">Building Solid Systems</a> course, I&#39;ll be talking about authentication in distributed systems. I wanted a practical demonstration that people could play with, so I added token bearer authentication to a Freya API.</p>

<p>Here&#39;s how.</p>

<!-- more -->

<h3>System design</h3>

<p>Over the years, I have become a big believer in using standards where standards exist (unless they&#39;re actively terrible); as such, for authentication we&#39;ll be assuming that our system includes an OAuth2 compliant authorization server. Depending on our needs, this might be an external service or a self hosted solution such as <a href="https://identityserver.io/">IdentityServer</a>.</p>

<p>We&#39;re going to set up an API which will use &quot;token bearer&quot; authentication. This means that the client is responsible for obtaining a valid token from our authorization server which includes a claim for access to the resource our API represents. How the client gets the token, we don&#39;t really care: there are several ways of obtaining a grant from an OAuth2 server and I won&#39;t be going too far down that rabbit hole here (although check the end of the article for an example).</p>

<h3>The code</h3>

<p>Let&#39;s start coding, and add authentication to the &quot;hello&quot; endpoint of the Freya template project. Set up a new file for our <code>Auth</code> module, and open up everything we need.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Auth</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nc">Core</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Machines</span><span class="p">.</span><span class="nc">Http</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nc">Http</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Types</span><span class="p">.</span><span class="nc">Http</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Hopac</span>
</span><span class='line'><span class="k">open</span> <span class="nc">IdentityModel</span>
</span><span class='line'><span class="k">open</span> <span class="nn">IdentityModel</span><span class="p">.</span><span class="nc">Client</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Logging</span>
</span></code></pre></td></tr></table></div></figure>

<p>Most of these should make sense; the additions are <code>IdentityModel</code> and a <code>Logging</code> module. IdentityModel is a NuGet package supplied by the IdentityServer project which implements the basics of the OAuth2 specification from a consumers point of view, and gives a nice client API over the top of the various endpoints an OAuth2 compliant server should implement.</p>

<p>The <code>Logging</code> module is the one from my <a href="https://blog.mavnn.co.uk/logging-freya/">previous blog post</a>; any logging here is optional, but in practice is <em>really very helpful</em> in an actual production distributed system.</p>

<p>The first thing we&#39;re going to do is create a <code>DiscoveryClient</code>. OAuth2 servers provide a discovery document which specifies things like it&#39;s public key and the locations of the other endpoints. In theory, this information can change over time - in this case I&#39;m going to statically grab it on service start up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">discoClient</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">DiscoveryClient</span><span class="o">(</span><span class="s2">&quot;http://idserver:5000&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">discoClient</span><span class="o">.</span><span class="nn">Policy</span><span class="p">.</span><span class="nc">RequireHttps</span> <span class="o">&lt;-</span> <span class="bp">false</span>
</span><span class='line'><span class="n">discoClient</span><span class="o">.</span><span class="nn">Policy</span><span class="p">.</span><span class="nc">ValidateEndpoints</span> <span class="o">&lt;-</span> <span class="bp">false</span>
</span><span class='line'><span class="n">discoClient</span><span class="o">.</span><span class="nn">Policy</span><span class="p">.</span><span class="nc">ValidateIssuerName</span> <span class="o">&lt;-</span> <span class="bp">false</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">doc</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">discoClient</span><span class="o">.</span><span class="nc">GetAsync</span><span class="bp">()</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">AwaitTask</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">RunSynchronously</span>
</span></code></pre></td></tr></table></div></figure>

<p>Your configuration here will vary considerably: I&#39;m running within a kubernetes cluster using an internal DNS record, so I&#39;m overriding the normal safety checks. If you are deploying a service which will be calling the identity server on an external network, you obviously shouldn&#39;t do this&#8230;</p>

<p>The <code>freyaMachine</code> has separate decision points for whether the request is <code>authorized</code> and whether it&#39;s <code>allowed</code>. Authorized is the simplest: a request is authorized if it has an authorization header. Let&#39;s build a method which checks that for us:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">isAuthed</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">hasHeader</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="nn">Headers</span><span class="p">.</span><span class="n">authorization_</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">opt</span> <span class="o">-&gt;</span> <span class="n">opt</span><span class="o">.</span><span class="nc">IsSome</span><span class="o">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">hasHeader</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Auth header found&quot;</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">debug</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;No auth header&quot;</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">debug</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">hasHeader</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Most of the code here is actually logging - but you won&#39;t regret it when your customers ask you why they can&#39;t authenticate against your API.</p>

<p>Now we&#39;re onto the more interesting case; the caller has made an attempt to access a secured resource, and they&#39;ve supplied some authentication to try and do so.</p>

<p>Let&#39;s check first if they&#39;ve supplied a &quot;Bearer&quot; token; this is the only authentication style we&#39;re allowing at the moment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">token</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">auth</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="nn">Headers</span><span class="p">.</span><span class="n">authorization_</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">auth</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="c1">// We should never reach this branch without an auth header -</span>
</span><span class='line'>            <span class="c1">// it should be caught by the isAuthed check</span>
</span><span class='line'>            <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;No auth header found when checking authorization&quot;</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">warn</span>
</span><span class='line'>            <span class="k">return</span> <span class="nc">None</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">a</span> <span class="k">when</span> <span class="ow">not</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="nc">StartsWith</span><span class="o">(</span><span class="s2">&quot;Bearer &quot;</span><span class="o">))</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Auth found, but not of type Bearer&quot;</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">debug</span>
</span><span class='line'>            <span class="k">return</span> <span class="nc">None</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">a</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Bearer token extracted&quot;</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">debug</span>
</span><span class='line'>            <span class="k">return</span> <span class="nc">Some</span> <span class="o">&lt;|</span> <span class="n">a</span><span class="o">.</span><span class="nc">Substring</span><span class="o">(</span><span class="mi">7</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">memo</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we can check the token to see if it is valid. If the token is a JWT token we could choose to check it locally; we have the public key of the issuer available. Here I&#39;ve decided to go the route of checking each token with the issuer, as that means that we pick up things like token cancellation. Your strategy here will depend a lot on your use case, and <code>IdentityModel</code> also allows for caching to allow a good compromise.</p>

<p>Checking the token can be done via an asynchronous call with the <code>IntrospectionClient</code>. As I&#39;m using Freya compiled against <code>Hopac</code> I&#39;m wrapping it in a <code>job</code> - you could equally wrap it in an <code>async</code> block if you&#39;ve using Async Freya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">checkToken</span> <span class="n">apiName</span> <span class="n">apiSecret</span> <span class="n">t</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">job</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">use</span> <span class="n">introClient</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">new</span> <span class="nc">IntrospectionClient</span><span class="o">(</span><span class="n">doc</span><span class="o">.</span><span class="nc">IntrospectionEndpoint</span><span class="o">,</span>
</span><span class='line'>                                    <span class="n">apiName</span><span class="o">,</span> <span class="n">apiSecret</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span><span class="o">!</span>
</span><span class='line'>            <span class="n">introClient</span><span class="o">.</span><span class="nc">SendAsync</span><span class="o">(</span><span class="nc">IntrospectionRequest</span><span class="o">(</span><span class="nc">Token</span> <span class="o">=</span> <span class="n">t</span><span class="o">))</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Hopac</span><span class="p">.</span><span class="nn">Job</span><span class="p">.</span><span class="n">awaitTask</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And now the last step is to build a <code>allowed</code> decision point. Our decision point takes three parameters: the name of this API resource, as known to the identity server, the shared secret between resource and identity server, and the scope this particular resource within the API requires. Normally this will be something like <code>read</code> or <code>write</code>. An entire API will normally share a single name and secret, while each endpoint may require a different scope.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">isAllowedFor</span> <span class="n">apiName</span> <span class="n">apiSecret</span> <span class="n">scope</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">token</span> <span class="o">=</span> <span class="n">token</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">token</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">false</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">t</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">resp</span> <span class="o">=</span>
</span><span class='line'>                <span class="n">checkToken</span> <span class="n">apiName</span> <span class="n">apiSecret</span> <span class="n">t</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">fromJob</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">scopeMatch</span> <span class="o">=</span>
</span><span class='line'>                <span class="n">resp</span><span class="o">.</span><span class="nc">Claims</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">exists</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="o">.</span><span class="nc">Type</span> <span class="o">=</span> <span class="s2">&quot;scope&quot;</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">.</span><span class="nc">Value</span> <span class="o">=</span> <span class="n">scope</span><span class="o">)</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">clientId</span> <span class="o">=</span>
</span><span class='line'>                <span class="n">resp</span><span class="o">.</span><span class="nc">Claims</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">tryFind</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="o">.</span><span class="nc">Type</span> <span class="o">=</span> <span class="s2">&quot;client_id&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">isAllowed</span> <span class="o">=</span>
</span><span class='line'>                <span class="n">resp</span><span class="o">.</span><span class="nc">IsActive</span> <span class="o">&amp;&amp;</span> <span class="n">scopeMatch</span> <span class="o">&amp;&amp;</span> <span class="n">clientId</span><span class="o">.</span><span class="nc">IsSome</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">isAllowed</span> <span class="k">then</span>
</span><span class='line'>                <span class="k">do</span><span class="o">!</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">set</span>
</span><span class='line'>                        <span class="nn">Request</span><span class="p">.</span><span class="n">clientId_</span>
</span><span class='line'>                        <span class="o">(</span><span class="n">clientId</span> <span class="o">|&gt;</span> <span class="nn">Option</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="o">.</span><span class="nc">Value</span><span class="o">))</span>
</span><span class='line'>                <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Request allowed to scope {scope}&quot;</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">add</span> <span class="n">scope</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">info</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Invalid token supplied&quot;</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">debug</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">isAllowed</span>
</span><span class='line'>    <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">memo</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">authMachine</span> <span class="n">apiName</span> <span class="n">apiSecret</span> <span class="n">scope</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freyaMachine</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">allowed</span> <span class="o">(</span><span class="n">isAllowedFor</span> <span class="n">apiName</span> <span class="n">apiSecret</span> <span class="n">scope</span><span class="o">)</span>
</span><span class='line'>        <span class="n">authorized</span> <span class="n">isAuthed</span>
</span><span class='line'>        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">]</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Apart from actually checking whether access is allowed, the other important thing we do here is add the calling clientId to the OWIN state. This means that we can make use of the clientId in any further pipeline steps (and in our logging).</p>

<p>So: we now have an <code>authMachine</code> which will check if you&#39;re allowed to do something&#8230; but doesn&#39;t actually do anything itself.</p>

<p>Time to switch back to <code>Api.fs</code> from the template project (making sure you&#39;ve added in both the <code>Logging</code> and <code>Auth</code> modules to the project).</p>

<p>Amend your <code>helloMachine</code> as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">helloMachine</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freyaMachine</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">including</span> <span class="o">(</span><span class="n">authMachine</span> <span class="s2">&quot;myApi&quot;</span> <span class="s2">&quot;apiSecret&quot;</span> <span class="s2">&quot;myApi.read&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">]</span>
</span><span class='line'>        <span class="n">handleOk</span> <span class="n">sayHello</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>and finally make sure that you remember to inject your logger (see the previous blog post):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">root</span> <span class="n">config</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Pipeline</span><span class="p">.</span><span class="n">compose</span>
</span><span class='line'>        <span class="o">(</span><span class="nn">Log</span><span class="p">.</span><span class="n">injectLogger</span> <span class="n">config</span><span class="o">)</span>
</span><span class='line'>        <span class="o">(</span><span class="n">freyaRouter</span> <span class="o">{</span> <span class="n">resource</span> <span class="s2">&quot;/hello{/name}&quot;</span> <span class="n">helloMachine</span> <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we should be able to spin everything up.</p>

<h3>Trying it all out</h3>

<p>We&#39;ll be using <a href="https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/">Client Credential</a> authentication for this example; this is a grant type used when a &quot;client&quot; is requesting access to a &quot;resource&quot; when no &quot;user&quot; is present. It&#39;s a standard grant type covered by the OAuth specification, and we&#39;re going to assume that we have an OAuth2 compliant authority available to issue allow introspection of tokens.</p>

<p>This type of grant is generally used for service to service communication - there&#39;s no user interaction at all, just an agreed pre-shared &quot;client secret&quot; (an API key).</p>

<p>First we need to get a token from our identity server using our clientId and clientSecret (this client must be configured in the identity server).</p>

<p>If you&#39;re using IdentityServer4 like I am, your request will look like this (curl format):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X POST <span class="se">\</span>
</span><span class='line'>  http://identity.mavnn.co.uk/connect/token <span class="se">\</span>
</span><span class='line'>  -H <span class="s1">&#39;cache-control: no-cache&#39;</span> <span class="se">\</span>
</span><span class='line'>  -H <span class="s1">&#39;content-type: application/x-www-form-urlencoded&#39;</span> <span class="se">\</span>
</span><span class='line'>  -d <span class="s1">&#39;grant_type=client_credentials&amp;scope=myApi.read&amp;client_id=myClient&amp;client_secret=mySecret&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>You&#39;ll get back a response including a token:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;access_token&quot;</span><span class="p">:</span> <span class="s2">&quot;eyJhbGciOi...&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;expires_in&quot;</span><span class="p">:</span> <span class="mi">3600</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;token_type&quot;</span><span class="p">:</span> <span class="s2">&quot;Bearer&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now when you call the secured API, you need to add the token to your headers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X GET <span class="se">\</span>
</span><span class='line'>  http://localhost/hello <span class="se">\</span>
</span><span class='line'>  -H <span class="s1">&#39;authorization: Bearer eyJhbGciOi...&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>If you don&#39;t supply the <code>authorization</code> header at all, you correctly get a <code>401</code> response; if the token is invalid or you (for example) try and use <code>Basic</code> authentication, you receive a <code>403</code>. Both return with an empty body; if you wanted to make the pages pretty you would need to add <code>handleUnauthorized</code> and <code>handleForbidden</code> to your <code>freyaMachine</code>. Here, for an API it&#39;s probably as meaningful to just leave the response empty. There isn&#39;t any further information to supply, after all.</p>

<p>And there it is: token bearer authentication set up for Freya.</p>

<p>Interested in how you can set up the whole environment in Kubernetes including IdentityServer, logging, metrics and all the other mod cons you could desire? There&#39;s still time to sign up for <a href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/">Building Solid Systems in F#</a> at the end of the month!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logging Freya]]></title>
    <link href="https://blog.mavnn.co.uk/logging-freya/"/>
    <updated>2017-12-08T15:43:57+00:00</updated>
    <id>https://blog.mavnn.co.uk/logging-freya</id>
    <content type="html"><![CDATA[<p>Eugene Tolmachev asked in a comment on a previous post <a href="http://disq.us/p/1oeml1a">how I handle dependency injection</a> with <a href="https://freya.io/">Freya</a>.</p>

<p>So&#8230; my first, slightly annoying answer is that I try not to. Mark Seeman has written about this in a <a href="http://blog.ploeh.dk/2017/01/27/from-dependency-injection-to-dependency-rejection/">great series of blog posts</a> which I won&#39;t try and repeat here.</p>

<p>Still, there are occasions where you want to quickly and easily do&#8230; something.. with a dependency making use of the context that being inside a Freya workflow provides. Let&#39;s quickly walk through how I inject a logger into a Freya workflow which &quot;knows&quot; about things like the request ID Kestrel has assigned to the current request.</p>

<p>I&#39;m going to use Serilog as an example below, but you could also use any other structured logging library (I like Logary, but there isn&#39;t a .NET Core release at time of writing).</p>

<!-- more -->

<p>I&#39;ll annotate the code inline to give you an idea what it&#39;s doing.</p>

<p>So; our first module is shared code which you&#39;ll probably want to reuse across all of your Freya services. Put it in a separate .fs file (it assumes Serilog has been taken as a dependency).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Logging</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">Aether</span><span class="p">.</span><span class="nc">Operators</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nc">Core</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nc">Optics</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Serilog</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Serilog</span><span class="p">.</span><span class="nc">Context</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Serilog</span><span class="p">.</span><span class="nc">Configuration</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We&#39;ll expand the Request module with two news Optics;</span>
</span><span class='line'><span class="c1">// one uses the &quot;RequestId&quot; constant defined by the Owin</span>
</span><span class='line'><span class="c1">// specification to extract the ID assigned to this request.</span>
</span><span class='line'><span class="c1">// The other we&#39;ll define in the &quot;serilog&quot; name space in the</span>
</span><span class='line'><span class="c1">// Freya context Dictionary (all owin keys start &quot;owin.&quot;)</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">RequireQualifiedAccess</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">module</span> <span class="nc">Request</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">requestId_</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">State</span><span class="p">.</span><span class="n">value_</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;</span> <span class="nn">Constants</span><span class="p">.</span><span class="nc">RequestId</span>
</span><span class='line'>        <span class="o">&gt;-&gt;</span> <span class="nn">Option</span><span class="p">.</span><span class="n">unsafe_</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// An optic for focussing on an ILogger in the Freya</span>
</span><span class='line'>    <span class="c1">// state. That&#39;s great, but how does the ILogger get</span>
</span><span class='line'>    <span class="c1">// there? Read on...</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">logger_</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">State</span><span class="p">.</span><span class="n">value_</span><span class="o">&lt;</span><span class="nc">ILogger</span><span class="o">&gt;</span> <span class="s2">&quot;serilog.logger&quot;</span>
</span><span class='line'>        <span class="o">&gt;-&gt;</span> <span class="nn">Option</span><span class="p">.</span><span class="n">unsafe_</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// As a structured logging library, you can attach an</span>
</span><span class='line'><span class="c1">// array of &quot;values&quot; to a Serilog event - we&#39;ll use this</span>
</span><span class='line'><span class="c1">// helper to give us a more &quot;F#ish&quot; API</span>
</span><span class='line'><span class="k">type</span> <span class="nc">SerilogContext</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Template</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nc">Values</span> <span class="o">:</span> <span class="n">obj</span> <span class="kt">list</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">RequireQualifiedAccess</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">module</span> <span class="nc">Log</span> <span class="o">=</span>
</span><span class='line'>    <span class="c1">// Extract the request ID once per request</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">private</span> <span class="n">rid</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="n">requestId_</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">memo</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Extract the ILogger once per request</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">private</span> <span class="n">ilogger</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="n">logger_</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">memo</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// A method to inject an ILogger *into* the Freya</span>
</span><span class='line'>    <span class="c1">// state</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">injectLogger</span> <span class="o">(</span><span class="n">config</span> <span class="o">:</span> <span class="nc">LoggerConfiguration</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">logger</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">config</span>
</span><span class='line'>                <span class="o">.</span><span class="nn">Enrich</span><span class="p">.</span><span class="nc">FromLogContext</span><span class="bp">()</span>
</span><span class='line'>                <span class="o">.</span><span class="nc">CreateLogger</span><span class="bp">()</span>
</span><span class='line'>            <span class="o">:&gt;</span> <span class="nc">ILogger</span>
</span><span class='line'>        <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">do</span><span class="o">!</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">set</span> <span class="nn">Request</span><span class="p">.</span><span class="n">logger_</span> <span class="n">logger</span>
</span><span class='line'>            <span class="k">return</span> <span class="nc">Next</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// From here on in is just an F# friendly wrapper</span>
</span><span class='line'>    <span class="c1">// around Serilog.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Start building up a new log message with a</span>
</span><span class='line'>    <span class="c1">// message template</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">message</span> <span class="n">template</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">{</span> <span class="nc">Template</span> <span class="o">=</span> <span class="n">template</span>
</span><span class='line'>          <span class="nc">Values</span> <span class="o">=</span> <span class="bp">[]</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add a value to the message context</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">add</span> <span class="n">value</span> <span class="n">context</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">context</span> <span class="k">with</span> <span class="nc">Values</span> <span class="o">=</span> <span class="o">(</span><span class="n">box</span> <span class="n">value</span><span class="o">)::</span><span class="n">context</span><span class="o">.</span><span class="nc">Values</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Function that knows how to send a message with all of the</span>
</span><span class='line'>    <span class="c1">// values correctly associated, and the requestId set</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">private</span> <span class="n">send</span> <span class="n">f</span> <span class="n">context</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">requestId</span> <span class="o">=</span> <span class="n">rid</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">ilogger</span>
</span><span class='line'>            <span class="n">using</span>
</span><span class='line'>                <span class="o">(</span><span class="nn">LogContext</span><span class="p">.</span><span class="nc">PushProperty</span><span class="o">(</span><span class="s2">&quot;RequestId&quot;</span><span class="o">,</span> <span class="n">requestId</span><span class="o">))</span>
</span><span class='line'>                <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>                     <span class="k">let</span> <span class="n">values</span> <span class="o">=</span>
</span><span class='line'>                         <span class="n">context</span><span class="o">.</span><span class="nc">Values</span>
</span><span class='line'>                         <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">toArray</span>
</span><span class='line'>                         <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">rev</span>
</span><span class='line'>                     <span class="n">f</span> <span class="n">logger</span> <span class="n">context</span><span class="o">.</span><span class="nc">Template</span> <span class="n">values</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The four standard log levels</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">debug</span> <span class="n">context</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">f</span> <span class="o">(</span><span class="n">logger</span> <span class="o">:</span> <span class="nc">ILogger</span><span class="o">)</span> <span class="n">template</span> <span class="o">(</span><span class="n">values</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="nc">Debug</span><span class="o">(</span><span class="n">template</span><span class="o">,</span> <span class="n">values</span><span class="o">)</span>
</span><span class='line'>        <span class="n">send</span> <span class="n">f</span> <span class="n">context</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">info</span> <span class="n">context</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">f</span> <span class="o">(</span><span class="n">logger</span> <span class="o">:</span> <span class="nc">ILogger</span><span class="o">)</span> <span class="n">template</span> <span class="o">(</span><span class="n">values</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="nc">Information</span><span class="o">(</span><span class="n">template</span><span class="o">,</span> <span class="n">values</span><span class="o">)</span>
</span><span class='line'>        <span class="n">send</span> <span class="n">f</span> <span class="n">context</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">warn</span> <span class="n">context</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">f</span> <span class="o">(</span><span class="n">logger</span> <span class="o">:</span> <span class="nc">ILogger</span><span class="o">)</span> <span class="n">template</span> <span class="o">(</span><span class="n">values</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="nc">Warning</span><span class="o">(</span><span class="n">template</span><span class="o">,</span> <span class="n">values</span><span class="o">)</span>
</span><span class='line'>        <span class="n">send</span> <span class="n">f</span> <span class="n">context</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">error</span> <span class="n">context</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">f</span> <span class="o">(</span><span class="n">logger</span> <span class="o">:</span> <span class="nc">ILogger</span><span class="o">)</span> <span class="n">template</span> <span class="o">(</span><span class="n">values</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="nc">Error</span><span class="o">(</span><span class="n">template</span><span class="o">,</span> <span class="n">values</span><span class="o">)</span>
</span><span class='line'>        <span class="n">send</span> <span class="n">f</span> <span class="n">context</span>
</span></code></pre></td></tr></table></div></figure>

<p>So that&#39;s great and all&#8230; but how and where do we actually call that <code>injectLogger</code> function?</p>

<p>Well, that goes in your application root where you build your final Freya app.</p>

<p>Mine normally ends up looking something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">root</span> <span class="n">logConfig</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">routes</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">freyaRouter</span> <span class="o">{</span> <span class="c">(* My resources here *)</span> <span class="o">}</span>
</span><span class='line'>    <span class="nn">Log</span><span class="p">.</span><span class="n">injectLogger</span> <span class="n">logConfig</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="o">(</span><span class="n">flip</span> <span class="nn">Pipeline</span><span class="p">.</span><span class="n">compose</span><span class="o">)</span> <span class="n">routes</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="o">(</span><span class="n">flip</span> <span class="nn">Pipeline</span><span class="p">.</span><span class="n">compose</span><span class="o">)</span> <span class="n">notFound</span>
</span></code></pre></td></tr></table></div></figure>

<p>Because <code>injectLogger</code> returns a Freya <code>Pipeline</code> type which <em>always</em> passes handling onto the next step in the pipeline, all that first step does is add in a newly initialized ILogger to the Freya state, and then passes things on down the chain as normal.</p>

<p>In your Freya code, logging looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">notFoundResponse</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">path</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="n">path_</span>
</span><span class='line'>        <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Why am I logging a GUID like this one {guid} on requests to {path}?&quot;</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">add</span> <span class="o">(</span><span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">add</span> <span class="n">path</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">info</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">representJson</span> <span class="s2">&quot;We couldn&#39;t find that&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Notice that <code>do!</code> is required for logging now, as our log methods have type <code>Freya&lt;unit&gt;</code>. This is what allows us to add the request specific context to our logs without explicitly having to append it ourselves every time.</p>

<p>I&#39;m not sure if this strictly answers Eugene&#39;s question, but I hope all you (potential) Freya users out there find it helpful regardless.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F# Through a Ruby Lens]]></title>
    <link href="https://blog.mavnn.co.uk/f-number-through-a-ruby-lens/"/>
    <updated>2017-12-07T21:00:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/f-number-through-a-ruby-lens</id>
    <content type="html"><![CDATA[<p>I spent last week delivering a five day deep dive into F# for a group of (mostly) Ruby developers in Munich, and wanted to capture some of my thoughts before I lost them as well as give people an idea of the types of things internal training can give you.</p>

<p>I won&#39;t be mentioning personal, company or exact team names here as I&#39;ve not been given explicit permission to do so; if the people who were on the course want to chime in I&#39;ll add their comments.</p>

<h2>The background</h2>

<p>Although mostly a Ruby on Rails shop, this company also relies on machine learning and expert systems to deliver some of its core services. The R&amp;D department (who build the models) settled on F# for development as a good balance between:</p>

<ul>
<li>familiarity of syntax (most have a background in Python and/or a ML language)</li>
<li>performance (Ruby had struggled here)</li>
<li>type safety</li>
<li>good &quot;production&quot; library support (logging, etc)</li>
</ul>

<p>Having examined the available options in depth, they decided on a standard stack for creating F# microservices of:</p>

<ul>
<li>Freya on Kestrel via .NET Core</li>
<li>Chiron for type safe JSON serialization/deserialization</li>
</ul>

<p>They wanted to investigate the use of Hephaestus as a rules engine (Freya uses Hephaestus to process HTTP requests). Many of their machine learning models only work with quite constrained ranges of input values, and Hephaestus as a rules engine looked an effective way of routing decisions to the &quot;correct&quot; machine learning algorithm for a particular input range. This in turn would allow for the models to stay reasonably simple and testable.</p>

<h2>The brief</h2>

<p>Having made these decisions, the company needed to bring the production services team up to speed on what R&amp;D were going to produce, especially because production had expressed an interest in having F# as an extra potential tool for their own projects.</p>

<p>My brief was to create 5 days of training, after which production needed to know enough about the F# libraries in use that they could work out what R&amp;D&#39;s code was doing, and enough about running .NET code in production to feel confident adding error handling, logging, metrics, tests and all the rest of the &quot;engineering&quot; side of development which is not about the programming language but the surrounding ecosystem.</p>

<h2>What we did</h2>

<p>I knew that I had a lot of ground to cover in just 5 days, so there was no way that the team was going to come away with all of the new knowledge absorbed and at their finger tips. At the same time, it couldn&#39;t be an overwhelming flood of information.</p>

<p>I decided to split the training time between a deep dive in understanding a few key areas in depth (Freya&#39;s design, optics and testing), and providing worked examples for the rest which could be referred back to when they became needed. Although I had relevant training material on several of the areas already, it was all tailored in this course to fit a single theme: over the course of a week, we were going to build a microservice that did just one thing, and we were going to test the heck out of it.</p>

<p>The timetable ended up looking like this:</p>

<ul>
<li>Monday AM: Introductions

<ul>
<li>high level microservice design</li>
<li>check everyone had all the software they needed installed</li>
</ul></li>
<li>Monday PM: Freya overview

<ul>
<li>install the template</li>
<li>modify the hello world service to accept POSTs with a name</li>
</ul></li>
<li>Tuesday AM: Optics

<ul>
<li>Chiron, Freya and Hephaestus all make heavy use of &quot;Optics&quot;</li>
<li>What are they?</li>
<li>Building our own</li>
</ul></li>
<li>Tuesday PM: Handling external data

<ul>
<li>Using Chiron for translation, version handling and API design (using our new found knowledge of optics)</li>
</ul></li>
<li>Wednesday AM: Start our actual microservice as a real project

<ul>
<li>how .NET solutions are (normally) laid out</li>
<li>using Paket for package management</li>
<li>add a test project with <a href="https://blog.mavnn.co.uk/going-down-the-property-based-testing-rabbit-hole/">this set of property based tests</a></li>
<li>write our first bit of domain logic to pass these tests, and plug it into the Freya API</li>
</ul></li>
<li>Wednesday PM: Start making our service production worthy

<ul>
<li>Spin up a docker &quot;infrastructure&quot; with Kibana and ElasticSearch</li>
<li>Adding logging to our service, plugged into Freya to automatically capture context like request IDs</li>
<li>Health endpoint</li>
<li>How to capture metrics</li>
</ul></li>
<li>Thursday AM: interesting bits &amp; answers to questions asked

<ul>
<li>How do computational expressions work?</li>
<li>How would I structure a functional UI?</li>
</ul></li>
<li>Thursday PM: flexible rules engines with Hephaestus

<ul>
<li>rebuilt the logic from Wednesday AM reusing the same property tests</li>
<li>looked at how we can splice Hephaestus rules graphs together</li>
</ul></li>
<li>Friday AM: BenchmarkDotNet

<ul>
<li>now we know it&#39;s correct - is it fast?</li>
<li>benchmarked our two implementations of the same logic together</li>
</ul></li>
<li>Friday PM: Using it all in real life

<ul>
<li>code review of pieces of the existing code base, looking at adding what we&#39;d learned</li>
</ul></li>
</ul>

<h2>How it went</h2>

<p>Overall the course seemed to go really well. At the end of it, the delegates were confident about the basics of building HTTP resources with Freya and Chiron, and happily building benchmarks and tests for their existing code base. For other areas (the boiler plate for plugging logging into Kestrel and Freya, for example) they understood the concepts and felt the course notes were sufficiently detailed they that could make use of them in other situations as needed. That was incredibly pleasing to hear from my point of view, as the course notes for these sessions are by far the most time consuming part of the process to create.</p>

<p>Although they missed some of the features of Ruby when writing F#, pattern matching with discriminated unions was a big hit and they liked the enforced discipline of Freya that required separating the logic of the various stages of handling an HTTP request - and how reusable that made components for handling concerns such as authentication.</p>

<p>Finally, all 3 of the core participants (there were other people around for certain parts of the course) came away saying that they&#39;d really enjoyed it and found it interesting throughout - so that&#39;s a big win right there!</p>

<h2>Can you do this for us?</h2>

<p>Yes; this particular course was tailored for the specific circumstances, but I&#39;ve also provided training on the more conceptual side (functional programming concepts) through to the gritty detail of DevOps (with both new and existing code bases).</p>

<p>We can also tailor delivery to match your availability; for this course I traveled to Munich to deliver it, and so it was delivered in a single 5 day unit. For other clients we can arrange regular shorter sessions or even remote workshops (group or individual) with tools such as Zoom.</p>

<p>And if you just want to turn up at a venue and get trained, check out <a href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/">Building Solid Systems in F#</a> happening 31st Jan-1st Feb 2018 in London.</p>

<p>Get in touch with us at <a href="us@mavnn.co.uk">us@mavnn.co.uk</a> if you have any ideas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent 2017 - Reading From the Firehose With Fable]]></title>
    <link href="https://blog.mavnn.co.uk/advent-2017-reading-from-the-firehose-with-fable/"/>
    <updated>2017-12-04T13:00:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/advent-2017-reading-from-the-firehose-with-fable</id>
    <content type="html"><![CDATA[<p>Each year, the F# programming community creates an advent calendar of blog posts, coordinated by Sergey Tihon <a href="https://sergeytihon.com/2017/10/22/f-advent-calendar-in-english-2017/">his blog</a>.</p>

<p>I really like the idea, and have taken part in <a href="https://blog.mavnn.co.uk/advent-2016/">2016</a>, <a href="https://blog.mavnn.co.uk/angels-from-the-realms-of-glory/">2015</a> &amp; <a href="https://blog.mavnn.co.uk/modelling-inheritance-with-inheritance/">2014</a>.</p>

<p>Below is this year&#39;s post.</p>

<h1>The plan: speed read Christmas</h1>

<p>So; you want to find out what Christmas is about, where it really came from&#8230; but you don&#39;t have much time.</p>

<p>The solution is obvious: take the famous bible passages that churches read every year, and speed read them!</p>

<p>Let&#39;s build an app to help us with that.</p>

<!-- more -->

<h2>The tools: Fable and Elmish</h2>

<p><a href="https://fable-elmish.github.io/elmish/">Fable</a> is a F# to JavaScript compiler, and <a href="https://fable-elmish.github.io/elmish/">Elmish</a> is a library for it designed to provide a Elm/Redux style workflow around it.</p>

<p>If you haven&#39;t used Elm or Redux before, the basic idea is that our application will be based around three things:</p>

<ul>
<li>A state type. This type will contain all of the information about the state of the application at any moment</li>
<li>A message type. This will be a discriminated union with a case for each type of &quot;message&quot; that can update the state of the application.</li>
<li>An update function. This is called every time a message is triggered; it takes the previous state and the message that has just arrived, and produces a new state.</li>
</ul>

<p>These three things are all we need to manage the state of the application, but then we end up needing one final concept: subscribers.</p>

<p>Subscribers can take the current state, but more importantly they are passed a &quot;dispatch&quot; function that allows them to dispatch messages to the applications message queue. This is how we deal with all inputs in an Elmish application, whether from a user or whether it&#39;s things like network requests completing and delivering information our application needs.</p>

<p>The main, most important subscriber is the &quot;view&quot; (i.e. how we&#39;re going to show things to the user). In our app, our view will be displayed via a Fable wrapper for React, creating a single page web application. The view is nearly always capable of also dispatching messages - this is how we model things like buttons the user can click on.</p>

<p>You can find more about this, with pretty diagrams, on the Fable Elmish website linked above.</p>

<h2>Getting started</h2>

<p>Let&#39;s start by setting up the application framework. We&#39;ll need dotnet core installed, and node with a reasonably recent version of yarn if you want to follow along at home.</p>

<p>Make yourself a new directory, and then on the command line you can run the following commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>dotnet new -i Fable.Template
</span></code></pre></td></tr></table></div></figure>

<p>Installs the Fable template for dotnet core.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>dotnet new fable
</span></code></pre></td></tr></table></div></figure>

<p>Creates a new Fable project in this directory, using the directory name for the project name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>yarn install
</span><span class='line'>dotnet restore
</span></code></pre></td></tr></table></div></figure>

<p>Download all the basic dependencies, both for dotnet and JavaScript.</p>

<h2>Adding our dependencies</h2>

<p>Apart from using Fable itself, we also want to make use of Elmish and it&#39;s React plugin.</p>

<p>Add these two libraries to paket.dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nuget Fable.Elmish.Browser
</span><span class='line'>nuget Fable.Elmish.React
</span></code></pre></td></tr></table></div></figure>

<p>Then in the src directory add them to our Fable project as well (in paket.references):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Fable.Elmish.Browser
</span><span class='line'>Fable.Elmish.React
</span></code></pre></td></tr></table></div></figure>

<p>Run a paket install to download and add the dotnet parts of the libraries to your project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mono .paket/paket.exe install
</span></code></pre></td></tr></table></div></figure>

<p>Then go into the &quot;src&quot; directory and add the JavaScript libraries that these Fable libraries depend on in the browser.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd </span>src
</span><span class='line'>yarn add react react-dom
</span><span class='line'>dotnet restore
</span></code></pre></td></tr></table></div></figure>

<h2>Setting up the webpage</h2>

<p>Let&#39;s adapt our HTML, in the &quot;public&quot; folder. The Fable template project assumes that we&#39;re going to be using a canvas. We&#39;re writing a text only application, so we&#39;ll just replace the canvas node with a standard <code>div</code> and mark it with an id which we&#39;ll use to tell react where to render the html our code will generate.</p>

<p>Your index.html should end up looking like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Simple Fable App<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&#39;Content-Type&#39;</span> <span class="na">content=</span><span class="s">&#39;text/html; charset=utf-8&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;shortcut icon&quot;</span> <span class="na">href=</span><span class="s">&quot;fable.ico&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span>  <span class="na">href=</span><span class="s">&quot;index.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdn.polyfill.io/v2/polyfill.js?features=es6,fetch&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;react-element&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bundle.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>We&#39;re going to speed read by displaying each word of the text really big in the middle of the screen one by one (so that you don&#39;t need to move your eyes to read).</p>

<p>Add in a <code>index.css</code> file with the following to set up styles for a large centered container and a class for displaying really large text.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">html</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-family</span><span class="o">:</span> <span class="k">sans-serif</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.container</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">50</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">50</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">translate</span><span class="p">(</span><span class="m">-50</span><span class="o">%,</span> <span class="m">-50</span><span class="o">%</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.theText</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">5em</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Writing &quot;JavaScript&quot;</h2>

<p>Fable compiles F# to JavaScript, and comes with tooling to watch your code and update it automatically.</p>

<p>Fire up yarn by going into your &quot;src&quot; directory and running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">dotnet</span> <span class="nt">fable</span> <span class="nt">yarn-start</span>
</span></code></pre></td></tr></table></div></figure>

<p>This will start the fable compiler and keep it running in the background.</p>

<p>We&#39;ve already decided we want to use Elmish with the React view. We&#39;re also going to be loading some external data so we&#39;ll want access to the Fetch API.</p>

<p>Let&#39;s open up all the namespaces which might be relevant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Advent2017</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">Core</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">JsInterop</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">Import</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">Browser</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">React</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">ReactDom</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nn">React</span><span class="p">.</span><span class="nc">Props</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">PowerPack</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">PowerPack</span><span class="p">.</span><span class="nc">Fetch</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Elmish</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Elmish</span><span class="p">.</span><span class="nc">React</span>
</span><span class='line'><span class="k">module</span> <span class="nc">R</span> <span class="o">=</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nc">React</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then we need a model; this holds all of the state of our app. The text to be speed read will be stored as an array of strings; we&#39;ll keep a <code>Max</code> field with the index of the last word to make our logic nice and explicit, the <code>Index</code> of the word currently being displayed, the number of ticks <code>SinceLast</code> time we updated the word and the current number of <code>TicksPerUpdate</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Model</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Text</span> <span class="o">:</span> <span class="kt">string</span> <span class="bp">[]</span>
</span><span class='line'>      <span class="nc">Max</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">Index</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">SinceLast</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">TicksPerUpdate</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>The <code>Msg</code> type represents all the ways that our app can be updated. The user can ask for the text to become faster, or slower; we can finish loading the text via a web request; and a <code>Tick</code> of our timer can go past.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Msg</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Faster</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Slower</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ReceivedText</span> <span class="k">of</span> <span class="kt">string</span> <span class="bp">[]</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Tick</span>
</span></code></pre></td></tr></table></div></figure>

<p>And the actual update logic takes one of those messages and a previous state, and gives us a new state:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">update</span> <span class="n">msg</span> <span class="n">model</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Tick</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">model</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">{</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">tpu</span><span class="o">;</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">sl</span> <span class="o">}</span> <span class="k">when</span> <span class="n">sl</span> <span class="o">&gt;=</span> <span class="n">tpu</span> <span class="o">&amp;&amp;</span> <span class="n">tpu</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
</span><span class='line'>                <span class="nc">Index</span> <span class="o">=</span> <span class="n">min</span> <span class="n">model</span><span class="o">.</span><span class="nc">Max</span> <span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>                <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">{</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">tpu</span><span class="o">;</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">sl</span> <span class="o">}</span> <span class="k">when</span> <span class="n">sl</span> <span class="o">&gt;=</span> <span class="o">(</span><span class="n">tpu</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">tpu</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
</span><span class='line'>                <span class="nc">Index</span> <span class="o">=</span> <span class="n">max</span> <span class="mi">0</span> <span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>                <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">SinceLast</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Faster</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Slower</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ReceivedText</span> <span class="n">text</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
</span><span class='line'>            <span class="nc">Text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'>            <span class="nc">Max</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">length</span> <span class="n">text</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>I was feeling a bit silly, so you can make the application go &quot;so fast it goes backwards.&quot; I mean, I&#39;ve had user requirements that make less sense than that before!</p>

<p>Having defined our types and abstract logic, we now need to write the actual functionality of our app, working our way up to a method which starts it off with an initial state.</p>

<p>First some low level grunge for downloading the text we want to read.</p>

<p>We&#39;ll need a url and an auth token for the API we&#39;re using (esv.org provide a really nice API by the way).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">requestUri</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">[</span> <span class="s2">&quot;https://api.esv.org/v3/passage/text/?q=John%201&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-passage-references=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-first-verse-numbers=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-verse-numbers=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-footnotes=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-footnote-body=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-passage-horizontal-lines=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-heading-horizontal-lines=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-headings=false&quot;</span>
</span><span class='line'>      <span class="o">]</span> <span class="o">|&gt;</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">authToken</span> <span class="o">=</span> <span class="s2">&quot;TEST&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>We&#39;ve split it up over multiple lines to make it readable as I&#39;m specifying a lot of options. Nearly all of the them boil down to removing optional metadata from the text (such as verse numbers and translation footnotes). For speed reading we just want the actual words. If you want to run this application a lot, you&#39;ll need to register your application on esv.org to get your own auth token.</p>

<p>The text it tries to download is John 1; it&#39;s one of the most famous Christmas texts, but also very poetic in it&#39;s presentation. I love it, but if you just want &quot;the Christmas story&quot; try a base url of <code>&quot;https://api.esv.org/v3/passage/text/?q=Luke%201-Luke%202:21&quot;</code> instead.</p>

<p>Now, some boiler plate to extract the passage from the JSON blob that esv.org send back to us. I&#39;m totally ignoring any errors that might occur in the request here, you probably don&#39;t want to do that in a real application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">toText</span> <span class="o">(</span><span class="n">res</span> <span class="o">:</span> <span class="nc">Response</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">res</span><span class="o">.</span><span class="n">text</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">Val</span><span class="o">|_|)</span> <span class="n">key</span> <span class="o">=</span> <span class="nn">Map</span><span class="p">.</span><span class="n">ofSeq</span> <span class="o">&gt;&gt;</span> <span class="o">(</span><span class="nn">Map</span><span class="p">.</span><span class="n">tryFind</span> <span class="n">key</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">extractPassage</span> <span class="o">(</span><span class="n">str</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">json</span> <span class="o">=</span> <span class="nn">Json</span><span class="p">.</span><span class="n">ofString</span> <span class="n">str</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">json</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Ok</span> <span class="o">(</span><span class="nn">Json</span><span class="p">.</span><span class="nc">Object</span> <span class="o">(</span><span class="nc">Val</span> <span class="s2">&quot;passages&quot;</span> <span class="o">(</span><span class="nn">Json</span><span class="p">.</span><span class="nc">Array</span> <span class="o">[|</span><span class="nn">Json</span><span class="p">.</span><span class="nc">String</span> <span class="n">first</span><span class="o">|])))</span> <span class="o">-&gt;</span> <span class="n">first</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="s2">&quot;Error&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">getText</span> <span class="n">dispatch</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">fetch</span> <span class="n">requestUri</span> <span class="o">[</span> <span class="n">requestHeaders</span> <span class="o">[</span> <span class="nc">Authorization</span> <span class="o">&lt;|</span> <span class="n">sprintf</span> <span class="s2">&quot;Token %s&quot;</span> <span class="n">authToken</span> <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">bind</span> <span class="n">toText</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">map</span> <span class="n">extractPassage</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">text</span> <span class="o">-&gt;</span> <span class="n">text</span><span class="o">.</span><span class="nc">Split</span><span class="o">(</span><span class="nn">Array</span><span class="p">.</span><span class="n">empty</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;,</span> <span class="nn">StringSplitOptions</span><span class="p">.</span><span class="nc">RemoveEmptyEntries</span><span class="o">)</span>
</span><span class='line'>                                 <span class="o">|&gt;</span> <span class="nc">ReceivedText</span>
</span><span class='line'>                                 <span class="o">|&gt;</span> <span class="n">dispatch</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>So <code>getText</code> will, when passed a <code>dispatch</code> function, call our Url, get the text of he body, throw away everything apart from the text of the passage we actually requested, and then split the passage on any whitespace.</p>

<p>We also want regular <code>ticks</code> coming through and prompting us to move onto the next word (or the previous if we&#39;re going backwards&#8230;).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">triggerUpdate</span> <span class="o">(</span><span class="n">dispatch</span> <span class="o">:</span> <span class="nc">Msg</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">window</span><span class="o">.</span><span class="n">setInterval</span><span class="o">((</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Tick</span><span class="o">),</span> <span class="mi">100</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next up, we need our view. The view will both receive new versions of the model as they are created, but will also receive a dispatch functions so it can feed new messages into our <code>update</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">view</span> <span class="n">model</span> <span class="n">dispatch</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">model</span><span class="o">.</span><span class="nc">Text</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">t</span> <span class="k">when</span> <span class="nn">Array</span><span class="p">.</span><span class="n">isEmpty</span> <span class="n">t</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span>
</span><span class='line'>            <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span> <span class="o">[</span><span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Loading...&quot;</span><span class="o">]</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="o">[</span> <span class="nc">ClassName</span> <span class="s2">&quot;container&quot;</span> <span class="o">]</span>
</span><span class='line'>            <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">button</span> <span class="o">[</span> <span class="nc">OnClick</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Faster</span><span class="o">)</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Faster&quot;</span> <span class="o">]</span>
</span><span class='line'>              <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="o">[</span> <span class="nc">ClassName</span> <span class="s2">&quot;theText&quot;</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="n">model</span><span class="o">.</span><span class="nn">Text</span><span class="p">.</span><span class="err">[</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span><span class="o">]</span>  <span class="o">]</span>
</span><span class='line'>              <span class="nn">R</span><span class="p">.</span><span class="n">button</span> <span class="o">[</span> <span class="nc">OnClick</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Slower</span><span class="o">)</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Slower&quot;</span> <span class="o">]</span>
</span><span class='line'>              <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="o">&lt;|</span> <span class="n">sprintf</span> <span class="s2">&quot;Ticks Per Update: %d&quot;</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">]</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>It displays a placeholder while we&#39;re loading data, and then buttons to speed up and slow down the speed reading rate.</p>

<p>Finally, we can fire up our application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">init</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Text</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">empty</span>
</span><span class='line'>      <span class="nc">Max</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nc">Index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nn">Program</span><span class="p">.</span><span class="n">mkSimple</span> <span class="n">init</span> <span class="n">update</span> <span class="o">(</span><span class="n">lazyView2</span> <span class="n">view</span><span class="o">)</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withSubscription</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">ofSub</span> <span class="n">getText</span><span class="o">)</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withSubscription</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">ofSub</span> <span class="n">triggerUpdate</span><span class="o">)</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withReact</span> <span class="s2">&quot;react-element&quot;</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>

<p>We just set our initial state and then tell react which element in our html we want to render our view in. Because we are registering <code>getText</code> and <code>triggerUpdate</code> as subscriptions, they will be passed a <code>dispatch</code> function and kicked off immediately, so the first thing our app will do is try and download the text.</p>

<p>Once the text is loaded, we&#39;ll start going forwards through the text, and are buttons for reading faster and slower will be displayed.</p>

<p>Let&#39;s see it in action:</p>

<p><img src="https://blog.mavnn.co.uk/images/speed_reading.gif" alt="The speed reader in action"></p>

<p>And there we have it - I hope you&#39;ll enjoy this brief trip into writing user interfaces in F#, and your <em>speedy</em> recap of one of the most famous readings from the Christmas story!</p>

<h2>Appendix: The full App.fs</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Advent2017</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">Core</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">JsInterop</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">Import</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">Browser</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">React</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">ReactDom</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nn">React</span><span class="p">.</span><span class="nc">Props</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">PowerPack</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">PowerPack</span><span class="p">.</span><span class="nc">Fetch</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Elmish</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Elmish</span><span class="p">.</span><span class="nc">React</span>
</span><span class='line'><span class="k">module</span> <span class="nc">R</span> <span class="o">=</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nc">React</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Model</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Text</span> <span class="o">:</span> <span class="kt">string</span> <span class="bp">[]</span>
</span><span class='line'>      <span class="nc">Max</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">Index</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">SinceLast</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">TicksPerUpdate</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Msg</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Faster</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Slower</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ReceivedText</span> <span class="k">of</span> <span class="kt">string</span> <span class="bp">[]</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Tick</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">update</span> <span class="n">msg</span> <span class="n">model</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Tick</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">model</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">{</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">tpu</span><span class="o">;</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">sl</span> <span class="o">}</span> <span class="k">when</span> <span class="n">sl</span> <span class="o">&gt;=</span> <span class="n">tpu</span> <span class="o">&amp;&amp;</span> <span class="n">tpu</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
</span><span class='line'>                <span class="nc">Index</span> <span class="o">=</span> <span class="n">min</span> <span class="n">model</span><span class="o">.</span><span class="nc">Max</span> <span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>                <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">{</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">tpu</span><span class="o">;</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">sl</span> <span class="o">}</span> <span class="k">when</span> <span class="n">sl</span> <span class="o">&gt;=</span> <span class="o">(</span><span class="n">tpu</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">tpu</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
</span><span class='line'>                <span class="nc">Index</span> <span class="o">=</span> <span class="n">max</span> <span class="mi">0</span> <span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>                <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">SinceLast</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Faster</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Slower</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ReceivedText</span> <span class="n">text</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
</span><span class='line'>            <span class="nc">Text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'>            <span class="nc">Max</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">length</span> <span class="n">text</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">requestUri</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">[</span> <span class="s2">&quot;https://api.esv.org/v3/passage/text/?q=John%201&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-passage-references=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-first-verse-numbers=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-verse-numbers=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-footnotes=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-footnote-body=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-passage-horizontal-lines=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-heading-horizontal-lines=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-headings=false&quot;</span>
</span><span class='line'>      <span class="o">]</span> <span class="o">|&gt;</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">authToken</span> <span class="o">=</span> <span class="s2">&quot;TEST&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">toText</span> <span class="o">(</span><span class="n">res</span> <span class="o">:</span> <span class="nc">Response</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">res</span><span class="o">.</span><span class="n">text</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">Val</span><span class="o">|_|)</span> <span class="n">key</span> <span class="o">=</span> <span class="nn">Map</span><span class="p">.</span><span class="n">ofSeq</span> <span class="o">&gt;&gt;</span> <span class="o">(</span><span class="nn">Map</span><span class="p">.</span><span class="n">tryFind</span> <span class="n">key</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">extractPassage</span> <span class="o">(</span><span class="n">str</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">json</span> <span class="o">=</span> <span class="nn">Json</span><span class="p">.</span><span class="n">ofString</span> <span class="n">str</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">json</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Ok</span> <span class="o">(</span><span class="nn">Json</span><span class="p">.</span><span class="nc">Object</span> <span class="o">(</span><span class="nc">Val</span> <span class="s2">&quot;passages&quot;</span> <span class="o">(</span><span class="nn">Json</span><span class="p">.</span><span class="nc">Array</span> <span class="o">[|</span><span class="nn">Json</span><span class="p">.</span><span class="nc">String</span> <span class="n">first</span><span class="o">|])))</span> <span class="o">-&gt;</span> <span class="n">first</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="s2">&quot;Error&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">getText</span> <span class="n">dispatch</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">fetch</span> <span class="n">requestUri</span> <span class="o">[</span> <span class="n">requestHeaders</span> <span class="o">[</span> <span class="nc">Authorization</span> <span class="o">&lt;|</span> <span class="n">sprintf</span> <span class="s2">&quot;Token %s&quot;</span> <span class="n">authToken</span> <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">bind</span> <span class="n">toText</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">map</span> <span class="n">extractPassage</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">text</span> <span class="o">-&gt;</span> <span class="n">text</span><span class="o">.</span><span class="nc">Split</span><span class="o">(</span><span class="nn">Array</span><span class="p">.</span><span class="n">empty</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;,</span> <span class="nn">StringSplitOptions</span><span class="p">.</span><span class="nc">RemoveEmptyEntries</span><span class="o">)</span>
</span><span class='line'>                                 <span class="o">|&gt;</span> <span class="nc">ReceivedText</span>
</span><span class='line'>                                 <span class="o">|&gt;</span> <span class="n">dispatch</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">triggerUpdate</span> <span class="o">(</span><span class="n">dispatch</span> <span class="o">:</span> <span class="nc">Msg</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">window</span><span class="o">.</span><span class="n">setInterval</span><span class="o">((</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Tick</span><span class="o">),</span> <span class="mi">100</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">view</span> <span class="n">model</span> <span class="n">dispatch</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">model</span><span class="o">.</span><span class="nc">Text</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">t</span> <span class="k">when</span> <span class="nn">Array</span><span class="p">.</span><span class="n">isEmpty</span> <span class="n">t</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span>
</span><span class='line'>            <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span> <span class="o">[</span><span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Loading...&quot;</span><span class="o">]</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="o">[</span> <span class="nc">ClassName</span> <span class="s2">&quot;container&quot;</span> <span class="o">]</span>
</span><span class='line'>            <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">button</span> <span class="o">[</span> <span class="nc">OnClick</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Faster</span><span class="o">)</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Faster&quot;</span> <span class="o">]</span>
</span><span class='line'>              <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="o">[</span> <span class="nc">ClassName</span> <span class="s2">&quot;theText&quot;</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="n">model</span><span class="o">.</span><span class="nn">Text</span><span class="p">.</span><span class="err">[</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span><span class="o">]</span>  <span class="o">]</span>
</span><span class='line'>              <span class="nn">R</span><span class="p">.</span><span class="n">button</span> <span class="o">[</span> <span class="nc">OnClick</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Slower</span><span class="o">)</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Slower&quot;</span> <span class="o">]</span>
</span><span class='line'>              <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="o">&lt;|</span> <span class="n">sprintf</span> <span class="s2">&quot;Ticks Per Update: %d&quot;</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">init</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Text</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">empty</span>
</span><span class='line'>      <span class="nc">Max</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nc">Index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nn">Program</span><span class="p">.</span><span class="n">mkSimple</span> <span class="n">init</span> <span class="n">update</span> <span class="o">(</span><span class="n">lazyView2</span> <span class="n">view</span><span class="o">)</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withSubscription</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">ofSub</span> <span class="n">getText</span><span class="o">)</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withSubscription</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">ofSub</span> <span class="n">triggerUpdate</span><span class="o">)</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withReact</span> <span class="s2">&quot;react-element&quot;</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going Down the Property Based Testing Rabbit Hole]]></title>
    <link href="https://blog.mavnn.co.uk/going-down-the-property-based-testing-rabbit-hole/"/>
    <updated>2017-11-10T15:28:47+00:00</updated>
    <id>https://blog.mavnn.co.uk/going-down-the-property-based-testing-rabbit-hole</id>
    <content type="html"><![CDATA[<p>Imagine, if you will, a card game.</p>

<p>(Don&#39;t worry, there&#39;s code later. Lots of code.)</p>

<p>It&#39;s not a complex card game; it&#39;s a quick and fun game designed to represent over the top martial arts combat in the style of Hong Kong cinema or a beat &#39;em up game.</p>

<p>Each player has a deck of cards which represent their martial art; different arts are differently weighted in their card distribution. These cards come in four main types:</p>

<h3>1 Normal cards</h3>

<p>A &quot;normal&quot; card comes in one of four suits:</p>

<ul>
<li>Punch</li>
<li>Kick</li>
<li>Throw</li>
<li>Defend</li>
</ul>

<p>They also carry a numerical value between 1 and 10, which represents both how &quot;fast&quot; they are and (except for defend cards) how much damage they do. A Defend card can never determine damage.</p>

<h3>2 Special Attack cards</h3>

<p>The fireballs, whirling hurricane kicks and mighty mega throws of the game. A special attack card lists two suits: one to use for the speed of the final attack, and one for the damage. This allows you to play 3 cards together to create an attack which is fast yet damaging.</p>

<h3>3 Combo Attack cards</h3>

<p>A flurry of blows! Combo cards also list two suits: one for speed, and one for the &quot;follow up&quot; flurry. This allows you to play 3 cards together, one of which determines the speed of the attack while the other adds to the total damage. For example, if you play a Punch/Kick Combo with a Punch 3 and a Kick 7 you end up with a speed 3, damage 10 attack.</p>

<h3>4 Knockdown cards</h3>

<p>You can combine a knockdown card with any other valid play to create an action that will &quot;knockdown&quot; your opponent.</p>

<h2>The code</h2>

<p>(This is an <em>example</em> of property based testing; if you need an <em>introduction</em> first, check out <a href="https://blog.mavnn.co.uk/fscheck-breaking-your-code-in-new-and-exciting-ways/">Breaking Your Code in New and Exciting Ways</a> or the <a href="https://blog.mavnn.co.uk/sdd-conf-2015/">the video version</a>)</p>

<p>There are of course other rules to the game; but let&#39;s assume for a moment we&#39;re coding this game up in F#. We&#39;ve defined a nice domain model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">BlackBelt</span><span class="p">.</span><span class="nn">Domain</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Suit</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Punch</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Kick</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Throw</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Defend</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">NormalCard</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Suit</span> <span class="o">:</span> <span class="nc">Suit</span>
</span><span class='line'>      <span class="nc">Value</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ComboCard</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">SpeedSuit</span> <span class="o">:</span> <span class="nc">Suit</span>
</span><span class='line'>      <span class="nc">FollowUpSuit</span> <span class="o">:</span> <span class="nc">Suit</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">SpecialAttackCard</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">SpeedSuit</span> <span class="o">:</span> <span class="nc">Suit</span>
</span><span class='line'>      <span class="nc">DamageSuit</span> <span class="o">:</span> <span class="nc">Suit</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Card</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Normal</span> <span class="k">of</span> <span class="nc">NormalCard</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Combo</span> <span class="k">of</span> <span class="nc">ComboCard</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Special</span> <span class="k">of</span> <span class="nc">SpecialAttackCard</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Knockdown</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Action</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Speed</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">Damage</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">Suit</span> <span class="o">:</span> <span class="nc">Suit</span>
</span><span class='line'>      <span class="nc">Knockdown</span> <span class="o">:</span> <span class="kt">bool</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">PlayerId</span> <span class="o">=</span> <span class="nc">PlayerId</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Player</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Name</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nc">Id</span> <span class="o">:</span> <span class="nc">PlayerId</span>
</span><span class='line'>      <span class="nc">Deck</span> <span class="o">:</span> <span class="nc">Card</span> <span class="kt">list</span>
</span><span class='line'>      <span class="nc">Stance</span> <span class="o">:</span> <span class="nc">Card</span> <span class="kt">list</span>
</span><span class='line'>      <span class="nc">Health</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">WaitingFor</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Attack</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Counter</span> <span class="k">of</span> <span class="nc">PlayerId</span> <span class="o">*</span> <span class="nc">Action</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">StanceCard</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Game</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">GameId</span> <span class="o">:</span> <span class="nc">Guid</span>
</span><span class='line'>      <span class="nc">Player1</span> <span class="o">:</span> <span class="nc">Player</span>
</span><span class='line'>      <span class="nc">Player2</span> <span class="o">:</span> <span class="nc">Player</span>
</span><span class='line'>      <span class="nc">TurnOf</span> <span class="o">:</span> <span class="nc">PlayerId</span>
</span><span class='line'>      <span class="nc">WaitingFor</span> <span class="o">:</span> <span class="nc">WaitingFor</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And now we want to write a function that takes the rules for playing cards above, and turns a <code>Card list</code> into an <code>Action option</code> (telling you if the list is a valid play, and what action will result if it is).</p>

<p>This function is pretty critical to the overall game play, and may well also be used for validating input in the UI so getting it right will make a big difference to the experience of playing the game.</p>

<p>So we&#39;re going to property test our implementation in every which way we can think of&#8230;</p>

<p>First step: make yourself a placeholder version of the function to reference in your tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">BlackBelt</span><span class="p">.</span><span class="nn">Domain</span><span class="p">.</span><span class="nc">Logic</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">toAction</span> <span class="n">cards</span> <span class="o">=</span> <span class="nc">None</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, let&#39;s start adding properties. All of the rest goes in a single file, but I&#39;m going to split it up with some commentary as we go.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">BlackBelt</span><span class="p">.</span><span class="nn">Tests</span><span class="p">.</span><span class="nc">Logic</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">Expecto</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Expecto</span><span class="p">.</span><span class="nc">ExpectoFsCheck</span>
</span><span class='line'><span class="k">open</span> <span class="nc">FsCheck</span>
</span><span class='line'><span class="k">open</span> <span class="nn">BlackBelt</span><span class="p">.</span><span class="nn">Domain</span><span class="p">.</span><span class="nc">Logic</span>
</span><span class='line'><span class="k">open</span> <span class="nn">BlackBelt</span><span class="p">.</span><span class="nn">Domain</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">allSuitsBut</span> <span class="n">suit</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">[</span><span class="nc">Punch</span><span class="o">;</span><span class="nc">Kick</span><span class="o">;</span><span class="nc">Throw</span><span class="o">;</span><span class="nc">Defend</span><span class="o">]</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="o">((&lt;&gt;)</span> <span class="n">suit</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">elements</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We need a custom generator here as only some</span>
</span><span class='line'><span class="c1">// values are valid</span>
</span><span class='line'><span class="k">type</span> <span class="nc">DomainArbs</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">NormalCard</span><span class="bp">()</span> <span class="o">:</span> <span class="nc">Arbitrary</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">suit</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">Suit</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">value</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>                <span class="o">{</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">suit</span>
</span><span class='line'>                  <span class="nc">Value</span> <span class="o">=</span> <span class="n">value</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">fromGen</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">SpecialAttackCard</span><span class="bp">()</span> <span class="o">:</span> <span class="nc">Arbitrary</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">damageSuit</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="nc">Defend</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">speedSuit</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">Suit</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>                <span class="o">{</span> <span class="nc">SpeedSuit</span> <span class="o">=</span> <span class="n">speedSuit</span>
</span><span class='line'>                  <span class="nc">DamageSuit</span> <span class="o">=</span> <span class="n">damageSuit</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">fromGen</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">ComboCard</span><span class="bp">()</span> <span class="o">:</span> <span class="nc">Arbitrary</span><span class="o">&lt;</span><span class="nc">ComboCard</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">speedSuit</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="nc">Defend</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">followupSuit</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="nc">Defend</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>                <span class="o">{</span> <span class="nc">SpeedSuit</span> <span class="o">=</span> <span class="n">speedSuit</span>
</span><span class='line'>                  <span class="nc">FollowUpSuit</span> <span class="o">=</span> <span class="n">followupSuit</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">fromGen</span>
</span></code></pre></td></tr></table></div></figure>

<p>We&#39;ll start off with a few general purpose bits for generating random types in our domain. I haven&#39;t gone the whole hog in making illegal states unrepresentable here, so we need to constrain a few things (like the fact that cards only have values from 1 to 10, and that you can&#39;t combo into a defend card for extra damage).</p>

<p>Now: let&#39;s start generating potential plays of cards. Our properties will be interested in whether a particular play is valid or invalid, and we will want to know what the resulting <code>Action</code> should be for valid plays.</p>

<p>So we define a union to create instances of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">GeneratedAction</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ValidAction</span> <span class="k">of</span> <span class="nc">Card</span> <span class="kt">list</span> <span class="o">*</span> <span class="nc">Action</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">InvalidAction</span> <span class="k">of</span> <span class="nc">Card</span> <span class="kt">list</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now let&#39;s add all of the valid actions we can think of.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeNormalAction</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">cards</span> <span class="o">=</span> <span class="o">[</span><span class="nc">Normal</span> <span class="n">normal</span><span class="o">]</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">{</span> <span class="nc">Speed</span> <span class="o">=</span> <span class="n">normal</span><span class="o">.</span><span class="nc">Value</span>
</span><span class='line'>              <span class="nc">Damage</span> <span class="o">=</span>
</span><span class='line'>                  <span class="k">if</span> <span class="n">normal</span><span class="o">.</span><span class="nc">Suit</span> <span class="o">=</span> <span class="nc">Defend</span> <span class="k">then</span>
</span><span class='line'>                      <span class="mi">0</span>
</span><span class='line'>                  <span class="k">else</span>
</span><span class='line'>                      <span class="n">normal</span><span class="o">.</span><span class="nc">Value</span>
</span><span class='line'>              <span class="nc">Suit</span> <span class="o">=</span> <span class="n">normal</span><span class="o">.</span><span class="nc">Suit</span>
</span><span class='line'>              <span class="nc">Knockdown</span> <span class="o">=</span> <span class="bp">false</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cards</span><span class="o">,</span> <span class="n">action</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>So; a normal card on it&#39;s own is always a valid play, the only thing we need to watch out for is that a Defend card causes no damage.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeComboAttack</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">comboCard</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">ComboCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal1</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal2</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">cards</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">[</span> <span class="nc">Normal</span> <span class="o">{</span> <span class="n">normal1</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">comboCard</span><span class="o">.</span><span class="nc">SpeedSuit</span> <span class="o">}</span>
</span><span class='line'>              <span class="nc">Normal</span> <span class="o">{</span> <span class="n">normal2</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">comboCard</span><span class="o">.</span><span class="nc">FollowUpSuit</span> <span class="o">}</span>
</span><span class='line'>              <span class="nc">Combo</span> <span class="n">comboCard</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">attack</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">{</span> <span class="nc">Speed</span> <span class="o">=</span>
</span><span class='line'>                  <span class="k">if</span> <span class="n">comboCard</span><span class="o">.</span><span class="nc">SpeedSuit</span> <span class="o">=</span> <span class="n">comboCard</span><span class="o">.</span><span class="nc">FollowUpSuit</span> <span class="k">then</span>
</span><span class='line'>                      <span class="n">min</span> <span class="n">normal1</span><span class="o">.</span><span class="nc">Value</span> <span class="n">normal2</span><span class="o">.</span><span class="nc">Value</span>
</span><span class='line'>                  <span class="k">else</span>
</span><span class='line'>                      <span class="n">normal1</span><span class="o">.</span><span class="nc">Value</span>
</span><span class='line'>              <span class="nc">Damage</span> <span class="o">=</span> <span class="n">normal1</span><span class="o">.</span><span class="nc">Value</span> <span class="o">+</span> <span class="n">normal2</span><span class="o">.</span><span class="nc">Value</span>
</span><span class='line'>              <span class="nc">Suit</span> <span class="o">=</span> <span class="n">comboCard</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>              <span class="nc">Knockdown</span> <span class="o">=</span> <span class="bp">false</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cards</span><span class="o">,</span> <span class="n">attack</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here we&#39;ll generate the combo card and two other cards, and then we&#39;ll override the suit of the two normal cards to ensure they&#39;re legal to be played with the combo card.</p>

<p>There&#39;s a quirk here (which in reality I noticed after trying to run these tests). If the two suits are the same, the fast card should determine the speed regardless of &quot;order&quot;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeSpecialAttack</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">specialCard</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">damageValue</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">speedValue</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">damageValue</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">cards</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">[</span> <span class="nc">Normal</span> <span class="o">{</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">SpeedSuit</span><span class="o">;</span> <span class="nc">Value</span> <span class="o">=</span> <span class="n">speedValue</span> <span class="o">}</span>
</span><span class='line'>              <span class="nc">Normal</span> <span class="o">{</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">DamageSuit</span><span class="o">;</span> <span class="nc">Value</span> <span class="o">=</span> <span class="n">damageValue</span> <span class="o">}</span>
</span><span class='line'>              <span class="nc">Special</span> <span class="n">specialCard</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">attack</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">{</span> <span class="nc">Speed</span> <span class="o">=</span> <span class="n">speedValue</span>
</span><span class='line'>              <span class="nc">Damage</span> <span class="o">=</span> <span class="n">damageValue</span>
</span><span class='line'>              <span class="nc">Suit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>              <span class="nc">Knockdown</span> <span class="o">=</span> <span class="bp">false</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cards</span><span class="o">,</span> <span class="n">attack</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Special attack cards have an additional constraint: playing a high value speed card with a low value damage card would actually <em>disadvantage</em> the player, and so is not considered a valid play.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeKnockdownAttack</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">cards</span><span class="o">,</span> <span class="n">baseAttack</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">Gen</span><span class="p">.</span><span class="n">oneof</span> <span class="o">[</span> <span class="n">makeNormalAction</span>
</span><span class='line'>                        <span class="n">makeComboAttack</span>
</span><span class='line'>                        <span class="n">makeSpecialAttack</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">cards</span> <span class="o">=</span> <span class="nc">Knockdown</span><span class="o">::</span><span class="n">cards</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">attack</span> <span class="o">=</span> <span class="o">{</span> <span class="n">baseAttack</span> <span class="k">with</span> <span class="nc">Knockdown</span> <span class="o">=</span> <span class="bp">true</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cards</span><span class="o">,</span> <span class="n">attack</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here we make use of the generators we&#39;ve constructed above to create a Knockdown action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeValidAction</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">validAction</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">Gen</span><span class="p">.</span><span class="n">oneof</span> <span class="o">[</span> <span class="n">makeNormalAction</span>
</span><span class='line'>                        <span class="n">makeComboAttack</span>
</span><span class='line'>                        <span class="n">makeSpecialAttack</span>
</span><span class='line'>                        <span class="n">makeKnockdownAttack</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="nc">ValidAction</span> <span class="n">validAction</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Which allows us to write a <code>ValidAction</code> generator.</p>

<p>Now, more interesting is trying to generate plays which are not valid. We&#39;re not trusting the UI to do any validation here, so let&#39;s just come up with everything we can think of&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">multipleNormal</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">let</span><span class="o">!</span> <span class="n">first</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">let</span><span class="o">!</span> <span class="n">normals</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">nonEmptyListOf</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">first</span><span class="o">::</span><span class="n">normals</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="nc">Normal</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>More than one normal card with out another card to combine them is out.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">incompleteComboOrSpecial</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">special</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">Gen</span><span class="p">.</span><span class="n">oneof</span> <span class="o">[</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">map</span> <span class="nc">Combo</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">ComboCard</span><span class="o">&gt;</span>
</span><span class='line'>                        <span class="nn">Gen</span><span class="p">.</span><span class="n">map</span> <span class="nc">Special</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">other</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">[</span><span class="n">special</span><span class="o">;</span> <span class="n">other</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>A combo or special card always requires precisely two normal cards to be a valid play; so here, we only generate one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">onlyKnockdown</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Gen</span><span class="p">.</span><span class="n">constant</span> <span class="o">[</span><span class="nc">Knockdown</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>A combo card can only be played as part of an otherwise valid play, and isn&#39;t allowed on it&#39;s own.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">unmatchedSpeedCombo</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">combo</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">ComboCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal1</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal2</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched1</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">combo</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched2</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">combo</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n1</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal1</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched1</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n2</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal2</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched2</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">[</span><span class="nc">Combo</span> <span class="n">combo</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n1</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n2</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">unmatchedSpeedSpecial</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">special</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal1</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal2</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched1</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">special</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched2</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">special</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n1</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal1</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched1</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n2</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal2</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched2</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">[</span><span class="nc">Special</span> <span class="n">special</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n1</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n2</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">unmatchedDamageCombo</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">combo</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">ComboCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal1</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal2</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched1</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">combo</span><span class="o">.</span><span class="nc">FollowUpSuit</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched2</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">combo</span><span class="o">.</span><span class="nc">FollowUpSuit</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n1</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal1</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched1</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n2</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal2</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched2</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">[</span><span class="nc">Combo</span> <span class="n">combo</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n1</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n2</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">unmatchedDamageSpecial</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">special</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal1</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal2</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched1</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">special</span><span class="o">.</span><span class="nc">DamageSuit</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched2</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">special</span><span class="o">.</span><span class="nc">DamageSuit</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n1</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal1</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched1</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n2</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal2</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched2</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">[</span><span class="nc">Special</span> <span class="n">special</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n1</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n2</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>There&#39;s lots of ways to combine three cards which are not valid combos or specials. Here we use are <code>allSuitsBut</code> helper function to always play just the wrong cards compared to what&#39;s needed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">swappedSpecial</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">specialCard</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">SpeedSuit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">DamageSuit</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">[</span><span class="nc">Special</span> <span class="n">specialCard</span><span class="o">]</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">speedValue</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">damageValue</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">speedValue</span><span class="o">)</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">cards</span> <span class="o">=</span>
</span><span class='line'>                <span class="o">[</span> <span class="nc">Normal</span> <span class="o">{</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">SpeedSuit</span><span class="o">;</span> <span class="nc">Value</span> <span class="o">=</span> <span class="n">speedValue</span> <span class="o">}</span>
</span><span class='line'>                  <span class="nc">Normal</span> <span class="o">{</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">DamageSuit</span><span class="o">;</span> <span class="nc">Value</span> <span class="o">=</span> <span class="n">damageValue</span> <span class="o">}</span>
</span><span class='line'>                  <span class="nc">Special</span> <span class="n">specialCard</span> <span class="o">]</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">cards</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And here we create special attacks which are slower than they are damaging. If the speed and damage suit are the same, the cards could be used either way around to create a valid action, so instead we just return the Special card on it&#39;s own without companions to form a different invalid play.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeInvalidAction</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">invalidAction</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">Gen</span><span class="p">.</span><span class="n">oneof</span> <span class="o">[</span> <span class="n">multipleNormal</span>
</span><span class='line'>                        <span class="n">incompleteComboOrSpecial</span>
</span><span class='line'>                        <span class="n">onlyKnockdown</span>
</span><span class='line'>                        <span class="n">unmatchedSpeedCombo</span>
</span><span class='line'>                        <span class="n">unmatchedSpeedSpecial</span>
</span><span class='line'>                        <span class="n">unmatchedDamageCombo</span>
</span><span class='line'>                        <span class="n">unmatchedDamageSpecial</span>
</span><span class='line'>                        <span class="n">swappedSpecial</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="nc">InvalidAction</span> <span class="n">invalidAction</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>There&#39;s more that could be added here, but I decided that was enough to keep me going for the moment and so added my invalid action generator here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">ActionArbs</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">GeneratedAction</span><span class="bp">()</span> <span class="o">:</span> <span class="nc">Arbitrary</span><span class="o">&lt;</span><span class="nc">GeneratedAction</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span><span class="o">!</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">oneof</span> <span class="o">[</span>
</span><span class='line'>                        <span class="n">makeValidAction</span>
</span><span class='line'>                        <span class="n">makeInvalidAction</span>
</span><span class='line'>                    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">fromGen</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">actionConfig</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nn">FsCheckConfig</span><span class="p">.</span><span class="n">defaultConfig</span> <span class="k">with</span>
</span><span class='line'>        <span class="n">arbitrary</span> <span class="o">=</span> <span class="o">[</span><span class="n">typeof</span><span class="o">&lt;</span><span class="nc">DomainArbs</span><span class="o">&gt;</span>
</span><span class='line'>                     <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">ActionArbs</span><span class="o">&gt;]</span> <span class="o">}</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Tests</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="n">toAction</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">testPropertyWithConfig</span> <span class="n">actionConfig</span> <span class="s2">&quot;toAction function&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="n">action</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">action</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">ValidAction</span> <span class="o">(</span><span class="n">cards</span><span class="o">,</span> <span class="n">action</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(</span><span class="n">toAction</span> <span class="n">cards</span><span class="o">)</span> <span class="o">(</span><span class="nc">Some</span> <span class="n">action</span><span class="o">)</span> <span class="s2">&quot;Is an action&quot;</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">InvalidAction</span> <span class="n">cards</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">isNone</span> <span class="o">(</span><span class="n">toAction</span> <span class="n">cards</span><span class="o">)</span> <span class="s2">&quot;Is not an attack&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Finally, I wired up the generators and defined the single property this function should obey: it should return the correct action for a valid play, or <code>None</code> if the play is erroneous.</p>

<h2>The wrap</h2>

<p>Hopefully this is a useful example for those of you using property based tests of how you can encode business logic into them: although this looks like a lot of code, creating even single examples of each of these cases would have been nearly as long and far less effective in testing.</p>

<p>It does tend to lead to a rather iterative approach to development, where as your code starts working for some of the use cases, you begin to notice errors in or missing cases you need to generate, which helps you find more edges cases in your code and round the circle you go again.</p>

<p>If you want, you&#39;re very welcome to take this code to use as a coding Kata - but be warned, it&#39;s not as simple a challenge as you might expect from the few paragraphs at the top of the post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All Saints' Day Sale]]></title>
    <link href="https://blog.mavnn.co.uk/all-saints-day-sale/"/>
    <updated>2017-11-01T09:01:10+00:00</updated>
    <id>https://blog.mavnn.co.uk/all-saints-day-sale</id>
    <content type="html"><![CDATA[<blockquote>
<p>TL;DR: 10% off <a href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/">Building Solid Systems in F#</a> until 7th November 2017</p>
</blockquote>

<p>Lots of people these days seem to like giving Halloween sales, but historically and theologically, Halloween is really just the precursor to the real celebration: <a href="https://en.wikipedia.org/wiki/All_Saints%27_Day">All Saints&#39; Day</a>.</p>

<p>So in the interest of getting the details right, we&#39;re having an All Saints&#39; Day sale, starting today for 7 days. It&#39;s already live, get your 10% off <a href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/">your tickets</a> now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RouteMaster : Master Your Messaging Routes]]></title>
    <link href="https://blog.mavnn.co.uk/routemaster-master-your-messaging-routes/"/>
    <updated>2017-10-27T16:25:53+01:00</updated>
    <id>https://blog.mavnn.co.uk/routemaster-master-your-messaging-routes</id>
    <content type="html"><![CDATA[<p>I&#39;m very pleased to announce the release of an initial alpha of <a href="https://github.com/RouteMasterIntegration/RouteMaster">RouteMaster</a>.</p>

<p>What is it? Well, I&#39;ll let the README speak for itself:</p>

<blockquote>
<p>RouteMaster is a .NET library for writing stateful workflows on top of a message bus. It exists to make the implementation of long running business processes easy in event driven systems.</p>
</blockquote>

<p>There is also example code in the repository so you can see what things are starting to look like.</p>

<p>For those of you following along, this will sound awfully familiar; that&#39;s because RouteMaster is the outcome of my decision to rebuild a <a href="https://blog.mavnn.co.uk/process-management-in-easynetq/">Process Manager</a> for EasyNetQ. The first cut of that was imaginatively called &quot;EasyNetQ.ProcessManager&quot;, but I decided to rename it for three main reasons:</p>

<ul>
<li>On re-reading <a href="http://www.enterpriseintegrationpatterns.com/">Enterprise Integration Patterns</a>, it occurred to me that RouteMaster was an enabler for many of the other patterns as well as the &quot;Process Manager&quot;</li>
<li>The message bus RouteMaster uses is provided as an interface; the main dll has no dependency on EasyNetQ at all</li>
<li>The previous EasyNetQ.ProcessManager is still available as a Nuget package supplied by my previous employer, and they have both the moral and legal rights to the package given I wrote the original on their time</li>
</ul>

<p>A pre-emptive few FAQs:</p>

<h3>Is this ready to use?</h3>

<p>No, not yet. I&#39;m out of time I can afford to spend on it right now, get in touch if you can/want to fund future development.</p>

<p>If you want to play, the code as provided does run and all of the process tests pass.</p>

<h3>Urgh! All the examples are F#!?</h3>

<p>Yes, but there is a C# friendly API in the works. See the first question :)</p>

<h3>What infrastructure do I need to run this?</h3>

<p>At the moment, I&#39;m using EasyNetQ (over RabbitMQ) and PostgreSQL (via Marten) for transport and storage respectively.</p>

<h3>What about things like NServiceBus and MassTransit?</h3>

<p>In some ways they fall in a similar space to RouteMaster, but with a different philosophy. Just as EasyNetQ is a focused library that supplies only part of the functionality you&#39;d find in these larger solutions, RouteMaster is designed to work with your chosen transport abstraction not replace it.</p>

<h2>Ask not what your RouteMaster can do for you, but what you can do for your RouteMaster!</h2>

<p>I&#39;d really like feedback, ideas, use cases and suggestions - leave comments here or ping an issue onto the repository. If you&#39;re feeling really brave and can try and actually experiment with it, but at the moment I&#39;m mostly hoping for concrete use cases and, well, funding.</p>

<p>Quite a few people over the years have hit my website searching for an EasyNetQ process manager, and others have asked me if it&#39;s still available. I&#39;d like to hear from as many of you as possible to build the tightest, simplest solution which will do the job.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[POSTing to Freya]]></title>
    <link href="https://blog.mavnn.co.uk/posting-to-freya/"/>
    <updated>2017-10-25T15:52:57+01:00</updated>
    <id>https://blog.mavnn.co.uk/posting-to-freya</id>
    <content type="html"><![CDATA[<p>I&#39;ve written about how nice Freya is as a library, but documentation is still a little light on the ground.</p>

<p>So here&#39;s a minimal implementation of a &quot;microservice&quot; Freya API, starting from which dotnet commands to run to install the Freya template, through to a running web service.</p>

<p>Make sure you have an up to date .NET Core SDK installed, and grab yourself the handy dandy Freya template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dotnet new -i <span class="s2">&quot;Freya.Template::*&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then create yourself a directory and go into it. The following command will set up a brand new Freya project using kestrel as the underlying webserver, and Hopac (rather than F# Async) for concurrency. Alternatively, you can leave both the options off and you&#39;ll get Freya running on Suave with standard Async.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dotnet new freya --framework kestrel --concurrency hopac
</span></code></pre></td></tr></table></div></figure>

<p>Your project should run at this point; <code>dotnet run</code> will spin up a webserver on port 5000 which will give a 404 at the root and text responses on /hello and /hello/name paths.</p>

<p>Api.fs is where all the magic of configuring Freya happens - KestrelInterop.fs contains boilerplate for making sure Routing information passes correctly between Kestrel and Freya, and Program.fs just starts Kestrel with our Freya API as an OWIN app.</p>

<h3>Adding JSON</h3>

<p>So, this is great and all, but we&#39;re building a microservice aren&#39;t we? That normally means JSON (or at least something more structured than plain text!).</p>

<p>Let&#39;s change things up so that as well as supplying the name to greet in the route, we can POST JSON with a name field to the /hello end point.</p>

<p>To respond in JSON, we need a Freya <code>Represent</code> record. We&#39;re sending a result with a fixed structure, so we don&#39;t need a serialization library or anything, we&#39;ll just construct the JSON by hand. Stick this near the top of Api.fs:</p>

<!-- more -->

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Text</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Text</span><span class="p">.</span><span class="nc">RegularExpressions</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">representGreeting</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">before</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;{ </span><span class="se">\&quot;</span><span class="s2">greeting</span><span class="se">\&quot;</span><span class="s2">: </span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">after</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2"> }&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">extremeSanifier</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">RegularExpressions</span><span class="p">.</span><span class="nc">Regex</span><span class="o">(</span><span class="s2">&quot;[^a-z0-9 ]&quot;</span><span class="o">,</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">Compiled</span> <span class="o">|||</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">IgnoreCase</span><span class="o">)</span>
</span><span class='line'>    <span class="k">fun</span> <span class="n">name</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">safeNameBytes</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">extremeSanifier</span><span class="o">.</span><span class="nc">Replace</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span>
</span><span class='line'>        <span class="o">{</span> <span class="nc">Description</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">{</span> <span class="nc">Charset</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">Charset</span><span class="p">.</span><span class="nc">Utf8</span>
</span><span class='line'>              <span class="nc">Encodings</span> <span class="o">=</span> <span class="nc">None</span>
</span><span class='line'>              <span class="nc">MediaType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span>
</span><span class='line'>              <span class="nc">Languages</span> <span class="o">=</span> <span class="nc">None</span> <span class="o">}</span>
</span><span class='line'>          <span class="nc">Data</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">concat</span> <span class="o">[</span><span class="n">before</span><span class="o">;</span><span class="n">safeNameBytes</span><span class="o">;</span><span class="n">after</span><span class="o">]</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>So here we&#39;re defining an HTTP representation of a response, including media type and other important information.</p>

<p>Aside: why do we return a lambda at the end rather than making representGreeting itself a function? That&#39;s so that we don&#39;t want to rebuild the two byte arrays and the regex every time we call the function.</p>

<p>We also need to be able to read incoming JSON. Well, all we want is a string so lets just check that there&#39;s an &#39;&quot;&#39; at the beginning and end&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">grabString</span> <span class="o">(</span><span class="n">bodyStream</span> <span class="o">:</span> <span class="o">#</span><span class="nc">Stream</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">use</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamReader</span><span class="o">(</span><span class="n">bodyStream</span><span class="o">)</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">reader</span><span class="o">.</span><span class="nc">ReadToEnd</span><span class="bp">()</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">str</span> <span class="k">when</span> <span class="n">str</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="o">.[</span><span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">&lt;|</span> <span class="n">str</span><span class="o">.</span><span class="nc">Substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nc">None</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we can start hooking up the actual root that we want. We need to make some additions to <code>helloMachine</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">helloMachine</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freyaMachine</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// methods [GET; HEAD; OPTIONS]</span>
</span><span class='line'>        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">;</span> <span class="nc">POST</span><span class="o">]</span>
</span><span class='line'>        <span class="n">acceptableMediaTypes</span> <span class="o">[</span><span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span><span class="o">]</span>
</span><span class='line'>        <span class="n">handleOk</span> <span class="n">sayHello</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Magically our endpoint now knows not only that we accept POSTs, but it will end the correct error code if the media type of the POST is not set to JSON.</p>

<p>We also need to update <code>sayHello</code> and <code>name</code>; we&#39;ll extract the method of the request and choose logic for working out the name and creating the response respectively.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">name_</span> <span class="o">=</span> <span class="nn">Route</span><span class="p">.</span><span class="n">atom_</span> <span class="s2">&quot;name&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="n">method_</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">method_</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">name</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">nameO</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">body_</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">map</span> <span class="n">grabString</span>
</span><span class='line'>            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">name_</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">match</span> <span class="n">nameO</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">name</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="s2">&quot;World&quot;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">representResponse</span> <span class="n">greeting</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">representGreeting</span> <span class="n">greeting</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nn">Represent</span><span class="p">.</span><span class="n">text</span> <span class="n">greeting</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And that&#39;s everything we should need. Firing up <a href="https://www.getpostman.com/">PostMan</a> we can find out that posting an empty body gets a 500 (we should probably handle that, looks like the request stream can be null), firing in a string with no media type header gets back a &quot;415 Unsupported Media Type&quot; (did you know that off hand?) and a POST with a correct body (i.e., starts and ends with a &#39;&quot;&#39;) gets us back:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span> <span class="nt">&quot;greeting&quot;</span><span class="p">:</span> <span class="s2">&quot;Hello michael&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>So there you have it. Adding a POST endpoint to Freya.</p>

<h3>Appendix</h3>

<p>Here is the complete Api.fs for you to follow along, with open statements moved to the top of the file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Api</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Text</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Text</span><span class="p">.</span><span class="nc">RegularExpressions</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nc">Core</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Machines</span><span class="p">.</span><span class="nc">Http</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Types</span><span class="p">.</span><span class="nc">Http</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Routers</span><span class="p">.</span><span class="nn">Uri</span><span class="p">.</span><span class="nc">Template</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">representGreeting</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">before</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;{ </span><span class="se">\&quot;</span><span class="s2">greeting</span><span class="se">\&quot;</span><span class="s2">: </span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">after</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2"> }&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">extremeSanifier</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">RegularExpressions</span><span class="p">.</span><span class="nc">Regex</span><span class="o">(</span><span class="s2">&quot;[^a-z0-9 ]&quot;</span><span class="o">,</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">Compiled</span> <span class="o">|||</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">IgnoreCase</span><span class="o">)</span>
</span><span class='line'>    <span class="k">fun</span> <span class="n">name</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">safeNameBytes</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">extremeSanifier</span><span class="o">.</span><span class="nc">Replace</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span>
</span><span class='line'>        <span class="o">{</span> <span class="nc">Description</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">{</span> <span class="nc">Charset</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">Charset</span><span class="p">.</span><span class="nc">Utf8</span>
</span><span class='line'>              <span class="nc">Encodings</span> <span class="o">=</span> <span class="nc">None</span>
</span><span class='line'>              <span class="nc">MediaType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span>
</span><span class='line'>              <span class="nc">Languages</span> <span class="o">=</span> <span class="nc">None</span> <span class="o">}</span>
</span><span class='line'>          <span class="nc">Data</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">concat</span> <span class="o">[</span><span class="n">before</span><span class="o">;</span><span class="n">safeNameBytes</span><span class="o">;</span><span class="n">after</span><span class="o">]</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">grabString</span> <span class="o">(</span><span class="n">bodyStream</span> <span class="o">:</span> <span class="o">#</span><span class="nc">Stream</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">use</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamReader</span><span class="o">(</span><span class="n">bodyStream</span><span class="o">)</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">reader</span><span class="o">.</span><span class="nc">ReadToEnd</span><span class="bp">()</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">str</span> <span class="k">when</span> <span class="n">str</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="o">.[</span><span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">&lt;|</span> <span class="n">str</span><span class="o">.</span><span class="nc">Substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nc">None</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">name_</span> <span class="o">=</span> <span class="nn">Route</span><span class="p">.</span><span class="n">atom_</span> <span class="s2">&quot;name&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="n">method_</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">method_</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">name</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">nameO</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">body_</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">map</span> <span class="n">grabString</span>
</span><span class='line'>            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">name_</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">match</span> <span class="n">nameO</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">name</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="s2">&quot;World&quot;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">representResponse</span> <span class="n">greeting</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">representGreeting</span> <span class="n">greeting</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nn">Represent</span><span class="p">.</span><span class="n">text</span> <span class="n">greeting</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">sayHello</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span><span class="o">!</span> <span class="n">representResponse</span> <span class="o">(</span><span class="n">sprintf</span> <span class="s2">&quot;Hello, %s!&quot;</span> <span class="n">name</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">helloMachine</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freyaMachine</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// methods [GET; HEAD; OPTIONS]</span>
</span><span class='line'>        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">;</span> <span class="nc">POST</span><span class="o">]</span>
</span><span class='line'>        <span class="n">acceptableMediaTypes</span> <span class="o">[</span><span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span><span class="o">]</span>
</span><span class='line'>        <span class="n">handleOk</span> <span class="n">sayHello</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">root</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freyaRouter</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">resource</span> <span class="s2">&quot;/hello{/name}&quot;</span> <span class="n">helloMachine</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Workflow Alpha]]></title>
    <link href="https://blog.mavnn.co.uk/workflow-alpha/"/>
    <updated>2017-10-09T21:33:36+01:00</updated>
    <id>https://blog.mavnn.co.uk/workflow-alpha</id>
    <content type="html"><![CDATA[<p><img src="https://blog.mavnn.co.uk/images/WorkflowAlpha.png" alt="Log of workflow test running"></p>

<p><strong>It&#39;s alive!</strong> The process manager code I&#39;ve been reconstructing (see <a href="https://blog.mavnn.co.uk/process-management-in-easynetq/">Intro</a> and the <a href="https://blog.mavnn.co.uk/an-in-memory-message-bus-in-100-lines-or-less/">in memory test bus</a>) is slowly starting to take some shape.</p>

<p>As you can see, it comes with nice (<a href="https://github.com/logary/logary#using-logary-in-a-library">no dependency</a>) logging out of the box and it is async all the way down to the underlying transport.</p>

<p>This is still at the underlying plumbing phase in many ways: the code to construct a workflow like this is currently a boilerplate covered ugly mess - but it&#39;s all boilerplate which has been deliberately designed to allow powerful APIs to be built over the top.</p>

<p>Next up: a nice sleek API for creating &quot;pipeline&quot; workflows more easily. Then the real fun starts - pleasant to use abstractions over fork/join semantics&#8230;</p>

<p><em>Interested in seeing faster progress on this project? Drop <a href="mailto://us@mavnn.co.uk">us@mavnn.co.uk</a> a line to talk sponsorship.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kubernetes for the Masses]]></title>
    <link href="https://blog.mavnn.co.uk/kubernetes-for-the-masses/"/>
    <updated>2017-09-29T11:54:37+01:00</updated>
    <id>https://blog.mavnn.co.uk/kubernetes-for-the-masses</id>
    <content type="html"><![CDATA[<p>As part of <a href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/">a two day training course</a> I&#39;m going to be putting together a bunch of material on how to run .NET Core code on kubernetes.</p>

<p>It will include things like:</p>

<ul>
<li>Setting up CI/automated builds</li>
<li>Configuring ingress points (including ssl via self updating Let&#39;s Encrypt certs)</li>
<li>Monitoring and metrics of the running system</li>
</ul>

<p>If you&#39;d have any interest in this material as a separate module (which wouldn&#39;t be F# specific), do get in touch. I&#39;d reckon it will become a one day course, either in house or hosted.</p>

<p>As an aside, once the material has been battle tested a few times, I will also be putting together a &quot;base&quot; deployment repository - although it will have fair warning that Kubernetes is really still the kind of thing that requires you to understand it before you start pushing things onto it, not just cutting and pasting someone else&#39;s config.</p>

<p>After all, you&#39;re the one who&#39;s going to get the phone call at 03:00&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming in the Wild]]></title>
    <link href="https://blog.mavnn.co.uk/functional-programming-in-the-wild/"/>
    <updated>2017-09-18T11:49:58+01:00</updated>
    <id>https://blog.mavnn.co.uk/functional-programming-in-the-wild</id>
    <content type="html"><![CDATA[<p>Last week was the annual <a href="https://skillsmatter.com/conferences/8268-progressive-dot-net-2017">Progressive .Net</a> conference, hosted at <a href="https://skillsmatter.com">SkillsMatter</a>.</p>

<p>It was a bit of a strange conference for me; I was invited to speak, and very much enjoyed meeting up with everyone but I also had a bunch of other work I needed to get done. That means that unlike some other conferences I won&#39;t be able to give much speaker feedback!</p>

<p>However, there were a few sessions I managed to pay some attention to and some thoughts about my own that I&#39;d like to record - so here goes!</p>

<!-- more -->

<h2><a href="https://skillsmatter.com/skillscasts/10458-pilot-decision-management#video">Pilot Decision Making for Beginners</a></h2>

<p><a href="https://twitter.com/CliffordAgius">Clifford Agnius</a> is an airline pilot and .net developer who gave a really nice talk on how to make decisions - whether you need to make them <strong>right now</strong> (hint: practice in advance) or whether you need to decide on a plan.</p>

<p>It was tempting to just nod along and go &quot;oh, that&#39;s just common sense&quot; - until it strikes you that codified, pre-agreed common sense is pretty spectacularly valuable.</p>

<h2><a href="https://skillsmatter.com/skillscasts/10670-have-i-got-dot-net-for-you">Have I got .NET for You</a></h2>

<p>&quot;Have I got .NET for You&quot; was fun, and <a href="https://twitter.com/dylanbeattie">Dylan Beattie</a> is a very silly boy.</p>

<h2>A Practical Introduction to Functional Programming with F#</h2>

<p>This was me; no video I&#39;m afraid, as it was a 3 hour practical session.</p>

<p>I was really pleased by the turn out for this - I&#39;m guessing there were 30-40 people there (anyone who actually counted, feel free to correct me!).</p>

<p><img src="https://blog.mavnn.co.uk/images/crowd_view.jpg" alt="View of the room filling up"></p>

<p>I had to make a rather quick swerve in the presentation of the topic right at the beginning, as I had been expecting a group most of whom had tried F# and wanted to learn more about functional programming - while I actually got a group where only 3 people had even looked at F# who wanted to learn about functional programming!</p>

<p>After walking people through the first couple of exercises to get the basic syntax down, people seemed to be off and flying (SkillsMatter has a good coffee supply):</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">At <a href="https://twitter.com/hashtag/prognet?src=hash">#prognet</a> trying to turn coffee into F# with <a href="https://twitter.com/mavnn">@mavnn</a> think I need more coffee&#8230;</p>&mdash; Clifford Agius (@CliffordAgius) <a href="https://twitter.com/CliffordAgius/status/908645096622522368">September 15, 2017</a></blockquote>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">Mind being blown learning f# from <a href="https://twitter.com/mavnn">@mavnn</a> at <a href="https://twitter.com/hashtag/ProgNET?src=hash">#ProgNET</a>. May need more coffee!</p>&mdash; Steve Gordon (@stevejgordon) <a href="https://twitter.com/stevejgordon/status/908635653675585536">September 15, 2017</a></blockquote>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">Awesome F# tutorial by <a href="https://twitter.com/mavnn">@mavnn</a> <a href="https://twitter.com/hashtag/ProgNet?src=hash">#ProgNet</a></p>&mdash; Salman Iqbal (@SoulmanIqbal) <a href="https://twitter.com/SoulmanIqbal/status/908638281201537024">September 15, 2017</a></blockquote>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">Intro to <a href="https://twitter.com/hashtag/fsharp?src=hash">#fsharp</a> at <a href="https://twitter.com/hashtag/ProgNET?src=hash">#ProgNET</a> &#8230;I&#39;m getting &quot;loads of stuff is inferred for free&quot;..very nice! <a href="https://t.co/t7eoivAeU2">pic.twitter.com/t7eoivAeU2</a></p>&mdash; Abbie Davis (@abbie_davis_000) <a href="https://twitter.com/abbie_davis_000/status/908628569001267200">September 15, 2017</a></blockquote>

<script async src="https://blog.mavnn.co.uk//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Mind being blown is a good thing, right?</p>

<p>All in all, much fun was had by all (I think).</p>

<h2>The Web that Never Was</h2>

<p>Dylan&#39;s final key note was a alternative history of the web, a combination of (real) good ideas that were dropped due to the vagaries of history and application of 20-20 hindsight.</p>

<p>Apart from being entertaining, it was also thought provoking for anyone designing software today.</p>

<p>Also: Dylan is still a very silly boy.</p>

<p>At time of writing the recording of this hadn&#39;t been published, but I suspect it will appear shortly.</p>

<h2>Wrap!</h2>

<p>All in all, I very much enjoyed ProgNet and I&#39;m hoping to be involved again next year - apart from the sessions there was also plentiful coffee, chats, and opportunities to catch up with interesting people.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Solid Systems in F#]]></title>
    <link href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/"/>
    <updated>2017-09-13T14:19:21+01:00</updated>
    <id>https://blog.mavnn.co.uk/building-solid-systems-in-f-number</id>
    <content type="html"><![CDATA[<blockquote>
<p>Update: The original venue sold out - more tickets are available for the 8th - 9th March 2018 on <a href="https://www.eventbrite.co.uk/e/building-solid-systems-in-f-tickets-42416619250">EventBrite</a>!</p>
</blockquote>

<p>We are running another course, and I&#39;m officially stoked! Read on for the details&#8230;</p>

<h2>Building Solid Systems in F#</h2>

<p>Writing code is only the first part of putting software into production - to run, maintain and scale your product, you&#39;ll need to understand and design the overall system.</p>

<p>This 2 day course will take you through best practice in both writing an F# based, distributed system and running it in production - including sensible inter-operation with components written in other languages.</p>

<p>To fit this into 2 days, we&#39;ll need to make some opinionated decisions (such as using F#!), but many of the ideas and concepts will be transferable. </p>

<h2>We&#39;ll cover:</h2>

<ul class="org-ul">
<li>Writing reliable code using F#&#8217;s unique language features</li>
<li>Learn how to apply SOLID (like) principles in a functional style</li>
<li>How to instrument distributed services</li>
<li>Continuous Improvement: 
<ul class="org-ul">
<li>Unit testing</li>
<li>Performance measurement</li>
</ul></li>
<li>Running distributed systems in development</li>
<li>Deploying distributed systems to production</li>
<li>Good practice in dependency management and code organization</li>
</ul>

<h2>You&#39;ll come away with:</h2>

<p>
A git repository of your completed work, which will include:
</p>

<ul class="org-ul">
<li>Nicely instrumented, benchmarked and unit tested F# services</li>
<li>A scripted, deterministic deployment process for the overall distributed system</li>
<li>Real time centralized logging, metrics and health feedback from the system, whether running on the dev machine or in production</li>
<li>Zero down time continuous deployment for the overall system</li>
</ul>

<h2>Prerequisites:</h2>

<p>
You need to have:
</p>

<ul class="org-ul">
<li>a basic knowledge of F# syntax</li>
<li>a reasonable background knowledge of software development</li>
</ul>

<p>
You need to bring laptop with:
</p>

<ul class="org-ul">
<li>a relatively recent F# development environment (you&#8217;ll need to be able to build dotnet core 2.0 apps)</li>
<li>Minikube and kubectl installed</li>
</ul>

<p>
We&#8217;ll also ask you to pre-download some code and containers in advance so that we can hit the ground running on the first day; we&#8217;ll pass you the details of that before the event. 
</p>

<h2>Is this a replacement for Level Up Your F#?</h2>

<p>No; <a href="https://blog.mavnn.co.uk/level-up-your-f-number-skills/">Level Up Your F#</a> focussed on the details of the F# language, this course is focussed on building systems. We will be running Level Up Your F# again in the future.</p>

<h2>Where/when will it happen?</h2>

<p><del>At the <a href="https://wellcomecollection.org/">Wellcome Collection</a></del> Sold out!</p>

<p><a href="https://www.theskiff.org/">The Skiff</a>, in Brighton on the 8th and 9th Manch 2018</p>

<h2>Where can I get tickets?</h2>

<p><a href="https://www.eventbrite.co.uk/e/building-solid-systems-in-f-tickets-42416619250">EventBrite</a> or email <a href="mailto:us@mavnn.co.uk">us@mavnn.co.uk</a> and we&#39;ll sort you out an invoice.</p>

<h2>What have other people said about your courses?</h2>

<p>Hassan Ezzahir, Lead developer (Contractor) at BNP Paribas</p>

<blockquote>
<p>I’ve been trying to learn F# for several years now and got almost all
the existing books on the subjects.</p>

<p>Yet, I felt there was a gap between my good understanding of the
language and actually applying it on bigger “real” projects.</p>

<p>Michael’s great training skills has enabled me to quickly practice some
advanced topics I was less familiar with.</p>

<p>With my newly acquired knowledge, I’m confident I will be able achieve
some great (and fun) developments with F#</p>
</blockquote>

<p>Alexander Battisti, Senior Software Developer (Machine Learning) at Freeletics GmbH</p>

<blockquote>
<p>I found &quot;Level Up your F#&quot; a good course teaching advanced topics in
F# that are commonly ignored or glossed over when you are on your own,
but are useful enough so you shouldn&#39;t ignore them. The exercises were
difficult in a good way and engaging. I definitely recommend the
course for anybody after they took their first serious steps in
learning F#.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[System.Console Is Why We Can't Have Nice Things]]></title>
    <link href="https://blog.mavnn.co.uk/system-dot-console-is-why-we-cant-have-nice-things/"/>
    <updated>2017-08-31T16:30:18+01:00</updated>
    <id>https://blog.mavnn.co.uk/system-dot-console-is-why-we-cant-have-nice-things</id>
    <content type="html"><![CDATA[<p>In writing a simple tutorial for this years <a href="https://skillsmatter.com/conferences/8268-progressive-dot-net-2017#program">Progressive .Net</a> I thought I&#39;d use the Console to allow some nice visual feedback with requiring a dependency.</p>

<p>TD;LR: <code>System.Console</code> (at least on dotnet core 2.0) is not as threadsafe as you&#39;d hope, and means that writing any simple cross platform console UI is nearly impossible.</p>

<!-- more -->

<p>So, I started with a draw method like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Coord</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">X</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">Y</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">draw</span> <span class="n">changes</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">changes</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">coord</span><span class="o">,</span> <span class="n">item</span> <span class="o">:</span> <span class="kt">char</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nn">Console</span><span class="p">.</span><span class="nc">CursorLeft</span> <span class="o">&lt;-</span> <span class="n">coord</span><span class="o">.</span><span class="nc">X</span>
</span><span class='line'>        <span class="nn">Console</span><span class="p">.</span><span class="nc">CursorTop</span> <span class="o">&lt;-</span> <span class="n">coord</span><span class="o">.</span><span class="nc">Y</span>
</span><span class='line'>        <span class="nn">Console</span><span class="p">.</span><span class="nc">Write</span> <span class="n">item</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>This method just takes a sequence of coordinates and characters to write in them, and then moves the cursor around the console to write your inputs. And it works fine.</p>

<p>Then I wanted a sequence of keys pressed by the user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Directions</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Up</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Down</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Left</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Right</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Stay</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">inputUnfolder</span> <span class="n">prev</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">read</span> <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">ReadKey</span><span class="o">(</span><span class="bp">true</span><span class="o">)</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">read</span><span class="o">.</span><span class="nc">Key</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">UpArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="nc">Up</span><span class="o">,</span> <span class="nc">Up</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">DownArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="nc">Down</span><span class="o">,</span> <span class="nc">Down</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">LeftArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="nc">Left</span><span class="o">,</span> <span class="nc">Down</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">RightArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="nc">Right</span><span class="o">,</span> <span class="nc">Right</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">(</span><span class="n">prev</span><span class="o">,</span> <span class="n">prev</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">keysPressed</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Seq</span><span class="p">.</span><span class="n">unfold</span> <span class="n">inputUnfolder</span> <span class="nc">Stay</span>
</span></code></pre></td></tr></table></div></figure>

<p>Again, this works fine. And as long as you take one item from the input stream, do all your drawing and then take the next item everything continues to be good.</p>

<p>But&#8230; this story doesn&#39;t end here. What I was really after was accepting key presses on one thread, and drawing on another.</p>

<p>First problem: it turns out that calling <code>Console.ReadKey</code> on one thread, and setting <code>Console.CursorTop/Left</code> on another causes a deadlock.</p>

<p>A bit of research led to the <code>Console.KeyAvailable</code> property, and rewriting <code>inputFolder</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">inputUnfolder</span> <span class="n">prev</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">KeyAvailable</span> <span class="k">then</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">read</span> <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">ReadKey</span><span class="o">(</span><span class="bp">true</span><span class="o">)</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">read</span><span class="o">.</span><span class="nc">Key</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">UpArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="o">(</span><span class="nc">Up</span><span class="o">,</span> <span class="nc">Up</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">DownArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="o">(</span><span class="nc">Down</span><span class="o">,</span> <span class="nc">Down</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">LeftArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="o">(</span><span class="nc">Left</span><span class="o">,</span> <span class="nc">Down</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">RightArrow</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="o">(</span><span class="nc">Right</span><span class="o">,</span> <span class="nc">Right</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="o">(</span><span class="n">prev</span><span class="o">,</span> <span class="n">prev</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nn">Async</span><span class="p">.</span><span class="nc">Sleep</span> <span class="mi">1</span> <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">RunSynchronously</span>
</span><span class='line'>        <span class="n">inputUnfolder</span> <span class="n">prev</span>
</span></code></pre></td></tr></table></div></figure>

<p>Yeah! Spin loop. That looks totally healthy.</p>

<p>Unfortunately, we now have the issue that because <code>Console.ReadKey</code> is not actively blocking at the moment the key is pressed, the input key is printed directly to the console. There doesn&#39;t appear to be anyway of blocking this.</p>

<p>The real pity about all of this is not that it&#39;s just wasted a couple of hours of my life writing a &quot;simple&quot; tutorial (although that&#39;s pretty annoying!); it&#39;s the fact that with dotnet core being genuinely cross platform, I was hoping to use it to write a few nice console UI based applications. It turns out that apart from the well know performance issues of <code>System.Console</code>, it doesn&#39;t currently appear to be possible at all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An in Memory Message Bus in 100 Lines or Less]]></title>
    <link href="https://blog.mavnn.co.uk/an-in-memory-message-bus-in-100-lines-or-less/"/>
    <updated>2017-08-17T15:15:43+01:00</updated>
    <id>https://blog.mavnn.co.uk/an-in-memory-message-bus-in-100-lines-or-less</id>
    <content type="html"><![CDATA[<p>In reimplementing an <a href="https://blog.mavnn.co.uk/process-management-in-easynetq/">EasyNetQ process manager</a> one of the things I wanted to keep from the original project was an in memory message bus that could be used for testing without requiring a running RabbitMQ server. The code has ended up being pleasingly short and also uses a few techniques that seemed interesting, so I thought I&#39;d document it here as part of the design process.</p>

<p>Please note we&#39;re not going for a full re-implementation of RabbitMQ in memory here, but this does give us enough to do some useful testing!</p>

<!-- more -->

<blockquote>
<p>Author&#39;s note: since this post was written, this code was updated to be async. I&#39;ve added the new version as appendix 2</p>
</blockquote>

<h2>What are we building?</h2>

<p>In the main process manager library, I&#39;m starting to hash out the underlying types which will drive the various abstractions in play. As a consumer of the library, you&#39;ll probably never have cause to use these types directly.</p>

<p>One of these is an interface class representing a message bus which routes on a combination of <a href="https://github.com/EasyNetQ/EasyNetQ/wiki/Topic-Based-Routing">topic</a> and .net type (i.e. how EasyNetQ routes by default). It looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Topic</span> <span class="o">=</span> <span class="nc">Topic</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ProcessManagerBus</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">IDisposable</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">Publish</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">TimeSpan</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">TopicPublish</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">Topic</span> <span class="o">-&gt;</span> <span class="nc">TimeSpan</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">Subscribe</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="nc">SubscriptionId</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">TopicSubscribe</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="nc">SubscriptionId</span> <span class="o">-&gt;</span> <span class="nc">Topic</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span></code></pre></td></tr></table></div></figure>

<p>Production code will wrap an instance of an EasyNetQ <code>IBus</code> here, but for testing we&#39;re going to build an in memory version.</p>

<h2>Underlying concepts</h2>

<p>What concepts are we going to have in play here? Well, there&#39;s going to be subscribers, who should have an action called when a relevant message is published. And we&#39;re going to want to be able to actually publish the messages.</p>

<p>It makes sense to model the message bus as an agent which can have commands sent to it (a <code>MailboxProcessor</code> in F# terms), so let&#39;s model the commands we want to be able to send first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">MemoryBus</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">Subscriber</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Action</span> <span class="o">:</span> <span class="n">obj</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Type</span> <span class="o">:</span> <span class="nc">Type</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Binding</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">Subscriber</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">:</span> <span class="nc">SubscriptionId</span>
</span><span class='line'>      <span class="nc">Binding</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nc">Action</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">Subscriber</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span> <span class="n">o</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">o</span> <span class="o">|&gt;</span> <span class="n">unbox</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">|&gt;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Type</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">BusMessage</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Publish</span> <span class="k">of</span> <span class="n">obj</span> <span class="o">*</span> <span class="nc">Type</span> <span class="o">*</span> <span class="nc">DateTime</span> <span class="o">*</span> <span class="nc">Topic</span> <span class="n">option</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Subscribe</span> <span class="k">of</span> <span class="nc">Subscriber</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Stop</span> <span class="k">of</span> <span class="nc">AsyncReplyChannel</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>So, a subscriber knows what topic it is binding to (which might include wildcards, we&#39;ll get there in a moment), which <code>type</code> it is listening for, and an action to call when that type arrives. The agent will need to store a list of subscribers, so we wrap our generic <code>Subscriber&lt;&#39;a&gt;</code> type in a non-generic interface (<code>Subscriber</code>).</p>

<p>The <code>BusMessage</code> type then reflects the three things that we might ask the agent to do: publish a message to current subscribers, add a subscriber, or shut down and reply when shutting down is complete.</p>

<h2>Add the logic</h2>

<p>We&#39;ll also need some logic for determining whether a topic published to match a topic which has been bound to by a subscriber. Topics in RabbitMQ are multipart strings with <code>.</code> separators - &quot;one.two.three&quot;, and messages must be published to a specific topic. But when you bind a subscriber, you can bind with two types of wildcard. A <code>*</code> matches a &quot;section&quot; (so binding to &quot;*.two&quot; will receive messages published to &quot;one.two&quot; and &quot;1.two&quot;), while a <code>#</code> finishes a binding string and matches any number of sections (so binding to &quot;one.#&quot; will match &quot;one.two&quot;, &quot;one.2&quot; and &quot;one.two.three&quot;).</p>

<p>Our logic ends up looking like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">compareSection</span> <span class="o">(</span><span class="n">topicSection</span> <span class="o">:</span> <span class="kt">string</span><span class="o">,</span> <span class="n">bindingSection</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">bindingSection</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="s2">&quot;#&quot;</span> <span class="o">|</span> <span class="s2">&quot;*&quot;</span> <span class="o">-&gt;</span> <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="k">when</span> <span class="n">bindingSection</span> <span class="o">=</span> <span class="n">topicSection</span> <span class="o">-&gt;</span> <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">false</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">topicBindingMatch</span> <span class="n">topicOpt</span> <span class="o">(</span><span class="n">binding</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">topicOpt</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Some</span> <span class="o">(</span><span class="nc">Topic</span> <span class="n">topic</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">topicSections</span> <span class="o">=</span> <span class="n">topic</span><span class="o">.</span><span class="nc">Split</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">bindingSections</span> <span class="o">=</span> <span class="n">binding</span><span class="o">.</span><span class="nc">Split</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">bindingSections</span><span class="o">.[</span><span class="n">bindingSections</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span> <span class="k">then</span>
</span><span class='line'>            <span class="c1">// Seq.zip truncates the longer sequence of the two</span>
</span><span class='line'>            <span class="c1">// provided - so here we ignore any sections beyond</span>
</span><span class='line'>            <span class="c1">// the &quot;#&quot;</span>
</span><span class='line'>            <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">topicSections</span> <span class="n">bindingSections</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">forall</span> <span class="n">compareSection</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="c1">// If there&#39;s no &quot;#&quot; at the end of the binding, there</span>
</span><span class='line'>            <span class="c1">// can only be a match if there is exactly the same number</span>
</span><span class='line'>            <span class="c1">// of sections; check that before zipping the sections</span>
</span><span class='line'>            <span class="c1">// together to compare</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">bindingSections</span><span class="o">.</span><span class="nc">Length</span> <span class="o">=</span> <span class="n">topicSections</span><span class="o">.</span><span class="nc">Length</span> <span class="k">then</span>
</span><span class='line'>                <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">topicSections</span> <span class="n">bindingSections</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">forall</span> <span class="n">compareSection</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="bp">false</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="c1">// If there is no publish topic, the only binding which can match</span>
</span><span class='line'>        <span class="c1">// is &quot;#&quot; as there are no sections to compare.</span>
</span><span class='line'>        <span class="n">binding</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Build the agent</h2>

<p>We now have all of the logic our agent requires. Let&#39;s put into together into an <code>Async</code> recursive function listening for commands.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="k">private</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="o">(</span><span class="n">agent</span> <span class="o">:</span> <span class="nc">MailboxProcessor</span><span class="o">&lt;</span><span class="nc">BusMessage</span><span class="o">&gt;)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Stop</span> <span class="n">chan</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">chan</span><span class="o">.</span><span class="nc">Reply</span> <span class="bp">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">()</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Subscribe</span> <span class="n">s</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="o">(</span><span class="n">s</span><span class="o">::</span><span class="n">subscribers</span><span class="o">)</span> <span class="n">agent</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Publish</span> <span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="k">type&#39;</span><span class="o">,</span> <span class="n">expireTime</span><span class="o">,</span> <span class="n">topic</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">expireTime</span> <span class="o">&gt;</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">subscribers</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="k">type&#39;</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="nc">Type</span>
</span><span class='line'>                                           <span class="o">&amp;&amp;</span> <span class="n">topicBindingMatch</span> <span class="n">topic</span> <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span><span class="o">)</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span> <span class="n">message</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="n">agent</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>With the correct types to guide us, this function ends up almost trivial. If we receive a stop message, we reply to say we&#39;re stopped and then return <code>unit</code>, meaning we&#39;ll process no further messages.</p>

<p>If we receive a subscriber, we just add it to the list of subscribers and call back into the loop.</p>

<p>And finally, if there&#39;s a request to publish we check the message hasn&#39;t expired and then call of the subscribers that have the correct type and a matching binding (before calling back into the loop).</p>

<h2>Wrap it all in the correct interface</h2>

<p>Now we just need a type which implements the <code>ProcessManagerBus</code> interface and we&#39;re done. We want <code>Dispose</code> to stop the underlying agent, and the other methods are straight forward translations. The only real thing of note here is the line <code>do agent.Error.Add raise</code>. This is needed because by default exceptions thrown in <code>MailboxProcessor</code>s kill the background thread the agent loop is running on, but are not propagated up to the overall process. That&#39;s not the behaviour we want here: if a subscriber throws, we want to know about the error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">MemoryBus</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">agent</span> <span class="o">=</span> <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span><span class="n">loop</span> <span class="bp">[]</span><span class="o">)</span>
</span><span class='line'>    <span class="k">do</span> <span class="n">agent</span><span class="o">.</span><span class="nn">Error</span><span class="p">.</span><span class="nc">Add</span> <span class="n">raise</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">IDisposable</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Dispose</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">PostAndReply</span> <span class="nc">Stop</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">ProcessManagerBus</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">message</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span><span class="o">)</span> <span class="n">expiry</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">box</span> <span class="n">message</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="o">+</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">None</span><span class="o">))</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">TopicPublish</span> <span class="o">(</span><span class="n">message</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span><span class="o">)</span> <span class="n">topic</span> <span class="n">expiry</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">box</span> <span class="n">message</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="o">+</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">topic</span><span class="o">))</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Subscribe</span> <span class="n">sid</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Subscribe</span> <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="n">sid</span><span class="o">;</span> <span class="nc">Binding</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span><span class="o">;</span> <span class="nc">Action</span> <span class="o">=</span> <span class="n">action</span> <span class="o">})</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">TopicSubscribe</span> <span class="n">sid</span> <span class="o">(</span><span class="nc">Topic</span> <span class="n">binding</span><span class="o">)</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Subscribe</span> <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="n">sid</span><span class="o">;</span> <span class="nc">Binding</span> <span class="o">=</span> <span class="n">binding</span><span class="o">;</span> <span class="nc">Action</span> <span class="o">=</span> <span class="n">action</span> <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Fin</h2>

<p>And there you have it! An in memory message bus in 100 lines or less of F# code. For bonus points, here&#39;s a simple set of test cases for it so you can see what it looks like in action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nn">Tests</span><span class="p">.</span><span class="nc">MemoryBus</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'><span class="k">open</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">MemoryBus</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Expecto</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">T1</span> <span class="o">=</span> <span class="nc">T1</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'><span class="k">type</span> <span class="nc">T2</span> <span class="o">=</span> <span class="nc">T2</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Tests</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="n">memoryBusTests</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">testList</span> <span class="s2">&quot;memory bus tests&quot;</span> <span class="o">[</span>
</span><span class='line'>        <span class="n">testCase</span> <span class="s2">&quot;Basic send/subscibe works&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">receivedMessage</span> <span class="o">=</span> <span class="n">ref</span> <span class="nc">None</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">bus</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryBus</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">ProcessManagerBus</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">subId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="s2">&quot;t1&quot;</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Subscribe</span><span class="o">&lt;</span><span class="nc">T1</span><span class="o">&gt;</span> <span class="n">subId</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="nc">T1</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">receivedMessage</span> <span class="o">:=</span> <span class="nc">Some</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">(</span><span class="nc">T1</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMinutes</span> <span class="mi">1</span><span class="o">.)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(!</span><span class="n">receivedMessage</span><span class="o">)</span> <span class="o">(</span><span class="nc">Some</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="s2">&quot;Should match&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">testCase</span> <span class="s2">&quot;Subscribe filters correctly by type&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">receivedMessage</span> <span class="o">=</span> <span class="n">ref</span> <span class="nc">None</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">bus</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryBus</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">ProcessManagerBus</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">subId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="s2">&quot;t1&quot;</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Subscribe</span><span class="o">&lt;</span><span class="nc">T2</span><span class="o">&gt;</span> <span class="n">subId</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="nc">T2</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">receivedMessage</span> <span class="o">:=</span> <span class="nc">Some</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Publish</span> <span class="o">(</span><span class="nc">T1</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMinutes</span> <span class="mi">1</span><span class="o">.)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(!</span><span class="n">receivedMessage</span><span class="o">)</span> <span class="nc">None</span> <span class="s2">&quot;Should match&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">testCase</span> <span class="s2">&quot;Can publish to topic&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">receivedMessage</span> <span class="o">=</span> <span class="n">ref</span> <span class="nc">None</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">bus</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryBus</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">ProcessManagerBus</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">subId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="s2">&quot;t1&quot;</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicSubscribe</span><span class="o">&lt;</span><span class="nc">T1</span><span class="o">&gt;</span> <span class="n">subId</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;one.two&quot;</span><span class="o">)</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="nc">T1</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">receivedMessage</span> <span class="o">:=</span> <span class="nc">Some</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicPublish</span> <span class="o">(</span><span class="nc">T1</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;one.two&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMinutes</span> <span class="mi">1</span><span class="o">.)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(!</span><span class="n">receivedMessage</span><span class="o">)</span> <span class="o">(</span><span class="nc">Some</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="s2">&quot;Should match&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">testCase</span> <span class="s2">&quot;Only receives from matching topic&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">receivedMessage</span> <span class="o">=</span> <span class="n">ref</span> <span class="nc">None</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">bus</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryBus</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">ProcessManagerBus</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">subId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="s2">&quot;t1&quot;</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicSubscribe</span><span class="o">&lt;</span><span class="nc">T1</span><span class="o">&gt;</span> <span class="n">subId</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;one.two&quot;</span><span class="o">)</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="nc">T1</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">receivedMessage</span> <span class="o">:=</span> <span class="nc">Some</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicPublish</span> <span class="o">(</span><span class="nc">T1</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;two.one&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMinutes</span> <span class="mi">1</span><span class="o">.)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(!</span><span class="n">receivedMessage</span><span class="o">)</span> <span class="nc">None</span> <span class="s2">&quot;Should match&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">testCase</span> <span class="s2">&quot;Matching wildcard topic is matched&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">receivedMessage</span> <span class="o">=</span> <span class="n">ref</span> <span class="nc">None</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">bus</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryBus</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">ProcessManagerBus</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">subId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="s2">&quot;t1&quot;</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicSubscribe</span><span class="o">&lt;</span><span class="nc">T1</span><span class="o">&gt;</span> <span class="n">subId</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;*.two&quot;</span><span class="o">)</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="nc">T1</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">receivedMessage</span> <span class="o">:=</span> <span class="nc">Some</span> <span class="n">m</span><span class="o">)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">TopicPublish</span> <span class="o">(</span><span class="nc">T1</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nc">Topic</span> <span class="s2">&quot;one.two&quot;</span><span class="o">)</span> <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMinutes</span> <span class="mi">1</span><span class="o">.)</span>
</span><span class='line'>            <span class="n">bus</span><span class="o">.</span><span class="nc">Dispose</span><span class="bp">()</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(!</span><span class="n">receivedMessage</span><span class="o">)</span> <span class="o">(</span><span class="nc">Some</span> <span class="s2">&quot;message&quot;</span><span class="o">)</span> <span class="s2">&quot;Should match&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Appendix 1</h2>

<p>Just to round everything off, here&#39;s a listing of the complete implementation from beginning to end.</p>

<p>File 1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Topic</span> <span class="o">=</span> <span class="nc">Topic</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ProcessManagerBus</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">IDisposable</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">Publish</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">TimeSpan</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">TopicPublish</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">Topic</span> <span class="o">-&gt;</span> <span class="nc">TimeSpan</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">Subscribe</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="nc">SubscriptionId</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">TopicSubscribe</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="nc">SubscriptionId</span> <span class="o">-&gt;</span> <span class="nc">Topic</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span></code></pre></td></tr></table></div></figure>

<p>File 2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">MemoryBus</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">Subscriber</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Action</span> <span class="o">:</span> <span class="n">obj</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Type</span> <span class="o">:</span> <span class="nc">Type</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Binding</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">Subscriber</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">:</span> <span class="nc">SubscriptionId</span>
</span><span class='line'>      <span class="nc">Binding</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nc">Action</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">unit</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">Subscriber</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span> <span class="n">o</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">o</span> <span class="o">|&gt;</span> <span class="n">unbox</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">|&gt;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Type</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">BusMessage</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Publish</span> <span class="k">of</span> <span class="n">obj</span> <span class="o">*</span> <span class="nc">Type</span> <span class="o">*</span> <span class="nc">DateTime</span> <span class="o">*</span> <span class="nc">Topic</span> <span class="n">option</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Subscribe</span> <span class="k">of</span> <span class="nc">Subscriber</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Stop</span> <span class="k">of</span> <span class="nc">AsyncReplyChannel</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">compareSection</span> <span class="o">(</span><span class="n">topicSection</span> <span class="o">:</span> <span class="kt">string</span><span class="o">,</span> <span class="n">bindingSection</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">bindingSection</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="s2">&quot;#&quot;</span> <span class="o">|</span> <span class="s2">&quot;*&quot;</span> <span class="o">-&gt;</span> <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="k">when</span> <span class="n">bindingSection</span> <span class="o">=</span> <span class="n">topicSection</span> <span class="o">-&gt;</span> <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">false</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">topicBindingMatch</span> <span class="n">topicOpt</span> <span class="o">(</span><span class="n">binding</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">topicOpt</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Some</span> <span class="o">(</span><span class="nc">Topic</span> <span class="n">topic</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">topicSections</span> <span class="o">=</span> <span class="n">topic</span><span class="o">.</span><span class="nc">Split</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">bindingSections</span> <span class="o">=</span> <span class="n">binding</span><span class="o">.</span><span class="nc">Split</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">bindingSections</span><span class="o">.[</span><span class="n">bindingSections</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span> <span class="k">then</span>
</span><span class='line'>            <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">topicSections</span> <span class="n">bindingSections</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">forall</span> <span class="n">compareSection</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">bindingSections</span><span class="o">.</span><span class="nc">Length</span> <span class="o">=</span> <span class="n">topicSections</span><span class="o">.</span><span class="nc">Length</span> <span class="k">then</span>
</span><span class='line'>                <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">topicSections</span> <span class="n">bindingSections</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">forall</span> <span class="n">compareSection</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="bp">false</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">binding</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="k">private</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="o">(</span><span class="n">agent</span> <span class="o">:</span> <span class="nc">MailboxProcessor</span><span class="o">&lt;</span><span class="nc">BusMessage</span><span class="o">&gt;)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Stop</span> <span class="n">chan</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">chan</span><span class="o">.</span><span class="nc">Reply</span> <span class="bp">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">()</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Subscribe</span> <span class="n">s</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="o">(</span><span class="n">s</span><span class="o">::</span><span class="n">subscribers</span><span class="o">)</span> <span class="n">agent</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Publish</span> <span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="k">type&#39;</span><span class="o">,</span> <span class="n">expireTime</span><span class="o">,</span> <span class="n">topic</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">expireTime</span> <span class="o">&gt;</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">subscribers</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="k">type&#39;</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="nc">Type</span>
</span><span class='line'>                                           <span class="o">&amp;&amp;</span> <span class="n">topicBindingMatch</span> <span class="n">topic</span> <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span><span class="o">)</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span> <span class="n">message</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="n">agent</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">MemoryBus</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">agent</span> <span class="o">=</span> <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span><span class="n">loop</span> <span class="bp">[]</span><span class="o">)</span>
</span><span class='line'>    <span class="k">do</span> <span class="n">agent</span><span class="o">.</span><span class="nn">Error</span><span class="p">.</span><span class="nc">Add</span> <span class="n">raise</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">IDisposable</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Dispose</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">PostAndReply</span> <span class="nc">Stop</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">ProcessManagerBus</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">message</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span><span class="o">)</span> <span class="n">expiry</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">box</span> <span class="n">message</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="o">+</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">None</span><span class="o">))</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">TopicPublish</span> <span class="o">(</span><span class="n">message</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span><span class="o">)</span> <span class="n">topic</span> <span class="n">expiry</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">box</span> <span class="n">message</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="o">+</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">topic</span><span class="o">))</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Subscribe</span> <span class="n">sid</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Subscribe</span> <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="n">sid</span><span class="o">;</span> <span class="nc">Binding</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span><span class="o">;</span> <span class="nc">Action</span> <span class="o">=</span> <span class="n">action</span> <span class="o">})</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">TopicSubscribe</span> <span class="n">sid</span> <span class="o">(</span><span class="nc">Topic</span> <span class="n">binding</span><span class="o">)</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Subscribe</span> <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="n">sid</span><span class="o">;</span> <span class="nc">Binding</span> <span class="o">=</span> <span class="n">binding</span><span class="o">;</span> <span class="nc">Action</span> <span class="o">=</span> <span class="n">action</span> <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Appendix 1</h2>

<p>The async version!</p>

<p>File 1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="nc">SubscriptionId</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Topic</span> <span class="o">=</span> <span class="nc">Topic</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ProcessManagerBus</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">IDisposable</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">Publish</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">TimeSpan</span> <span class="o">-&gt;</span> <span class="nc">Async</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">TopicPublish</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">Topic</span> <span class="o">-&gt;</span> <span class="nc">TimeSpan</span> <span class="o">-&gt;</span> <span class="nc">Async</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">Subscribe</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="nc">SubscriptionId</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">Async</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;)</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">member</span> <span class="nc">TopicSubscribe</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span> <span class="k">when</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">:</span> <span class="ow">not</span> <span class="k">struct</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>        <span class="nc">SubscriptionId</span> <span class="o">-&gt;</span> <span class="nc">Topic</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">Async</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;)</span> <span class="o">-&gt;</span> <span class="kt">unit</span>
</span></code></pre></td></tr></table></div></figure>

<p>File 2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">MemoryBus</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">EasyNetQ</span><span class="p">.</span><span class="nn">ProcessManager</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">Subscriber</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Action</span> <span class="o">:</span> <span class="n">obj</span> <span class="o">-&gt;</span> <span class="nc">Async</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Type</span> <span class="o">:</span> <span class="nc">Type</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="nc">Binding</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">Subscriber</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">:</span> <span class="nc">SubscriptionId</span>
</span><span class='line'>      <span class="nc">Binding</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nc">Action</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="nc">Async</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">Subscriber</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span> <span class="n">o</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">o</span> <span class="o">|&gt;</span> <span class="n">unbox</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">|&gt;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Action</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Type</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="k">private</span> <span class="nc">BusMessage</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Publish</span> <span class="k">of</span> <span class="n">obj</span> <span class="o">*</span> <span class="nc">Type</span> <span class="o">*</span> <span class="nc">DateTime</span> <span class="o">*</span> <span class="nc">Topic</span> <span class="n">option</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Subscribe</span> <span class="k">of</span> <span class="nc">Subscriber</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Stop</span> <span class="k">of</span> <span class="nc">AsyncReplyChannel</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">compareSection</span> <span class="o">(</span><span class="n">topicSection</span> <span class="o">:</span> <span class="kt">string</span><span class="o">,</span> <span class="n">bindingSection</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">bindingSection</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="s2">&quot;#&quot;</span> <span class="o">|</span> <span class="s2">&quot;*&quot;</span> <span class="o">-&gt;</span> <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="k">when</span> <span class="n">bindingSection</span> <span class="o">=</span> <span class="n">topicSection</span> <span class="o">-&gt;</span> <span class="bp">true</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">false</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">topicBindingMatch</span> <span class="n">topicOpt</span> <span class="o">(</span><span class="n">binding</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">topicOpt</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Some</span> <span class="o">(</span><span class="nc">Topic</span> <span class="n">topic</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">topicSections</span> <span class="o">=</span> <span class="n">topic</span><span class="o">.</span><span class="nc">Split</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">bindingSections</span> <span class="o">=</span> <span class="n">binding</span><span class="o">.</span><span class="nc">Split</span> <span class="sc">&#39;.&#39;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">bindingSections</span><span class="o">.[</span><span class="n">bindingSections</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span> <span class="k">then</span>
</span><span class='line'>            <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">topicSections</span> <span class="n">bindingSections</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">forall</span> <span class="n">compareSection</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">bindingSections</span><span class="o">.</span><span class="nc">Length</span> <span class="o">=</span> <span class="n">topicSections</span><span class="o">.</span><span class="nc">Length</span> <span class="k">then</span>
</span><span class='line'>                <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">topicSections</span> <span class="n">bindingSections</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">forall</span> <span class="n">compareSection</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="bp">false</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">binding</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="k">private</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="o">(</span><span class="n">exiting</span> <span class="o">:</span> <span class="nc">AsyncReplyChannel</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span> <span class="n">option</span><span class="o">)</span> <span class="o">(</span><span class="n">agent</span> <span class="o">:</span> <span class="nc">MailboxProcessor</span><span class="o">&lt;</span><span class="nc">BusMessage</span><span class="o">&gt;)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">exiting</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">chan</span> <span class="k">when</span> <span class="n">agent</span><span class="o">.</span><span class="nc">CurrentQueueLength</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">chan</span><span class="o">.</span><span class="nc">Reply</span><span class="bp">()</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">Stop</span> <span class="n">chan</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="o">(</span><span class="nc">Some</span> <span class="n">chan</span><span class="o">)</span> <span class="n">agent</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">Subscribe</span> <span class="n">s</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="o">(</span><span class="n">s</span><span class="o">::</span><span class="n">subscribers</span><span class="o">)</span> <span class="n">exiting</span> <span class="n">agent</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">Publish</span> <span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="k">type&#39;</span><span class="o">,</span> <span class="n">expireTime</span><span class="o">,</span> <span class="n">topic</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">expireTime</span> <span class="o">&gt;</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="k">then</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">matchingSubs</span> <span class="o">=</span>
</span><span class='line'>                        <span class="n">subscribers</span>
</span><span class='line'>                        <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="k">type&#39;</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="nc">Type</span>
</span><span class='line'>                                                  <span class="o">&amp;&amp;</span> <span class="n">topicBindingMatch</span> <span class="n">topic</span> <span class="n">x</span><span class="o">.</span><span class="nc">Binding</span><span class="o">)</span>
</span><span class='line'>                    <span class="k">for</span> <span class="n">sub</span> <span class="k">in</span> <span class="n">matchingSubs</span> <span class="k">do</span>
</span><span class='line'>                        <span class="n">sub</span><span class="o">.</span><span class="nc">Action</span> <span class="n">message</span> <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">StartImmediate</span>
</span><span class='line'>                <span class="k">return</span><span class="o">!</span> <span class="n">loop</span> <span class="n">subscribers</span> <span class="n">exiting</span> <span class="n">agent</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">MemoryBus</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">agent</span> <span class="o">=</span> <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span><span class="n">loop</span> <span class="bp">[]</span> <span class="nc">None</span><span class="o">)</span>
</span><span class='line'>    <span class="k">do</span> <span class="n">agent</span><span class="o">.</span><span class="nn">Error</span><span class="p">.</span><span class="nc">Add</span> <span class="n">raise</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">IDisposable</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Dispose</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">PostAndReply</span> <span class="nc">Stop</span>
</span><span class='line'>    <span class="k">interface</span> <span class="nc">ProcessManagerBus</span> <span class="k">with</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">message</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span><span class="o">)</span> <span class="n">expiry</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">box</span> <span class="n">message</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="o">+</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">None</span><span class="o">))</span>
</span><span class='line'>            <span class="n">async</span><span class="o">.</span><span class="nc">Zero</span><span class="bp">()</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">TopicPublish</span> <span class="o">(</span><span class="n">message</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span><span class="o">)</span> <span class="n">topic</span> <span class="n">expiry</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Publish</span> <span class="o">(</span><span class="n">box</span> <span class="n">message</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;,</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span> <span class="o">+</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">topic</span><span class="o">))</span>
</span><span class='line'>            <span class="n">async</span><span class="o">.</span><span class="nc">Zero</span><span class="bp">()</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">Subscribe</span> <span class="n">sid</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Subscribe</span> <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="n">sid</span><span class="o">;</span> <span class="nc">Binding</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span><span class="o">;</span> <span class="nc">Action</span> <span class="o">=</span> <span class="n">action</span> <span class="o">})</span>
</span><span class='line'>        <span class="k">member</span> <span class="o">__.</span><span class="nc">TopicSubscribe</span> <span class="n">sid</span> <span class="o">(</span><span class="nc">Topic</span> <span class="n">binding</span><span class="o">)</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span> <span class="o">(</span><span class="nc">Subscribe</span> <span class="o">{</span> <span class="nc">SubscriptionId</span> <span class="o">=</span> <span class="n">sid</span><span class="o">;</span> <span class="nc">Binding</span> <span class="o">=</span> <span class="n">binding</span><span class="o">;</span> <span class="nc">Action</span> <span class="o">=</span> <span class="n">action</span> <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying .NET Core 2.0 With F# Today]]></title>
    <link href="https://blog.mavnn.co.uk/trying-dotnetcore-2-dot-0-with-f-number-today/"/>
    <updated>2017-08-16T11:15:20+01:00</updated>
    <id>https://blog.mavnn.co.uk/trying-dotnetcore-2-dot-0-with-f-number-today</id>
    <content type="html"><![CDATA[<p>Yesterday, I tried to use .NET Core for F# on day zero. A bit <s>brave</s>foolish, I know, but v2 was supposed to be the one with all the bugs ironed out.</p>

<p>Short version: it&#39;s a lot better, but it&#39;s still easy to hit rough edges.</p>

<p>Longer version: be very careful that you don&#39;t hit issues with versions. On MacOSX, I hit a series of road blocks which made yesterday much more painful than it should have been.</p>

<ul>
<li>If you&#39;re on a Mac, you&#39;ll need to update All The Things&trade; to get a reliable experience. And I don&#39;t just mean all the .NET Core things - full system update and <code>brew upgrade</code> are your friends</li>
<li>Don&#39;t use templates. Not many of them have been updated to 2.0 yet, you get no warnings about the ones which haven&#39;t, and enough has changed that it is very hard to update them manually unless you are a .NET Core expert already. (If you are, I suspect you&#39;re not reading this guide).</li>
<li>Don&#39;t try and update projects unless you know what you&#39;re doing; it cost me a lot of pain yesterday including bizarre internal compiler errors. On the happy news front, just copying across your actual code files works just fine.</li>
<li>Don&#39;t try and use Visual Studio (yet) - I&#39;m not going to go into this one as I&#39;m mainly talking to Mac users, but there has been issues there.</li>
</ul>

<p>With all that said and done, if I skipped using any templates and stuck exclusively to the bundled project options, the actual experience of using <code>dotnet</code> is very pleasant.</p>

<p>For example, setting up a brand new solution with library and test project looks something like below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Create solution file Project.New.sln in current directory</span>
</span><span class='line'>dotnet new sln -n Project.New
</span><span class='line'>
</span><span class='line'><span class="c"># Create library project in directory Project.New.Library</span>
</span><span class='line'><span class="c"># Default proj name is Project.New.Library.fsproj</span>
</span><span class='line'>dotnet new classlib -o Project.New.Library -lang f#
</span><span class='line'>
</span><span class='line'><span class="c"># And again for test library</span>
</span><span class='line'>dotnet new console -o Project.New.Library.Tests -lang f#
</span><span class='line'>
</span><span class='line'><span class="c"># Add projects to solution (can combine to a single line)</span>
</span><span class='line'>dotnet sln add Project.New.Library/Project.New.Library.fsproj
</span><span class='line'>dotnet sln add Project.New.Library.Tests/Project.New.Library.Tests.fsproj
</span><span class='line'>
</span><span class='line'><span class="c"># Set up test console app</span>
</span><span class='line'><span class="nb">cd </span>Project.New.Library.Tests
</span><span class='line'>dotnet add reference ../Project.New.Library/Project.New.Library.fsproj
</span><span class='line'>dotnet add package Expecto
</span><span class='line'><span class="c"># Update Program.fs to run tests (see https://github.com/haf/expecto#testing-hello-world)</span>
</span></code></pre></td></tr></table></div></figure>

<p>At this point, running <code>dotnet run</code> in the test directory should run your example test, and running <code>dotnet build</code> from the solution directory should successfully build your nice, portable, shiny, .NET Core 2.0 code.</p>

<p>Enjoy, and remember this post has a shelf life: hopefully issues like the template woes I had should disappear quickly as the eco-system catches up with the latest release.</p>

<blockquote>
<p>Thanks to Tim Preston for a minor correction to this post; our genius author had managed to copy and paste erroneous commands from his own command history&#8230;</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process Management in EasyNetQ]]></title>
    <link href="https://blog.mavnn.co.uk/process-management-in-easynetq/"/>
    <updated>2017-07-29T12:34:03+01:00</updated>
    <id>https://blog.mavnn.co.uk/process-management-in-easynetq</id>
    <content type="html"><![CDATA[<blockquote>
<p>Update! Check out <a href="https://blog.mavnn.co.uk/routemaster-master-your-messaging-routes/">RouteMaster</a> for a progress update on this.</p>
</blockquote>

<p>Back in 2015, I wrote about a <a href="https://blog.mavnn.co.uk/easynetq-process-management/">process manager</a> I&#39;d written over
the top of <a href="http://easynetq.com/">EasyNetQ</a>. At the time it was released as open
source, and I was pretty pleased with it. It allowed you to fairly quickly string
together a managed work flow of services steps with built in state management for
each work flow, and avoided many of the potential pitfalls of trying to build
a request/response based system in situations where it isn&#39;t appropriate.</p>

<p>Two years on, I&#39;ve learnt a lot about distributed system design and a lot about
composing logic (<em>cough</em> monads <em>cough</em>) - and the original source is no longer
available from my previous employers where it was written.</p>

<p>Despite that, I&#39;ve had a lot of interest in the library in between, so I&#39;m
embarking on a full, clean room, rewrite incorporating everything I&#39;ve learnt.
This will also allow me to take advantage of the (very) recent move of EasyNetQ
to be .netcore compatible to build the library against .NET Standard, providing
a fully portable solution out of the box.</p>

<p>As with EasyNetQ itself, the major focus of this project will be providing the
best possible developer experience. This means that it will provide sensible
defaults and will be opinionated in places.</p>

<p>Where do you come into all of this? Well, we&#39;re looking for corporate sponsorship
to help accelerate the development process and we&#39;re looking for testers to help
build products with pre-release versions. In both cases you get to help to drive
which opinions the library settles on, and as a corporate sponsor we&#39;ll also help
you get up and running. Whether you&#39;re sponsoring or not, we&#39;d love you to get involved.</p>

<p>And on a more general note, if you find you&#39;re pushing the boundaries of EasyNetQ
in any way and you&#39;d like some help, I&#39;d be happy to set up training or consultancy
for a bespoke solution for you as well. Drop a note to <a href="mailto://us@mavnn.co.uk">us@mavnn.co.uk</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deliberate Poster: Fighting Imposter Syndrome]]></title>
    <link href="https://blog.mavnn.co.uk/deliberate-poster-fighting-imposter-syndrome/"/>
    <updated>2017-05-24T12:01:11+01:00</updated>
    <id>https://blog.mavnn.co.uk/deliberate-poster-fighting-imposter-syndrome</id>
    <content type="html"><![CDATA[<p>I first became aware of Imposter Syndrome via an excellent <a href="https://www.hanselman.com/blog/ImAPhonyAreYou.aspx">blog post by Scott Hanselman</a>, but it immediately struck true.
I&#39;m a self taught programmer who dropped out of a Maths degree, and even now with years of experience that voice is there at the back of my head:</p>

<ul>
<li>&quot;You still make off by one errors, and you think you can train people?&quot;</li>
<li>&quot;How could you have let that bug slip by? It&#39;s obvious, I thought you knew what you were doing?&quot;</li>
<li>&quot;You want people to pay you for this? How exactly are you justifying that one to yourself?&quot;</li>
</ul>

<p>Normally I just try and tell it to shut up: everyone makes mistakes sometimes, I deliver stuff people get value from, etc.</p>

<p>But a few days back, something interesting happened. I&#39;d hit a problem that looked like it should be simple, and I&#39;d been bashing my head against it for a couple of days.
The imposter critic was out in force: &quot;call yourself a coder?&quot;. So I stepped back, took a deep breath, told the voice to stuff it and did the sensible thing. I asked my
co-director (and wife) for help.</p>

<p>Now, this isn&#39;t asking a random person off the street for assistance. She has a high level post-graduate degree in mathematics, is ridiculously good at spotting patterns and logical deduction
and has done some programming in the past herself (of the type you do during a maths degree).</p>

<p>It took me over an hour to explain what the actual problem was.</p>

<p>And as I dived through the OO patterns, domain specific knowledge and implementation constraints that built up into this &quot;simple&quot; problem it occurred to me that maybe I
had learnt something over the years. That maybe I wasn&#39;t as much of an imposter as the voice was trying to tell me. That possibly, just maybe, not being able to solve this
problem, right here, right now, didn&#39;t make me less valuable as a person or less competent as a professional. That the very fact I <em>had this problem</em> was actually evidence
that I had a clue what I was doing, or else I wouldn&#39;t have been able to get here.</p>

<p>So, a technique for all the &quot;imposters&quot; out there when the voice fires up: be deliberate in reminding yourself that you&#39;re actually a poster. Don&#39;t fight the voice with
generalities (even if they&#39;re true) - fight it with specifics.</p>

<p>Even if the specifics are &quot;2 years ago I didn&#39;t know enough to get myself into this mess&quot;.</p>

<p>And you know the bonus extra of this technique? It fights <a href="https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect">Dunning-Kruger</a> too&#8230;</p>

<p>I&#39;ll just be leaving this post lying around here so that my wife can post me a link to it next time I&#39;m in the imposter blues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Mutable State With Computational Expressions]]></title>
    <link href="https://blog.mavnn.co.uk/managing-mutable-state-with-computational-expressions/"/>
    <updated>2017-04-25T23:55:29+01:00</updated>
    <id>https://blog.mavnn.co.uk/managing-mutable-state-with-computational-expressions</id>
    <content type="html"><![CDATA[<p>In mixed paradigm languages such as F# and Scala you frequently end up using
mutable APIs in your &quot;nice&quot; pure functional code. It might be because you&#39;re using
a 3rd party library, or it might be for performance reasons - but either way it&#39;s very
easy to make mistakes with mutable constructs when you&#39;re in a functional mind space, especially if you want to compose operations on instances of a mutable type.</p>

<p>Let&#39;s have a look at one way of handling this issue: custom operations on 
computational expressions. We&#39;ll take the Provided Types API for building
types within a type provider as an example of an API to
use, and see what we can do to wrap it.</p>

<!-- more -->

<p>Firstly, let&#39;s give an example of the issue. Creating even a simple type
within a type provider looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'><span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">CambridgeProvider</span><span class="bp">()</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;Mavnn.Provided&quot;</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">myProp</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>      <span class="s2">&quot;StaticProperty&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>      <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>      <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;Hello world&quot;</span> <span class="o">@@&gt;)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="n">myType</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;StaticType&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'>    <span class="n">myType</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">myProp</span>
</span><span class='line'>    <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">myType</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>

<p>The main problem is right at the end on line 26: having
created your property you need to then add it the the mutable <code>ProvidedTypeDefinition</code>. This is easy to forget on the one hand, and makes it hard too
compose partial type definitions on the other.</p>

<p>One way to handle this would be to create a function that takes a provided
type definition and knows how to amend it with a provided property.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">addHelloWorld</span> <span class="o">(</span><span class="n">ptd</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">myProp</span> <span class="o">=</span>
</span><span class='line'>        <span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>          <span class="s2">&quot;StaticProperty&quot;</span><span class="o">,</span>
</span><span class='line'>          <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>          <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>          <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;Hello world&quot;</span> <span class="o">@@&gt;)</span>
</span><span class='line'>    <span class="n">ptd</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">myProp</span>
</span><span class='line'>    <span class="n">ptd</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now if we have a lot of types that need, say, a &quot;hello world&quot; and &quot;goodbye world&quot; property added we can do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">addCommon</span> <span class="n">ptd</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">ptd</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">addHelloWorld</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">addGoodbyeWorld</span> <span class="c1">// definition left as an exercise</span>
</span></code></pre></td></tr></table></div></figure>

<p>So now you can pass in a <code>ProvidedTypeDefinition</code> and get out one with
your two common properties added. But now the secret is that you want to
pass around these builder functions as much as possible, and only actually
pass in a instance of <code>ProvidedTypeDefinition</code> right at the end; up until
you do, you have something composable and reusable. Once you&#39;ve created your
instance, you&#39;re done.</p>

<p>This sounds similar, but not quite like, continuation passing style programming
as used in things like <code>async</code> under the hood. Which raises the interesting
possibility that we might be able to <strike>ab</strike>use computational
expressions to make our code a bit nicer. Let&#39;s give it a go!</p>

<p>Computational expressions are built via a class with some strictly named
member methods which the F# compiler then uses to translate the computational
expression code into &quot;standard&quot; F#.</p>

<p>The type the CE is going to operate on is going to be
<code>ProvidedTypeDefinition -&gt; ProvidedTypeDefinition</code> (similar to the state
monad for those of you who&#39;ve played with it). But it&#39;s going to be a little
odd, as we have no monad and won&#39;t be following the monad laws, so there&#39;s
really no meaningful bind operation. What would that look like?</p>

<p>Something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">PTD</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span> <span class="o">-&gt;</span> <span class="nc">ProvidedTypeDefinition</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ProvidedTypeBuilder</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Zero</span> <span class="bp">()</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">id</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Return</span> <span class="o">_</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">id</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Bind</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="n">f</span> <span class="o">:</span> <span class="kt">unit</span> <span class="o">-&gt;</span> <span class="nc">PTD</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">fun</span> <span class="n">ptd</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">f</span> <span class="bp">()</span><span class="o">)</span> <span class="o">(</span><span class="n">m</span> <span class="n">ptd</span><span class="o">)</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">m1</span> <span class="o">:</span> <span class="nc">PTD</span><span class="o">,</span> <span class="n">m2</span> <span class="o">:</span> <span class="nc">PTD</span><span class="o">)</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">x</span><span class="o">.</span><span class="nc">Bind</span><span class="o">(</span><span class="n">m1</span><span class="o">,</span> <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">m2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>So we have a bind&#8230; but it can only bind <code>unit</code> and no other type. All
it knows how to deal with is composing two <code>ProvidedTypeBuilder -&gt; ProvidedTypeBuilder</code> functions. <code>Zero</code> and <code>Return</code> make some sense as well: both
can be meaningfully defined using the <code>id</code> function; just take the provided
type definition and pass it on unchanged.</p>

<p>Now we can write code like this!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">typeBuilder</span> <span class="o">=</span> <span class="nc">ProvidedTypeBuilder</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">typeBuilder</span> <span class="o">{</span>
</span><span class='line'>    <span class="bp">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Okay, so I admit we&#39;re not quite there yet. Time to dive into the fun bit;
adding a custom operation to our builder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">PTD</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span> <span class="o">-&gt;</span> <span class="nc">ProvidedTypeDefinition</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ProvidedTypeBuilder</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Zero</span> <span class="bp">()</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">id</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Return</span> <span class="o">_</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">id</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Bind</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="n">f</span> <span class="o">:</span> <span class="kt">unit</span> <span class="o">-&gt;</span> <span class="nc">PTD</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">fun</span> <span class="n">ptd</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">f</span> <span class="bp">()</span><span class="o">)</span> <span class="o">(</span><span class="n">m</span> <span class="n">ptd</span><span class="o">)</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">m1</span> <span class="o">:</span> <span class="nc">PTD</span><span class="o">,</span> <span class="n">m2</span> <span class="o">:</span> <span class="nc">PTD</span><span class="o">)</span> <span class="o">:</span> <span class="nc">PTD</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">x</span><span class="o">.</span><span class="nc">Bind</span><span class="o">(</span><span class="n">m1</span><span class="o">,</span> <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">m2</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[&lt;</span><span class="nc">CustomOperation</span><span class="o">(</span><span class="s2">&quot;addMember&quot;</span><span class="o">,</span> <span class="nc">MaintainsVariableSpaceUsingBind</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)&gt;]</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">AddMember</span><span class="o">(</span><span class="n">ptd</span><span class="o">,</span> <span class="k">member&#39;</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">func</span> <span class="o">=</span>
</span><span class='line'>          <span class="k">fun</span> <span class="o">(</span><span class="n">instance</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>              <span class="n">instance</span><span class="o">.</span><span class="nc">AddMember</span> <span class="k">member&#39;</span>
</span><span class='line'>              <span class="n">instance</span>
</span><span class='line'>        <span class="n">x</span><span class="o">.</span><span class="nc">Bind</span><span class="o">(</span><span class="n">ptd</span><span class="o">,</span> <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">func</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we&#39;re starting to get somewhere, with code that begins to look like
this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">withHelloWorld</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">typeBuilder</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">addMember</span> <span class="o">(</span><span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>                  <span class="s2">&quot;StaticProperty&quot;</span><span class="o">,</span>
</span><span class='line'>                  <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>                  <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>                  <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;Hello world&quot;</span> <span class="o">@@&gt;))</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>withHelloWorld</code> has a type of <code>ProvidedTypeDefinition -&gt; ProvidedTypeDefinition</code> as you&#39;d expect. But there&#39;s still no easy way to compose these; let&#39;s
add that next.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">ProvidedTypeBuilder</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="c1">// ...snip...</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[&lt;</span><span class="nc">CustomOperation</span><span class="o">(</span><span class="s2">&quot;including&quot;</span><span class="o">,</span> <span class="nc">MaintainsVariableSpaceUsingBind</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)&gt;]</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Including</span><span class="o">(</span><span class="n">ptd</span><span class="o">,</span> <span class="n">builder</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">x</span><span class="o">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">ptd</span><span class="o">,</span> <span class="n">builder</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>The <code>including</code> operation is just a wrapper around combine, but it allows us
to do things like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">withHelloAndGoodbye</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">typeBuilder</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">including</span> <span class="n">withHelloWorld</span>
</span><span class='line'>        <span class="n">addMember</span> <span class="o">(</span><span class="nc">ProvidedProperty</span><span class="o">(</span>
</span><span class='line'>                    <span class="s2">&quot;Goodbye&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>                    <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>                    <span class="nc">GetterCode</span> <span class="o">=</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;Goodbye&quot;</span> <span class="o">@@&gt;))</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And now the power of this technique begins to be shown, as we build
blocks of composable code which can be included within each other.</p>

<p>Obviously a lot more could be done at this point: we&#39;ve barely scratched
the provided types API, but we&#39;ll leave the blog post at this point.</p>

<p>This blog post comes with many thanks to <a href="http://twitter.com/kolektiv">Andrew Cherry</a> who took some pretty mad lunch time discussions and turned them into
the very real and usable <a href="https://docs.freya.io/en/latest/">Freya</a> (along with a bunch of collaborators). Freya makes use of this kind of
technique heavily.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Return to the Ivory Tower Video]]></title>
    <link href="https://blog.mavnn.co.uk/return-to-the-ivory-tower-video/"/>
    <updated>2017-04-20T13:17:18+01:00</updated>
    <id>https://blog.mavnn.co.uk/return-to-the-ivory-tower-video</id>
    <content type="html"><![CDATA[<p>As mentioned on the blog already, I had the opportunity to talk at this year&#39;s F# Exchange at <a href="https://skillsmatter.com/">skillsmatter</a>. As always, they&#39;ve done an excellent job on the video production, so if you&#39;re interested in what makes F# different from other programming languages have a watch of <a href="https://skillsmatter.com/skillscasts/9883-fixing-real-life-problems-from-the-ivory-tower">Fixing Real Life Problems From the Ivory Tower</a> (free log in required).</p>

<p>If you like the talk and would like to learn more, these are also the subjects that I&#39;ll be covering in my recently announced <a href="https://blog.mavnn.co.uk/level-up-your-f-number-skills/">Level Up Your F#</a> course, which will be running for 2 days in London on the 15th-16th June.</p>
]]></content>
  </entry>
  
</feed>
