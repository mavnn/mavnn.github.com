<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mavnn's blog]]></title>
  <link href="https://blog.mavnn.co.uk/atom.xml" rel="self"/>
  <link href="https://blog.mavnn.co.uk/"/>
  <updated>2021-09-22T20:35:10+00:00</updated>
  <id>https://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
  </author>
  <generator uri="https://blog.mavnn.co.uk/">Mavnn (by hand, for now)</generator>

  <entry>
      <title type="html">ADHD and me</title>
      <link href="https://blog.mavnn.co.uk/2022/10/14/adhd_and_me.html"/>
      <updated>2022-06-20T17:00:00+00:00</updated>
      <id>https://blog.mavnn.co.uk/2022/06/20/teaching-coding-wisdom.html</id>
      <content>I recently received a diagnosis of adult ADHD, and yesterday started taking an experimental dose of Ritalin. It's a weird experience, and you can read more about it at: <a href="https://blog.mavnn.co.uk/2022/10/14/adhd_and_me.html">https://blog.mavnn.co.uk/2022/10/14/adhd_and_me.html</a>. </content>
  </entry>

  <entry>
      <title type="html">Teaching (coding) wisdom</title>
      <link href="https://blog.mavnn.co.uk/2022/06/20/teaching-coding-wisdom.html"/>
      <updated>2022-06-20T17:00:00+00:00</updated>
      <id>https://blog.mavnn.co.uk/2022/06/20/teaching-coding-wisdom.html</id>
      <content>Teaching good decision making in code, is basically the same as teaching good decision making of any other kind. It's the teaching of wisdom. Read more at <a href="https://blog.mavnn.co.uk/2022/06/20/teaching-coding-wisdom.html">https://blog.mavnn.co.uk/2022/06/20/teaching-coding-wisdom.html</a>. </content>
  </entry>

  <entry>
      <title type="html">Types in TypeScript</title>
      <link href="https://blog.mavnn.co.uk/2022/01/07/types-in-typescript.html"/>
      <updated>2022-01-07T14:12:00+00:00</updated>
      <id>https://blog.mavnn.co.uk/2022/01/07/types-in-typescript.html</id>
      <content>What actually is TypeScript, and how does that change our understanding of what a TypeScript type is? Read more at: <a href="https://blog.mavnn.co.uk/2022/01/07/types-in-typescript.html">https://blog.mavnn.co.uk/2022/01/07/types-in-typescript.html</a>. </content>
  </entry>

  <entry>
    <title type="html">Literate CSS</title>
    <link href="https://blog.mavnn.co.uk/2021/10/04/LiterateCSS.html"/>
    <updated>2021-10-04T20:35:10+00:00</updated>
    <id>https://blog.mavnn.co.uk/2021/10/04/LiterateCSS.html</id>
    <content>Building my blog in my blog; step one, a literate CSS file. Read it at: <a href="https://blog.mavnn.co.uk/2021/10/04/LiterateCSS.html">https://blog.mavnn.co.uk/2021/10/04/LiterateCSS.html</a>. </content>
  </entry>

  <entry>
    <title type="html">New Beginnings</title>
    <link href="https://blog.mavnn.co.uk/2021/09/22/NewBeginnings.html" />
    <updated>2021-09-22T20:35:10+00:00</updated>
    <id>https://blog.mavnn.co.uk/2021/09/22/NewBeginnings.html</id>
    <content type="html">A new beginning. Read <a href="https://blog.mavnn.co.uk/2021/09/22/NewBeginnings.html">more if you're interested.</a></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Working From Home, Pandemic Edition]]></title>
    <link href="https://blog.mavnn.co.uk/working-from-home/"/>
    <updated>2020-03-17T11:53:08+00:00</updated>
    <id>https://blog.mavnn.co.uk/working-from-home</id>
    <content type="html"><![CDATA[<blockquote>
<p>There&#39;s an &quot;organic&quot; version of this post at on <a href="https://docs.google.com/document/d/1IMhe3vOmU7EcEQFC_8wuT0OnrNpYNI9JZKdjZ0u5DmA/edit#">Google Docs</a> which may receive some edits over time. But I also wanted to reach a broader audience.</p>
</blockquote>

<p>Many of you reading this document will be either:</p>

<ul>
<li>managers asking people to work from home for the first time, with very little warning</li>
<li>workers who do not normally work from home being asked to do so on short notice</li>
</ul>

<p>We‚Äôll try and signpost items that might be of especial relevance to one group or the other, but a lot of this advice will be relevant to everyone.</p>

<h2>Who are we?</h2>

<p>I (Michael Newton) started this document as a response to several queries I‚Äôve had about home working in the light of the CoVid19 pandemic. I‚Äôve been working from home for years, and helping home educate our son at the same time.</p>

<p>I‚Äôm currently working with NoRedInk where about half of our workforce is normally remote (we call them the ‚ÄúRemotians‚Äù) - but since Friday we‚Äôve moved to fully remote working for the duration of the current events. We have a history of remote working that goes back to soon after the company was founded, and forced ourselves to get it right by hiring two remote VPs into the senior leadership team.</p>

<h2>What is this document?</h2>

<p>This document is partly being created to help and support the NoRedInkers who have had to unexpectedly become Remotians overnight, and partly a place for the Remotians among us to share what we‚Äôve learned over the years.</p>

<p>Anyone with a NoRedInk email address can request editing access to this document, and it contains the collective wisdom of a group of people. That means you‚Äôll get a variety of views and approaches below. Also NRIers: that means don‚Äôt post all the company internal secrets here or I‚Äôll be in lots of trouble üòÖ.</p>

<h2>Getting Started</h2>

<p>You are doing remote working on hard mode. Most people who start remote working have time to prepare, to think through the logistics and to set up home and life in a sensible, considered way.</p>

<p>You probably do not, and if the indications from Asia and most of Europe are accurate, you will probably also shortly have to deal with school and child care being closed and adjusting your home life to deal with physical distancing. This is not normal conditions to be working under, and means that certain (normally good!) home working advice may not be possible or helpful for you right now. That means your first priority is looking after yourself and family and your second priority is being an effective remote worker. It‚Äôs okay for this to feel hard at times!</p>

<h2>How to Think (Everyone)</h2>

<p>Remote working requires a fundamentally different way of thinking about ‚Äúwork‚Äù than being in the office does. You can‚Äôt rely on just counting the time from when you arrive in the office to the time you leave as ‚Äúbeing at work.‚Äù So; how do you think instead?</p>

<ul>
<li><em>Do</em> try and set aside time that is ‚Äúwork time‚Äù and time which is not. You are not on call 24-7 just because you have the company laptop at home.</li>
<li><em>Do</em> be deliberate about staying in touch with your co-workers about what you are doing and when. There is a lot of communication that happens in an office that you will have to make an effort to deliberately replicate as a remote worker. There‚Äôs a whole section on this below!</li>
<li><em>Don‚Äôt</em> time your work to the second in your own house. At work you take loo breaks, coffee breaks, talk to co-workers about the weekend, and any number of other things without clocking off. Some level of interruption of your day is normal, expected, and you are not cheating your boss by dealing with it.</li>
<li><em>Do</em> be honest with yourself about this: grabbing a coffee is part of the work day, watching Batman Returns probably isn‚Äôt</li>
<li><em>Try to</em> set aside a specific place to work. This may or may not be possible for you - it helps but it isn‚Äôt essential.</li>
<li><em>Try to</em> set a routine for when you start work or stop work (we have practical tips below). This may also not be possible for you, especially if there are children around the house. Be careful of your mental health here: do not set yourself a rigid routine you cannot follow, it is a very swift route to discouragement and depression.</li>
</ul>

<h2>How to Think (Manager Special)</h2>

<p>There‚Äôs something critically important you must realise as a manager used to being in an office with your team: whether you mean to or not, you almost certainly judge people‚Äôs level of work by how much time they spend at their desk. It‚Äôs super hard not to!</p>

<p>In the section below, there‚Äôs specific tips on communication - but as a manager/team lead, be deliberate in judging how things are going by people‚Äôs status updates and the work they are producing, not by how quickly they answer your chat message. People shouldn‚Äôt be on hair-trigger chat response all day (unless that‚Äôs their actual job), so give them the space to concentrate and get on with work.</p>

<p>You will also have to think hard about how to help people break tasks down into chunks that you can see updates on on a daily basis. With a team inexperienced at remote working and an increasing chance of people needing to take personal or sick days, it‚Äôs important that as many pieces of work as possible are left in a ‚Äúhandoverable‚Äù state at the end of every working day.</p>

<p>It is crucial that you (as a manager/lead) take part in the remote working culture and feel its pain points. One of the reasons we believe remote working has been so successful at NoRedInk is having built remote managers (including VPs) into the company right from the beginning of its remote working history.</p>

<h2>Practical Tips</h2>

<p>This is probably the bit you‚Äôre here for: practical hints and tips from people who have been doing this for a while. All of these are suggestions, not rules, and some may not be possible for you at the moment. Some of them even contradict! Humans are different, so pick the options that work for you.</p>

<h3>Looking after yourself</h3>

<ul>
<li>No one will be asking you if you want a coffee. Make sure you have water to hand, and set times to go and get a drink.</li>
<li>Be careful with snacks! Don‚Äôt leave food out (if you‚Äôre like me, if it is visible you will eat it)</li>
<li>It‚Äôs okay to have your pets around, especially if you live on your own.

<ul>
<li>If your cat wants to sit on your laptop you can always distract it with a hot water bottle in a blanket.</li>
</ul></li>
<li>Make sure you do some exercise. You‚Äôd be surprised how active most people‚Äôs commutes are; you‚Äôll need to be deliberate in doing something else to make up for it.</li>
<li>Be deliberate to physically move throughout the day. In the office, when a meeting starts or ends you get up and move around. At home, you plug in some headphones. If you find yourself sitting around for extended periods, set a timer to remind yourself to move.</li>
<li>Reach out to people frequently. There‚Äôs a section below on communication in general, but do not sit around at home feeling lonely: we‚Äôre aiming to be physically distant, but not emotionally/socially distant.</li>
<li>Video calls (especially one to one) can be very socially intense, even more so than in person meetings. If you are an introvert, try not to book multiple video calls back to back.</li>
<li>Your children are important, and they are dealing with a stressful unexpected change of circumstances. There will be times where they interrupt your work, have meltdowns, need a hug, or just will not sleep. Do what needs to be done for them, and decide in advance that you‚Äôre not going to feel guilty about it when it delays your work production (harder than it sounds).

<ul>
<li><em>Managers:</em> please explicitly support this. You cannot believe how much of a difference it made to my mental health to start working in a remote environment where looking after the family was explicitly affirmed.</li>
</ul></li>
</ul>

<h3>Communication (for Introverts and Extroverts)</h3>

<ul>
<li>If your job doesn&#39;t already have a strong remote culture, communicate until you feel like you&#39;re overcommunicating. (although that&#39;s true even if you do have a strong remote culture.)</li>
<li>Set up a shared document where each person tracks a high level list of what they‚Äôre working on for the day. Google Docs or Dropbox Paper are perfect for this.</li>
<li>Set up a text based chat channel for your team. Ask everyone to check it regularly during the day (maybe once per hour) so that your team can communicate without interrupting each other. It‚Äôs best not to set up alerts on this channel if you can avoid it.

<ul>
<li>Post anything in here; this is not a replacement for email, this is a replacement for ‚Äúwhat did you do last weekend‚Äù</li>
</ul></li>
<li>When using text chat, don‚Äôt get too fine grained. You might not get a reply for 30-60minutes, so don‚Äôt say ‚ÄúHi Bob‚Äù and wait for a response. Post your actual question/information straight away.</li>
<li>Video chat is pretty good for face to face meetings these days: we use Zoom (https://zoom.us/) but most of the major providers are good. We do find Zoom copes better with large groups compared to the competitors we‚Äôve tried.</li>
<li>If you end up doing this for the long haul, set up check-ins with coworkers. Like, literally put 15 or 30 minute meetings on their calendars where you just talk about life.</li>
<li>‚ÄúI enjoy hopping on a zoom with colleagues even if we&#39;re not collaborating to feel like I&#39;m in a community / to have the opportunity for office banter.‚Äù</li>
<li>Put together a ‚ÄúSocial Contact Cheatsheet‚Äù for yourself, and share it (even better, have a directory for everyone who‚Äôs remoting).

<ul>
<li>It should have things like: preference order for contact methods (‚Äúi.e. email, then chat, then video‚Äù)</li>
<li>Your contact hours (see section below on choosing working hours)</li>
<li>Whether you like to be warned before voice/video contact (with the family around, people often need a moment to set up before accepting a call)</li>
<li>Let people know if you prefer to work mostly ‚Äúalone‚Äù, in a shared social channel (i.e. group video call of people hanging out but not directly collaborating) or to actively pair work with a team member</li>
</ul></li>
<li><em>Managers:</em> It is much, much easier to build a good remote working communication environment if the whole team/department/company is remote working. If there are groups of people staying office based, make sure that you insist they take part in the remote communication channels or you will lose things between the gaps.</li>
</ul>

<h3>Processes/Routine</h3>

<ul>
<li>If possible, power down all your work stuff at the end of your day and leave it that way / put it away.</li>
<li>Create a personal routine, let people know when it affects the wider team</li>
<li>‚ÄúWhen I close my computer at 5:30pm it&#39;s done. Slack goes DND on my phone, emails are turned off etc. The way I work isn&#39;t location based (I have 3-4 different spots around the house where I camp out) but strongly time-based.‚Äù</li>
<li>Take care with social media! At home, there‚Äôs no external time constraints to how long you spend browsing it, so it‚Äôs easy to spend much longer on it than you mean to.</li>
<li>Be realistic in the routines you set; you may have to adjust timings significantly from ‚Äúnormal‚Äù to work around constraints at home.</li>
<li><em>Managers:</em> now is not a good time to insist on 9-5 working. If there are on call requirements, work out with your team who is covering when - but now is a good time to ditch ‚Äúcore office hours‚Äù.</li>
</ul>

<h3>Working Environment</h3>

<ul>
<li>Set aside some place‚Äîeven if it&#39;s just a chair or a corner of the room‚Äîthat is The Work Zone (don&#39;t do non-work there, don&#39;t do work elsewhere)</li>
<li>if that&#39;s not feasible then you can do something sensory to make it clear that it&#39;s work time. I dunno‚Ä¶ play the coffee shop channel on mynoise?</li>
<li>If possible allow yourself one extra spot or at least an outside area. Sometimes it can feel cooped-uppy sitting in the same place forever.</li>
<li>Most TVs have HDMI ports these days. I use our TV as a second monitor when I really need one</li>
<li>See if you can find a way to work standing up some of the time (although don‚Äôt stand up all day, that will murder your knees)</li>
<li>Have a ‚Äúwork‚Äù playlist of music:

<ul>
<li>chilledcow&#39;s playlists on spotify are pretty great. It&#39;s the same person who runs the &quot;lofi hop hop music for studying&quot; youtube stream</li>
<li>Low-distraction background music round-up. We swear by these in my household:</li>
<li><a href="https://www.youtube.com/watch?v=bebuiaSKtU4">lofi hip hop radio - beats to study/relax to</a></li>
<li><a href="https://www.youtube.com/watch?v=5qap5aO4i9A">lofi hip hop radio - beats to relax/study to</a></li>
<li><a href="https://www.youtube.com/watch?v=NEmIPDs9CZw">Chillhop Radio üêæ [jazzy beats / lofi hip hop]</a></li>
<li><a href="https://www.youtube.com/watch?v=ivNIpLdzh7M">Rainy Days In Tokyo [Lofi Hip Hop / Jazzhop / Chillhop Mix] - Beats to chill/study/relax</a></li>
<li><a href="https://www.youtube.com/watch?v=iEGFFyv0MH4">Nighttime Ramen üçú [jazzy beats / lofi hip hop mix]</a></li>
<li><a href="https://www.youtube.com/watch?v=DWcJFNfaw9c">lofi hip hop radio - beats to sleep/chill to</a></li>
<li><a href="https://www.youtube.com/watch?v=lTRiuFIWV54">1 A.M Study Session üìö - [lofi hip hop/chill beats]</a></li>
<li>These all also have soothing, subtly changing visuals if you happen to cast your YouTube to a TV or other monitor to play them. Sets a helpful vibe.</li>
</ul></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Free Probabilities]]></title>
    <link href="https://blog.mavnn.co.uk/free-probabilities/"/>
    <updated>2019-11-06T18:37:04+00:00</updated>
    <id>https://blog.mavnn.co.uk/free-probabilities</id>
    <content type="html"><![CDATA[<p>As the Monty Python crew would say: &quot;Now for something completely different!&quot;</p>

<blockquote>
<p>TL;DR: I&#39;m going to turn a <code>Monad</code> of probabilities into a <code>Free Monad</code> of probabilities and this is not nearly so scary as it sounds. Also, it&#39;s actually useful!</p>
</blockquote>

<p>I&#39;ve been using a bit more Haskell recently, and after watching a demo from a <a href="https://twitter.com/schtoeffel">colleague</a> I wanted to solve a problem that&#39;s been bouncing around my brain for a while.</p>

<p>I do a fair bit of both game playing and game design (in the board game and tabletop roleplaying sense of &#39;game&#39;), and I&#39;m often interested in either generating random values or investigating how likely the result of a random process is.</p>

<p>Let&#39;s give an example; if I model a dice roll with the &quot;spread&quot; of possible outcomes, it might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="cm">{-# LANGUAGE DeriveFunctor #-}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Protolude</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Ratio</span>
</span><span class='line'>
</span><span class='line'><span class="kr">type</span> <span class="kt">Probability</span> <span class="ow">=</span> <span class="kt">Ratio</span> <span class="kt">Integer</span>
</span><span class='line'>
</span><span class='line'><span class="kr">newtype</span> <span class="kt">Spread</span> <span class="n">a</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kt">Spread</span> <span class="p">[(</span><span class="n">a</span><span class="p">,</span> <span class="kt">Probability</span><span class="p">)]</span>
</span><span class='line'>  <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">,</span> <span class="kt">Eq</span><span class="p">,</span> <span class="kt">Functor</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">dice</span> <span class="ow">::</span> <span class="kt">Spread</span> <span class="kt">Integer</span>
</span><span class='line'><span class="nf">dice</span> <span class="ow">=</span> <span class="kt">Spread</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span> <span class="o">%</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>              <span class="p">,(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span> <span class="o">%</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>              <span class="p">,(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span> <span class="o">%</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>              <span class="p">,(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span> <span class="o">%</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>              <span class="p">,(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span> <span class="o">%</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>              <span class="p">,(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span> <span class="o">%</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>              <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

<!-- more -->

<p>This basically just means that if I roll that dice, I have a 1 in 6 chance of rolling any of the 6 numbers. Now, there are rules for combining conditional probabilities: let&#39;s start adding these in.</p>

<p>Haskell has basically given us one for free; if something always happens, we can adjust all of the potential outcomes to incorporate the &quot;something&quot;. This can be modeled by being able to <code>map</code> over the values in our <code>Spread</code>.</p>

<p>Let&#39;s add 10 to our dice roll, regardless of what&#39;s rolled:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- Œª&gt; fmap ((+) 10) dice</span>
</span><span class='line'><span class="kt">Spread</span> <span class="p">[(</span><span class="mi">11</span><span class="p">,</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">6</span><span class="p">),(</span><span class="mi">12</span><span class="p">,</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">6</span><span class="p">),(</span><span class="mi">13</span><span class="p">,</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">6</span><span class="p">),(</span><span class="mi">14</span><span class="p">,</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">6</span><span class="p">),(</span><span class="mi">15</span><span class="p">,</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">6</span><span class="p">),(</span><span class="mi">16</span><span class="p">,</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">6</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>

<p>So far, so good. Let&#39;s see if we can take this a bit further; turn <code>Spread</code> into an <code>Applicative</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">instance</span> <span class="kt">Applicative</span> <span class="kt">Spread</span> <span class="kr">where</span>
</span><span class='line'>  <span class="n">pure</span> <span class="n">v</span> <span class="ow">=</span> <span class="kt">Spread</span> <span class="p">[(</span><span class="n">v</span><span class="p">,</span> <span class="mi">1</span> <span class="o">%</span> <span class="mi">1</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">Spread</span> <span class="n">fs</span><span class="p">)</span> <span class="o">&lt;*&gt;</span> <span class="p">(</span><span class="kt">Spread</span> <span class="n">xs</span><span class="p">)</span> <span class="ow">=</span>
</span><span class='line'>    <span class="kt">Spread</span> <span class="p">[(</span><span class="n">f</span> <span class="n">x</span><span class="p">,</span> <span class="n">p1</span> <span class="o">*</span> <span class="n">p2</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">p1</span><span class="p">)</span> <span class="ow">&lt;-</span> <span class="n">fs</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">p2</span><span class="p">)</span> <span class="ow">&lt;-</span> <span class="n">xs</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here we set up two things; first, <code>pure</code> enables us to take any individual value and turn into a <code>Spread</code> of that value. From a logical point of view, the total probability of all of the items in a spread must add up to &quot;1&quot; (we&#39;ll enforce that with smart constructors later) so there&#39;s only one choice here. <code>pure</code> returns a <code>Spread</code> with a single item in it - probability of that outcome? Certain.</p>

<p><code>&lt;*&gt;</code> is the operator that allows us to take a <code>Spread</code> of functions <code>a -&gt; b</code> and a <code>Spread</code> of inputs <code>a</code> and return a <code>Spread b</code>. Hmm. How should that work?</p>

<p>Well, to work out the probability of an event A which is conditional on event B, you just multiply the two probabilities together. So <code>&lt;*&gt;</code> turns out to be reasonably straight forward: you take all possible combinations of functions and inputs, and return each output with a probability of (probability of function * probability of input).</p>

<p>So that&#39;s done, but doesn&#39;t look immediately useful. It does, however, allow us to escalate one more level: <code>Monad</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">instance</span> <span class="kt">Monad</span> <span class="kt">Spread</span> <span class="kr">where</span>
</span><span class='line'>  <span class="p">(</span><span class="o">&gt;&gt;=</span><span class="p">)</span> <span class="ow">=</span> <span class="n">bind</span>
</span><span class='line'>
</span><span class='line'><span class="nf">bind</span> <span class="ow">::</span> <span class="kt">Spread</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Spread</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Spread</span> <span class="n">b</span>
</span><span class='line'><span class="nf">bind</span> <span class="p">(</span><span class="kt">Spread</span> <span class="n">xs</span><span class="p">)</span> <span class="n">f</span> <span class="ow">=</span> <span class="kt">Spread</span> <span class="o">$</span> <span class="n">concatMap</span> <span class="n">concatinate</span> <span class="n">xs</span>
</span><span class='line'>  <span class="kr">where</span>
</span><span class='line'>    <span class="n">combineConditional</span> <span class="p">(</span><span class="kt">Spread</span> <span class="n">children</span><span class="p">,</span> <span class="n">parentProb</span><span class="p">)</span> <span class="ow">=</span>
</span><span class='line'>      <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">prob</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">parentProb</span> <span class="o">*</span> <span class="n">prob</span><span class="p">))</span> <span class="n">children</span>
</span><span class='line'>    <span class="n">concatinate</span> <span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="ow">=</span> <span class="n">combineConditional</span> <span class="p">(</span><span class="n">f</span> <span class="n">v</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>So we&#39;re back on conditional probabilities again. We take each of our values from the input spread and apply our function to it. Then we multiply the probability of the outcome in the &quot;child&quot; spread with the probability of the &quot;parent&quot; input - and finally we concatinate the whole lot back together into a single list and wrap it up in <code>Spread</code> again.</p>

<p>The way the laws of probability (and, well, fraction multiplication) work, if the total probability in each of our <code>Spread</code>s is 1, the total probability across all of our outcomes after a bind will also be 1. Neat! Now we have something we can use.</p>

<p>Let&#39;s add 10 to every dice that rolls more than 3!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">weirdRoll</span> <span class="ow">::</span> <span class="kt">Spread</span> <span class="kt">Integer</span>
</span><span class='line'><span class="nf">weirdRoll</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">roll</span> <span class="ow">&lt;-</span> <span class="n">dice</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">roll</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="kr">then</span>
</span><span class='line'>    <span class="n">pure</span> <span class="p">(</span><span class="n">roll</span> <span class="o">+</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">else</span>
</span><span class='line'>    <span class="n">pure</span> <span class="n">roll</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Spread [(1,1 % 6),(2,1 % 6),(3,1 % 6),(14,1 % 6),(15,1 % 6),(16,1 % 6)]</span>
</span></code></pre></td></tr></table></div></figure>

<p>This is starting to look good.</p>

<p>We do have a problem though: this is a very useful representation for when we want to know every possible outcome and it&#39;s probability of happening - but that&#39;s not always desirable, or possible.</p>

<p>Let&#39;s take a famous example; a game where you flip a coin. If it comes up tails it pays out ¬£1.00 - if you get heads you pay again with double the pay out. How much do you want to pay to take part in this game?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">doubleOnHeads</span> <span class="ow">::</span> <span class="kt">Integer</span> <span class="ow">-&gt;</span> <span class="kt">Spread</span> <span class="kt">Integer</span>
</span><span class='line'><span class="nf">doubleOnHeads</span> <span class="n">last</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">isTails</span> <span class="ow">&lt;-</span> <span class="kt">Spread</span> <span class="p">[(</span><span class="kt">True</span><span class="p">,</span> <span class="mi">1</span> <span class="o">%</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="kt">False</span><span class="p">,</span> <span class="mi">1</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)]</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">isTails</span> <span class="kr">then</span>
</span><span class='line'>    <span class="n">pure</span> <span class="n">last</span>
</span><span class='line'>  <span class="kr">else</span>
</span><span class='line'>    <span class="n">doubleOnHeads</span> <span class="p">(</span><span class="n">last</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Which promptly creates an infinite last of possible outcome states. In an other use case, it can be nice to just pick an outcome from the sample space. For example, if I want to model how much damage a warrior in my Pathfinder game does with a long sword I may want to look at the probability spread&#8230; or I might just want to pick a result at random.</p>

<p>So I want to take this existing monadic data structure, but execute it with different execution strategies. Which meant when someone at work mentioned <code>Free</code> monads in a demo and mentioned that they capture the shape of a monad without executing it, my ears pricked up.</p>

<p>The theory says that we can take any <code>Functor</code> and turn it into a <code>Free Monad</code>; so turning a <code>Monad</code> into a <code>Free Monad</code> must be even easier, no?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">Control.Monad.Free</span>
</span><span class='line'>
</span><span class='line'><span class="kr">type</span> <span class="kt">Prob</span> <span class="ow">=</span> <span class="kt">Free</span> <span class="kt">Spread</span>
</span></code></pre></td></tr></table></div></figure>

<p>Well, the first step is pretty straight forward. Now we can create <code>Prob</code> representations of dependent probabilities just like before!</p>

<p>Let&#39;s have a few functions to create <code>Spread</code>s which are both guaranteed to be &quot;meaningful&quot; and lifted into our new <code>Prob</code> type.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- Turn a list of equally likely outcomes into a `Prob`</span>
</span><span class='line'><span class="nf">ofList</span> <span class="ow">::</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Prob</span> <span class="n">a</span>
</span><span class='line'><span class="nf">ofList</span> <span class="n">xs</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">denom</span> <span class="ow">=</span> <span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">length</span> <span class="n">xs</span>
</span><span class='line'>   <span class="kr">in</span> <span class="n">lift</span> <span class="o">$</span> <span class="kt">Spread</span> <span class="o">$</span> <span class="n">map</span> <span class="p">(,</span> <span class="mi">1</span> <span class="o">%</span> <span class="n">denom</span><span class="p">)</span> <span class="n">xs</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Turn a single outcome into a one item `Prob` with likelyhood of &quot;1&quot;</span>
</span><span class='line'><span class="nf">certain</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Prob</span> <span class="n">a</span>
</span><span class='line'><span class="nf">certain</span> <span class="ow">=</span> <span class="n">pure</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Turn a list of outcomes with relative likehood to each other</span>
</span><span class='line'><span class="c1">-- into a `Prob`</span>
</span><span class='line'><span class="nf">ofWeightedList</span> <span class="ow">::</span> <span class="p">[(</span><span class="n">a</span><span class="p">,</span> <span class="kt">Integer</span><span class="p">)]</span> <span class="ow">-&gt;</span> <span class="kt">Prob</span> <span class="n">a</span>
</span><span class='line'><span class="nf">ofWeightedList</span> <span class="n">xs</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">denom</span> <span class="ow">=</span> <span class="n">sum</span> <span class="o">$</span> <span class="n">map</span> <span class="n">snd</span> <span class="n">xs</span>
</span><span class='line'>   <span class="kr">in</span> <span class="n">lift</span> <span class="o">$</span> <span class="kt">Spread</span> <span class="o">$</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">w</span> <span class="o">%</span> <span class="n">denom</span><span class="p">))</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we can rewrite our previous example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">weirdRoll2</span> <span class="ow">::</span> <span class="kt">Prob</span> <span class="kt">Integer</span>
</span><span class='line'><span class="nf">weirdRoll2</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">roll</span> <span class="ow">&lt;-</span> <span class="n">ofList</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">6</span><span class="p">]</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">roll</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="kr">then</span>
</span><span class='line'>    <span class="n">pure</span> <span class="p">(</span><span class="n">roll</span> <span class="o">+</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">else</span>
</span><span class='line'>    <span class="n">pure</span> <span class="n">roll</span>
</span></code></pre></td></tr></table></div></figure>

<p>Success! Kind of. This looks great, and type checks, but I can&#39;t actually evaluate the result any more.</p>

<p>Let&#39;s see if we can deal with that. The <code>Control.Monad.Free</code> library provides a hopefully named function called <code>iterM</code>.</p>

<p>The full type annotation looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">iterM</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Monad</span> <span class="n">m</span><span class="p">,</span> <span class="kt">Functor</span> <span class="n">f</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">(</span><span class="n">f</span> <span class="p">(</span><span class="n">m</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Free</span> <span class="n">f</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>

<p>Ouch. Well, we have a <code>Monad</code> we want to turn things into (<code>Spread</code>). And we have the <code>Functor</code> which our <code>Free Spread</code> is created from which is&#8230; <code>Spread</code>. So let&#39;s start plugging in names:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">iterM</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Spread</span> <span class="p">(</span><span class="kt">Spread</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Spread</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Free</span> <span class="kt">Spread</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Spread</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>

<p>Looking carefully, it looks like all I actually need to supply is a function <code>(Spread (Spread a)) -&gt; Spread a</code>. Let&#39;s see if we can find an easy way to do that in <a href="https://hoogle.haskell.org/">Hoogle</a>, a search engine that allows us to search for function signatures.</p>

<p>Searching for <a href="https://hoogle.haskell.org/?hoogle=Monad%20m%20%3D%3E%20(m%20(m%20a))%20-%3E%20m%20a">Monad m =&gt; (m (m a)) -&gt; m a</a> turns up <code>join</code> which is already part of the <code>Monad</code> type class. Abstraction for the win!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">getSpread</span> <span class="ow">::</span> <span class="kt">Prob</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Spread</span> <span class="n">a</span>
</span><span class='line'><span class="nf">getSpread</span> <span class="ow">=</span> <span class="n">iterM</span> <span class="n">join</span>
</span><span class='line'>
</span><span class='line'><span class="nf">isWorking</span> <span class="ow">::</span> <span class="kt">Bool</span>
</span><span class='line'><span class="nf">isWorking</span> <span class="ow">=</span> <span class="n">getSpread</span> <span class="n">weirdRoll2</span> <span class="o">==</span> <span class="n">weirdRoll</span>
</span><span class='line'><span class="c1">-- True</span>
</span></code></pre></td></tr></table></div></figure>

<p>Good stuff. Now life gets really interesting. Let&#39;s add in ways of picking a single sample out of a <code>Prob</code> without evaluating the entire outcome space.</p>

<p>First, we need a way of picking a single outcome from a <code>Spread</code>. We&#39;ll break it down into two functions; <code>pickFromSpread</code> starts from the knowledge that the probabilities in a <code>Spread</code> always add up to 1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">pickFromSpread</span> <span class="ow">::</span> <span class="kt">Spread</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="n">a</span>
</span><span class='line'><span class="nf">pickFromSpread</span> <span class="p">(</span><span class="kt">Spread</span> <span class="n">xs</span><span class="p">)</span> <span class="ow">=</span>
</span><span class='line'>  <span class="n">pickSample</span> <span class="p">(</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">1</span><span class="p">)</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>

<p>It has a return type of <code>IO a</code> because picking a random value means the function is not referentially transparent.</p>

<p>Our second function decides whether to take pick the first sample from a list of <code>[(a, Probability)]</code> based on the Probability of the first item compared to the total of all of the Probabilities in the list. We pass in the total of the remaining probabilities as an argument each time, as the list may be infinite so we don&#39;t want to <code>sum</code> across it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="s">&quot;random&quot;</span> <span class="nn">System.Random</span>
</span><span class='line'>
</span><span class='line'><span class="nf">pickSample</span> <span class="ow">::</span> <span class="kt">Probability</span> <span class="ow">-&gt;</span> <span class="p">[(</span><span class="n">a</span><span class="p">,</span> <span class="kt">Probability</span><span class="p">)]</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="n">a</span>
</span><span class='line'><span class="nf">pickSample</span> <span class="n">totalProb</span> <span class="p">((</span><span class="n">outcome</span><span class="p">,</span> <span class="n">prob</span><span class="p">)</span><span class="kt">:</span><span class="n">rest</span><span class="p">)</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="c1">-- rescale our probability to be out of &quot;1&quot;</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">actualProbability</span> <span class="ow">=</span> <span class="n">prob</span> <span class="o">/</span> <span class="n">totalProb</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">numerator</span> <span class="n">actualProbability</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">d</span> <span class="ow">=</span> <span class="n">denominator</span> <span class="n">actualProbability</span>
</span><span class='line'>  <span class="n">pick</span> <span class="ow">&lt;-</span> <span class="n">randomRIO</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">pick</span> <span class="o">&lt;=</span> <span class="n">n</span>
</span><span class='line'>    <span class="kr">then</span> <span class="n">pure</span> <span class="n">outcome</span>
</span><span class='line'>    <span class="kr">else</span> <span class="n">pickSample</span> <span class="p">(</span><span class="n">totalProb</span> <span class="o">-</span> <span class="n">prob</span><span class="p">)</span> <span class="n">rest</span>
</span><span class='line'><span class="nf">pickSample</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="n">panic</span> <span class="s">&quot;This shouldn&#39;t ever happen! Oops.&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>We can now go from <code>Spread a</code> to <code>IO a</code>. Let&#39;s plug that into <code>iterM</code>&#39;s type signature again and see what we get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">iterM</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Monad</span> <span class="n">m</span><span class="p">,</span> <span class="kt">Functor</span> <span class="n">f</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">(</span><span class="n">f</span> <span class="p">(</span><span class="n">m</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Free</span> <span class="n">f</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">m</span> <span class="ow">=</span> <span class="kt">IO</span> <span class="n">a</span><span class="p">,</span> <span class="n">f</span> <span class="ow">=</span> <span class="kt">Spread</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">iterM</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Spread</span> <span class="p">(</span><span class="kt">IO</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Free</span> <span class="kt">Spread</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>

<p>This looks pretty similar to before, where we used <code>join</code> to unwrap nested <code>Spread</code> structures. If we could turn that <code>Spread (IO a)</code> into a <code>IO (IO a)</code> than we could call <code>join</code> with it - which we can, because that&#39;s exactly what <code>pickFromSpread</code> does!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">getSample</span> <span class="ow">::</span> <span class="kt">Prob</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="n">a</span>
</span><span class='line'><span class="nf">getSample</span> <span class="ow">=</span> <span class="n">iterM</span> <span class="p">(</span><span class="n">join</span> <span class="o">.</span> <span class="n">pickFromSpread</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we can call start pulling random samples out of a <code>Prob</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- Œª&gt; getSample weirdRoll2</span>
</span><span class='line'><span class="mi">15</span>
</span><span class='line'><span class="c1">-- Œª&gt; getSample weirdRoll2</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="c1">-- Œª&gt; getSample weirdRoll2</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>

<p>This is very fast, and even works well on infinitely recursive definitions like our coin flip above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- Œª&gt; getSample $ lift (doubleOnHeads 1)</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="c1">-- Œª&gt; getSample $ lift (doubleOnHeads 1)</span>
</span><span class='line'><span class="mi">32</span>
</span><span class='line'><span class="c1">-- Œª&gt; getSample $ lift (doubleOnHeads 1)</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="c1">-- Œª&gt; getSample $ lift (doubleOnHeads 1)</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>

<p>This technique begins to look interesting when you realize that this technique allows you to take <em>anything</em> implemented as a <code>Functor</code> and supply an alternative execution method. Want to supply test values in your test instead of values from <code>IO</code>? This might just let you do that.</p>

<p>That&#39;s basically all for now, but I will leave you with a final example.</p>

<p>First, a function that makes all of this usable in practice; the <code>normalize</code> function takes a <code>Spread</code> and groups together repeats of the same outcome into a single value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.HashMap.Strict</span> <span class="k">as</span> <span class="n">HM</span>
</span><span class='line'>
</span><span class='line'><span class="nf">normalize</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Eq</span> <span class="n">a</span><span class="p">,</span> <span class="kt">Hashable</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="kt">Prob</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Prob</span> <span class="n">a</span>
</span><span class='line'><span class="nf">normalize</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">spreadNorm</span> <span class="p">(</span><span class="kt">Spread</span> <span class="n">xs</span><span class="p">)</span> <span class="ow">=</span>
</span><span class='line'>        <span class="kt">Spread</span> <span class="o">$</span>
</span><span class='line'>        <span class="kt">HM</span><span class="o">.</span><span class="n">toList</span> <span class="o">$</span> <span class="n">foldr</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="n">acc</span> <span class="ow">-&gt;</span> <span class="kt">HM</span><span class="o">.</span><span class="n">insertWith</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="n">v</span> <span class="n">p</span> <span class="n">acc</span><span class="p">)</span> <span class="kt">HM</span><span class="o">.</span><span class="n">empty</span> <span class="n">xs</span>
</span><span class='line'>   <span class="kr">in</span> <span class="n">lift</span> <span class="o">.</span> <span class="n">spreadNorm</span> <span class="o">.</span> <span class="n">retract</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then a model of an attack in Pathfinder (1st edition), modeling a strike with a weapon against a foe and building in things like critical hits:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">Probability</span> <span class="c1">-- the code from above</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Protolude</span>
</span><span class='line'>
</span><span class='line'><span class="nf">diceRoll</span> <span class="ow">::</span> <span class="kt">Integer</span> <span class="ow">-&gt;</span> <span class="kt">Prob</span> <span class="kt">Integer</span>
</span><span class='line'><span class="nf">diceRoll</span> <span class="n">faces</span> <span class="ow">=</span> <span class="n">ofList</span> <span class="p">[</span><span class="mi">1</span> <span class="o">..</span> <span class="n">faces</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">d4</span> <span class="ow">::</span> <span class="kt">Prob</span> <span class="kt">Integer</span>
</span><span class='line'><span class="nf">d4</span> <span class="ow">=</span> <span class="n">diceRoll</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'><span class="nf">d6</span> <span class="ow">::</span> <span class="kt">Prob</span> <span class="kt">Integer</span>
</span><span class='line'><span class="nf">d6</span> <span class="ow">=</span> <span class="n">diceRoll</span> <span class="mi">6</span>
</span><span class='line'>
</span><span class='line'><span class="nf">d8</span> <span class="ow">::</span> <span class="kt">Prob</span> <span class="kt">Integer</span>
</span><span class='line'><span class="nf">d8</span> <span class="ow">=</span> <span class="n">diceRoll</span> <span class="mi">8</span>
</span><span class='line'>
</span><span class='line'><span class="nf">d10</span> <span class="ow">::</span> <span class="kt">Prob</span> <span class="kt">Integer</span>
</span><span class='line'><span class="nf">d10</span> <span class="ow">=</span> <span class="n">diceRoll</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="nf">d12</span> <span class="ow">::</span> <span class="kt">Prob</span> <span class="kt">Integer</span>
</span><span class='line'><span class="nf">d12</span> <span class="ow">=</span> <span class="n">diceRoll</span> <span class="mi">12</span>
</span><span class='line'>
</span><span class='line'><span class="nf">d20</span> <span class="ow">::</span> <span class="kt">Prob</span> <span class="kt">Integer</span>
</span><span class='line'><span class="nf">d20</span> <span class="ow">=</span> <span class="n">diceRoll</span> <span class="mi">20</span>
</span><span class='line'>
</span><span class='line'><span class="nf">roll</span> <span class="ow">::</span> <span class="kt">Integer</span> <span class="ow">-&gt;</span> <span class="kt">Prob</span> <span class="kt">Integer</span> <span class="ow">-&gt;</span> <span class="kt">Integer</span> <span class="ow">-&gt;</span> <span class="kt">Prob</span> <span class="kt">Integer</span>
</span><span class='line'><span class="nf">roll</span> <span class="n">numDice</span> <span class="n">dice</span> <span class="n">mod&#39;</span> <span class="ow">=</span>
</span><span class='line'>  <span class="n">normalize</span> <span class="o">$</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">dieRolls</span> <span class="ow">&lt;-</span> <span class="n">traverse</span> <span class="n">identity</span> <span class="p">(</span><span class="n">replicate</span> <span class="p">(</span><span class="n">fromIntegral</span> <span class="n">numDice</span><span class="p">)</span> <span class="n">dice</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pure</span> <span class="o">$</span> <span class="n">sum</span> <span class="n">dieRolls</span> <span class="o">+</span> <span class="n">mod&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">Attack</span> <span class="ow">=</span> <span class="kt">Attack</span>
</span><span class='line'>  <span class="p">{</span> <span class="n">attackDamage</span> <span class="ow">::</span> <span class="kt">Prob</span> <span class="kt">Integer</span>
</span><span class='line'>  <span class="p">,</span> <span class="n">attackCritRange</span> <span class="ow">::</span> <span class="kt">Integer</span>
</span><span class='line'>  <span class="p">,</span> <span class="n">attackCritMult</span> <span class="ow">::</span> <span class="kt">Integer</span>
</span><span class='line'>  <span class="p">,</span> <span class="n">attackAccuracy</span> <span class="ow">::</span> <span class="kt">Integer</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">Defense</span> <span class="ow">=</span> <span class="kt">Defense</span>
</span><span class='line'>  <span class="p">{</span> <span class="n">armorClass</span> <span class="ow">::</span> <span class="kt">Integer</span>
</span><span class='line'>  <span class="p">,</span> <span class="n">damageReduction</span> <span class="ow">::</span> <span class="kt">Integer</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">longSword</span> <span class="ow">::</span> <span class="kt">Integer</span> <span class="ow">-&gt;</span> <span class="kt">Integer</span> <span class="ow">-&gt;</span> <span class="kt">Attack</span>
</span><span class='line'><span class="nf">longSword</span> <span class="n">accBonus</span> <span class="n">damBonus</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kt">Attack</span>
</span><span class='line'>    <span class="p">{</span> <span class="n">attackDamage</span> <span class="ow">=</span> <span class="n">roll</span> <span class="mi">1</span> <span class="n">d8</span> <span class="n">damBonus</span>
</span><span class='line'>    <span class="p">,</span> <span class="n">attackCritRange</span> <span class="ow">=</span> <span class="mi">19</span>
</span><span class='line'>    <span class="p">,</span> <span class="n">attackCritMult</span> <span class="ow">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="p">,</span> <span class="n">attackAccuracy</span> <span class="ow">=</span> <span class="n">accBonus</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">HitResult</span>
</span><span class='line'>  <span class="ow">=</span> <span class="kt">Critical</span>
</span><span class='line'>  <span class="o">|</span> <span class="kt">Hit</span>
</span><span class='line'>  <span class="o">|</span> <span class="kt">Miss</span>
</span><span class='line'>
</span><span class='line'><span class="nf">isHit</span> <span class="ow">::</span> <span class="kt">Attack</span> <span class="ow">-&gt;</span> <span class="kt">Defense</span> <span class="ow">-&gt;</span> <span class="kt">Prob</span> <span class="kt">HitResult</span>
</span><span class='line'><span class="nf">isHit</span> <span class="n">attack</span> <span class="n">defense</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">doesHit</span> <span class="n">rollToHit</span> <span class="ow">=</span>
</span><span class='line'>        <span class="kr">case</span> <span class="n">rollToHit</span> <span class="kr">of</span>
</span><span class='line'>          <span class="mi">1</span> <span class="ow">-&gt;</span> <span class="kt">False</span>
</span><span class='line'>          <span class="mi">20</span> <span class="ow">-&gt;</span> <span class="kt">True</span>
</span><span class='line'>          <span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">attackAccuracy</span> <span class="n">attack</span> <span class="o">&gt;</span> <span class="n">armorClass</span> <span class="n">defense</span>
</span><span class='line'>  <span class="n">toHit</span> <span class="ow">&lt;-</span> <span class="n">roll</span> <span class="mi">1</span> <span class="n">d20</span> <span class="mi">0</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">doesHit</span> <span class="n">toHit</span>
</span><span class='line'>    <span class="kr">then</span> <span class="kr">do</span>
</span><span class='line'>      <span class="n">confirmCrit</span> <span class="ow">&lt;-</span> <span class="n">roll</span> <span class="mi">1</span> <span class="n">d20</span> <span class="mi">0</span>
</span><span class='line'>      <span class="kr">if</span> <span class="n">doesHit</span> <span class="n">confirmCrit</span>
</span><span class='line'>        <span class="kr">then</span> <span class="n">pure</span> <span class="kt">Critical</span>
</span><span class='line'>        <span class="kr">else</span> <span class="n">pure</span> <span class="kt">Hit</span>
</span><span class='line'>    <span class="kr">else</span> <span class="n">pure</span> <span class="kt">Miss</span>
</span><span class='line'>
</span><span class='line'><span class="nf">resolveAttack</span> <span class="ow">::</span> <span class="kt">Attack</span> <span class="ow">-&gt;</span> <span class="kt">Defense</span> <span class="ow">-&gt;</span> <span class="kt">Prob</span> <span class="kt">Integer</span>
</span><span class='line'><span class="nf">resolveAttack</span> <span class="n">attack</span> <span class="n">defense</span> <span class="ow">=</span>
</span><span class='line'>  <span class="n">normalize</span> <span class="o">$</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">hit</span> <span class="ow">&lt;-</span> <span class="n">isHit</span> <span class="n">attack</span> <span class="n">defense</span>
</span><span class='line'>    <span class="kr">case</span> <span class="n">hit</span> <span class="kr">of</span>
</span><span class='line'>      <span class="kt">Miss</span> <span class="ow">-&gt;</span> <span class="n">pure</span> <span class="mi">0</span>
</span><span class='line'>      <span class="kt">Hit</span> <span class="ow">-&gt;</span> <span class="n">attackDamage</span> <span class="n">attack</span>
</span><span class='line'>      <span class="kt">Critical</span> <span class="ow">-&gt;</span> <span class="kr">do</span>
</span><span class='line'>        <span class="n">damages</span> <span class="ow">&lt;-</span>
</span><span class='line'>          <span class="n">traverse</span>
</span><span class='line'>            <span class="n">identity</span>
</span><span class='line'>            <span class="p">(</span><span class="n">replicate</span>
</span><span class='line'>               <span class="p">(</span><span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">attackCritMult</span> <span class="n">attack</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="n">attackDamage</span> <span class="n">attack</span><span class="p">))</span>
</span><span class='line'>        <span class="n">pure</span> <span class="o">$</span> <span class="n">max</span> <span class="mi">0</span> <span class="p">(</span><span class="n">sum</span> <span class="n">damages</span> <span class="o">-</span> <span class="n">damageReduction</span> <span class="n">defense</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>With some results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- Œª&gt; getSpread $ resolveAttack (longSword 5 2) (Defense 15 0)</span>
</span><span class='line'><span class="kt">Spread</span>
</span><span class='line'>  <span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">16</span><span class="p">,</span><span class="mi">5</span> <span class="o">%</span> <span class="mi">256</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">17</span><span class="p">,</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">18</span><span class="p">,</span><span class="mi">3</span> <span class="o">%</span> <span class="mi">256</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">19</span><span class="p">,</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">20</span><span class="p">,</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">256</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">6</span><span class="p">,</span><span class="mi">9</span> <span class="o">%</span> <span class="mi">256</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">7</span><span class="p">,</span><span class="mi">5</span> <span class="o">%</span> <span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">8</span><span class="p">,</span><span class="mi">11</span> <span class="o">%</span> <span class="mi">256</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">9</span><span class="p">,</span><span class="mi">3</span> <span class="o">%</span> <span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">10</span><span class="p">,</span><span class="mi">13</span> <span class="o">%</span> <span class="mi">256</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">11</span><span class="p">,</span><span class="mi">3</span> <span class="o">%</span> <span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">12</span><span class="p">,</span><span class="mi">7</span> <span class="o">%</span> <span class="mi">256</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">13</span><span class="p">,</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">14</span><span class="p">,</span><span class="mi">7</span> <span class="o">%</span> <span class="mi">256</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,(</span><span class="mi">15</span><span class="p">,</span><span class="mi">3</span> <span class="o">%</span> <span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Œª&gt; getSample $ resolveAttack (longSword 5 2) (Defense 15 0)</span>
</span><span class='line'><span class="mi">12</span>
</span><span class='line'><span class="c1">-- Œª&gt; getSample $ resolveAttack (longSword 5 2) (Defense 15 0)</span>
</span><span class='line'><span class="mi">15</span>
</span><span class='line'><span class="c1">-- Œª&gt; getSample $ resolveAttack (longSword 5 2) (Defense 15 0)</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="c1">-- Œª&gt; getSample $ resolveAttack (longSword 5 2) (Defense 15 0)</span>
</span><span class='line'><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>

<p>I hope you&#39;ve enjoyed this brief visit to useful abstractions in Haskell; it&#39;s definitely a language where as you learn it you realise that you have great power, and great responsibility to the next maintainer!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shake: Generated Files]]></title>
    <link href="https://blog.mavnn.co.uk/shake-generated-files/"/>
    <updated>2019-09-09T17:00:00+01:00</updated>
    <id>https://blog.mavnn.co.uk/shake-generated-files</id>
    <content type="html"><![CDATA[<blockquote>
<p>This post is part of a series! If you haven&#39;t already, check out <a href="https://blog.mavnn.co.uk/shake-the-intro/">the introduction</a> so you know what&#39;s going on.</p>
</blockquote>

<p>It&#39;s fairly obvious how dependencies work in Shake when all of the files are known while you&#39;re writing your rules.</p>

<p>And if a build rule creates a single file matching a pattern, or even a known set of files based on a pattern: that&#39;s pretty simple too. Just add a rule (<a href="https://hackage.haskell.org/package/shake-0.17.1/docs/Development-Shake.html#v:-37--62-">%&gt;</a> for building a single file, <a href="https://hackage.haskell.org/package/shake-0.17.1/docs/Development-Shake.html#v:-38--37--62-">&amp;%&gt;</a> for a list) and then when you <code>need</code> one of the outputs Shake knows how to make sure it&#39;s up to date.</p>

<p>Life becomes a little more interesting when you have a rule that takes multiple inputs (detected at run time) and creates multiple outputs (depending on what was found).</p>

<p>Let&#39;s look at an example. We&#39;re writing a computer game, and the game designers want to be able to quickly specify new types of characters that can exist. The designers and developers settle on a compromise; they&#39;ll use Yaml with a few simple type names the developers will teach the designers.</p>

<p>So the designers start churning out character types, which look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Fighter</span>
</span><span class='line'><span class="l-Scalar-Plain">insaneToughness</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Integer</span>
</span><span class='line'><span class="l-Scalar-Plain">ridiculousStrength</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Integer</span>
</span></code></pre></td></tr></table></div></figure>

<p>or this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Rogue</span>
</span><span class='line'><span class="l-Scalar-Plain">sneakyTricks</span><span class="p-Indicator">:</span> <span class="s">&quot;[String]&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>The developers, on the other hand, want to be able to consume nice safe Haskell types like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">Generated.Fighter</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Names</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">putStrLn</span> <span class="o">$</span> <span class="s">&quot;Hello, &quot;</span> <span class="o">++</span> <span class="n">world</span> <span class="o">++</span> <span class="s">&quot;!&quot;</span>
</span><span class='line'>  <span class="n">print</span>
</span><span class='line'>    <span class="p">(</span> <span class="kt">Fighter</span>
</span><span class='line'>      <span class="p">{</span> <span class="n">insaneToughness</span> <span class="ow">=</span> <span class="mi">5</span>
</span><span class='line'>      <span class="p">,</span> <span class="n">ridiculousStrength</span> <span class="ow">=</span> <span class="mi">10</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>And we want our code to break at compile time if, for any reason, the Yaml files get changed and we start relying on things that no longer exist. So we&#39;re going to set up a build rule that builds a directory full of nice type safe code from a directory full of nice concise and easy to edit Yaml.</p>

<!-- More -->

<p>Let&#39;s see what we can come up to build this safely. Our first shot at a replacement build <code>Rule</code> looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>  <span class="s">&quot;_build&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;main&quot;</span> <span class="o">&lt;.&gt;</span> <span class="n">exe</span> <span class="o">%&gt;</span> <span class="nf">\</span><span class="n">out</span> <span class="ow">-&gt;</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">src</span> <span class="ow">&lt;-</span> <span class="n">getDirectoryFiles</span> <span class="s">&quot;&quot;</span> <span class="p">[</span><span class="s">&quot;src//*.hs&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="c1">-- depend on the generated Haskell as well</span>
</span><span class='line'>    <span class="c1">-- as hand written files</span>
</span><span class='line'>    <span class="n">need</span> <span class="p">[</span><span class="s">&quot;_build/haskell_generation.log&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">generated</span> <span class="ow">&lt;-</span> <span class="n">getDirectoryFiles</span> <span class="s">&quot;&quot;</span> <span class="p">[</span><span class="s">&quot;src&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;Generated//*.hs&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">need</span> <span class="o">$</span> <span class="n">src</span> <span class="o">++</span> <span class="n">generated</span>
</span><span class='line'>    <span class="n">cmd_</span>
</span><span class='line'>      <span class="s">&quot;ghc&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="s">&quot;src&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;main.hs&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="s">&quot;-isrc&quot;</span>
</span><span class='line'>      <span class="s">&quot;-outputdir&quot;</span>
</span><span class='line'>      <span class="s">&quot;_build&quot;</span>
</span><span class='line'>      <span class="s">&quot;-o&quot;</span>
</span><span class='line'>      <span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>

<p>This looks very similar to the previous build rule, with just the addition of a few lines to account for the generated files. The only slightly quirky moment is <code>need [&quot;_build/haskell_generation.log&quot;]</code>; we need this because Shake has no concept of a rule for a directory. So the rule for <code>_build/haskell_generation.log</code> creates all of our generated files, so that we can then &quot;get&quot; them on the line below.</p>

<p>We also need to add the rules for <code>_build/haskell_generation.log</code> and for files in the generated directory, to make sure they&#39;re generated before they are used.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>  <span class="c1">-- Make sure if a generated file is needed, it has been</span>
</span><span class='line'>  <span class="c1">-- created</span>
</span><span class='line'>  <span class="n">priority</span> <span class="mi">2</span> <span class="o">$</span> <span class="s">&quot;src&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;Generated//*.hs&quot;</span> <span class="o">%&gt;</span> <span class="nf">\</span><span class="kr">_</span> <span class="ow">-&gt;</span>
</span><span class='line'>    <span class="n">need</span> <span class="p">[</span><span class="s">&quot;_build/haskell_generation.log&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="c1">-- Target ensures all haskell files are built</span>
</span><span class='line'>  <span class="s">&quot;_build/haskell_generation.log&quot;</span> <span class="o">%&gt;</span> <span class="nf">\</span><span class="n">out</span> <span class="ow">-&gt;</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">yamlFiles</span> <span class="ow">&lt;-</span> <span class="n">getDirectoryFiles</span> <span class="s">&quot;&quot;</span> <span class="p">[</span><span class="s">&quot;yaml_types//*.yaml&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">need</span> <span class="n">yamlFiles</span>
</span><span class='line'>    <span class="n">createHaskellFiles</span> <span class="n">yamlFiles</span>
</span><span class='line'>    <span class="n">writeFileLines</span> <span class="n">out</span> <span class="n">yamlFiles</span>
</span><span class='line'>    <span class="c1">-- Make sure we rerun if the list of files in src/Generated</span>
</span><span class='line'>    <span class="c1">-- changes</span>
</span><span class='line'>    <span class="kr">_</span> <span class="ow">&lt;-</span> <span class="n">getDirectoryFiles</span> <span class="s">&quot;&quot;</span> <span class="p">[</span><span class="s">&quot;src&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;Generated//*.hs&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">pure</span> <span class="nb">()</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>createHaskellFiles</code> here is the logic that writes the Generated files, but it could easily be some external tool being called via a script.</p>

<p>Then you run shake, and &#8230; the code works! Awesome, we&#39;re done, right?</p>

<p>Well, maybe not. The first sign something might be wrong is in the docs. The docs for <a href="http://hackage.haskell.org/package/shake-0.17.3/docs/Development-Shake.html#v:getDirectoryFiles">getDirectoryFiles</a> state: &quot;As a consequence of being tracked, if the contents change during the build (e.g. you are generating .c files in this directory) then the build not reach a stable point, which is an error - detected by running with &#8211;lint. You should normally only call this function returning source files.&quot;</p>

<p>That doesn&#39;t sound good. Maybe we should check the behaviour of our code.</p>

<p>Let&#39;s delete one of the generated files, and run Shake again to check it detects that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rm src/Generated/rogue.hs
</span><span class='line'><span class="nv">$ </span>shake
</span><span class='line'>Formatting build files
</span><span class='line'><span class="c"># ormolu (for src/Generated/rogue.hs)</span>
</span><span class='line'><span class="c"># ghc (for _build/main)</span>
</span><span class='line'>Build completed in 0.51s
</span></code></pre></td></tr></table></div></figure>

<p>Whew! Maybe we&#39;re okay. We&#39;ll just run it once more:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>shake
</span><span class='line'>Formatting build files
</span><span class='line'><span class="c"># ghc (for _build/main)</span>
</span><span class='line'>Build completed in 0.23s
</span></code></pre></td></tr></table></div></figure>

<p>Oh. That&#39;s not good: nothing has changed, so why have we invoked <code>ghc</code>?</p>

<p>Here we hit something very, very, important to understand about <code>getDirectoryFiles</code> (and other Shake Rules and Oracles): they only run once per invocation of Shake.</p>

<p>Let&#39;s step through the implications of what this means on each of the build runs.</p>

<h3>Run 1 (from clean)</h3>

<ul>
<li>We ask for the <code>_build/main</code> executable to be built; it doesn&#39;t exist, so the <code>Action</code> in the <code>Rule</code> runs</li>
<li>Among other things, we ask for <code>_build/haskell_generation.log</code>; it also doesn&#39;t exist, so we run it&#39;s <code>Action</code>. Several files (let&#39;s say, <code>fighter.hs</code> and <code>rogue.hs</code>) get written to the generated file directory</li>
<li>We call <code>getDirectoryFiles</code>, telling Shake that we depend on the generated files directory having <code>fighter.hs</code> and <code>rogue.hs</code> and no other Haskell files</li>
<li>We need the content of all the source files and build the executable.</li>
</ul>

<h3>Run 2 (deleted <code>rogue.hs</code>)</h3>

<ul>
<li>We ask for the <code>_build/main</code> executable to be built; it exists, so Shake starts checking if it&#39;s dependencies have changed</li>
<li>Among other things, it call <code>getDirectoryFiles</code> on the generated file directory, and records that there&#39;s now only <code>fighter.hs</code> in there: the file list has changed</li>
<li><code>_build/main</code> has changed dependencies so we run it&#39;s <code>Action</code></li>
<li>During that action, <code>getDirectoryFiles</code> is called on the Generated file directory. It has already been run (see above) so Shake does not run it again: it records that only <code>fighter.hs</code> is depended on <em>even though <code>rogue.hs</code> has now been recreated</em></li>
<li>We build the executable</li>
</ul>

<h3>Run 3 (no change)</h3>

<ul>
<li>We ask for the <code>_build/main</code> executable to be built; it exists, so Shake starts checking if it&#39;s dependencies have changed</li>
<li>Among other things, it call <code>getDirectoryFiles</code> on the generated file directory, and records that there&#39;s now both <code>fighter.hs</code> and <code>rogue.hs</code> in there: the file list has changed again!</li>
<li><code>_build/main</code> has changed dependencies so we run it&#39;s <code>Action</code></li>
</ul>

<p>In fact, it turns out that if we turn on linting in Shake it will tell us about this problem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>shake --lint
</span><span class='line'><span class="c"># ormolu (for src/Generated/fighter.hs)</span>
</span><span class='line'><span class="c"># ghc (for _build/main)</span>
</span><span class='line'><span class="o">[</span>2 of 3<span class="o">]</span> Compiling Generated.Fighter <span class="o">(</span> src/Generated/Fighter.hs, _build/Generated/Fighter.o <span class="o">)</span>
</span><span class='line'>Linking _build/main ...
</span><span class='line'>Lint checking error - value has changed since being depended upon:
</span><span class='line'>  Key:  getDirectoryFiles  <span class="o">[</span>src//*.hs<span class="o">]</span>
</span><span class='line'>  Old:  <span class="o">(</span>src/Names.hs src/main.hs src/Generated/rogue.hs,<span class="s2">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>  New:  src/Names.hs src/main.hs src/Generated/fighter.hs src/Generated/rogue.hs
</span></code></pre></td></tr></table></div></figure>

<h2>Back to the drawing board</h2>

<p>So: what do we want from our rules here? Let&#39;s actually put down the end effect we&#39;re aiming for:</p>

<ul>
<li>If there are any Yaml files are added, removed or changed, we should regenerate</li>
<li>If any of the Generated files have been removed or changed, we should regenerate</li>
<li>If a generated file is <code>need</code>ed, we should check we have an up to date set of generated files</li>
<li>If the input and output files are unchanged since the last run, we should not regenerate</li>
</ul>

<p>We can&#39;t call <code>getDirectoryFiles</code> on the generated Haskell files, for the reason given above; and we can&#39;t call <code>need</code> on the Haskell files after generating them in the <code>_build/haskell_generation.log</code> to rebuild if they change, because they themselves <code>need</code> the Haskell generation.</p>

<p>We&#39;re going to have to break out some bigger guns.</p>

<p>Firstly, we&#39;re going to want to encode from custom logic for when to rebuild based on the environment. We model this is Shake by setting up an &quot;Oracle&quot;; this allows us to store a value in the Shake database, and if it changes between one run and the next anything which depends on it is considered dirty and needs rebuilding.</p>

<p>Secondly, <code>_build/haskell_generation.log</code> is going to stop being just a &quot;stamp&quot; file to get around the fact that Shake doesn&#39;t know about directories, and we&#39;re going to start storing some useful info in there.</p>

<p>Of course, we still need to be careful: just like running <code>getDirectoryFiles</code>, our Oracle is only going to be evaluated once for the whole run of Shake, and it will be evaluated to check dependencies before the actual rules which depend on it are run.</p>

<p>Let&#39;s go with a model where we assign each run of the generator a unique ID, which we&#39;ll use in our Oracle and stash in our output file so that we can return the same ID if nothing has changed on disk.</p>

<p>We&#39;ll create some reusable code to do this; we&#39;ll take a list of patterns for generated files this rule controls, an output file, and an action to generate the files. I&#39;ll show you the code in full, and there&#39;s some explanation underneath:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="cm">{-# LANGUAGE GeneralizedNewtypeDeriving #-}</span>
</span><span class='line'><span class="cm">{-# LANGUAGE ScopedTypeVariables #-}</span>
</span><span class='line'><span class="cm">{-# LANGUAGE TypeFamilies #-}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">module</span> <span class="nn">Shakefiles.Generator</span>
</span><span class='line'>  <span class="p">(</span> <span class="nf">generator</span>
</span><span class='line'>  <span class="p">,</span> <span class="nf">getGeneratedFiles</span>
</span><span class='line'>  <span class="p">,</span> <span class="nf">runIdOracle</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Control.Applicative</span> <span class="p">()</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Aeson</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.ByteString.Lazy</span> <span class="k">as</span> <span class="n">B</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.UUID</span> <span class="k">as</span> <span class="n">UUID</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.UUID.V4</span> <span class="p">(</span><span class="nf">nextRandom</span><span class="p">)</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Development.Shake</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Development.Shake.Classes</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">System.Directory</span> <span class="k">as</span> <span class="n">Directory</span>
</span><span class='line'>
</span><span class='line'><span class="kr">newtype</span> <span class="kt">GetRunId</span>
</span><span class='line'>  <span class="ow">=</span> <span class="kt">GetRunId</span> <span class="p">(</span><span class="kt">FilePath</span><span class="p">,</span> <span class="p">[</span><span class="kt">FilePattern</span><span class="p">])</span>
</span><span class='line'>  <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">,</span> <span class="kt">Typeable</span><span class="p">,</span> <span class="kt">Eq</span><span class="p">,</span> <span class="kt">Hashable</span><span class="p">,</span> <span class="kt">Binary</span><span class="p">,</span> <span class="kt">NFData</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">type</span> <span class="kr">instance</span> <span class="kt">RuleResult</span> <span class="kt">GetRunId</span> <span class="ow">=</span> <span class="kt">UUID</span><span class="o">.</span><span class="kt">UUID</span>
</span><span class='line'>
</span><span class='line'><span class="nf">runIdOracle</span> <span class="ow">::</span> <span class="kt">GetRunId</span> <span class="ow">-&gt;</span> <span class="kt">Action</span> <span class="kt">UUID</span><span class="o">.</span><span class="kt">UUID</span>
</span><span class='line'><span class="nf">runIdOracle</span> <span class="p">(</span><span class="kt">GetRunId</span> <span class="p">(</span><span class="n">filePath</span><span class="p">,</span> <span class="n">patterns</span><span class="p">))</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">recordExists</span> <span class="ow">&lt;-</span> <span class="n">liftIO</span> <span class="o">$</span> <span class="kt">Directory</span><span class="o">.</span><span class="n">doesFileExist</span> <span class="n">filePath</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">recordExists</span>
</span><span class='line'>  <span class="kr">then</span>
</span><span class='line'>    <span class="kr">do</span>
</span><span class='line'>      <span class="n">recorded</span> <span class="ow">&lt;-</span> <span class="n">decode</span> <span class="o">&lt;$&gt;</span> <span class="n">liftIO</span> <span class="p">(</span><span class="kt">B</span><span class="o">.</span><span class="n">readFile</span> <span class="n">filePath</span><span class="p">)</span>
</span><span class='line'>      <span class="kr">case</span> <span class="n">recorded</span> <span class="kr">of</span>
</span><span class='line'>        <span class="kt">Just</span> <span class="p">(</span><span class="n">lastRunId</span><span class="p">,</span> <span class="n">generatedFiles</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kr">do</span>
</span><span class='line'>          <span class="n">filesOnDisk</span> <span class="ow">&lt;-</span> <span class="n">liftIO</span> <span class="o">$</span> <span class="n">getDirectoryFilesIO</span> <span class="s">&quot;&quot;</span> <span class="n">patterns</span>
</span><span class='line'>          <span class="kr">if</span> <span class="n">filesOnDisk</span> <span class="o">/=</span> <span class="n">generatedFiles</span>
</span><span class='line'>          <span class="kr">then</span> <span class="n">liftIO</span> <span class="n">nextRandom</span>
</span><span class='line'>          <span class="kr">else</span> <span class="n">pure</span> <span class="n">lastRunId</span>
</span><span class='line'>        <span class="kt">Nothing</span> <span class="ow">-&gt;</span>
</span><span class='line'>          <span class="n">liftIO</span> <span class="n">nextRandom</span>
</span><span class='line'>  <span class="kr">else</span> <span class="n">liftIO</span> <span class="n">nextRandom</span>
</span><span class='line'>
</span><span class='line'><span class="nf">recordGeneratedFiles</span> <span class="ow">::</span> <span class="kt">UUID</span><span class="o">.</span><span class="kt">UUID</span> <span class="ow">-&gt;</span> <span class="kt">FilePath</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">FilePattern</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Action</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">recordGeneratedFiles</span> <span class="n">runId</span> <span class="n">out</span> <span class="n">patterns</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">filesCreated</span> <span class="ow">&lt;-</span> <span class="n">liftIO</span> <span class="o">$</span> <span class="n">getDirectoryFilesIO</span> <span class="s">&quot;&quot;</span> <span class="n">patterns</span>
</span><span class='line'>  <span class="n">liftIO</span> <span class="o">$</span> <span class="kt">B</span><span class="o">.</span><span class="n">writeFile</span> <span class="n">out</span> <span class="o">$</span> <span class="n">encode</span> <span class="p">(</span><span class="n">runId</span><span class="p">,</span> <span class="n">filesCreated</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">generator</span> <span class="ow">::</span> <span class="kt">FilePath</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">FilePattern</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Action</span> <span class="nb">()</span> <span class="ow">-&gt;</span> <span class="kt">Rules</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">generator</span> <span class="n">out</span> <span class="n">generatedPatterns</span> <span class="n">generationCmd</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">generatedPatterns</span> <span class="o">|%&gt;</span> <span class="nf">\</span><span class="kr">_</span> <span class="ow">-&gt;</span> <span class="n">need</span> <span class="p">[</span><span class="n">out</span><span class="p">]</span>
</span><span class='line'>  <span class="n">out</span> <span class="o">%&gt;</span> <span class="nf">\</span><span class="kr">_</span> <span class="ow">-&gt;</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">runId</span> <span class="ow">&lt;-</span> <span class="n">askOracle</span> <span class="o">$</span> <span class="kt">GetRunId</span> <span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">generatedPatterns</span><span class="p">)</span>
</span><span class='line'>    <span class="n">liftIO</span> <span class="o">$</span> <span class="n">removeFiles</span> <span class="s">&quot;&quot;</span> <span class="n">generatedPatterns</span>
</span><span class='line'>    <span class="n">generationCmd</span>
</span><span class='line'>    <span class="n">recordGeneratedFiles</span> <span class="n">runId</span> <span class="n">out</span> <span class="n">generatedPatterns</span>
</span></code></pre></td></tr></table></div></figure>

<p>The file starts with some boiler plate code needed for storing the unique identifier in the shake database.</p>

<p>Then we have the logic for creating a run ID:</p>

<ul>
<li>Check if an output file already exists. </li>
<li>If it does:

<ul>
<li>we&#39;ll read the last UID and list of files created from it</li>
<li>We&#39;ll read the list of files that match the generated pattern </li>
<li>If the two lists don&#39;t match, new UID is created</li>
<li>If they do, we return the same UID as last time</li>
</ul></li>
<li>If it doesn&#39;t, we&#39;ll create a new UID</li>
</ul>

<p>That means that if the list of generated files has changed, we know we need to run the generator.</p>

<p>Then we have a rule that matches all of the patterns for files which will be generated, and depends on the output file.</p>

<p>Finally, we have the rule for the output file:</p>

<ul>
<li>this acquires a run ID</li>
<li>deletes any files that match the generated patterns (this ensures that we don&#39;t end up with &quot;stale&quot; generated files that no longer have a creator)</li>
<li>runs the generation Action the user provided</li>
<li>and finally writes the output file with the run ID used and the list of files created</li>
</ul>

<p>This completes the loop and lets us check next time around if the list of generated files has changed.</p>

<p>What does it look like to use? Something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>  <span class="c1">-- This goes in our Shake Rules &quot;do&quot; block</span>
</span><span class='line'>  <span class="kr">_</span> <span class="ow">&lt;-</span> <span class="n">addOracle</span> <span class="n">runIdOracle</span>
</span><span class='line'>  <span class="n">priority</span> <span class="mi">2</span> <span class="o">$</span>
</span><span class='line'>    <span class="n">generator</span>
</span><span class='line'>      <span class="s">&quot;_build/haskell_generation.log&quot;</span>
</span><span class='line'>      <span class="p">[</span><span class="s">&quot;src&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;Generated//*.hs&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="n">writeHaskellFiles</span>
</span><span class='line'>  <span class="kr">where</span>
</span><span class='line'>    <span class="n">writeHaskellFiles</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>      <span class="n">yamlFiles</span> <span class="ow">&lt;-</span> <span class="n">getDirectoryFiles</span> <span class="s">&quot;&quot;</span> <span class="p">[</span><span class="s">&quot;yaml_types//*.yaml&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="n">need</span> <span class="n">yamlFiles</span>
</span><span class='line'>      <span class="n">createHaskellFiles</span> <span class="n">yamlFiles</span>
</span></code></pre></td></tr></table></div></figure>

<p>We have to add the oracle to our rules (only once, not per generator). Then we just call our reusable code with specify the output file, the pattern of files out will be generated, and the logic to generate them (including specifying dependencies of the process). </p>

<p>We&#39;re nearly there, but we still have a problem. We called <code>getDirectoryFiles</code> on the Haskell source files in our Haskell compile build rule! It turns out that it&#39;s not just in the Rules for the generated files themselves that you need to be careful: you just can&#39;t reliably call <code>getDirectoryFiles</code> on generated files anywhere in your build specification.</p>

<p>We can get around that in two ways. One is that we can separate depending on source files (call <code>getDirectoryFiles</code> with a pattern that doesn&#39;t include any of the generated files) from the generated files, and add a helper like the one below to get which files have been generated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">getGeneratedFiles</span> <span class="ow">::</span> <span class="kt">FilePath</span> <span class="ow">-&gt;</span> <span class="kt">Action</span> <span class="p">[</span><span class="kt">FilePath</span><span class="p">]</span>
</span><span class='line'><span class="nf">getGeneratedFiles</span> <span class="n">out</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">need</span> <span class="p">[</span><span class="n">out</span><span class="p">]</span>
</span><span class='line'>  <span class="n">recordFile</span> <span class="ow">&lt;-</span> <span class="n">decode</span> <span class="o">&lt;$&gt;</span> <span class="n">liftIO</span> <span class="p">(</span><span class="kt">B</span><span class="o">.</span><span class="n">readFile</span> <span class="n">out</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">case</span> <span class="n">recordFile</span> <span class="kr">of</span>
</span><span class='line'>    <span class="kt">Just</span> <span class="p">(</span><span class="kr">_</span> <span class="ow">::</span> <span class="kt">UUID</span><span class="o">.</span><span class="kt">UUID</span><span class="p">,</span> <span class="n">rf</span><span class="p">)</span> <span class="ow">-&gt;</span>
</span><span class='line'>      <span class="n">pure</span> <span class="n">rf</span>
</span><span class='line'>    <span class="kt">Nothing</span> <span class="ow">-&gt;</span>
</span><span class='line'>      <span class="n">fail</span> <span class="s">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Usefully, this also ensures that if you ask for the list of generated files the file generation rule will be called!</p>

<p>Alternatively, if we&#39;re happy that all of our input files have now been created, we can often get our tools themselves to tell us what they used. Shake allows us to call the <code>needed</code> function here to record a dependency that we&#39;ve already used. Be aware though that this will error if anything changes the <code>needed</code> file after you used it!</p>

<p>As an example, we can combine the use of <code>ghc</code>&#39;s dependency generation flag and Shake&#39;s makefile parser to rewrite our Haskell rule to the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>  <span class="s">&quot;_build&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;main&quot;</span> <span class="o">&lt;.&gt;</span> <span class="n">exe</span> <span class="o">%&gt;</span> <span class="nf">\</span><span class="n">out</span> <span class="ow">-&gt;</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">need</span> <span class="p">[</span><span class="s">&quot;_build/haskell_generation.log&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">cmd_</span>
</span><span class='line'>      <span class="s">&quot;ghc&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="s">&quot;src&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;main.hs&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="s">&quot;-isrc&quot;</span>
</span><span class='line'>      <span class="s">&quot;-dep-suffix hs&quot;</span>
</span><span class='line'>      <span class="s">&quot;-outputdir&quot;</span>
</span><span class='line'>      <span class="s">&quot;_build&quot;</span>
</span><span class='line'>      <span class="s">&quot;-o&quot;</span>
</span><span class='line'>      <span class="n">out</span>
</span><span class='line'>    <span class="n">withTempFile</span>
</span><span class='line'>      <span class="p">(</span> <span class="nf">\</span><span class="n">tmpFile</span> <span class="ow">-&gt;</span> <span class="kr">do</span>
</span><span class='line'>        <span class="n">cmd_</span>
</span><span class='line'>          <span class="kt">Shell</span>
</span><span class='line'>          <span class="s">&quot;ghc&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="s">&quot;src&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;main.hs&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="s">&quot;-isrc&quot;</span>
</span><span class='line'>          <span class="s">&quot;-outputdir&quot;</span>
</span><span class='line'>          <span class="s">&quot;_build&quot;</span>
</span><span class='line'>          <span class="s">&quot;-o&quot;</span>
</span><span class='line'>          <span class="n">out</span>
</span><span class='line'>          <span class="s">&quot;-dep-makefile&quot;</span>
</span><span class='line'>          <span class="n">tmpFile</span>
</span><span class='line'>          <span class="s">&quot;-dep-suffix &#39;&#39;&quot;</span>
</span><span class='line'>          <span class="s">&quot;-M&quot;</span>
</span><span class='line'>        <span class="n">makeStuff</span> <span class="ow">&lt;-</span> <span class="n">liftIO</span> <span class="o">$</span> <span class="n">readFile</span> <span class="n">tmpFile</span>
</span><span class='line'>        <span class="n">putNormal</span> <span class="n">makeStuff</span>
</span><span class='line'>        <span class="n">neededMakefileDependencies</span> <span class="n">tmpFile</span>
</span><span class='line'>      <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>This runs the compile process, and then calls <code>ghc</code> telling it to write all of the dependencies it used to a temporary makefile. We then use <code>neededMakefileDependencies</code> to specify that we did use those files, even if we didn&#39;t know we were going to before building.</p>

<p>Just make sure that you&#39;ve needed anything that the build system needs to create/update before you run your compile action though!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shake: Linting and Formatting]]></title>
    <link href="https://blog.mavnn.co.uk/shake-linting/"/>
    <updated>2019-09-09T16:00:00+01:00</updated>
    <id>https://blog.mavnn.co.uk/shake-linting</id>
    <content type="html"><![CDATA[<blockquote>
<p>This post is part of a series! If you haven&#39;t already, check out <a href="https://blog.mavnn.co.uk/shake-the-intro/">the introduction</a> so you know what&#39;s going on.</p>
</blockquote>

<p>There&#39;s a bunch of nice tools out there these days that operate on your source code itself, such as auto-formatting and linting tools.</p>

<p>How to configure rules for this kind of thing in Shake isn&#39;t immediately obvious when you&#39;re new to using it. The first time I did it, I ended up with something that looked like this (only showing relevant rules):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>  <span class="s">&quot;_build&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;main&quot;</span> <span class="o">&lt;.&gt;</span> <span class="n">exe</span> <span class="o">%&gt;</span> <span class="nf">\</span><span class="n">out</span> <span class="ow">-&gt;</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">src</span> <span class="ow">&lt;-</span> <span class="n">getDirectoryFiles</span> <span class="s">&quot;&quot;</span> <span class="p">[</span><span class="s">&quot;src//*.hs&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">cmd_</span>
</span><span class='line'>      <span class="s">&quot;hlint&quot;</span>
</span><span class='line'>      <span class="n">src</span>
</span><span class='line'>    <span class="n">need</span> <span class="n">src</span>
</span><span class='line'>    <span class="n">cmd_</span>
</span><span class='line'>      <span class="s">&quot;ghc&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="s">&quot;src&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;main.hs&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="s">&quot;-isrc&quot;</span>
</span><span class='line'>      <span class="s">&quot;-outputdir&quot;</span>
</span><span class='line'>      <span class="s">&quot;_build&quot;</span>
</span><span class='line'>      <span class="s">&quot;-o&quot;</span>
</span><span class='line'>      <span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>

<p>Which at first glance looks great! I&#39;ve made sure that I find and run <code>hlint</code> (a Haskell linting tool) on the source files before I &quot;need&quot; them - remember, once a file has been &quot;needed&quot; in Shake it should not be changed. The code is simple and easy to read. <code>hlint</code> gets efficiently run on the whole list of source files all at once.</p>

<p>What&#39;s not to like?</p>

<!-- More -->

<p>Well: there can be a couple of issues here. One (doesn&#39;t happen often in Haskell, but happens a lot in dynamic languages!) is that several targets could all depend on the same source file. Do all of the targets run the formatter? Who gets there first?</p>

<p>The other problem is that if any source file changes, the command has to be re-run on all of them: if you have a lot of source files and a slow linter or formatter, that&#39;s a big problem. In fact, avoiding that kind of thing is the reason most people start using Shake in the first place!</p>

<p>So we need to move the formatting/linting into the rule for the source file itself: this is the only way to guarantee that whoever uses the file, whenever they use it in the build process, the file will already be formatted before it&#39;s read.</p>

<p>Version two of my code ends up looking like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>  <span class="c1">-- actually build the executable</span>
</span><span class='line'>  <span class="s">&quot;_build&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;main&quot;</span> <span class="o">&lt;.&gt;</span> <span class="n">exe</span> <span class="o">%&gt;</span> <span class="nf">\</span><span class="n">out</span> <span class="ow">-&gt;</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">src</span> <span class="ow">&lt;-</span> <span class="n">getDirectoryFiles</span> <span class="s">&quot;&quot;</span> <span class="p">[</span><span class="s">&quot;src//*.hs&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">need</span> <span class="n">src</span>
</span><span class='line'>    <span class="n">cmd_</span>
</span><span class='line'>      <span class="s">&quot;ghc&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="s">&quot;src&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;main.hs&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="s">&quot;-isrc&quot;</span>
</span><span class='line'>      <span class="s">&quot;-outputdir&quot;</span>
</span><span class='line'>      <span class="s">&quot;_build&quot;</span>
</span><span class='line'>      <span class="s">&quot;-o&quot;</span>
</span><span class='line'>      <span class="n">out</span>
</span><span class='line'>  <span class="c1">-- nicely format and lint all our source files</span>
</span><span class='line'>  <span class="s">&quot;//*.hs&quot;</span> <span class="o">%&gt;</span> <span class="nf">\</span><span class="n">out</span> <span class="ow">-&gt;</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">disableHistory</span>
</span><span class='line'>    <span class="n">cmd_</span> <span class="s">&quot;ormolu&quot;</span> <span class="s">&quot;-m&quot;</span> <span class="s">&quot;inplace&quot;</span> <span class="n">out</span>
</span><span class='line'>    <span class="n">cmd_</span> <span class="s">&quot;hlint&quot;</span> <span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>

<p>This is Shake at its best: super explicit, clear and easy to read. The only slightly quirky thing here is the call to <code>disableHistory</code>; rules where the output and the input are the same file don&#39;t play nicely with Shake&#39;s optional caching system (<code>shakeShare</code> and in the future <code>shakeCloud</code>) so we specify that this rule shouldn&#39;t try and use cached results.</p>

<p>Unfortunately, we do still have a problem: formatting/linting software is often very fast per file, but normally has a short start up time. When you&#39;re starting to format 1,000s of files, that start up time becomes a problem. So now we have technically correct, but unusable code.</p>

<p>Fortunately, the authors of Shake have come across this issue before, and included the amazingly useful <code>batch</code> helpers.</p>

<p>To use <code>batch</code> we need a few things:</p>

<ul>
<li>a maximum batch size</li>
<li>a &quot;match&quot; function to specify which files this batch handles</li>
<li>a &quot;preparation&quot; function that carries out any actions that should be run on the files individually (<code>a -&gt; Action b</code>)</li>
<li>a &quot;batch&quot; function to process a batch of outputs from the preparation function (<code>[b] -&gt; Action a</code>)</li>
</ul>

<p>Behind the scenes, the first time that Shake finds that a target is supplied by a batch function, it doesn&#39;t queue building that target immediately. Instead, it runs any preparation steps and then punts the batch to the end of the queue. It keeps on doing this until it either a) runs out of work to do that isn&#39;t in the batch (at which point it will start with whatever size batch it has) or b) the maximum batch size has been queued. Then it will run the batch command.</p>

<p>It looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>  <span class="c1">-- Build our Haskell application</span>
</span><span class='line'>  <span class="s">&quot;_build&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;main&quot;</span> <span class="o">&lt;.&gt;</span> <span class="n">exe</span> <span class="o">%&gt;</span> <span class="nf">\</span><span class="n">out</span> <span class="ow">-&gt;</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">src</span> <span class="ow">&lt;-</span> <span class="n">getDirectoryFiles</span> <span class="s">&quot;&quot;</span> <span class="p">[</span><span class="s">&quot;src//*.hs&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">need</span> <span class="n">src</span>
</span><span class='line'>    <span class="n">cmd_</span>
</span><span class='line'>      <span class="s">&quot;ghc&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="s">&quot;src&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;main.hs&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="s">&quot;-isrc&quot;</span>
</span><span class='line'>      <span class="s">&quot;-outputdir&quot;</span>
</span><span class='line'>      <span class="s">&quot;_build&quot;</span>
</span><span class='line'>      <span class="s">&quot;-o&quot;</span>
</span><span class='line'>      <span class="n">out</span>
</span><span class='line'>  <span class="c1">-- Format and lint our source files</span>
</span><span class='line'>  <span class="n">batch</span> <span class="mi">10</span> <span class="p">(</span><span class="s">&quot;//*.hs&quot;</span> <span class="o">%&gt;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span> <span class="nf">\</span><span class="n">out</span> <span class="ow">-&gt;</span> <span class="kr">do</span>
</span><span class='line'>      <span class="n">historyDisable</span>
</span><span class='line'>      <span class="c1">-- called per file as ormolu</span>
</span><span class='line'>      <span class="c1">-- processes files one at a time</span>
</span><span class='line'>      <span class="n">cmd_</span> <span class="s">&quot;ormolu&quot;</span> <span class="s">&quot;-m&quot;</span> <span class="s">&quot;inplace&quot;</span> <span class="n">out</span>
</span><span class='line'>      <span class="n">pure</span> <span class="n">out</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="c1">-- lint all the files in batches</span>
</span><span class='line'>    <span class="p">(</span><span class="n">cmd_</span> <span class="s">&quot;hlint&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Voil√†! Correct, fast code.</p>

<p>Of course, engineering reality is full of trade offs, and we have made one here. Because the <code>batch</code> action is run on a list of files, that means that if any one file fails the batch, the entire batch is counted as failing. This is also true if an other rule fails while a batch is processing and Shake cancels the batch.</p>

<p>So while it might be tempting to just turn the batch number up and run the whole lot at once, it might be a better idea to spend a little time tuning the numbers to match the size of your code base and the speed of each batch.</p>

<p>Next up: working with <a href="https://blog.mavnn.co.uk/shake-generated-files/">generated files</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shake: The Intro]]></title>
    <link href="https://blog.mavnn.co.uk/shake-the-intro/"/>
    <updated>2019-09-09T15:00:00+01:00</updated>
    <id>https://blog.mavnn.co.uk/shake-the-intro</id>
    <content type="html"><![CDATA[<p>At <a href="http://noredink.com">NoRedInk</a> we&#39;ve been looking into using <a href="https://shakebuild.com/">Shake</a> to incrementally build large polyglot projects. In general, it&#39;s been a great tool to work with, but there were a few things that caught us out, so I wanted to capture some of that learning before it got lost.</p>

<p>Shake is basically a domain specific language built on top of Haskell, so knowing Haskell can definitely help you unlock it&#39;s full power. But you can get a long way for basic builds by just working with some simple building blocks. You will have to jump through some extra hoops to get it installed and write your scripts with editor support if you&#39;re not using Haskell anyway - but we are, so that wasn&#39;t much of an obstacle for us!</p>

<p>I&#39;m not going to go into the really basic ideas behind Shake: the main website (linked above) has a good introductory demo, and Neil Mitchell (who wrote Shake) has given numerous (very well done) talks on the ideas behind it. What I&#39;m going to do over a few posts is look at some of the things which caught us out, and what you can do about them. I&#39;ll try and remember to link each post here as it comes out!</p>

<!-- more -->

<p>In this introduction, I&#39;m going to show you the mini-example project that we&#39;ll be using in each of the following blog posts. All of the examples can be seen in full (with runnable code!) at <a href="https://github.com/mavnn/shake-examples">https://github.com/mavnn/shake-examples</a>, but if you want just want to follow along you can pretend and just read the Shake files here.</p>

<p>Our &quot;base&quot; Shake file just knows how to build a Haskell project from a group of &quot;*.hs&quot; files in the <code>src</code> directory - everything else will build up from there! This is our starter <code>Shakefile.hs</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Shakefile</span>
</span><span class='line'>  <span class="p">(</span> <span class="nf">main</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Development.Shake</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Development.Shake.FilePath</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span>
</span><span class='line'>  <span class="n">shakeArgs</span>
</span><span class='line'>    <span class="n">shakeOptions</span>
</span><span class='line'>      <span class="p">{</span> <span class="n">shakeFiles</span> <span class="ow">=</span> <span class="s">&quot;_build&quot;</span>
</span><span class='line'>      <span class="p">,</span> <span class="n">shakeChange</span> <span class="ow">=</span> <span class="kt">ChangeModtimeAndDigest</span>
</span><span class='line'>      <span class="p">,</span> <span class="n">shakeColor</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class='line'>      <span class="p">,</span> <span class="n">shakeThreads</span> <span class="ow">=</span> <span class="mi">4</span> <span class="c1">-- default to multicore!</span>
</span><span class='line'>      <span class="p">}</span> <span class="o">$</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">want</span>
</span><span class='line'>      <span class="p">[</span> <span class="s">&quot;_build&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;main&quot;</span> <span class="o">&lt;.&gt;</span> <span class="n">exe</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="n">rules</span>
</span><span class='line'>
</span><span class='line'><span class="nf">rules</span> <span class="ow">::</span> <span class="kt">Rules</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">rules</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="c1">-- Clean build artifacts (including shake history)</span>
</span><span class='line'>  <span class="n">phony</span> <span class="s">&quot;clean&quot;</span> <span class="o">$</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">putNormal</span> <span class="s">&quot;Cleaning _build&quot;</span>
</span><span class='line'>    <span class="n">removeFilesAfter</span> <span class="s">&quot;_build&quot;</span> <span class="p">[</span><span class="s">&quot;//*&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="c1">-- Build our Haskell application</span>
</span><span class='line'>  <span class="s">&quot;_build&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;main&quot;</span> <span class="o">&lt;.&gt;</span> <span class="n">exe</span> <span class="o">%&gt;</span> <span class="nf">\</span><span class="n">out</span> <span class="ow">-&gt;</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">src</span> <span class="ow">&lt;-</span> <span class="n">getDirectoryFiles</span> <span class="s">&quot;&quot;</span> <span class="p">[</span><span class="s">&quot;src//*.hs&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">need</span> <span class="n">src</span>
</span><span class='line'>    <span class="n">cmd_</span>
</span><span class='line'>      <span class="s">&quot;ghc&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="s">&quot;src&quot;</span> <span class="o">&lt;/&gt;</span> <span class="s">&quot;main.hs&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="s">&quot;-isrc&quot;</span>
</span><span class='line'>      <span class="s">&quot;-outputdir&quot;</span>
</span><span class='line'>      <span class="s">&quot;_build&quot;</span>
</span><span class='line'>      <span class="s">&quot;-o&quot;</span>
</span><span class='line'>      <span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>

<p>What does this do? Well, there&#39;s a bit of boilerplate to import the <code>Shake</code> libraries and configure Shake. We also set the wanted output of a default build in this <code>main</code> function: in this case an executable called <code>main</code> in the <code>_build</code> directory (or <code>main.exe</code> on Windows).</p>

<p>Then we have two rules:</p>

<ul>
<li>one &#39;phony&#39; rule (it doesn&#39;t create a file) that knows how to delete our build artifacts</li>
<li>a rule that knows how to build the desired output file</li>
</ul>

<p>This second rule goes through a few steps:</p>

<ul>
<li>It calls <code>getDirectoryFiles</code> to get <em>and depend on</em> the list of &quot;*.hs&quot; files in the src directory. If any *.hs files are added or removed, the rule will be re-run.</li>
<li>It <code>need</code>s all of the *.hs files it found. This means that if the content of any of those files changes, the rule will be re-run.</li>
<li>Finally, it calls <code>ghc</code>, a Haskell compiler, telling it to put all of it&#39;s build artifacts and the output file in the <code>_build</code> directory.</li>
</ul>

<p>Now: let&#39;s start looking at how to build in some more troublesome (or at least, less obvious) functionality you might want in a larger project.</p>

<ol>
<li><a href="https://blog.mavnn.co.uk/shake-linting">Linting And Formatting</a></li>
<li><a href="https://blog.mavnn.co.uk/shake-generated-files/">Generated Files</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Property Based Testing at NDC Oslo 2018]]></title>
    <link href="https://blog.mavnn.co.uk/property-based-testing-at-ndc-oslo-2018/"/>
    <updated>2018-09-07T15:09:07+01:00</updated>
    <id>https://blog.mavnn.co.uk/property-based-testing-at-ndc-oslo-2018</id>
    <content type="html"><![CDATA[<p>This summer I spoke at NDC Oslo. It&#39;s a fantastic event (if huge!), with good talks but also excellent facilities and shared spaces for meeting up with people.</p>

<p>Over the last few weeks, they&#39;ve been publishing the videos of this year&#39;s talks, and mine appeared without me noticing. If you&#39;re interested in a deep dive session on using property based testing to test a templating library, you might find this interesting&#8230;</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/lo7zm0_7x_w" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>

<p>You can find all of the example code on GitHub: https://github.com/mavnn/ndcoslo2018</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working With NoRedInk]]></title>
    <link href="https://blog.mavnn.co.uk/working-with-noredink/"/>
    <updated>2018-06-14T11:09:17+01:00</updated>
    <id>https://blog.mavnn.co.uk/working-with-noredink</id>
    <content type="html"><![CDATA[<p>It&#39;s all change here at @mavnn land: as of last week, we&#39;ve signed a full time, indefinite contract with <a href="https://www.noredink.com/">NoRedInk</a> to provide development services.</p>

<p>Given that we&#39;re a two person company, and only one of us is a developer, that means we won&#39;t be taking on any other work for the foreseeable future!</p>

<p>So, what&#39;s going on, why, and what does it mean for you?</p>

<h3>Why?</h3>

<p>The reasons come on a few levels, but they basically boil down to:</p>

<ul>
<li>I think NoRedInk are doing something really worthwhile, and they really understand remote teams</li>
<li>My family may need to move on fairly short notice at some point (<em>cough</em> Brexit <em>cough</em>) and neither on-site work nor short term contracts give much security in that context</li>
</ul>

<p>There are other reasons, and not necessarily minor ones:</p>

<ul>
<li>They have an in-depth interview process which has convinced me I can work with the engineers there</li>
<li>They&#39;re using Elm on the front end, which I really like the look of</li>
<li>They&#39;re investing in tooling and support</li>
</ul>

<p>I&#39;m only just getting started with them (last week they had a 3 day retreat I was able to join them for, this week I&#39;m at NDC Oslo), but so far I can tell you that they seem to be a great bunch of human beings with a clear, concrete, targeted plan on how to make (one aspect of) the world better. I can get behind that.</p>

<h3>What does it mean for you?</h3>

<p>Well, basically it means that @mavnn ltd will no longer be running on site training or ticketed training events, and we won&#39;t be available for bespoke development. It also means that I&#39;ll be a lot less active in the F# community; I have 3 new programming languages to learn and become productive with in fairly short order.</p>

<p>Having said that, you can probably expect some cross-ecosystem pollination talks at conferences in the future!</p>

<p>Anyway: enough about me. I now return you to your regular schedule of techy bloginess.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Full Stack With Freya]]></title>
    <link href="https://blog.mavnn.co.uk/full-stack-with-freya/"/>
    <updated>2018-05-22T15:04:00+01:00</updated>
    <id>https://blog.mavnn.co.uk/full-stack-with-freya</id>
    <content type="html"><![CDATA[<p>Yesterday night I was about to demo a quick server/client pair with Freya and Fable, and it all went a bit wrong. Some of the issues weren&#39;t related to what I did (computers, gotta love &#39;em) but others were just bits of configuration that I didn&#39;t have at my finger tips.</p>

<p>This means it&#39;s time for a little practice for me, and a mini-tutorial for you (and future me).</p>

<!-- more -->

<h2>What we&#39;re going to do</h2>

<p>We&#39;re going to build a small server application based on Freya which will serve JSON and be a nice RESTful (in the loose sense) API.</p>

<p>Then, we&#39;re going to configure Fable with Elmish to load data from that API. The crucial thing here is that we&#39;re going to configure both projects such that we have a seamless development work flow; automated recompile and restart of the server on code changes, and automatic recompile/reload of the Fable UI on change.</p>

<h2>The server</h2>

<p>Make sure your dotnet core Freya template is up to date:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dotnet new -i Freya
</span></code></pre></td></tr></table></div></figure>

<p>In a root directory for our overall solution, run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dotnet new freya -lang f# -c hopac -f kestrel -o FateServer
</span></code></pre></td></tr></table></div></figure>

<p>This will create a new directory called &quot;FateServer&quot; with a F# project in it. Go into the directory and make sure everything has restored correctly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>FateServer
</span><span class='line'>dotnet restore
</span><span class='line'>dotnet build
</span></code></pre></td></tr></table></div></figure>

<p>One thing I&#39;ve been slowly learning with dotnet core is that the <code>restore</code> run by default during a build doesn&#39;t always seem to be as effective as actually running the full restore command. Just in general, if Core is behaving strangely, running <code>restore</code> is a good starting point.</p>

<p>Next up is making our server log something: by default, Kestrel logs basically nothing.</p>

<p>Install the logging package (it&#39;s not part of the default Freya template):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dotnet add package Microsoft.Extensions.Logging.Console
</span><span class='line'>dotnet restore
</span></code></pre></td></tr></table></div></figure>

<p>In <code>Program.fs</code> add the following at the end of the open statements:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">AspNetCore</span><span class="p">.</span><span class="nc">Builder</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">AspNetCore</span><span class="p">.</span><span class="nc">Hosting</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">Extensions</span><span class="p">.</span><span class="nc">Logging</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">configureLogging</span> <span class="o">(</span><span class="n">b</span> <span class="o">:</span> <span class="nc">IWebHostBuilder</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="nc">ConfigureLogging</span><span class="o">(</span><span class="k">fun</span> <span class="n">l</span> <span class="o">-&gt;</span> <span class="n">l</span><span class="o">.</span><span class="nc">AddConsole</span><span class="bp">()</span> <span class="o">|&gt;</span> <span class="n">ignore</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then inject the method into your WebHost configuration pipeline:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="nn">WebHost</span><span class="p">.</span><span class="n">create</span> <span class="bp">()</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">WebHost</span><span class="p">.</span><span class="n">bindTo</span> <span class="o">[|</span><span class="s2">&quot;http://localhost:5000&quot;</span><span class="o">|]</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">WebHost</span><span class="p">.</span><span class="n">configure</span> <span class="n">configureApp</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="n">configureLogging</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">WebHost</span><span class="p">.</span><span class="n">buildAndRun</span>
</span></code></pre></td></tr></table></div></figure>

<p>Hey presto! Run your application and get logs!</p>

<p>To finish off the niceties of civilized development, let&#39;s add the watch command to our server.</p>

<p>Crack open the <code>fsproj</code> file and add the following ItemGroup to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;ItemGroup&gt;</span>
</span><span class='line'>    <span class="nt">&lt;DotNetCliToolReference</span> <span class="na">Include=</span><span class="s">&quot;Microsoft.DotNet.Watcher.Tools&quot;</span> <span class="na">Version=</span><span class="s">&quot;2.0.0&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/ItemGroup&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Run <code>dotnet restore</code> and from now on running <code>dotnet watch run</code> to start continuous development with file watching should work.</p>

<p>Now we just need to serve up some JSON. We want a send a format which Fable understands, and the kind people at the Fable project have written a Newtonsoft configuration for doing exactly that.</p>

<p>Stop watching the build long enough to run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dotnet add package Fable.JsonConverter
</span><span class='line'>dotnet restore
</span></code></pre></td></tr></table></div></figure>

<p>Next, set up the domain. Create a new file <code>Character.fs</code> (we&#39;re going to be sending back and forth <a href="https://fate-srd.com/fate-accelerated/get-started">Fate Accelerated</a> characters as data). Make sure you add it to the project file before <code>Api.fs</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Character</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">LadderLevel</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">BeyondLegendary</span> <span class="k">of</span> <span class="kt">int</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Legendary</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Epic</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Superb</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Great</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Good</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Fair</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Average</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Mediocre</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Poor</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Terrible</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Abysmal</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">BeyondAbysmal</span> <span class="k">of</span> <span class="kt">int</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Character</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Name</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nc">Careful</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
</span><span class='line'>      <span class="nc">Clever</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
</span><span class='line'>      <span class="nc">Flashy</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
</span><span class='line'>      <span class="nc">Forceful</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
</span><span class='line'>      <span class="nc">Quick</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
</span><span class='line'>      <span class="nc">Sneaky</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
</span><span class='line'>      <span class="nc">HighConcept</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nc">Trouble</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nc">Aspects</span> <span class="o">:</span> <span class="kt">string</span> <span class="kt">list</span>
</span><span class='line'>      <span class="nc">Stunts</span> <span class="o">:</span> <span class="kt">string</span> <span class="kt">list</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now move across to <code>Api.fs</code>. You&#39;ll see that it defaults to a single &quot;greeting&quot; endpoint which responds with a text response. Let&#39;s add a helper for sending JSON correctly, immediately after the existing <code>open</code> statements:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Machines</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nc">Cors</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Types</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nc">Cors</span>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Newtonsoft</span><span class="p">.</span><span class="nc">Json</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Character</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">jsonConverter</span> <span class="o">=</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">JsonConverter</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">JsonConverter</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nc">Represent</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">json</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">value</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">data</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">JsonConvert</span><span class="p">.</span><span class="nc">SerializeObject</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="o">[|</span><span class="n">jsonConverter</span><span class="o">|])</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Text</span><span class="p">.</span><span class="nn">UTF8Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">desc</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">{</span> <span class="nc">Encodings</span> <span class="o">=</span> <span class="nc">None</span>
</span><span class='line'>              <span class="nc">Charset</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">Charset</span><span class="p">.</span><span class="nc">Utf8</span>
</span><span class='line'>              <span class="nc">Languages</span> <span class="o">=</span> <span class="nc">None</span>
</span><span class='line'>              <span class="nc">MediaType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">{</span> <span class="nc">Data</span> <span class="o">=</span> <span class="n">data</span>
</span><span class='line'>          <span class="nc">Description</span> <span class="o">=</span> <span class="n">desc</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next, delete the entire rest of the file and add the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// This endpoint requires a URL template with the &quot;name&quot; atom</span>
</span><span class='line'><span class="k">let</span> <span class="n">name_</span> <span class="o">=</span> <span class="nn">Route</span><span class="p">.</span><span class="n">atom_</span> <span class="s2">&quot;name&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">name</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">nameO</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">name_</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">match</span> <span class="n">nameO</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">name</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">failwith</span> <span class="s2">&quot;Name is a compulsory element of the URL&quot;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We&#39;re going to hard code our data for now</span>
</span><span class='line'><span class="k">let</span> <span class="n">exampleCharacters</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">Map</span> <span class="o">[</span>
</span><span class='line'>        <span class="s2">&quot;bob&quot;</span><span class="o">,</span> <span class="o">{</span> <span class="nc">Name</span> <span class="o">=</span> <span class="s2">&quot;Bob Bobson&quot;</span>
</span><span class='line'>                 <span class="nc">Careful</span> <span class="o">=</span> <span class="nc">Mediocre</span>
</span><span class='line'>                 <span class="nc">Clever</span> <span class="o">=</span> <span class="nc">Fair</span>
</span><span class='line'>                 <span class="nc">Flashy</span> <span class="o">=</span> <span class="nc">Fair</span>
</span><span class='line'>                 <span class="nc">Forceful</span> <span class="o">=</span> <span class="nc">Average</span>
</span><span class='line'>                 <span class="nc">Quick</span> <span class="o">=</span> <span class="nc">Average</span>
</span><span class='line'>                 <span class="nc">Sneaky</span> <span class="o">=</span> <span class="nc">Good</span>
</span><span class='line'>                 <span class="nc">HighConcept</span> <span class="o">=</span> <span class="s2">&quot;The eternal example&quot;</span>
</span><span class='line'>                 <span class="nc">Trouble</span> <span class="o">=</span> <span class="s2">&quot;Lives in the test&quot;</span>
</span><span class='line'>                 <span class="nc">Aspects</span> <span class="o">=</span> <span class="o">[</span> <span class="s2">&quot;It&#39;s only Bob&quot;</span>
</span><span class='line'>                             <span class="s2">&quot;Is he... the recursive one?&quot;</span>
</span><span class='line'>                             <span class="s2">&quot;I&#39;ve got Fred&#39;s back!&quot;</span> <span class="o">]</span>
</span><span class='line'>                 <span class="nc">Stunts</span> <span class="o">=</span> <span class="o">[</span> <span class="s2">&quot;Because everyone assumes I don&#39;t exist, I get +2 on Sneaky rolls to not be noticed.&quot;</span> <span class="o">]</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Once per request, try and load the named character (see the memo at the end)</span>
</span><span class='line'><span class="k">let</span> <span class="n">character</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>        <span class="k">return</span> <span class="nn">Map</span><span class="p">.</span><span class="n">tryFind</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="nc">ToLowerInvariant</span><span class="bp">()</span><span class="o">)</span> <span class="n">exampleCharacters</span>
</span><span class='line'>    <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">memo</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">characterExists</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">character</span> <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="o">.</span><span class="nc">IsSome</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">sendCharacter</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">character</span> <span class="o">=</span> <span class="n">character</span>
</span><span class='line'>        <span class="k">return</span> <span class="nn">Represent</span><span class="p">.</span><span class="n">json</span> <span class="o">(</span><span class="n">character</span><span class="o">.</span><span class="nc">Value</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">characterMachine</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freyaMachine</span> <span class="o">{</span>
</span><span class='line'><span class="o">#</span><span class="k">if</span> <span class="nc">DEBUG</span>
</span><span class='line'>        <span class="n">cors</span>
</span><span class='line'>        <span class="n">corsOrigins</span> <span class="o">[</span> <span class="nn">SerializedOrigin</span><span class="p">.</span><span class="n">parse</span> <span class="s2">&quot;http://localhost:8080&quot;</span> <span class="o">]</span>
</span><span class='line'><span class="o">#</span><span class="n">endif</span>
</span><span class='line'>        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">]</span>
</span><span class='line'>        <span class="n">exists</span> <span class="n">characterExists</span>
</span><span class='line'>        <span class="n">handleOk</span> <span class="n">sendCharacter</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">root</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freyaRouter</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">resource</span> <span class="s2">&quot;/character/{name}&quot;</span> <span class="n">characterMachine</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>There&#39;s quite a lot going on in there, but what we&#39;ve defined with <code>characterMachine</code> is a resource which checks if a character exists, and sends it as Fable readable JSON if it does. We then configure a route to point to it.</p>

<p>Critically, we also turn on <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">CORS</a> (Cross Origin Resource Sharing) for localhost:8080 for debug builds. This will enable requests from our Fable client running it&#39;s development server on a different port to talk to the server.</p>

<p>Edit: Zaid Ajaj <a href="https://twitter.com/zaid_ajaj/status/999177873431891968">points out</a> that you can also configure webpack&#39;s dev server to proxy to your development front end. If you&#39;re writing a system where your API and client will be running on the same domain, check out how to do that below.</p>

<h2>The client</h2>

<p>Go back up into the root directory of the solution, and run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dotnet new -i Fable.Template.Fulma.Minimal
</span></code></pre></td></tr></table></div></figure>

<p>To get a dotnet core template for Fable with F# wrappers for React and Bulma - as well as Elmish pre-installed.</p>

<p>Then run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dotnet new fulma-minimal -lang f# -o FateClient
</span></code></pre></td></tr></table></div></figure>

<p>To create our client application.</p>

<p>Go into the newly created project directory, and use the built in build scripts to get everything up and running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>FateClient
</span><span class='line'>./fake.sh -t watch
</span></code></pre></td></tr></table></div></figure>

<p>On first run, it will download most of the internet, but such is modern net development.</p>

<p>Browse on over to <a href="http://localhost:8080/">http://localhost:8080/</a> to see the base template before we start hacking away!</p>

<p>Very pretty: and in <code>App.fs</code> we can see the nice clean Elmish code driving it.</p>

<p>If you&#39;re running both API and client on the same domain, this is also a good time to update your webpack config (you&#39;ll find <code>webpack.config.js</code> in your FateClient directory). Amend the <code>devServer</code> section as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">devServer:</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">proxy:</span> <span class="err">{</span>
</span><span class='line'>    <span class="err">&#39;/character/*&#39;:</span> <span class="err">{</span>
</span><span class='line'>      <span class="err">target:</span> <span class="err">&#39;http://localhost:5000&#39;,</span>
</span><span class='line'>      <span class="err">changeOrigin:</span> <span class="err">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="err">},</span>
</span><span class='line'>  <span class="err">contentBase:</span> <span class="s2">&quot;./static&quot;</span><span class="err">,</span>
</span><span class='line'>  <span class="err">publicPath:</span> <span class="s2">&quot;/&quot;</span><span class="err">,</span>
</span><span class='line'>  <span class="err">hot:</span> <span class="kc">true</span><span class="err">,</span>
</span><span class='line'>  <span class="err">inline:</span> <span class="kc">true</span>
</span><span class='line'><span class="err">},</span>
</span></code></pre></td></tr></table></div></figure>

<p>If you do this, you&#39;ll want to change the URL below used to load the data.</p>

<p>Now! Let&#39;s start hacking away. Firstly, we&#39;re going to want to share our character types. I&#39;ve decided here that they are owned by the server, so we need to link the file into the Fable project.</p>

<p>In <code>FateClient.fsproj</code>, add change:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;ItemGroup&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Compile</span> <span class="na">Include=</span><span class="s">&quot;App.fs&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ItemGroup&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;ItemGroup&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Compile</span> <span class="na">Include=</span><span class="s">&quot;..\..\FateServer\Character.fs&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Compile</span> <span class="na">Include=</span><span class="s">&quot;App.fs&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ItemGroup&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we can load up our character. In <code>App.fs</code>, it&#39;s time to expand our model. Change our Elmish app as below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">App</span><span class="p">.</span><span class="nc">View</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">Elmish</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nc">React</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nn">React</span><span class="p">.</span><span class="nc">Props</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">PowerPack</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">PowerPack</span><span class="p">.</span><span class="nc">Fetch</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Fulma</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fulma</span><span class="p">.</span><span class="nc">FontAwesome</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Character</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Model</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">IsLoading</span> <span class="o">:</span> <span class="kt">bool</span>
</span><span class='line'>      <span class="nc">Character</span> <span class="o">:</span> <span class="nc">Character</span> <span class="n">option</span>
</span><span class='line'>      <span class="nc">ErrorMessage</span> <span class="o">:</span> <span class="kt">string</span> <span class="n">option</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Msg</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">CharacterLoaded</span> <span class="k">of</span> <span class="nc">Character</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">LoadingError</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">loadBob</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">promise</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">props</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">[</span> <span class="nn">RequestProperties</span><span class="p">.</span><span class="nc">Method</span> <span class="nn">HttpMethod</span><span class="p">.</span><span class="nc">GET</span> <span class="o">]</span>
</span><span class='line'>        <span class="o">#</span><span class="k">if</span> <span class="nc">DEBUG</span>
</span><span class='line'>        <span class="c1">// Use &quot;/character/bob&quot; here if you&#39;ve set up the webpack proxy</span>
</span><span class='line'>        <span class="k">return</span><span class="o">!</span> <span class="n">fetchAs</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="s2">&quot;http://localhost:5000/character/bob&quot;</span> <span class="n">props</span>
</span><span class='line'>        <span class="o">#</span><span class="k">else</span>
</span><span class='line'>        <span class="k">return</span><span class="o">!</span> <span class="n">fetchAs</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="s2">&quot;http://api.example.com/character/bob&quot;</span> <span class="n">props</span>
</span><span class='line'>        <span class="o">#</span><span class="n">endif</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">init</span> <span class="o">_</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">IsLoading</span> <span class="o">=</span> <span class="bp">true</span>
</span><span class='line'>      <span class="nc">Character</span> <span class="o">=</span> <span class="nc">None</span>
</span><span class='line'>      <span class="nc">ErrorMessage</span> <span class="o">=</span> <span class="nc">None</span> <span class="o">},</span>
</span><span class='line'>    <span class="nn">Cmd</span><span class="p">.</span><span class="n">ofPromise</span> <span class="n">loadBob</span> <span class="bp">()</span> <span class="nc">CharacterLoaded</span> <span class="o">(</span><span class="k">fun</span> <span class="n">e</span> <span class="o">-&gt;</span> <span class="nc">LoadingError</span> <span class="n">e</span><span class="o">.</span><span class="nc">Message</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">update</span> <span class="n">msg</span> <span class="n">model</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">CharacterLoaded</span> <span class="n">bob</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">IsLoading</span> <span class="o">=</span> <span class="bp">false</span>
</span><span class='line'>                     <span class="nc">Character</span> <span class="o">=</span> <span class="nc">Some</span> <span class="n">bob</span> <span class="o">},</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">none</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">LoadingError</span> <span class="n">error</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">IsLoading</span> <span class="o">=</span> <span class="bp">false</span>
</span><span class='line'>                     <span class="nc">Character</span> <span class="o">=</span> <span class="nc">None</span>
</span><span class='line'>                     <span class="nc">ErrorMessage</span> <span class="o">=</span> <span class="nc">Some</span> <span class="n">error</span> <span class="o">},</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">none</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">loadingMessage</span> <span class="n">model</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">model</span><span class="o">.</span><span class="nc">IsLoading</span> <span class="k">then</span>
</span><span class='line'>        <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Loading...&quot;</span> <span class="o">]</span>
</span><span class='line'>    <span class="k">else</span> <span class="bp">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">isRounded</span> <span class="o">:</span> <span class="nc">IHTMLProp</span> <span class="kt">list</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">[</span> <span class="nc">Style</span> <span class="o">[</span> <span class="nc">BorderRadius</span> <span class="s2">&quot;25px&quot;</span> <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">characterView</span> <span class="n">character</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">[</span> <span class="nn">Hero</span><span class="p">.</span><span class="n">hero</span> <span class="o">[</span> <span class="nn">Hero</span><span class="p">.</span><span class="nc">Color</span> <span class="nc">IsBlack</span>
</span><span class='line'>                  <span class="nn">Hero</span><span class="p">.</span><span class="nc">Props</span> <span class="n">isRounded</span> <span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="nn">Hero</span><span class="p">.</span><span class="n">body</span> <span class="bp">[]</span> <span class="o">[</span>
</span><span class='line'>            <span class="nn">Container</span><span class="p">.</span><span class="n">container</span> <span class="o">[</span> <span class="nn">Container</span><span class="p">.</span><span class="nc">IsFluid</span>
</span><span class='line'>                                  <span class="nn">Container</span><span class="p">.</span><span class="nc">Modifiers</span>
</span><span class='line'>                                      <span class="o">[</span> <span class="nn">Modifier</span><span class="p">.</span><span class="nc">TextAlignment</span> <span class="o">(</span><span class="nn">Screen</span><span class="p">.</span><span class="nc">All</span><span class="o">,</span> <span class="nn">TextAlignment</span><span class="p">.</span><span class="nc">Centered</span><span class="o">)</span> <span class="o">]</span> <span class="o">]</span> <span class="o">[</span>
</span><span class='line'>                <span class="nn">Heading</span><span class="p">.</span><span class="n">h1</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="n">character</span><span class="o">.</span><span class="nc">Name</span> <span class="o">]</span>
</span><span class='line'>                <span class="n">p</span> <span class="bp">[]</span> <span class="o">[</span>
</span><span class='line'>                    <span class="n">strong</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;High Concept: &quot;</span> <span class="o">]</span>
</span><span class='line'>                    <span class="n">str</span> <span class="n">character</span><span class="o">.</span><span class="nc">HighConcept</span>
</span><span class='line'>                <span class="o">]</span>
</span><span class='line'>                <span class="n">p</span> <span class="bp">[]</span> <span class="o">[</span>
</span><span class='line'>                    <span class="n">strong</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Trouble: &quot;</span> <span class="o">]</span>
</span><span class='line'>                    <span class="n">str</span> <span class="n">character</span><span class="o">.</span><span class="nc">Trouble</span>
</span><span class='line'>                <span class="o">]</span>
</span><span class='line'>            <span class="o">]</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>      <span class="nn">Columns</span><span class="p">.</span><span class="n">columns</span> <span class="bp">[]</span> <span class="o">[</span>
</span><span class='line'>          <span class="nn">Column</span><span class="p">.</span><span class="n">column</span> <span class="bp">[]</span> <span class="o">[</span>
</span><span class='line'>              <span class="nn">Heading</span><span class="p">.</span><span class="n">h2</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Approaches&quot;</span> <span class="o">]</span>
</span><span class='line'>              <span class="nn">Table</span><span class="p">.</span><span class="n">table</span>
</span><span class='line'>                  <span class="o">[</span> <span class="nn">Table</span><span class="p">.</span><span class="nc">IsBordered</span>
</span><span class='line'>                    <span class="nn">Table</span><span class="p">.</span><span class="nc">IsStriped</span> <span class="o">]</span>
</span><span class='line'>                  <span class="o">[</span> <span class="n">thead</span> <span class="bp">[]</span>
</span><span class='line'>                        <span class="o">[</span> <span class="n">tr</span> <span class="bp">[]</span>
</span><span class='line'>                              <span class="o">[</span> <span class="n">th</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Approach&quot;</span> <span class="o">]</span>
</span><span class='line'>                                <span class="n">th</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Level&quot;</span> <span class="o">]</span> <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>                    <span class="n">tbody</span> <span class="bp">[]</span>
</span><span class='line'>                        <span class="o">[</span> <span class="n">tr</span> <span class="bp">[]</span>
</span><span class='line'>                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Careful&quot;</span> <span class="o">]</span>
</span><span class='line'>                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Careful</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>                          <span class="n">tr</span> <span class="bp">[]</span>
</span><span class='line'>                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Clever&quot;</span> <span class="o">]</span>
</span><span class='line'>                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Clever</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>                          <span class="n">tr</span> <span class="bp">[]</span>
</span><span class='line'>                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Flashy&quot;</span> <span class="o">]</span>
</span><span class='line'>                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Flashy</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>                          <span class="n">tr</span> <span class="bp">[]</span>
</span><span class='line'>                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Forceful&quot;</span> <span class="o">]</span>
</span><span class='line'>                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Forceful</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>                          <span class="n">tr</span> <span class="bp">[]</span>
</span><span class='line'>                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Quick&quot;</span> <span class="o">]</span>
</span><span class='line'>                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Quick</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>                          <span class="n">tr</span> <span class="bp">[]</span>
</span><span class='line'>                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Sneaky&quot;</span> <span class="o">]</span>
</span><span class='line'>                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Sneaky</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>                  <span class="o">]</span>
</span><span class='line'>          <span class="o">]</span>
</span><span class='line'>          <span class="nn">Column</span><span class="p">.</span><span class="n">column</span> <span class="bp">[]</span> <span class="o">[</span>
</span><span class='line'>              <span class="nn">Heading</span><span class="p">.</span><span class="n">h2</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Other Aspects&quot;</span> <span class="o">]</span>
</span><span class='line'>              <span class="n">ul</span> <span class="bp">[]</span> <span class="o">[</span>
</span><span class='line'>                  <span class="k">yield</span><span class="o">!</span> <span class="o">[</span> <span class="k">for</span> <span class="n">a</span> <span class="k">in</span> <span class="n">character</span><span class="o">.</span><span class="nc">Aspects</span> <span class="o">-&gt;</span> <span class="n">li</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="n">a</span> <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>              <span class="o">]</span>
</span><span class='line'>              <span class="nn">Heading</span><span class="p">.</span><span class="n">h2</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Stunts&quot;</span> <span class="o">]</span>
</span><span class='line'>              <span class="n">ul</span> <span class="bp">[]</span> <span class="o">[</span>
</span><span class='line'>                  <span class="k">yield</span><span class="o">!</span> <span class="o">[</span> <span class="k">for</span> <span class="n">s</span> <span class="k">in</span> <span class="n">character</span><span class="o">.</span><span class="nc">Stunts</span> <span class="o">-&gt;</span> <span class="n">li</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="n">s</span> <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>              <span class="o">]</span>
</span><span class='line'>          <span class="o">]</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">errorView</span> <span class="n">message</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">[</span> <span class="nn">Notification</span><span class="p">.</span><span class="n">notification</span> <span class="o">[</span> <span class="nn">Notification</span><span class="p">.</span><span class="nc">Color</span> <span class="nc">IsDanger</span> <span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="n">str</span> <span class="n">message</span>
</span><span class='line'>    <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">private</span> <span class="n">view</span> <span class="n">model</span> <span class="n">dispatch</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Container</span><span class="p">.</span><span class="n">container</span> <span class="bp">[]</span> <span class="o">[</span>
</span><span class='line'>        <span class="nn">Content</span><span class="p">.</span><span class="n">content</span> <span class="o">[</span> <span class="o">]</span>
</span><span class='line'>          <span class="o">[</span> <span class="k">yield</span><span class="o">!</span> <span class="n">loadingMessage</span> <span class="n">model</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">model</span><span class="o">.</span><span class="nc">Character</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">Some</span> <span class="n">c</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">yield</span><span class="o">!</span> <span class="n">characterView</span> <span class="n">c</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">model</span><span class="o">.</span><span class="nc">ErrorMessage</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">Some</span> <span class="n">m</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">yield</span><span class="o">!</span> <span class="n">errorView</span> <span class="n">m</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">Elmish</span><span class="p">.</span><span class="nc">React</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Elmish</span><span class="p">.</span><span class="nc">Debug</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Elmish</span><span class="p">.</span><span class="nc">HMR</span>
</span><span class='line'>
</span><span class='line'><span class="nn">Program</span><span class="p">.</span><span class="n">mkProgram</span> <span class="n">init</span> <span class="n">update</span> <span class="n">view</span>
</span><span class='line'><span class="o">#</span><span class="k">if</span> <span class="nc">DEBUG</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withHMR</span>
</span><span class='line'><span class="o">#</span><span class="n">endif</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withReactUnoptimized</span> <span class="s2">&quot;elmish-app&quot;</span>
</span><span class='line'><span class="o">#</span><span class="k">if</span> <span class="nc">DEBUG</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withDebugger</span>
</span><span class='line'><span class="o">#</span><span class="n">endif</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>

<p>And there you have it - a simple app that loads &quot;Bob&quot; from our server, using the generic <code>fetchAs</code> method to cast the JSON back into our strongly typed world. Making the application interactive and more attractive is left to the user; it gets quite addictive with a nice type safe wrapper over React and auto-reloading.</p>

<p>Till next time&#8230;</p>

<p><img src="https://blog.mavnn.co.uk/images/bob_bobson.png" alt="The Final Result"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RouteMaster and the Tale of the Globally Unique Voters]]></title>
    <link href="https://blog.mavnn.co.uk/routemaster-and-the-tale-of-the-globally-unique-voters/"/>
    <updated>2018-03-15T21:43:38+00:00</updated>
    <id>https://blog.mavnn.co.uk/routemaster-and-the-tale-of-the-globally-unique-voters</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/RouteMasterIntegration/RouteMaster">RouteMaster</a> is a process manager library I&#39;ve been working on for simplifying the creation of complex work flows in message based systems.</p>

<p>One of the challenges RouteMaster faces is that once you have defined your &quot;route&quot; in RouteMaster, you generally want to run multiple instances of your process manager service in your distributed environment. This means that a lot of care has been taken to make sure that things like work flow state is handled safely, but it also causes a particular challenge for dealing with timeouts.</p>

<!-- more -->

<h3>What&#39;s the problem?</h3>

<p>RouteMaster nodes for managing the same process maintain a shared list of messages they are expecting to receive - and how long they&#39;re willing to wait for them. This list is stored in a transactional data store.</p>

<p>Approximately every second, the list should be scanned, and messages which have not been received before their timeout should be removed and <code>TimeOut</code> messages published to the process&#39; time out handlers.</p>

<p>It turns out that this scan is the single slowest action that RouteMaster needs to take&#8230; and here we have all of the nodes carrying it out every second or so.</p>

<h3>The solution</h3>

<p>My first thought was the sinking feeling that I was going to have to implement a <a href="https://en.wikipedia.org/wiki/Consensus_algorithm">consensus algorithm</a>, and have the nodes &quot;agree&quot; on a master to deal with time outs.</p>

<p>Fortunately I had the good sense to talk to <a href="https://twitter.com/kjnilsson">Karl</a> before doing so. Karl pointed out that I didn&#39;t need <em>exactly one</em> master at any one time; if there was no master for short periods, or multiple masters for short periods, that was fine. The problem only kicks in if there are <em>lots</em> of masters at the same time.</p>

<p>He mentioned that there was a known answer in these kinds of situations: have a GUID election.</p>

<p>The logic is fairly straight forward, and goes something like this&#8230;</p>

<p>Each node stores some state about itself and the other nodes it has seen. (The full code can be seen at <a href="https://github.com/RouteMasterIntegration/RouteMaster/blob/master/Core/TimeoutManager.fs">in the RouteMaster repository if you&#39;re curious</a>, but I&#39;ll put enough here to follow the idea).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="k">internal</span> <span class="nc">State</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Id</span> <span class="o">:</span> <span class="nc">Guid</span>
</span><span class='line'>      <span class="nc">Active</span> <span class="o">:</span> <span class="kt">bool</span>
</span><span class='line'>      <span class="nc">Tick</span> <span class="o">:</span> <span class="kt">int64</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="nc">LowestGuidSeen</span> <span class="o">:</span> <span class="nc">Guid</span>
</span><span class='line'>      <span class="nc">LowestGuidSeenTick</span> <span class="o">:</span> <span class="kt">int64</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="nc">GuidsSeen</span> <span class="o">:</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Guid</span><span class="o">,</span> <span class="kt">int64</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;&gt;</span>
</span><span class='line'>      <span class="nc">LastPublish</span> <span class="o">:</span> <span class="kt">int64</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">Empty</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">{</span> <span class="nc">Id</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span>
</span><span class='line'>          <span class="nc">Active</span> <span class="o">=</span> <span class="bp">false</span>
</span><span class='line'>          <span class="nc">Tick</span> <span class="o">=</span> <span class="mi">0</span><span class="n">L</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nc">LowestGuidSeen</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">MaxValue</span>
</span><span class='line'>          <span class="nc">LowestGuidSeenTick</span> <span class="o">=</span> <span class="mi">0</span><span class="n">L</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nc">GuidsSeen</span> <span class="o">=</span> <span class="nn">Map</span><span class="p">.</span><span class="n">empty</span>
</span><span class='line'>          <span class="nc">LastPublish</span> <span class="o">=</span> <span class="o">-</span><span class="mi">10</span><span class="n">L</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>As you can see, each node starts off with a unique ID, and keeps track of every other ID it has seen and when. It also sets the &quot;lowest&quot; GUID it&#39;s seen so far to the value <code>Guid.MaxValue</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Guid</span> <span class="k">with</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">MaxValue</span> <span class="o">=</span>
</span><span class='line'>        <span class="nc">Guid</span><span class="o">(</span><span class="nn">Array</span><span class="p">.</span><span class="n">create</span> <span class="mi">16</span> <span class="nn">Byte</span><span class="p">.</span><span class="nc">MaxValue</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>A <code>MailBoxProcessor</code> is then connected to the message bus (we&#39;re in a message based system) and to a one second <code>Tick</code> generator.</p>

<p>If a new GUID arrives, we add it to our state, and check if it&#39;s the lowest we seen we far. If it is, we record that. If it&#39;s also our own, we mark ourselves <code>Active</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">addGuid</span> <span class="n">guid</span> <span class="n">state</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">guid</span> <span class="o">&lt;=</span> <span class="n">state</span><span class="o">.</span><span class="nc">LowestGuidSeen</span> <span class="k">then</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">state</span> <span class="k">with</span>
</span><span class='line'>            <span class="nc">Active</span> <span class="o">=</span> <span class="n">guid</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="nc">Id</span>
</span><span class='line'>            <span class="nc">LowestGuidSeen</span> <span class="o">=</span> <span class="n">guid</span>
</span><span class='line'>            <span class="nc">LowestGuidSeenTick</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span>
</span><span class='line'>            <span class="nc">GuidsSeen</span> <span class="o">=</span> <span class="nn">Map</span><span class="p">.</span><span class="n">add</span> <span class="n">guid</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span> <span class="n">state</span><span class="o">.</span><span class="nc">GuidsSeen</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">state</span> <span class="k">with</span>
</span><span class='line'>            <span class="nc">GuidsSeen</span> <span class="o">=</span> <span class="nn">Map</span><span class="p">.</span><span class="n">add</span> <span class="n">guid</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span> <span class="n">state</span><span class="o">.</span><span class="nc">GuidsSeen</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Every second, when the <code>Tick</code> fires, we:</p>

<h4>Increment the Tick count</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">increment</span> <span class="n">state</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="n">state</span> <span class="k">with</span> <span class="nc">Tick</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span> <span class="o">+</span> <span class="mi">1</span><span class="n">L</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Clean out &quot;old&quot; GUIDs</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">cleanOld</span> <span class="n">state</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">liveMap</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">Map</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="n">t</span> <span class="o">-&gt;</span> <span class="n">t</span> <span class="o">+</span> <span class="mi">15</span><span class="n">L</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span> <span class="o">&lt;</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span><span class="o">)</span> <span class="n">state</span><span class="o">.</span><span class="nc">GuidsSeen</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">state</span><span class="o">.</span><span class="nc">LowestGuidSeenTick</span> <span class="o">+</span> <span class="mi">15</span><span class="n">L</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span> <span class="o">&lt;</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span> <span class="k">then</span>
</span><span class='line'>        <span class="k">match</span> <span class="nn">Map</span><span class="p">.</span><span class="n">toSeq</span> <span class="n">liveMap</span> <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">sortBy</span> <span class="n">fst</span> <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">tryHead</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="o">(</span><span class="n">guid</span><span class="o">,</span> <span class="n">tick</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">{</span> <span class="n">state</span> <span class="k">with</span>
</span><span class='line'>                <span class="nc">Active</span> <span class="o">=</span> <span class="n">guid</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="nc">Id</span>
</span><span class='line'>                <span class="nc">LowestGuidSeen</span> <span class="o">=</span> <span class="n">guid</span>
</span><span class='line'>                <span class="nc">LowestGuidSeenTick</span> <span class="o">=</span> <span class="n">tick</span>
</span><span class='line'>                <span class="nc">GuidsSeen</span> <span class="o">=</span> <span class="n">liveMap</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="c1">// If we reach here, we&#39;re not even seeing our own announcement</span>
</span><span class='line'>            <span class="c1">// messages - something is wrong...</span>
</span><span class='line'>            <span class="nn">Message</span><span class="p">.</span><span class="n">event</span> <span class="nc">Warn</span> <span class="s2">&quot;Manager {managerId} is not receiving timeout manager announcements&quot;</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Message</span><span class="p">.</span><span class="n">setField</span> <span class="s2">&quot;managerId&quot;</span> <span class="n">state</span><span class="o">.</span><span class="nc">Id</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="n">logger</span><span class="o">.</span><span class="n">logSimple</span>
</span><span class='line'>            <span class="o">{</span> <span class="n">state</span> <span class="k">with</span>
</span><span class='line'>                <span class="nc">Active</span> <span class="o">=</span> <span class="bp">true</span>
</span><span class='line'>                <span class="nc">LowestGuidSeen</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="nc">Id</span>
</span><span class='line'>                <span class="nc">LowestGuidSeenTick</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span>
</span><span class='line'>                <span class="nc">GuidsSeen</span> <span class="o">=</span> <span class="n">liveMap</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">state</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Annouce we&#39;re live if we haven&#39;t for a while</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">internal</span> <span class="n">checkPublishAnnoucement</span> <span class="n">topic</span> <span class="o">(</span><span class="n">bus</span> <span class="o">:</span> <span class="nc">MessageBus</span><span class="o">)</span> <span class="n">state</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">state</span><span class="o">.</span><span class="nc">LastPublish</span> <span class="o">+</span> <span class="mi">10</span><span class="n">L</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span> <span class="o">&lt;=</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">do</span><span class="o">!</span> <span class="n">bus</span><span class="o">.</span><span class="nc">TopicPublish</span>
</span><span class='line'>                    <span class="o">(</span><span class="nc">TimeoutManagerAnnouncement</span> <span class="n">state</span><span class="o">.</span><span class="nc">Id</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">topic</span>
</span><span class='line'>                    <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromSeconds</span> <span class="mi">15</span><span class="o">.)</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">{</span> <span class="n">state</span> <span class="k">with</span> <span class="nc">LastPublish</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">state</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Act if we&#39;re active</h4>

<p>This is the clever bit: if the lowest GUID we&#39;ve seen in a while is our own, we&#39;re the &quot;master&quot; node and we take responsibility for dealing with timed out messages. We&#39;ll stay active until a message arrives from a node with a lower GUID. There&#39;s no guarantee at any particular point that only one node will <em>definitely</em> think it&#39;s the master, or that a master will <em>definitely</em> be the only master - but it&#39;s more than good enough for the needs we have here.</p>

<h2>The moral of the story</h2>

<p>If you need to do something hard, ask Karl how to do it. No - wait. That&#39;s good advice, but the real moral is:</p>

<p>Make sure you&#39;re building what you actually need - not something vastly more complex for no practical gain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud Native .NET]]></title>
    <link href="https://blog.mavnn.co.uk/cloud-native-net/"/>
    <updated>2018-03-14T11:28:03+00:00</updated>
    <id>https://blog.mavnn.co.uk/cloud-native-net</id>
    <content type="html"><![CDATA[<p>We&#39;re launching a new two day course this April (26th/27th), called &quot;Cloud Native .NET&quot;. Despite the slightly pretentious name the industry has come up with, what we&#39;re really talking about here are the core engineering skills of building code that can be scaled and maintained. This course is a practical workshop using .NET Core and Kuberenetes so we can see what it all looks like in practice.</p>

<p>Full details below!</p>

<!-- more -->

<h1>Cloud Native .NET</h1>

<h2 id="orgb18d510">Or &#8220;Writing Maintainable Systems in .NET&#8221;</h2>

<div class="outline-text-2" id="text-orgb18d510">
<p>
.NET was first created in a world of monolithic enterprise deployments installed on physical servers, and desktop applications distributed via CD.
</p>

<p>
Now the world has moved on, and so have our expectations. The new normal has become:
</p>

<ul class="org-ul">
<li>Rapid, continuous updates of services</li>
<li>Zero down time deployments</li>
<li>Horizontally scalable web applications with 24 hour access</li>
</ul>

<p>
The term &#8220;Cloud Native&#8221; has been used to describe code that is designed to live in this brave new world of automated deployments and cheap virtual infrastructure. We&#8217;ll examine some of the principles and techniques underpinning the design of automatically deployable, trivially scalable, reliable, and easily maintainable software systems built with .NET.
</p>

<p>
All with the logging, monitoring, and metrics you need to know what&#8217;s really happening in production.
</p>

<p>
We&#8217;ll use Kubernetes to define a multi-service system, digging into how and why the overall system has been designed the way it has. Finally, we&#8217;ll put it all together, creating new functionality by adding .NET Core services to our system.
</p>
</div>

<p></div></p>

<div id="outline-container-org29dfcb5" class="outline-2">
<h2 id="org29dfcb5">What you know already:</h2>
<div class="outline-text-2" id="text-org29dfcb5">
<ul class="org-ul">
<li>How to read and write C# or F#</li>
<li>Basic command line skills</li>
</ul>
</div>

<p></div></p>

<div id="outline-container-org08375ab" class="outline-2">
<h2 id="org08375ab">We&#8217;ll cover:</h2>
<div class="outline-text-2" id="text-org08375ab">
<ul class="org-ul">
<li>An introduction to Kubernetes/Docker</li>
<li>Applying SOLID principles to system design</li>
<li>What is a cloud native application anyway?</li>
<li>12 Factor Applications
<ul class="org-ul">
<li>What are the 12 factors?</li>
<li>How do they help us write better software?</li>
</ul></li>
<li>Writing .NET 12 Factor Applications</li>
<li>How to instrument distributed services</li>
<li>Running distributed systems in development</li>
<li>Continuous Integration &amp; Deployment</li>
<li>Continuous Improvement
<ul class="org-ul">
<li>Property based testing</li>
<li>Performance measurement</li>
</ul></li>
</ul>
</div>

<p></div></p>

<div id="outline-container-org47ccf78" class="outline-2">
<h2 id="org47ccf78">Before you come:</h2>
<div class="outline-text-2" id="text-org47ccf78">
<p>
You&#8217;ll need a laptop with:
</p>

<ul class="org-ul">
<li>.NET Core SDK 2.x</li>
<li>A C# or F# editor</li>
<li><a href="https://github.com/kubernetes/minikube">minikube</a></li>
<li><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">kubectl</a></li>
<li><a href="https://git-scm.com/">git</a></li>
</ul>

<p>
Before arriving, it would be really helpful to run the command <code>minikube start --memory 4096 --cpus 3</code>; on first run minikube downloads its own dependencies.
</p>
</div>

<p></div></p>

<div id="outline-container-org0644f3a" class="outline-2">
<h2 id="org0644f3a">You&#8217;ll come away with:</h2>
<div class="outline-text-2" id="text-org0644f3a">
<p>
A git repository of your completed work, which will include:
</p>

<ul class="org-ul">
<li>Nicely instrumented, benchmarked and unit tested .NET services</li>
<li>A declarative deployment for the overall distributed system</li>
<li>Real time centralized logging, metrics and health feedback from the system, whether running on the dev machine or in production</li>
<li>Working zero down time continuous deployment</li>

<h2>Where will the course happen?</h2>

<p>At <a href="http://www.theskiff.org">The Skiff</a>, right next to Brighton Station (good links to London and Gatwick Airport).</p>

<h2>
What other people say about our courses:
</h2>

<blockquote>
<p>&#8220;I felt there was a gap between my good understanding of the language and actually applying it on bigger ‚Äúreal‚Äù projects.

Michael‚Äôs great training skills have enabled me to quickly practice some advanced topics I was less familiar with.

With my newly acquired knowledge, I‚Äôm confident I will be able achieve some great (and fun) development.&#8221;</p> - Hassan Ezzahir, Lead developer (Contractor) at BNP Paribas
</blockquote>

<blockquote>
<p>&#8220;Huge thanks to @mavnn for coming from London to @Safe_Banking Atlanta and giving an All-Week #fsharp Training Session to our Dev Team. By all accounts it was a great time and everyone learned quite a lot. His approach is very practical and use case oriented, highly recommended.&#8221;</p> - Richard Minerich, CTO Safe Banking Systems
</blockquote>

<blockquote>
<p>&#8220;Thanks to @mavnn for an excellent ‚ÄúBuilding Solid Systems in F#‚Äù workshop in London last week. Really enjoyed the course material and meeting everybody (Also I‚Äôve been inspired to teach myself Emacs :)&#8221;</p> - Kevin Knoop, AutoTask
</blockquote>

<h2>Where can I buy tickets?</h2>

<p>
Right here! There&#8217;s an early bird discount which runs to the end of March, and if you&#8217;re a user group member ping me (or get your user group to do so!) and we&#8217;ll work something out. If the form below doesn&#8217;t work for you, you can also get them <a href="https://www.eventbrite.co.uk/e/cloud-native-net-tickets-44179209204">direct on EventBrite</a>.
</p>

<div id="eventbrite-widget-container-44179209204"></div>

<script src="https://www.eventbrite.co.uk/static/widgets/eb_widgets.js"></script>

<script type="text/javascript">
    var exampleCallback = function() {
        console.log('Order complete!');
    };

    window.EBWidgets.createWidget({
        // Required
        widgetType: 'checkout',
        eventId: '44179209204',
        iframeContainerId: 'eventbrite-widget-container-44179209204',

        // Optional
        iframeContainerHeight: 425,  // Widget height in pixels. Defaults to a minimum of 425px if not provided
        onOrderComplete: exampleCallback  // Method called when an order has successfully completed
    });
</script>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With F# in Kubernetes]]></title>
    <link href="https://blog.mavnn.co.uk/getting-started-with-f-number-in-kubernetes/"/>
    <updated>2018-02-02T14:44:21+00:00</updated>
    <id>https://blog.mavnn.co.uk/getting-started-with-f-number-in-kubernetes</id>
    <content type="html"><![CDATA[<blockquote>
<p>Author&#39;s note: This post is a quick start to help you get a single F# based service up and running on Kubernetes. If you want the full story on how to design a distributed system, we offer <a href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/">commercial training</a> and <a href="https://mavnn.co.uk/">consulting services</a> to help you with that.</p>
</blockquote>

<p>&quot;Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications&quot; - in other words, it will handle more deployment, health monitoring and service discovery needs out of the box, as long as you can turn your application into a container. So, let&#39;s have a quick look at how to do that with an F# application.</p>

<!-- more -->

<h2>Prerequisites</h2>

<p>We going to use Minikube to start up a local Kubernetes &quot;cluster&quot; (it will only have a single node), and installation and first start depend slightly on operating system and which virtual machine backend you want it to use. Instructions on installing it can be found <a href="https://github.com/kubernetes/minikube">here</a>.</p>

<p>Note that Minikube depends in turn on <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">kubectl</a> which will also need to be installed.</p>

<p>The example application we&#39;re going to deploy is going to be a .NET Core app running on Linux, so you will also need the .NET Core SDK 2.0+ installed. We&#39;re going to leverage the <code>dotnet</code> command line tool a fair bit.</p>

<p>Finally, most of the commands you need to run will be given in bash syntax. Hopefully you have bash installed (via installing <code>git</code> if nothing else!), but if you don&#39;t it should be fairly clear how to carry the steps out in other consoles.</p>

<h2>Actually Doing Stuff</h2>

<p>First things first; start up minikube.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>minikube start <span class="c"># you may need options here depending on desired virtual machine software</span>
</span></code></pre></td></tr></table></div></figure>

<p>It will take a little while to get going, especially on the first run when it will download an ISO image to create its own virtual machine. You can carry on with other steps as it warms up.</p>

<p>While that&#39;s going on, let&#39;s lay out a nice project structure to store all the things we&#39;re going to need. All future command line snippets will assume you&#39;re running them from the root of this structure.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir kube <span class="c"># Stores Kubernetes config</span>
</span><span class='line'>mkdir src <span class="c"># our F# code</span>
</span><span class='line'>mkdir docker <span class="c"># docker config</span>
</span></code></pre></td></tr></table></div></figure>

<p>Before we can run an application in Kubernetes, we need an application. So let&#39;s start with that. We&#39;re going to use the .NET Core <a href="https://docs.freya.io/en/latest/">Freya</a> template to create a simple console application with a single HTTP endpoint on it.</p>

<p>If you don&#39;t have the Freya template installed, grab it first using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>dotnet new --install <span class="s2">&quot;Freya.Template::*&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we can create our project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>dotnet new freya -o src/WebHello
</span></code></pre></td></tr></table></div></figure>

<p>Run a restore just to make sure everything is as it should be, and then you should be able to start up your service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>dotnet restore src/WebHello/WebHello.fsproj
</span><span class='line'>dotnet run -p src/WebHello/WebHello.fsproj
</span></code></pre></td></tr></table></div></figure>

<p>It should tell you it has started a web server on socket 8080, and surfing to <code>http://localhost:8080/hello</code> should get you a &quot;Hello, world!&quot; response.</p>

<p>Great - it works! Hit ctrl-c to shut it down again.</p>

<p>We just need to make one change here; because we&#39;re going to deploy this on a container, we can&#39;t only listen on local host. Go into Program.fs, and change the <code>main</code> function to look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">[&lt;</span><span class="nc">EntryPoint</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="n">main</span> <span class="n">argv</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">myCfg</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">defaultConfig</span> <span class="k">with</span>
</span><span class='line'>            <span class="n">bindings</span> <span class="o">=</span> <span class="o">[</span> <span class="nn">HttpBinding</span><span class="p">.</span><span class="n">createSimple</span> <span class="nc">HTTP</span> <span class="s2">&quot;0.0.0.0&quot;</span> <span class="mi">8080</span> <span class="o">]</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">startWebServer</span>
</span><span class='line'>        <span class="n">myCfg</span>
</span><span class='line'>        <span class="o">(</span><span class="nn">Owin</span><span class="p">.</span><span class="nn">OwinApp</span><span class="p">.</span><span class="n">ofAppFunc</span> <span class="s2">&quot;/&quot;</span> <span class="o">(</span><span class="nn">OwinAppFunc</span><span class="p">.</span><span class="n">ofFreya</span> <span class="nn">Api</span><span class="p">.</span><span class="n">root</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we need to turn it into a docker container so it can run on Kubernetes.</p>

<p>Create a new file in the docker directory called <code>WebHelloDockerfile</code> (imaginative, I know). Docker will use this file to create a image based on our code. To make sure that the image created is the same as what we&#39;re going to deploy in production, we don&#39;t create the image from the compilation output on our development box - instead, we actually use a intermediate docker container to build our source code with a known version of the .NET Core tool chain. We use the exact same docker file (and therefore versions of the tool chain) for our continuous integration builds. <em>Thanks to <a href="http://twitter.com/stevejgordon">Steve Gordon</a> for pointing out this trick for me.</em></p>

<p>Into the file, put this contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="nc">FROM</span> <span class="n">microsoft</span><span class="o">/</span><span class="n">dotnet</span><span class="o">:</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">sdk</span> <span class="nc">AS</span> <span class="nc">BUILD</span>
</span><span class='line'><span class="nc">WORKDIR</span> <span class="o">/</span><span class="n">build</span>
</span><span class='line'><span class="nc">COPY</span> <span class="n">src</span> <span class="n">src</span>
</span><span class='line'><span class="nc">RUN</span> <span class="n">dotnet</span> <span class="n">restore</span> <span class="n">src</span><span class="o">/</span><span class="nc">WebHello</span><span class="o">/</span><span class="nn">WebHello</span><span class="p">.</span><span class="n">fsproj</span>
</span><span class='line'><span class="nc">RUN</span> <span class="n">dotnet</span> <span class="n">publish</span> <span class="n">src</span><span class="o">/</span><span class="nc">WebHello</span><span class="o">/</span><span class="nn">WebHello</span><span class="p">.</span><span class="n">fsproj</span> <span class="o">-</span><span class="n">o</span> <span class="n">out</span> <span class="o">-</span><span class="n">c</span> <span class="nc">Release</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">restore</span>
</span><span class='line'>
</span><span class='line'><span class="nc">FROM</span> <span class="n">microsoft</span><span class="o">/</span><span class="n">dotnet</span><span class="o">:</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">runtime</span>
</span><span class='line'><span class="nc">WORKDIR</span> <span class="o">/</span><span class="n">app</span>
</span><span class='line'><span class="nc">COPY</span> <span class="o">--</span><span class="n">from</span><span class="o">=</span><span class="nc">BUILD</span> <span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="nc">WebHello</span><span class="o">/</span><span class="n">out</span> <span class="o">.</span>
</span><span class='line'><span class="nc">EXPOSE</span> <span class="mi">8080</span>
</span><span class='line'><span class="nc">ENTRYPOINT</span> <span class="n">dotnet</span> <span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="nn">WebHello</span><span class="p">.</span><span class="n">dll</span>
</span></code></pre></td></tr></table></div></figure>

<p>This is a multistage docker build; we&#39;re asking docker to use the a container based on <code>microsoft/dotnet:2.0-sdk</code> to restore and build our code - but the final image we&#39;re creating (i.e. the last one in the file) is based on <code>microsoft/dotnet:2.0-runtime</code>, just copying across the result of running <code>dotnet publish</code>. Between the final image not having the SDK installed, and only copying exactly the files we need to run our application, we create a much smaller image this way.</p>

<p>Don&#39;t run a normal docker build straight away! Even if you have docker installed, we don&#39;t want to build this image on your computer&#39;s docker - we want to build it directly in minikube&#39;s docker so that Kubernetes can find it. Kubernetes also knows how to pull images from external docker repositories, but we don&#39;t want to set one up right now.</p>

<p>To run a command inside minikube, we can take advantage of minikube&#39;s ssh and mount functionality.</p>

<p>In a separate terminal (or as a detached process if you know what you&#39;re doing) in the same directory, run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>minikube mount .:/host
</span></code></pre></td></tr></table></div></figure>

<p>This will expose the current directory (<code>.</code>) to the minikube machine at the location <code>/host</code>. You might need to use a full path local under windows, quoting it so the <code>:</code> in the drive name doesn&#39;t confuse things.</p>

<p>Now (back in our original terminal) we can run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>minikube ssh <span class="s2">&quot;cd /host; docker build -f docker/WebHelloDockerfile -t webhello .&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>No need to even have docker installed on your host computer at all. Running this command will take quite a while the first time; don&#39;t worry too much, it caches everything so it will be pretty quick from now on.</p>

<p>So this is all great, and we now have a docker container. We still need to tell Kubernetes about it though. Create yourself an other file, this time in the kube directory. Call it <code>webhello.yml</code> and put this in it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>apiVersion: v1
</span><span class='line'>kind: Service
</span><span class='line'>metadata:
</span><span class='line'>  name: webhello
</span><span class='line'>spec:
</span><span class='line'>  selector:
</span><span class='line'>    app: webhello
</span><span class='line'>  ports:
</span><span class='line'>  - name: http
</span><span class='line'>    port: 8080
</span><span class='line'>    protocol: TCP
</span><span class='line'>    targetPort: http
</span><span class='line'>---
</span><span class='line'>apiVersion: extensions/v1beta1
</span><span class='line'>kind: Deployment
</span><span class='line'>metadata:
</span><span class='line'>  name: webhello
</span><span class='line'>spec:
</span><span class='line'>  selector:
</span><span class='line'>    matchLabels:
</span><span class='line'>      app: webhello
</span><span class='line'>  replicas: 3
</span><span class='line'>  strategy:
</span><span class='line'>    <span class="nb">type</span>: RollingUpdate
</span><span class='line'>    rollingUpdate:
</span><span class='line'>      maxUnavailable: 0
</span><span class='line'>  template:
</span><span class='line'>    metadata:
</span><span class='line'>      labels:
</span><span class='line'>        app: webhello
</span><span class='line'>    spec:
</span><span class='line'>      containers:
</span><span class='line'>      - image: <span class="s2">&quot;webhello&quot;</span>
</span><span class='line'>        imagePullPolicy: Never
</span><span class='line'>        name: webhello
</span><span class='line'>        resources:
</span><span class='line'>          requests:
</span><span class='line'>            memory: <span class="s2">&quot;128Mi&quot;</span>
</span><span class='line'>          limits:
</span><span class='line'>            memory: <span class="s2">&quot;256Mi&quot;</span>
</span><span class='line'>        ports:
</span><span class='line'>        - name: http
</span><span class='line'>          containerPort: 8080
</span><span class='line'>          protocol: TCP
</span><span class='line'>        readinessProbe:
</span><span class='line'>          httpGet:
</span><span class='line'>            path: <span class="s2">&quot;/hello&quot;</span>
</span><span class='line'>            port: http
</span><span class='line'>            scheme: HTTP
</span><span class='line'>          initialDelaySeconds: 10
</span><span class='line'>          periodSeconds: 5
</span><span class='line'>          failureThreshold: 10
</span><span class='line'>          successThreshold: 1
</span><span class='line'>          timeoutSeconds: 10
</span><span class='line'>        livenessProbe:
</span><span class='line'>          httpGet:
</span><span class='line'>            path: <span class="s2">&quot;/hello&quot;</span>
</span><span class='line'>            port: http
</span><span class='line'>            scheme: HTTP
</span><span class='line'>          failureThreshold: 2
</span><span class='line'>          initialDelaySeconds: 20
</span><span class='line'>          periodSeconds: 10
</span><span class='line'>          successThreshold: 1
</span><span class='line'>          timeoutSeconds: 5
</span></code></pre></td></tr></table></div></figure>

<p>Whoa! That&#39;s a wall of text. What&#39;s going on here?</p>

<p>Well, the first section is telling Kubernetes that we want a service called <code>webhello</code>; it should expose a port called <code>http</code> and it should route requests to it to <code>pods</code> that are part of the app called <code>webhello</code>.</p>

<p>What are these <code>pods</code>? Well, you can read more about that in the Kubernetes documentation, but for now we can assume they are instances of our application running. But our service won&#39;t do anything until it has pods to route to, which is where the second section of the file kicks in. Here we tell Kubernetes that we want to create a deployment with rules to govern how the <code>webhello</code> app should be deployed. We say that there should be 3 copies running, and that when new versions are rolled out that we want to start a pod with the new version and wait for it to be healthy before we shut down each old pod (the <code>maxUnavailable</code> bit).</p>

<p>Finally, we give a specification of how to create these 3 pods we&#39;ve asked for; we want to base it on the image <code>webhello</code> (using the local version, and not trying to check for updates&#8230;), it shouldn&#39;t need much memory (the limit helps the garbage collector kick in), it exposes a port and that it shouldn&#39;t be considered alive or ready if it doesn&#39;t respond with a success code on http requests to the endpoint <code>/hello</code>.</p>

<p>In yet an other terminal, fire up the command <code>kubectl proxy</code>. This will give you access to the Kubernetes api, including it&#39;s built in dashboard. If you now surf to the <a href="http://127.0.0.1:8001/api/v1/proxy/namespaces/kube-system/services/Kubernetes-dashboard/#!/pod?namespace=default">pods page</a> in the dashboard, it should tell you there are no pods deployed.</p>

<p>Back to our first terminal; run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>kubectl apply -f kube/
</span></code></pre></td></tr></table></div></figure>

<p>To apply all of the config files in the kube directory to the currently connected cluster.</p>

<p>Refresh your dashboard a few times, and you should slowly see your pods appearing and becoming live.</p>

<p>This is good progress - we have a service up and running. Unfortunately, we can&#39;t see it.</p>

<p>For our final step, let&#39;s configure Kubernetes to allow external access to this service. This is normally done by making use of the Ingress resource - what that actually represents is up to your Kubernetes provider, but in the case of Minikube it will use an nginx server as a proxy from the outside world to our services.</p>

<p>First, make sure minikube has ingress support enabled:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>minikube addons <span class="nb">enable </span>ingress
</span></code></pre></td></tr></table></div></figure>

<p>Now add a second file into the kube directory called <code>ingress.yml</code>. Stick the following content in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>---
</span><span class='line'>apiVersion: extensions/v1beta1
</span><span class='line'>kind: Ingress
</span><span class='line'>metadata:
</span><span class='line'>  name: ingress
</span><span class='line'>spec:
</span><span class='line'>  rules:
</span><span class='line'>  - http:
</span><span class='line'>      paths:
</span><span class='line'>        - path: /hello
</span><span class='line'>          backend:
</span><span class='line'>            serviceName: webhello
</span><span class='line'>            servicePort: http
</span></code></pre></td></tr></table></div></figure>

<p>Hopefully it should be fairly clear what this does!</p>

<p>Apply our config to the cluster again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>kubectl apply -f kube/
</span></code></pre></td></tr></table></div></figure>

<p>Setting up the ingress can take a moment, so run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>kubectl get ingress
</span></code></pre></td></tr></table></div></figure>

<p>a few times until you get a response in that contains an IP address. At this point, you should be able to hit the IP address listed by <code>kubectl</code> on the <code>/hello</code> or <code>/hello/yourName</code> paths; normally it will be <a href="http://192.168.99.100/hello">http://192.168.99.100/hello</a>. Depending on Minikube version, you might have to allow a self signed certificate called &quot;ingress.local&quot; to get through.</p>

<p>And there you have it - an F# service deployed in Kubernetes.</p>

<p>One last trick - because you&#39;re just pushing images direct into Minikube&#39;s docker rather than into a registry of any kind, Kubernetes won&#39;t pick up new versions of the image. If you do a build and want to deploy the changed image, try using something like this to add a <code>updated</code> timestamp to your deployment configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>kubectl patch deployment webhello -p<span class="o">=</span><span class="s2">&quot;{ \&quot;spec\&quot;: { \&quot;template\&quot;: {\&quot;metadata\&quot;: {\&quot;labels\&quot;:{\&quot;updated\&quot;: \&quot;$(date +&quot;</span>%s<span class="s2">&quot;)\&quot; }}}}}&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Because your deployment has changed, Kubernetes will then try and refresh all the pods with the latest version of the image. Enjoy watching your magic, zero down time deploy roll on through.</p>

<p>That&#39;s it for now!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Token Bearer Authentication in Freya]]></title>
    <link href="https://blog.mavnn.co.uk/token-bearer-authentication-in-freya/"/>
    <updated>2018-01-10T11:03:48+00:00</updated>
    <id>https://blog.mavnn.co.uk/token-bearer-authentication-in-freya</id>
    <content type="html"><![CDATA[<p>As part of my <a href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/">Building Solid Systems</a> course, I&#39;ll be talking about authentication in distributed systems. I wanted a practical demonstration that people could play with, so I added token bearer authentication to a Freya API.</p>

<p>Here&#39;s how.</p>

<!-- more -->

<h3>System design</h3>

<p>Over the years, I have become a big believer in using standards where standards exist (unless they&#39;re actively terrible); as such, for authentication we&#39;ll be assuming that our system includes an OAuth2 compliant authorization server. Depending on our needs, this might be an external service or a self hosted solution such as <a href="https://identityserver.io/">IdentityServer</a>.</p>

<p>We&#39;re going to set up an API which will use &quot;token bearer&quot; authentication. This means that the client is responsible for obtaining a valid token from our authorization server which includes a claim for access to the resource our API represents. How the client gets the token, we don&#39;t really care: there are several ways of obtaining a grant from an OAuth2 server and I won&#39;t be going too far down that rabbit hole here (although check the end of the article for an example).</p>

<h3>The code</h3>

<p>Let&#39;s start coding, and add authentication to the &quot;hello&quot; endpoint of the Freya template project. Set up a new file for our <code>Auth</code> module, and open up everything we need.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Auth</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nc">Core</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Machines</span><span class="p">.</span><span class="nc">Http</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nc">Http</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Types</span><span class="p">.</span><span class="nc">Http</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Hopac</span>
</span><span class='line'><span class="k">open</span> <span class="nc">IdentityModel</span>
</span><span class='line'><span class="k">open</span> <span class="nn">IdentityModel</span><span class="p">.</span><span class="nc">Client</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Logging</span>
</span></code></pre></td></tr></table></div></figure>

<p>Most of these should make sense; the additions are <code>IdentityModel</code> and a <code>Logging</code> module. IdentityModel is a NuGet package supplied by the IdentityServer project which implements the basics of the OAuth2 specification from a consumers point of view, and gives a nice client API over the top of the various endpoints an OAuth2 compliant server should implement.</p>

<p>The <code>Logging</code> module is the one from my <a href="https://blog.mavnn.co.uk/logging-freya/">previous blog post</a>; any logging here is optional, but in practice is <em>really very helpful</em> in an actual production distributed system.</p>

<p>The first thing we&#39;re going to do is create a <code>DiscoveryClient</code>. OAuth2 servers provide a discovery document which specifies things like it&#39;s public key and the locations of the other endpoints. In theory, this information can change over time - in this case I&#39;m going to statically grab it on service start up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">discoClient</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">DiscoveryClient</span><span class="o">(</span><span class="s2">&quot;http://idserver:5000&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">discoClient</span><span class="o">.</span><span class="nn">Policy</span><span class="p">.</span><span class="nc">RequireHttps</span> <span class="o">&lt;-</span> <span class="bp">false</span>
</span><span class='line'><span class="n">discoClient</span><span class="o">.</span><span class="nn">Policy</span><span class="p">.</span><span class="nc">ValidateEndpoints</span> <span class="o">&lt;-</span> <span class="bp">false</span>
</span><span class='line'><span class="n">discoClient</span><span class="o">.</span><span class="nn">Policy</span><span class="p">.</span><span class="nc">ValidateIssuerName</span> <span class="o">&lt;-</span> <span class="bp">false</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">doc</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">discoClient</span><span class="o">.</span><span class="nc">GetAsync</span><span class="bp">()</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">AwaitTask</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">RunSynchronously</span>
</span></code></pre></td></tr></table></div></figure>

<p>Your configuration here will vary considerably: I&#39;m running within a kubernetes cluster using an internal DNS record, so I&#39;m overriding the normal safety checks. If you are deploying a service which will be calling the identity server on an external network, you obviously shouldn&#39;t do this&#8230;</p>

<p>The <code>freyaMachine</code> has separate decision points for whether the request is <code>authorized</code> and whether it&#39;s <code>allowed</code>. Authorized is the simplest: a request is authorized if it has an authorization header. Let&#39;s build a method which checks that for us:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">isAuthed</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">hasHeader</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="nn">Headers</span><span class="p">.</span><span class="n">authorization_</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">opt</span> <span class="o">-&gt;</span> <span class="n">opt</span><span class="o">.</span><span class="nc">IsSome</span><span class="o">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">hasHeader</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Auth header found&quot;</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">debug</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;No auth header&quot;</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">debug</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">hasHeader</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Most of the code here is actually logging - but you won&#39;t regret it when your customers ask you why they can&#39;t authenticate against your API.</p>

<p>Now we&#39;re onto the more interesting case; the caller has made an attempt to access a secured resource, and they&#39;ve supplied some authentication to try and do so.</p>

<p>Let&#39;s check first if they&#39;ve supplied a &quot;Bearer&quot; token; this is the only authentication style we&#39;re allowing at the moment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">token</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">auth</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="nn">Headers</span><span class="p">.</span><span class="n">authorization_</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">auth</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="c1">// We should never reach this branch without an auth header -</span>
</span><span class='line'>            <span class="c1">// it should be caught by the isAuthed check</span>
</span><span class='line'>            <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;No auth header found when checking authorization&quot;</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">warn</span>
</span><span class='line'>            <span class="k">return</span> <span class="nc">None</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">a</span> <span class="k">when</span> <span class="ow">not</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="nc">StartsWith</span><span class="o">(</span><span class="s2">&quot;Bearer &quot;</span><span class="o">))</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Auth found, but not of type Bearer&quot;</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">debug</span>
</span><span class='line'>            <span class="k">return</span> <span class="nc">None</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">a</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Bearer token extracted&quot;</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">debug</span>
</span><span class='line'>            <span class="k">return</span> <span class="nc">Some</span> <span class="o">&lt;|</span> <span class="n">a</span><span class="o">.</span><span class="nc">Substring</span><span class="o">(</span><span class="mi">7</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">memo</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we can check the token to see if it is valid. If the token is a JWT token we could choose to check it locally; we have the public key of the issuer available. Here I&#39;ve decided to go the route of checking each token with the issuer, as that means that we pick up things like token cancellation. Your strategy here will depend a lot on your use case, and <code>IdentityModel</code> also allows for caching to allow a good compromise.</p>

<p>Checking the token can be done via an asynchronous call with the <code>IntrospectionClient</code>. As I&#39;m using Freya compiled against <code>Hopac</code> I&#39;m wrapping it in a <code>job</code> - you could equally wrap it in an <code>async</code> block if you&#39;ve using Async Freya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">checkToken</span> <span class="n">apiName</span> <span class="n">apiSecret</span> <span class="n">t</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">job</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">use</span> <span class="n">introClient</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">new</span> <span class="nc">IntrospectionClient</span><span class="o">(</span><span class="n">doc</span><span class="o">.</span><span class="nc">IntrospectionEndpoint</span><span class="o">,</span>
</span><span class='line'>                                    <span class="n">apiName</span><span class="o">,</span> <span class="n">apiSecret</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span><span class="o">!</span>
</span><span class='line'>            <span class="n">introClient</span><span class="o">.</span><span class="nc">SendAsync</span><span class="o">(</span><span class="nc">IntrospectionRequest</span><span class="o">(</span><span class="nc">Token</span> <span class="o">=</span> <span class="n">t</span><span class="o">))</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Hopac</span><span class="p">.</span><span class="nn">Job</span><span class="p">.</span><span class="n">awaitTask</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And now the last step is to build a <code>allowed</code> decision point. Our decision point takes three parameters: the name of this API resource, as known to the identity server, the shared secret between resource and identity server, and the scope this particular resource within the API requires. Normally this will be something like <code>read</code> or <code>write</code>. An entire API will normally share a single name and secret, while each endpoint may require a different scope.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">isAllowedFor</span> <span class="n">apiName</span> <span class="n">apiSecret</span> <span class="n">scope</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">token</span> <span class="o">=</span> <span class="n">token</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">token</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">false</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">t</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">resp</span> <span class="o">=</span>
</span><span class='line'>                <span class="n">checkToken</span> <span class="n">apiName</span> <span class="n">apiSecret</span> <span class="n">t</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">fromJob</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">scopeMatch</span> <span class="o">=</span>
</span><span class='line'>                <span class="n">resp</span><span class="o">.</span><span class="nc">Claims</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">exists</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="o">.</span><span class="nc">Type</span> <span class="o">=</span> <span class="s2">&quot;scope&quot;</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">.</span><span class="nc">Value</span> <span class="o">=</span> <span class="n">scope</span><span class="o">)</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">clientId</span> <span class="o">=</span>
</span><span class='line'>                <span class="n">resp</span><span class="o">.</span><span class="nc">Claims</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">tryFind</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="o">.</span><span class="nc">Type</span> <span class="o">=</span> <span class="s2">&quot;client_id&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">isAllowed</span> <span class="o">=</span>
</span><span class='line'>                <span class="n">resp</span><span class="o">.</span><span class="nc">IsActive</span> <span class="o">&amp;&amp;</span> <span class="n">scopeMatch</span> <span class="o">&amp;&amp;</span> <span class="n">clientId</span><span class="o">.</span><span class="nc">IsSome</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">isAllowed</span> <span class="k">then</span>
</span><span class='line'>                <span class="k">do</span><span class="o">!</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">set</span>
</span><span class='line'>                        <span class="nn">Request</span><span class="p">.</span><span class="n">clientId_</span>
</span><span class='line'>                        <span class="o">(</span><span class="n">clientId</span> <span class="o">|&gt;</span> <span class="nn">Option</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="o">.</span><span class="nc">Value</span><span class="o">))</span>
</span><span class='line'>                <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Request allowed to scope {scope}&quot;</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">add</span> <span class="n">scope</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">info</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Invalid token supplied&quot;</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">debug</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">isAllowed</span>
</span><span class='line'>    <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">memo</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">authMachine</span> <span class="n">apiName</span> <span class="n">apiSecret</span> <span class="n">scope</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freyaMachine</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">allowed</span> <span class="o">(</span><span class="n">isAllowedFor</span> <span class="n">apiName</span> <span class="n">apiSecret</span> <span class="n">scope</span><span class="o">)</span>
</span><span class='line'>        <span class="n">authorized</span> <span class="n">isAuthed</span>
</span><span class='line'>        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">]</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Apart from actually checking whether access is allowed, the other important thing we do here is add the calling clientId to the OWIN state. This means that we can make use of the clientId in any further pipeline steps (and in our logging).</p>

<p>So: we now have an <code>authMachine</code> which will check if you&#39;re allowed to do something&#8230; but doesn&#39;t actually do anything itself.</p>

<p>Time to switch back to <code>Api.fs</code> from the template project (making sure you&#39;ve added in both the <code>Logging</code> and <code>Auth</code> modules to the project).</p>

<p>Amend your <code>helloMachine</code> as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">helloMachine</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freyaMachine</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">including</span> <span class="o">(</span><span class="n">authMachine</span> <span class="s2">&quot;myApi&quot;</span> <span class="s2">&quot;apiSecret&quot;</span> <span class="s2">&quot;myApi.read&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">]</span>
</span><span class='line'>        <span class="n">handleOk</span> <span class="n">sayHello</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>and finally make sure that you remember to inject your logger (see the previous blog post):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">root</span> <span class="n">config</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Pipeline</span><span class="p">.</span><span class="n">compose</span>
</span><span class='line'>        <span class="o">(</span><span class="nn">Log</span><span class="p">.</span><span class="n">injectLogger</span> <span class="n">config</span><span class="o">)</span>
</span><span class='line'>        <span class="o">(</span><span class="n">freyaRouter</span> <span class="o">{</span> <span class="n">resource</span> <span class="s2">&quot;/hello{/name}&quot;</span> <span class="n">helloMachine</span> <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we should be able to spin everything up.</p>

<h3>Trying it all out</h3>

<p>We&#39;ll be using <a href="https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/">Client Credential</a> authentication for this example; this is a grant type used when a &quot;client&quot; is requesting access to a &quot;resource&quot; when no &quot;user&quot; is present. It&#39;s a standard grant type covered by the OAuth specification, and we&#39;re going to assume that we have an OAuth2 compliant authority available to issue allow introspection of tokens.</p>

<p>This type of grant is generally used for service to service communication - there&#39;s no user interaction at all, just an agreed pre-shared &quot;client secret&quot; (an API key).</p>

<p>First we need to get a token from our identity server using our clientId and clientSecret (this client must be configured in the identity server).</p>

<p>If you&#39;re using IdentityServer4 like I am, your request will look like this (curl format):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X POST <span class="se">\</span>
</span><span class='line'>  http://identity.mavnn.co.uk/connect/token <span class="se">\</span>
</span><span class='line'>  -H <span class="s1">&#39;cache-control: no-cache&#39;</span> <span class="se">\</span>
</span><span class='line'>  -H <span class="s1">&#39;content-type: application/x-www-form-urlencoded&#39;</span> <span class="se">\</span>
</span><span class='line'>  -d <span class="s1">&#39;grant_type=client_credentials&amp;scope=myApi.read&amp;client_id=myClient&amp;client_secret=mySecret&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>You&#39;ll get back a response including a token:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;access_token&quot;</span><span class="p">:</span> <span class="s2">&quot;eyJhbGciOi...&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;expires_in&quot;</span><span class="p">:</span> <span class="mi">3600</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;token_type&quot;</span><span class="p">:</span> <span class="s2">&quot;Bearer&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now when you call the secured API, you need to add the token to your headers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X GET <span class="se">\</span>
</span><span class='line'>  http://localhost/hello <span class="se">\</span>
</span><span class='line'>  -H <span class="s1">&#39;authorization: Bearer eyJhbGciOi...&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>If you don&#39;t supply the <code>authorization</code> header at all, you correctly get a <code>401</code> response; if the token is invalid or you (for example) try and use <code>Basic</code> authentication, you receive a <code>403</code>. Both return with an empty body; if you wanted to make the pages pretty you would need to add <code>handleUnauthorized</code> and <code>handleForbidden</code> to your <code>freyaMachine</code>. Here, for an API it&#39;s probably as meaningful to just leave the response empty. There isn&#39;t any further information to supply, after all.</p>

<p>And there it is: token bearer authentication set up for Freya.</p>

<p>Interested in how you can set up the whole environment in Kubernetes including IdentityServer, logging, metrics and all the other mod cons you could desire? There&#39;s still time to sign up for <a href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/">Building Solid Systems in F#</a> at the end of the month!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logging Freya]]></title>
    <link href="https://blog.mavnn.co.uk/logging-freya/"/>
    <updated>2017-12-08T15:43:57+00:00</updated>
    <id>https://blog.mavnn.co.uk/logging-freya</id>
    <content type="html"><![CDATA[<p>Eugene Tolmachev asked in a comment on a previous post <a href="http://disq.us/p/1oeml1a">how I handle dependency injection</a> with <a href="https://freya.io/">Freya</a>.</p>

<p>So&#8230; my first, slightly annoying answer is that I try not to. Mark Seeman has written about this in a <a href="http://blog.ploeh.dk/2017/01/27/from-dependency-injection-to-dependency-rejection/">great series of blog posts</a> which I won&#39;t try and repeat here.</p>

<p>Still, there are occasions where you want to quickly and easily do&#8230; something.. with a dependency making use of the context that being inside a Freya workflow provides. Let&#39;s quickly walk through how I inject a logger into a Freya workflow which &quot;knows&quot; about things like the request ID Kestrel has assigned to the current request.</p>

<p>I&#39;m going to use Serilog as an example below, but you could also use any other structured logging library (I like Logary, but there isn&#39;t a .NET Core release at time of writing).</p>

<!-- more -->

<p>I&#39;ll annotate the code inline to give you an idea what it&#39;s doing.</p>

<p>So; our first module is shared code which you&#39;ll probably want to reuse across all of your Freya services. Put it in a separate .fs file (it assumes Serilog has been taken as a dependency).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Logging</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">Aether</span><span class="p">.</span><span class="nc">Operators</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nc">Core</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nc">Optics</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Serilog</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Serilog</span><span class="p">.</span><span class="nc">Context</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Serilog</span><span class="p">.</span><span class="nc">Configuration</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We&#39;ll expand the Request module with two news Optics;</span>
</span><span class='line'><span class="c1">// one uses the &quot;RequestId&quot; constant defined by the Owin</span>
</span><span class='line'><span class="c1">// specification to extract the ID assigned to this request.</span>
</span><span class='line'><span class="c1">// The other we&#39;ll define in the &quot;serilog&quot; name space in the</span>
</span><span class='line'><span class="c1">// Freya context Dictionary (all owin keys start &quot;owin.&quot;)</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">RequireQualifiedAccess</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">module</span> <span class="nc">Request</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">requestId_</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">State</span><span class="p">.</span><span class="n">value_</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;</span> <span class="nn">Constants</span><span class="p">.</span><span class="nc">RequestId</span>
</span><span class='line'>        <span class="o">&gt;-&gt;</span> <span class="nn">Option</span><span class="p">.</span><span class="n">unsafe_</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// An optic for focussing on an ILogger in the Freya</span>
</span><span class='line'>    <span class="c1">// state. That&#39;s great, but how does the ILogger get</span>
</span><span class='line'>    <span class="c1">// there? Read on...</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">logger_</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">State</span><span class="p">.</span><span class="n">value_</span><span class="o">&lt;</span><span class="nc">ILogger</span><span class="o">&gt;</span> <span class="s2">&quot;serilog.logger&quot;</span>
</span><span class='line'>        <span class="o">&gt;-&gt;</span> <span class="nn">Option</span><span class="p">.</span><span class="n">unsafe_</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// As a structured logging library, you can attach an</span>
</span><span class='line'><span class="c1">// array of &quot;values&quot; to a Serilog event - we&#39;ll use this</span>
</span><span class='line'><span class="c1">// helper to give us a more &quot;F#ish&quot; API</span>
</span><span class='line'><span class="k">type</span> <span class="nc">SerilogContext</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Template</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nc">Values</span> <span class="o">:</span> <span class="n">obj</span> <span class="kt">list</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">RequireQualifiedAccess</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">module</span> <span class="nc">Log</span> <span class="o">=</span>
</span><span class='line'>    <span class="c1">// Extract the request ID once per request</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">private</span> <span class="n">rid</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="n">requestId_</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">memo</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Extract the ILogger once per request</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">private</span> <span class="n">ilogger</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="n">logger_</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">memo</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// A method to inject an ILogger *into* the Freya</span>
</span><span class='line'>    <span class="c1">// state</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">injectLogger</span> <span class="o">(</span><span class="n">config</span> <span class="o">:</span> <span class="nc">LoggerConfiguration</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">logger</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">config</span>
</span><span class='line'>                <span class="o">.</span><span class="nn">Enrich</span><span class="p">.</span><span class="nc">FromLogContext</span><span class="bp">()</span>
</span><span class='line'>                <span class="o">.</span><span class="nc">CreateLogger</span><span class="bp">()</span>
</span><span class='line'>            <span class="o">:&gt;</span> <span class="nc">ILogger</span>
</span><span class='line'>        <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">do</span><span class="o">!</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">set</span> <span class="nn">Request</span><span class="p">.</span><span class="n">logger_</span> <span class="n">logger</span>
</span><span class='line'>            <span class="k">return</span> <span class="nc">Next</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// From here on in is just an F# friendly wrapper</span>
</span><span class='line'>    <span class="c1">// around Serilog.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Start building up a new log message with a</span>
</span><span class='line'>    <span class="c1">// message template</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">message</span> <span class="n">template</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">{</span> <span class="nc">Template</span> <span class="o">=</span> <span class="n">template</span>
</span><span class='line'>          <span class="nc">Values</span> <span class="o">=</span> <span class="bp">[]</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add a value to the message context</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">add</span> <span class="n">value</span> <span class="n">context</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">context</span> <span class="k">with</span> <span class="nc">Values</span> <span class="o">=</span> <span class="o">(</span><span class="n">box</span> <span class="n">value</span><span class="o">)::</span><span class="n">context</span><span class="o">.</span><span class="nc">Values</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Function that knows how to send a message with all of the</span>
</span><span class='line'>    <span class="c1">// values correctly associated, and the requestId set</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">private</span> <span class="n">send</span> <span class="n">f</span> <span class="n">context</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">requestId</span> <span class="o">=</span> <span class="n">rid</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">ilogger</span>
</span><span class='line'>            <span class="n">using</span>
</span><span class='line'>                <span class="o">(</span><span class="nn">LogContext</span><span class="p">.</span><span class="nc">PushProperty</span><span class="o">(</span><span class="s2">&quot;RequestId&quot;</span><span class="o">,</span> <span class="n">requestId</span><span class="o">))</span>
</span><span class='line'>                <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>                     <span class="k">let</span> <span class="n">values</span> <span class="o">=</span>
</span><span class='line'>                         <span class="n">context</span><span class="o">.</span><span class="nc">Values</span>
</span><span class='line'>                         <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">toArray</span>
</span><span class='line'>                         <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">rev</span>
</span><span class='line'>                     <span class="n">f</span> <span class="n">logger</span> <span class="n">context</span><span class="o">.</span><span class="nc">Template</span> <span class="n">values</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The four standard log levels</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">debug</span> <span class="n">context</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">f</span> <span class="o">(</span><span class="n">logger</span> <span class="o">:</span> <span class="nc">ILogger</span><span class="o">)</span> <span class="n">template</span> <span class="o">(</span><span class="n">values</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="nc">Debug</span><span class="o">(</span><span class="n">template</span><span class="o">,</span> <span class="n">values</span><span class="o">)</span>
</span><span class='line'>        <span class="n">send</span> <span class="n">f</span> <span class="n">context</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">info</span> <span class="n">context</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">f</span> <span class="o">(</span><span class="n">logger</span> <span class="o">:</span> <span class="nc">ILogger</span><span class="o">)</span> <span class="n">template</span> <span class="o">(</span><span class="n">values</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="nc">Information</span><span class="o">(</span><span class="n">template</span><span class="o">,</span> <span class="n">values</span><span class="o">)</span>
</span><span class='line'>        <span class="n">send</span> <span class="n">f</span> <span class="n">context</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">warn</span> <span class="n">context</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">f</span> <span class="o">(</span><span class="n">logger</span> <span class="o">:</span> <span class="nc">ILogger</span><span class="o">)</span> <span class="n">template</span> <span class="o">(</span><span class="n">values</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="nc">Warning</span><span class="o">(</span><span class="n">template</span><span class="o">,</span> <span class="n">values</span><span class="o">)</span>
</span><span class='line'>        <span class="n">send</span> <span class="n">f</span> <span class="n">context</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">error</span> <span class="n">context</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">f</span> <span class="o">(</span><span class="n">logger</span> <span class="o">:</span> <span class="nc">ILogger</span><span class="o">)</span> <span class="n">template</span> <span class="o">(</span><span class="n">values</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="nc">Error</span><span class="o">(</span><span class="n">template</span><span class="o">,</span> <span class="n">values</span><span class="o">)</span>
</span><span class='line'>        <span class="n">send</span> <span class="n">f</span> <span class="n">context</span>
</span></code></pre></td></tr></table></div></figure>

<p>So that&#39;s great and all&#8230; but how and where do we actually call that <code>injectLogger</code> function?</p>

<p>Well, that goes in your application root where you build your final Freya app.</p>

<p>Mine normally ends up looking something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">root</span> <span class="n">logConfig</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">routes</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">freyaRouter</span> <span class="o">{</span> <span class="c">(* My resources here *)</span> <span class="o">}</span>
</span><span class='line'>    <span class="nn">Log</span><span class="p">.</span><span class="n">injectLogger</span> <span class="n">logConfig</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="o">(</span><span class="n">flip</span> <span class="nn">Pipeline</span><span class="p">.</span><span class="n">compose</span><span class="o">)</span> <span class="n">routes</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="o">(</span><span class="n">flip</span> <span class="nn">Pipeline</span><span class="p">.</span><span class="n">compose</span><span class="o">)</span> <span class="n">notFound</span>
</span></code></pre></td></tr></table></div></figure>

<p>Because <code>injectLogger</code> returns a Freya <code>Pipeline</code> type which <em>always</em> passes handling onto the next step in the pipeline, all that first step does is add in a newly initialized ILogger to the Freya state, and then passes things on down the chain as normal.</p>

<p>In your Freya code, logging looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">notFoundResponse</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">path</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="n">path_</span>
</span><span class='line'>        <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Why am I logging a GUID like this one {guid} on requests to {path}?&quot;</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">add</span> <span class="o">(</span><span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">add</span> <span class="n">path</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">info</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">representJson</span> <span class="s2">&quot;We couldn&#39;t find that&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Notice that <code>do!</code> is required for logging now, as our log methods have type <code>Freya&lt;unit&gt;</code>. This is what allows us to add the request specific context to our logs without explicitly having to append it ourselves every time.</p>

<p>I&#39;m not sure if this strictly answers Eugene&#39;s question, but I hope all you (potential) Freya users out there find it helpful regardless.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F# Through a Ruby Lens]]></title>
    <link href="https://blog.mavnn.co.uk/f-number-through-a-ruby-lens/"/>
    <updated>2017-12-07T21:00:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/f-number-through-a-ruby-lens</id>
    <content type="html"><![CDATA[<p>I spent last week delivering a five day deep dive into F# for a group of (mostly) Ruby developers in Munich, and wanted to capture some of my thoughts before I lost them as well as give people an idea of the types of things internal training can give you.</p>

<p>I won&#39;t be mentioning personal, company or exact team names here as I&#39;ve not been given explicit permission to do so; if the people who were on the course want to chime in I&#39;ll add their comments.</p>

<h2>The background</h2>

<p>Although mostly a Ruby on Rails shop, this company also relies on machine learning and expert systems to deliver some of its core services. The R&amp;D department (who build the models) settled on F# for development as a good balance between:</p>

<ul>
<li>familiarity of syntax (most have a background in Python and/or a ML language)</li>
<li>performance (Ruby had struggled here)</li>
<li>type safety</li>
<li>good &quot;production&quot; library support (logging, etc)</li>
</ul>

<p>Having examined the available options in depth, they decided on a standard stack for creating F# microservices of:</p>

<ul>
<li>Freya on Kestrel via .NET Core</li>
<li>Chiron for type safe JSON serialization/deserialization</li>
</ul>

<p>They wanted to investigate the use of Hephaestus as a rules engine (Freya uses Hephaestus to process HTTP requests). Many of their machine learning models only work with quite constrained ranges of input values, and Hephaestus as a rules engine looked an effective way of routing decisions to the &quot;correct&quot; machine learning algorithm for a particular input range. This in turn would allow for the models to stay reasonably simple and testable.</p>

<h2>The brief</h2>

<p>Having made these decisions, the company needed to bring the production services team up to speed on what R&amp;D were going to produce, especially because production had expressed an interest in having F# as an extra potential tool for their own projects.</p>

<p>My brief was to create 5 days of training, after which production needed to know enough about the F# libraries in use that they could work out what R&amp;D&#39;s code was doing, and enough about running .NET code in production to feel confident adding error handling, logging, metrics, tests and all the rest of the &quot;engineering&quot; side of development which is not about the programming language but the surrounding ecosystem.</p>

<h2>What we did</h2>

<p>I knew that I had a lot of ground to cover in just 5 days, so there was no way that the team was going to come away with all of the new knowledge absorbed and at their finger tips. At the same time, it couldn&#39;t be an overwhelming flood of information.</p>

<p>I decided to split the training time between a deep dive in understanding a few key areas in depth (Freya&#39;s design, optics and testing), and providing worked examples for the rest which could be referred back to when they became needed. Although I had relevant training material on several of the areas already, it was all tailored in this course to fit a single theme: over the course of a week, we were going to build a microservice that did just one thing, and we were going to test the heck out of it.</p>

<p>The timetable ended up looking like this:</p>

<ul>
<li>Monday AM: Introductions

<ul>
<li>high level microservice design</li>
<li>check everyone had all the software they needed installed</li>
</ul></li>
<li>Monday PM: Freya overview

<ul>
<li>install the template</li>
<li>modify the hello world service to accept POSTs with a name</li>
</ul></li>
<li>Tuesday AM: Optics

<ul>
<li>Chiron, Freya and Hephaestus all make heavy use of &quot;Optics&quot;</li>
<li>What are they?</li>
<li>Building our own</li>
</ul></li>
<li>Tuesday PM: Handling external data

<ul>
<li>Using Chiron for translation, version handling and API design (using our new found knowledge of optics)</li>
</ul></li>
<li>Wednesday AM: Start our actual microservice as a real project

<ul>
<li>how .NET solutions are (normally) laid out</li>
<li>using Paket for package management</li>
<li>add a test project with <a href="https://blog.mavnn.co.uk/going-down-the-property-based-testing-rabbit-hole/">this set of property based tests</a></li>
<li>write our first bit of domain logic to pass these tests, and plug it into the Freya API</li>
</ul></li>
<li>Wednesday PM: Start making our service production worthy

<ul>
<li>Spin up a docker &quot;infrastructure&quot; with Kibana and ElasticSearch</li>
<li>Adding logging to our service, plugged into Freya to automatically capture context like request IDs</li>
<li>Health endpoint</li>
<li>How to capture metrics</li>
</ul></li>
<li>Thursday AM: interesting bits &amp; answers to questions asked

<ul>
<li>How do computational expressions work?</li>
<li>How would I structure a functional UI?</li>
</ul></li>
<li>Thursday PM: flexible rules engines with Hephaestus

<ul>
<li>rebuilt the logic from Wednesday AM reusing the same property tests</li>
<li>looked at how we can splice Hephaestus rules graphs together</li>
</ul></li>
<li>Friday AM: BenchmarkDotNet

<ul>
<li>now we know it&#39;s correct - is it fast?</li>
<li>benchmarked our two implementations of the same logic together</li>
</ul></li>
<li>Friday PM: Using it all in real life

<ul>
<li>code review of pieces of the existing code base, looking at adding what we&#39;d learned</li>
</ul></li>
</ul>

<h2>How it went</h2>

<p>Overall the course seemed to go really well. At the end of it, the delegates were confident about the basics of building HTTP resources with Freya and Chiron, and happily building benchmarks and tests for their existing code base. For other areas (the boiler plate for plugging logging into Kestrel and Freya, for example) they understood the concepts and felt the course notes were sufficiently detailed they that could make use of them in other situations as needed. That was incredibly pleasing to hear from my point of view, as the course notes for these sessions are by far the most time consuming part of the process to create.</p>

<p>Although they missed some of the features of Ruby when writing F#, pattern matching with discriminated unions was a big hit and they liked the enforced discipline of Freya that required separating the logic of the various stages of handling an HTTP request - and how reusable that made components for handling concerns such as authentication.</p>

<p>Finally, all 3 of the core participants (there were other people around for certain parts of the course) came away saying that they&#39;d really enjoyed it and found it interesting throughout - so that&#39;s a big win right there!</p>

<h2>Can you do this for us?</h2>

<p>Yes; this particular course was tailored for the specific circumstances, but I&#39;ve also provided training on the more conceptual side (functional programming concepts) through to the gritty detail of DevOps (with both new and existing code bases).</p>

<p>We can also tailor delivery to match your availability; for this course I traveled to Munich to deliver it, and so it was delivered in a single 5 day unit. For other clients we can arrange regular shorter sessions or even remote workshops (group or individual) with tools such as Zoom.</p>

<p>And if you just want to turn up at a venue and get trained, check out <a href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/">Building Solid Systems in F#</a> happening 31st Jan-1st Feb 2018 in London.</p>

<p>Get in touch with us at <a href="us@mavnn.co.uk">us@mavnn.co.uk</a> if you have any ideas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent 2017 - Reading From the Firehose With Fable]]></title>
    <link href="https://blog.mavnn.co.uk/advent-2017-reading-from-the-firehose-with-fable/"/>
    <updated>2017-12-04T13:00:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/advent-2017-reading-from-the-firehose-with-fable</id>
    <content type="html"><![CDATA[<p>Each year, the F# programming community creates an advent calendar of blog posts, coordinated by Sergey Tihon <a href="https://sergeytihon.com/2017/10/22/f-advent-calendar-in-english-2017/">his blog</a>.</p>

<p>I really like the idea, and have taken part in <a href="https://blog.mavnn.co.uk/advent-2016/">2016</a>, <a href="https://blog.mavnn.co.uk/angels-from-the-realms-of-glory/">2015</a> &amp; <a href="https://blog.mavnn.co.uk/modelling-inheritance-with-inheritance/">2014</a>.</p>

<p>Below is this year&#39;s post.</p>

<h1>The plan: speed read Christmas</h1>

<p>So; you want to find out what Christmas is about, where it really came from&#8230; but you don&#39;t have much time.</p>

<p>The solution is obvious: take the famous bible passages that churches read every year, and speed read them!</p>

<p>Let&#39;s build an app to help us with that.</p>

<!-- more -->

<h2>The tools: Fable and Elmish</h2>

<p><a href="https://fable-elmish.github.io/elmish/">Fable</a> is a F# to JavaScript compiler, and <a href="https://fable-elmish.github.io/elmish/">Elmish</a> is a library for it designed to provide a Elm/Redux style workflow around it.</p>

<p>If you haven&#39;t used Elm or Redux before, the basic idea is that our application will be based around three things:</p>

<ul>
<li>A state type. This type will contain all of the information about the state of the application at any moment</li>
<li>A message type. This will be a discriminated union with a case for each type of &quot;message&quot; that can update the state of the application.</li>
<li>An update function. This is called every time a message is triggered; it takes the previous state and the message that has just arrived, and produces a new state.</li>
</ul>

<p>These three things are all we need to manage the state of the application, but then we end up needing one final concept: subscribers.</p>

<p>Subscribers can take the current state, but more importantly they are passed a &quot;dispatch&quot; function that allows them to dispatch messages to the applications message queue. This is how we deal with all inputs in an Elmish application, whether from a user or whether it&#39;s things like network requests completing and delivering information our application needs.</p>

<p>The main, most important subscriber is the &quot;view&quot; (i.e. how we&#39;re going to show things to the user). In our app, our view will be displayed via a Fable wrapper for React, creating a single page web application. The view is nearly always capable of also dispatching messages - this is how we model things like buttons the user can click on.</p>

<p>You can find more about this, with pretty diagrams, on the Fable Elmish website linked above.</p>

<h2>Getting started</h2>

<p>Let&#39;s start by setting up the application framework. We&#39;ll need dotnet core installed, and node with a reasonably recent version of yarn if you want to follow along at home.</p>

<p>Make yourself a new directory, and then on the command line you can run the following commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>dotnet new -i Fable.Template
</span></code></pre></td></tr></table></div></figure>

<p>Installs the Fable template for dotnet core.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>dotnet new fable
</span></code></pre></td></tr></table></div></figure>

<p>Creates a new Fable project in this directory, using the directory name for the project name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>yarn install
</span><span class='line'>dotnet restore
</span></code></pre></td></tr></table></div></figure>

<p>Download all the basic dependencies, both for dotnet and JavaScript.</p>

<h2>Adding our dependencies</h2>

<p>Apart from using Fable itself, we also want to make use of Elmish and it&#39;s React plugin.</p>

<p>Add these two libraries to paket.dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nuget Fable.Elmish.Browser
</span><span class='line'>nuget Fable.Elmish.React
</span></code></pre></td></tr></table></div></figure>

<p>Then in the src directory add them to our Fable project as well (in paket.references):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Fable.Elmish.Browser
</span><span class='line'>Fable.Elmish.React
</span></code></pre></td></tr></table></div></figure>

<p>Run a paket install to download and add the dotnet parts of the libraries to your project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mono .paket/paket.exe install
</span></code></pre></td></tr></table></div></figure>

<p>Then go into the &quot;src&quot; directory and add the JavaScript libraries that these Fable libraries depend on in the browser.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd </span>src
</span><span class='line'>yarn add react react-dom
</span><span class='line'>dotnet restore
</span></code></pre></td></tr></table></div></figure>

<h2>Setting up the webpage</h2>

<p>Let&#39;s adapt our HTML, in the &quot;public&quot; folder. The Fable template project assumes that we&#39;re going to be using a canvas. We&#39;re writing a text only application, so we&#39;ll just replace the canvas node with a standard <code>div</code> and mark it with an id which we&#39;ll use to tell react where to render the html our code will generate.</p>

<p>Your index.html should end up looking like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Simple Fable App<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&#39;Content-Type&#39;</span> <span class="na">content=</span><span class="s">&#39;text/html; charset=utf-8&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;shortcut icon&quot;</span> <span class="na">href=</span><span class="s">&quot;fable.ico&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span>  <span class="na">href=</span><span class="s">&quot;index.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdn.polyfill.io/v2/polyfill.js?features=es6,fetch&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;react-element&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bundle.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>We&#39;re going to speed read by displaying each word of the text really big in the middle of the screen one by one (so that you don&#39;t need to move your eyes to read).</p>

<p>Add in a <code>index.css</code> file with the following to set up styles for a large centered container and a class for displaying really large text.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">html</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-family</span><span class="o">:</span> <span class="k">sans-serif</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.container</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">50</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">50</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">translate</span><span class="p">(</span><span class="m">-50</span><span class="o">%,</span> <span class="m">-50</span><span class="o">%</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.theText</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">5em</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Writing &quot;JavaScript&quot;</h2>

<p>Fable compiles F# to JavaScript, and comes with tooling to watch your code and update it automatically.</p>

<p>Fire up yarn by going into your &quot;src&quot; directory and running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">dotnet</span> <span class="nt">fable</span> <span class="nt">yarn-start</span>
</span></code></pre></td></tr></table></div></figure>

<p>This will start the fable compiler and keep it running in the background.</p>

<p>We&#39;ve already decided we want to use Elmish with the React view. We&#39;re also going to be loading some external data so we&#39;ll want access to the Fetch API.</p>

<p>Let&#39;s open up all the namespaces which might be relevant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Advent2017</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">Core</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">JsInterop</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">Import</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">Browser</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">React</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">ReactDom</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nn">React</span><span class="p">.</span><span class="nc">Props</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">PowerPack</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">PowerPack</span><span class="p">.</span><span class="nc">Fetch</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Elmish</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Elmish</span><span class="p">.</span><span class="nc">React</span>
</span><span class='line'><span class="k">module</span> <span class="nc">R</span> <span class="o">=</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nc">React</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then we need a model; this holds all of the state of our app. The text to be speed read will be stored as an array of strings; we&#39;ll keep a <code>Max</code> field with the index of the last word to make our logic nice and explicit, the <code>Index</code> of the word currently being displayed, the number of ticks <code>SinceLast</code> time we updated the word and the current number of <code>TicksPerUpdate</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Model</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Text</span> <span class="o">:</span> <span class="kt">string</span> <span class="bp">[]</span>
</span><span class='line'>      <span class="nc">Max</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">Index</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">SinceLast</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">TicksPerUpdate</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>The <code>Msg</code> type represents all the ways that our app can be updated. The user can ask for the text to become faster, or slower; we can finish loading the text via a web request; and a <code>Tick</code> of our timer can go past.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Msg</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Faster</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Slower</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ReceivedText</span> <span class="k">of</span> <span class="kt">string</span> <span class="bp">[]</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Tick</span>
</span></code></pre></td></tr></table></div></figure>

<p>And the actual update logic takes one of those messages and a previous state, and gives us a new state:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">update</span> <span class="n">msg</span> <span class="n">model</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Tick</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">model</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">{</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">tpu</span><span class="o">;</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">sl</span> <span class="o">}</span> <span class="k">when</span> <span class="n">sl</span> <span class="o">&gt;=</span> <span class="n">tpu</span> <span class="o">&amp;&amp;</span> <span class="n">tpu</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
</span><span class='line'>                <span class="nc">Index</span> <span class="o">=</span> <span class="n">min</span> <span class="n">model</span><span class="o">.</span><span class="nc">Max</span> <span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>                <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">{</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">tpu</span><span class="o">;</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">sl</span> <span class="o">}</span> <span class="k">when</span> <span class="n">sl</span> <span class="o">&gt;=</span> <span class="o">(</span><span class="n">tpu</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">tpu</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
</span><span class='line'>                <span class="nc">Index</span> <span class="o">=</span> <span class="n">max</span> <span class="mi">0</span> <span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>                <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">SinceLast</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Faster</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Slower</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ReceivedText</span> <span class="n">text</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
</span><span class='line'>            <span class="nc">Text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'>            <span class="nc">Max</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">length</span> <span class="n">text</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>I was feeling a bit silly, so you can make the application go &quot;so fast it goes backwards.&quot; I mean, I&#39;ve had user requirements that make less sense than that before!</p>

<p>Having defined our types and abstract logic, we now need to write the actual functionality of our app, working our way up to a method which starts it off with an initial state.</p>

<p>First some low level grunge for downloading the text we want to read.</p>

<p>We&#39;ll need a url and an auth token for the API we&#39;re using (esv.org provide a really nice API by the way).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">requestUri</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">[</span> <span class="s2">&quot;https://api.esv.org/v3/passage/text/?q=John%201&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-passage-references=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-first-verse-numbers=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-verse-numbers=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-footnotes=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-footnote-body=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-passage-horizontal-lines=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-heading-horizontal-lines=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-headings=false&quot;</span>
</span><span class='line'>      <span class="o">]</span> <span class="o">|&gt;</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">authToken</span> <span class="o">=</span> <span class="s2">&quot;TEST&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>We&#39;ve split it up over multiple lines to make it readable as I&#39;m specifying a lot of options. Nearly all of the them boil down to removing optional metadata from the text (such as verse numbers and translation footnotes). For speed reading we just want the actual words. If you want to run this application a lot, you&#39;ll need to register your application on esv.org to get your own auth token.</p>

<p>The text it tries to download is John 1; it&#39;s one of the most famous Christmas texts, but also very poetic in it&#39;s presentation. I love it, but if you just want &quot;the Christmas story&quot; try a base url of <code>&quot;https://api.esv.org/v3/passage/text/?q=Luke%201-Luke%202:21&quot;</code> instead.</p>

<p>Now, some boiler plate to extract the passage from the JSON blob that esv.org send back to us. I&#39;m totally ignoring any errors that might occur in the request here, you probably don&#39;t want to do that in a real application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">toText</span> <span class="o">(</span><span class="n">res</span> <span class="o">:</span> <span class="nc">Response</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">res</span><span class="o">.</span><span class="n">text</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">Val</span><span class="o">|_|)</span> <span class="n">key</span> <span class="o">=</span> <span class="nn">Map</span><span class="p">.</span><span class="n">ofSeq</span> <span class="o">&gt;&gt;</span> <span class="o">(</span><span class="nn">Map</span><span class="p">.</span><span class="n">tryFind</span> <span class="n">key</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">extractPassage</span> <span class="o">(</span><span class="n">str</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">json</span> <span class="o">=</span> <span class="nn">Json</span><span class="p">.</span><span class="n">ofString</span> <span class="n">str</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">json</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Ok</span> <span class="o">(</span><span class="nn">Json</span><span class="p">.</span><span class="nc">Object</span> <span class="o">(</span><span class="nc">Val</span> <span class="s2">&quot;passages&quot;</span> <span class="o">(</span><span class="nn">Json</span><span class="p">.</span><span class="nc">Array</span> <span class="o">[|</span><span class="nn">Json</span><span class="p">.</span><span class="nc">String</span> <span class="n">first</span><span class="o">|])))</span> <span class="o">-&gt;</span> <span class="n">first</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="s2">&quot;Error&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">getText</span> <span class="n">dispatch</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">fetch</span> <span class="n">requestUri</span> <span class="o">[</span> <span class="n">requestHeaders</span> <span class="o">[</span> <span class="nc">Authorization</span> <span class="o">&lt;|</span> <span class="n">sprintf</span> <span class="s2">&quot;Token %s&quot;</span> <span class="n">authToken</span> <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">bind</span> <span class="n">toText</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">map</span> <span class="n">extractPassage</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">text</span> <span class="o">-&gt;</span> <span class="n">text</span><span class="o">.</span><span class="nc">Split</span><span class="o">(</span><span class="nn">Array</span><span class="p">.</span><span class="n">empty</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;,</span> <span class="nn">StringSplitOptions</span><span class="p">.</span><span class="nc">RemoveEmptyEntries</span><span class="o">)</span>
</span><span class='line'>                                 <span class="o">|&gt;</span> <span class="nc">ReceivedText</span>
</span><span class='line'>                                 <span class="o">|&gt;</span> <span class="n">dispatch</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>So <code>getText</code> will, when passed a <code>dispatch</code> function, call our Url, get the text of he body, throw away everything apart from the text of the passage we actually requested, and then split the passage on any whitespace.</p>

<p>We also want regular <code>ticks</code> coming through and prompting us to move onto the next word (or the previous if we&#39;re going backwards&#8230;).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">triggerUpdate</span> <span class="o">(</span><span class="n">dispatch</span> <span class="o">:</span> <span class="nc">Msg</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">window</span><span class="o">.</span><span class="n">setInterval</span><span class="o">((</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Tick</span><span class="o">),</span> <span class="mi">100</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next up, we need our view. The view will both receive new versions of the model as they are created, but will also receive a dispatch functions so it can feed new messages into our <code>update</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">view</span> <span class="n">model</span> <span class="n">dispatch</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">model</span><span class="o">.</span><span class="nc">Text</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">t</span> <span class="k">when</span> <span class="nn">Array</span><span class="p">.</span><span class="n">isEmpty</span> <span class="n">t</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span>
</span><span class='line'>            <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span> <span class="o">[</span><span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Loading...&quot;</span><span class="o">]</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="o">[</span> <span class="nc">ClassName</span> <span class="s2">&quot;container&quot;</span> <span class="o">]</span>
</span><span class='line'>            <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">button</span> <span class="o">[</span> <span class="nc">OnClick</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Faster</span><span class="o">)</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Faster&quot;</span> <span class="o">]</span>
</span><span class='line'>              <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="o">[</span> <span class="nc">ClassName</span> <span class="s2">&quot;theText&quot;</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="n">model</span><span class="o">.</span><span class="nn">Text</span><span class="p">.</span><span class="err">[</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span><span class="o">]</span>  <span class="o">]</span>
</span><span class='line'>              <span class="nn">R</span><span class="p">.</span><span class="n">button</span> <span class="o">[</span> <span class="nc">OnClick</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Slower</span><span class="o">)</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Slower&quot;</span> <span class="o">]</span>
</span><span class='line'>              <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="o">&lt;|</span> <span class="n">sprintf</span> <span class="s2">&quot;Ticks Per Update: %d&quot;</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">]</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>It displays a placeholder while we&#39;re loading data, and then buttons to speed up and slow down the speed reading rate.</p>

<p>Finally, we can fire up our application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">init</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Text</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">empty</span>
</span><span class='line'>      <span class="nc">Max</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nc">Index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nn">Program</span><span class="p">.</span><span class="n">mkSimple</span> <span class="n">init</span> <span class="n">update</span> <span class="o">(</span><span class="n">lazyView2</span> <span class="n">view</span><span class="o">)</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withSubscription</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">ofSub</span> <span class="n">getText</span><span class="o">)</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withSubscription</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">ofSub</span> <span class="n">triggerUpdate</span><span class="o">)</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withReact</span> <span class="s2">&quot;react-element&quot;</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>

<p>We just set our initial state and then tell react which element in our html we want to render our view in. Because we are registering <code>getText</code> and <code>triggerUpdate</code> as subscriptions, they will be passed a <code>dispatch</code> function and kicked off immediately, so the first thing our app will do is try and download the text.</p>

<p>Once the text is loaded, we&#39;ll start going forwards through the text, and are buttons for reading faster and slower will be displayed.</p>

<p>Let&#39;s see it in action:</p>

<p><img src="https://blog.mavnn.co.uk/images/speed_reading.gif" alt="The speed reader in action"></p>

<p>And there we have it - I hope you&#39;ll enjoy this brief trip into writing user interfaces in F#, and your <em>speedy</em> recap of one of the most famous readings from the Christmas story!</p>

<h2>Appendix: The full App.fs</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Advent2017</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">Core</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">JsInterop</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">Import</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">Browser</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">React</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">ReactDom</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nn">React</span><span class="p">.</span><span class="nc">Props</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">PowerPack</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">PowerPack</span><span class="p">.</span><span class="nc">Fetch</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Elmish</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Elmish</span><span class="p">.</span><span class="nc">React</span>
</span><span class='line'><span class="k">module</span> <span class="nc">R</span> <span class="o">=</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nc">React</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Model</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Text</span> <span class="o">:</span> <span class="kt">string</span> <span class="bp">[]</span>
</span><span class='line'>      <span class="nc">Max</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">Index</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">SinceLast</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">TicksPerUpdate</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Msg</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Faster</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Slower</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ReceivedText</span> <span class="k">of</span> <span class="kt">string</span> <span class="bp">[]</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Tick</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">update</span> <span class="n">msg</span> <span class="n">model</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Tick</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">model</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">{</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">tpu</span><span class="o">;</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">sl</span> <span class="o">}</span> <span class="k">when</span> <span class="n">sl</span> <span class="o">&gt;=</span> <span class="n">tpu</span> <span class="o">&amp;&amp;</span> <span class="n">tpu</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
</span><span class='line'>                <span class="nc">Index</span> <span class="o">=</span> <span class="n">min</span> <span class="n">model</span><span class="o">.</span><span class="nc">Max</span> <span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>                <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">{</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">tpu</span><span class="o">;</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">sl</span> <span class="o">}</span> <span class="k">when</span> <span class="n">sl</span> <span class="o">&gt;=</span> <span class="o">(</span><span class="n">tpu</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">tpu</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
</span><span class='line'>                <span class="nc">Index</span> <span class="o">=</span> <span class="n">max</span> <span class="mi">0</span> <span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>                <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">SinceLast</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Faster</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Slower</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ReceivedText</span> <span class="n">text</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
</span><span class='line'>            <span class="nc">Text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'>            <span class="nc">Max</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">length</span> <span class="n">text</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">requestUri</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">[</span> <span class="s2">&quot;https://api.esv.org/v3/passage/text/?q=John%201&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-passage-references=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-first-verse-numbers=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-verse-numbers=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-footnotes=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-footnote-body=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-passage-horizontal-lines=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-heading-horizontal-lines=false&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&amp;include-headings=false&quot;</span>
</span><span class='line'>      <span class="o">]</span> <span class="o">|&gt;</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">authToken</span> <span class="o">=</span> <span class="s2">&quot;TEST&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">toText</span> <span class="o">(</span><span class="n">res</span> <span class="o">:</span> <span class="nc">Response</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">res</span><span class="o">.</span><span class="n">text</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">Val</span><span class="o">|_|)</span> <span class="n">key</span> <span class="o">=</span> <span class="nn">Map</span><span class="p">.</span><span class="n">ofSeq</span> <span class="o">&gt;&gt;</span> <span class="o">(</span><span class="nn">Map</span><span class="p">.</span><span class="n">tryFind</span> <span class="n">key</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">extractPassage</span> <span class="o">(</span><span class="n">str</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">json</span> <span class="o">=</span> <span class="nn">Json</span><span class="p">.</span><span class="n">ofString</span> <span class="n">str</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">json</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Ok</span> <span class="o">(</span><span class="nn">Json</span><span class="p">.</span><span class="nc">Object</span> <span class="o">(</span><span class="nc">Val</span> <span class="s2">&quot;passages&quot;</span> <span class="o">(</span><span class="nn">Json</span><span class="p">.</span><span class="nc">Array</span> <span class="o">[|</span><span class="nn">Json</span><span class="p">.</span><span class="nc">String</span> <span class="n">first</span><span class="o">|])))</span> <span class="o">-&gt;</span> <span class="n">first</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="s2">&quot;Error&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">getText</span> <span class="n">dispatch</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">fetch</span> <span class="n">requestUri</span> <span class="o">[</span> <span class="n">requestHeaders</span> <span class="o">[</span> <span class="nc">Authorization</span> <span class="o">&lt;|</span> <span class="n">sprintf</span> <span class="s2">&quot;Token %s&quot;</span> <span class="n">authToken</span> <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">bind</span> <span class="n">toText</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">map</span> <span class="n">extractPassage</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">text</span> <span class="o">-&gt;</span> <span class="n">text</span><span class="o">.</span><span class="nc">Split</span><span class="o">(</span><span class="nn">Array</span><span class="p">.</span><span class="n">empty</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;,</span> <span class="nn">StringSplitOptions</span><span class="p">.</span><span class="nc">RemoveEmptyEntries</span><span class="o">)</span>
</span><span class='line'>                                 <span class="o">|&gt;</span> <span class="nc">ReceivedText</span>
</span><span class='line'>                                 <span class="o">|&gt;</span> <span class="n">dispatch</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">triggerUpdate</span> <span class="o">(</span><span class="n">dispatch</span> <span class="o">:</span> <span class="nc">Msg</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">window</span><span class="o">.</span><span class="n">setInterval</span><span class="o">((</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Tick</span><span class="o">),</span> <span class="mi">100</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">view</span> <span class="n">model</span> <span class="n">dispatch</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">model</span><span class="o">.</span><span class="nc">Text</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">t</span> <span class="k">when</span> <span class="nn">Array</span><span class="p">.</span><span class="n">isEmpty</span> <span class="n">t</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span>
</span><span class='line'>            <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span> <span class="o">[</span><span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Loading...&quot;</span><span class="o">]</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="o">[</span> <span class="nc">ClassName</span> <span class="s2">&quot;container&quot;</span> <span class="o">]</span>
</span><span class='line'>            <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">button</span> <span class="o">[</span> <span class="nc">OnClick</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Faster</span><span class="o">)</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Faster&quot;</span> <span class="o">]</span>
</span><span class='line'>              <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="o">[</span> <span class="nc">ClassName</span> <span class="s2">&quot;theText&quot;</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="n">model</span><span class="o">.</span><span class="nn">Text</span><span class="p">.</span><span class="err">[</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span><span class="o">]</span>  <span class="o">]</span>
</span><span class='line'>              <span class="nn">R</span><span class="p">.</span><span class="n">button</span> <span class="o">[</span> <span class="nc">OnClick</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Slower</span><span class="o">)</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Slower&quot;</span> <span class="o">]</span>
</span><span class='line'>              <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="o">&lt;|</span> <span class="n">sprintf</span> <span class="s2">&quot;Ticks Per Update: %d&quot;</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">]</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">init</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Text</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">empty</span>
</span><span class='line'>      <span class="nc">Max</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nc">Index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nn">Program</span><span class="p">.</span><span class="n">mkSimple</span> <span class="n">init</span> <span class="n">update</span> <span class="o">(</span><span class="n">lazyView2</span> <span class="n">view</span><span class="o">)</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withSubscription</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">ofSub</span> <span class="n">getText</span><span class="o">)</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withSubscription</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">ofSub</span> <span class="n">triggerUpdate</span><span class="o">)</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withReact</span> <span class="s2">&quot;react-element&quot;</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going Down the Property Based Testing Rabbit Hole]]></title>
    <link href="https://blog.mavnn.co.uk/going-down-the-property-based-testing-rabbit-hole/"/>
    <updated>2017-11-10T15:28:47+00:00</updated>
    <id>https://blog.mavnn.co.uk/going-down-the-property-based-testing-rabbit-hole</id>
    <content type="html"><![CDATA[<p>Imagine, if you will, a card game.</p>

<p>(Don&#39;t worry, there&#39;s code later. Lots of code.)</p>

<p>It&#39;s not a complex card game; it&#39;s a quick and fun game designed to represent over the top martial arts combat in the style of Hong Kong cinema or a beat &#39;em up game.</p>

<p>Each player has a deck of cards which represent their martial art; different arts are differently weighted in their card distribution. These cards come in four main types:</p>

<h3>1 Normal cards</h3>

<p>A &quot;normal&quot; card comes in one of four suits:</p>

<ul>
<li>Punch</li>
<li>Kick</li>
<li>Throw</li>
<li>Defend</li>
</ul>

<p>They also carry a numerical value between 1 and 10, which represents both how &quot;fast&quot; they are and (except for defend cards) how much damage they do. A Defend card can never determine damage.</p>

<h3>2 Special Attack cards</h3>

<p>The fireballs, whirling hurricane kicks and mighty mega throws of the game. A special attack card lists two suits: one to use for the speed of the final attack, and one for the damage. This allows you to play 3 cards together to create an attack which is fast yet damaging.</p>

<h3>3 Combo Attack cards</h3>

<p>A flurry of blows! Combo cards also list two suits: one for speed, and one for the &quot;follow up&quot; flurry. This allows you to play 3 cards together, one of which determines the speed of the attack while the other adds to the total damage. For example, if you play a Punch/Kick Combo with a Punch 3 and a Kick 7 you end up with a speed 3, damage 10 attack.</p>

<h3>4 Knockdown cards</h3>

<p>You can combine a knockdown card with any other valid play to create an action that will &quot;knockdown&quot; your opponent.</p>

<h2>The code</h2>

<p>(This is an <em>example</em> of property based testing; if you need an <em>introduction</em> first, check out <a href="https://blog.mavnn.co.uk/fscheck-breaking-your-code-in-new-and-exciting-ways/">Breaking Your Code in New and Exciting Ways</a> or the <a href="https://blog.mavnn.co.uk/sdd-conf-2015/">the video version</a>)</p>

<p>There are of course other rules to the game; but let&#39;s assume for a moment we&#39;re coding this game up in F#. We&#39;ve defined a nice domain model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">BlackBelt</span><span class="p">.</span><span class="nn">Domain</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Suit</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Punch</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Kick</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Throw</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Defend</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">NormalCard</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Suit</span> <span class="o">:</span> <span class="nc">Suit</span>
</span><span class='line'>      <span class="nc">Value</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">ComboCard</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">SpeedSuit</span> <span class="o">:</span> <span class="nc">Suit</span>
</span><span class='line'>      <span class="nc">FollowUpSuit</span> <span class="o">:</span> <span class="nc">Suit</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">SpecialAttackCard</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">SpeedSuit</span> <span class="o">:</span> <span class="nc">Suit</span>
</span><span class='line'>      <span class="nc">DamageSuit</span> <span class="o">:</span> <span class="nc">Suit</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Card</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Normal</span> <span class="k">of</span> <span class="nc">NormalCard</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Combo</span> <span class="k">of</span> <span class="nc">ComboCard</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Special</span> <span class="k">of</span> <span class="nc">SpecialAttackCard</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Knockdown</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Action</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Speed</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">Damage</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">Suit</span> <span class="o">:</span> <span class="nc">Suit</span>
</span><span class='line'>      <span class="nc">Knockdown</span> <span class="o">:</span> <span class="kt">bool</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">PlayerId</span> <span class="o">=</span> <span class="nc">PlayerId</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Player</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Name</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nc">Id</span> <span class="o">:</span> <span class="nc">PlayerId</span>
</span><span class='line'>      <span class="nc">Deck</span> <span class="o">:</span> <span class="nc">Card</span> <span class="kt">list</span>
</span><span class='line'>      <span class="nc">Stance</span> <span class="o">:</span> <span class="nc">Card</span> <span class="kt">list</span>
</span><span class='line'>      <span class="nc">Health</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">WaitingFor</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Attack</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Counter</span> <span class="k">of</span> <span class="nc">PlayerId</span> <span class="o">*</span> <span class="nc">Action</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">StanceCard</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">Game</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">GameId</span> <span class="o">:</span> <span class="nc">Guid</span>
</span><span class='line'>      <span class="nc">Player1</span> <span class="o">:</span> <span class="nc">Player</span>
</span><span class='line'>      <span class="nc">Player2</span> <span class="o">:</span> <span class="nc">Player</span>
</span><span class='line'>      <span class="nc">TurnOf</span> <span class="o">:</span> <span class="nc">PlayerId</span>
</span><span class='line'>      <span class="nc">WaitingFor</span> <span class="o">:</span> <span class="nc">WaitingFor</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And now we want to write a function that takes the rules for playing cards above, and turns a <code>Card list</code> into an <code>Action option</code> (telling you if the list is a valid play, and what action will result if it is).</p>

<p>This function is pretty critical to the overall game play, and may well also be used for validating input in the UI so getting it right will make a big difference to the experience of playing the game.</p>

<p>So we&#39;re going to property test our implementation in every which way we can think of&#8230;</p>

<p>First step: make yourself a placeholder version of the function to reference in your tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">BlackBelt</span><span class="p">.</span><span class="nn">Domain</span><span class="p">.</span><span class="nc">Logic</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">toAction</span> <span class="n">cards</span> <span class="o">=</span> <span class="nc">None</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, let&#39;s start adding properties. All of the rest goes in a single file, but I&#39;m going to split it up with some commentary as we go.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">BlackBelt</span><span class="p">.</span><span class="nn">Tests</span><span class="p">.</span><span class="nc">Logic</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">Expecto</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Expecto</span><span class="p">.</span><span class="nc">ExpectoFsCheck</span>
</span><span class='line'><span class="k">open</span> <span class="nc">FsCheck</span>
</span><span class='line'><span class="k">open</span> <span class="nn">BlackBelt</span><span class="p">.</span><span class="nn">Domain</span><span class="p">.</span><span class="nc">Logic</span>
</span><span class='line'><span class="k">open</span> <span class="nn">BlackBelt</span><span class="p">.</span><span class="nn">Domain</span><span class="p">.</span><span class="nc">Types</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">allSuitsBut</span> <span class="n">suit</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">[</span><span class="nc">Punch</span><span class="o">;</span><span class="nc">Kick</span><span class="o">;</span><span class="nc">Throw</span><span class="o">;</span><span class="nc">Defend</span><span class="o">]</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="o">((&lt;&gt;)</span> <span class="n">suit</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">elements</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We need a custom generator here as only some</span>
</span><span class='line'><span class="c1">// values are valid</span>
</span><span class='line'><span class="k">type</span> <span class="nc">DomainArbs</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">NormalCard</span><span class="bp">()</span> <span class="o">:</span> <span class="nc">Arbitrary</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">suit</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">Suit</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">value</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>                <span class="o">{</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">suit</span>
</span><span class='line'>                  <span class="nc">Value</span> <span class="o">=</span> <span class="n">value</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">fromGen</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">SpecialAttackCard</span><span class="bp">()</span> <span class="o">:</span> <span class="nc">Arbitrary</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">damageSuit</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="nc">Defend</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">speedSuit</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">Suit</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>                <span class="o">{</span> <span class="nc">SpeedSuit</span> <span class="o">=</span> <span class="n">speedSuit</span>
</span><span class='line'>                  <span class="nc">DamageSuit</span> <span class="o">=</span> <span class="n">damageSuit</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">fromGen</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">ComboCard</span><span class="bp">()</span> <span class="o">:</span> <span class="nc">Arbitrary</span><span class="o">&lt;</span><span class="nc">ComboCard</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">speedSuit</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="nc">Defend</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">followupSuit</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="nc">Defend</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>                <span class="o">{</span> <span class="nc">SpeedSuit</span> <span class="o">=</span> <span class="n">speedSuit</span>
</span><span class='line'>                  <span class="nc">FollowUpSuit</span> <span class="o">=</span> <span class="n">followupSuit</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">fromGen</span>
</span></code></pre></td></tr></table></div></figure>

<p>We&#39;ll start off with a few general purpose bits for generating random types in our domain. I haven&#39;t gone the whole hog in making illegal states unrepresentable here, so we need to constrain a few things (like the fact that cards only have values from 1 to 10, and that you can&#39;t combo into a defend card for extra damage).</p>

<p>Now: let&#39;s start generating potential plays of cards. Our properties will be interested in whether a particular play is valid or invalid, and we will want to know what the resulting <code>Action</code> should be for valid plays.</p>

<p>So we define a union to create instances of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">GeneratedAction</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">ValidAction</span> <span class="k">of</span> <span class="nc">Card</span> <span class="kt">list</span> <span class="o">*</span> <span class="nc">Action</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">InvalidAction</span> <span class="k">of</span> <span class="nc">Card</span> <span class="kt">list</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now let&#39;s add all of the valid actions we can think of.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeNormalAction</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">cards</span> <span class="o">=</span> <span class="o">[</span><span class="nc">Normal</span> <span class="n">normal</span><span class="o">]</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">action</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">{</span> <span class="nc">Speed</span> <span class="o">=</span> <span class="n">normal</span><span class="o">.</span><span class="nc">Value</span>
</span><span class='line'>              <span class="nc">Damage</span> <span class="o">=</span>
</span><span class='line'>                  <span class="k">if</span> <span class="n">normal</span><span class="o">.</span><span class="nc">Suit</span> <span class="o">=</span> <span class="nc">Defend</span> <span class="k">then</span>
</span><span class='line'>                      <span class="mi">0</span>
</span><span class='line'>                  <span class="k">else</span>
</span><span class='line'>                      <span class="n">normal</span><span class="o">.</span><span class="nc">Value</span>
</span><span class='line'>              <span class="nc">Suit</span> <span class="o">=</span> <span class="n">normal</span><span class="o">.</span><span class="nc">Suit</span>
</span><span class='line'>              <span class="nc">Knockdown</span> <span class="o">=</span> <span class="bp">false</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cards</span><span class="o">,</span> <span class="n">action</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>So; a normal card on it&#39;s own is always a valid play, the only thing we need to watch out for is that a Defend card causes no damage.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeComboAttack</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">comboCard</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">ComboCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal1</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal2</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">cards</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">[</span> <span class="nc">Normal</span> <span class="o">{</span> <span class="n">normal1</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">comboCard</span><span class="o">.</span><span class="nc">SpeedSuit</span> <span class="o">}</span>
</span><span class='line'>              <span class="nc">Normal</span> <span class="o">{</span> <span class="n">normal2</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">comboCard</span><span class="o">.</span><span class="nc">FollowUpSuit</span> <span class="o">}</span>
</span><span class='line'>              <span class="nc">Combo</span> <span class="n">comboCard</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">attack</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">{</span> <span class="nc">Speed</span> <span class="o">=</span>
</span><span class='line'>                  <span class="k">if</span> <span class="n">comboCard</span><span class="o">.</span><span class="nc">SpeedSuit</span> <span class="o">=</span> <span class="n">comboCard</span><span class="o">.</span><span class="nc">FollowUpSuit</span> <span class="k">then</span>
</span><span class='line'>                      <span class="n">min</span> <span class="n">normal1</span><span class="o">.</span><span class="nc">Value</span> <span class="n">normal2</span><span class="o">.</span><span class="nc">Value</span>
</span><span class='line'>                  <span class="k">else</span>
</span><span class='line'>                      <span class="n">normal1</span><span class="o">.</span><span class="nc">Value</span>
</span><span class='line'>              <span class="nc">Damage</span> <span class="o">=</span> <span class="n">normal1</span><span class="o">.</span><span class="nc">Value</span> <span class="o">+</span> <span class="n">normal2</span><span class="o">.</span><span class="nc">Value</span>
</span><span class='line'>              <span class="nc">Suit</span> <span class="o">=</span> <span class="n">comboCard</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>              <span class="nc">Knockdown</span> <span class="o">=</span> <span class="bp">false</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cards</span><span class="o">,</span> <span class="n">attack</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here we&#39;ll generate the combo card and two other cards, and then we&#39;ll override the suit of the two normal cards to ensure they&#39;re legal to be played with the combo card.</p>

<p>There&#39;s a quirk here (which in reality I noticed after trying to run these tests). If the two suits are the same, the fast card should determine the speed regardless of &quot;order&quot;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeSpecialAttack</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">specialCard</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">damageValue</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">speedValue</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">damageValue</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">cards</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">[</span> <span class="nc">Normal</span> <span class="o">{</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">SpeedSuit</span><span class="o">;</span> <span class="nc">Value</span> <span class="o">=</span> <span class="n">speedValue</span> <span class="o">}</span>
</span><span class='line'>              <span class="nc">Normal</span> <span class="o">{</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">DamageSuit</span><span class="o">;</span> <span class="nc">Value</span> <span class="o">=</span> <span class="n">damageValue</span> <span class="o">}</span>
</span><span class='line'>              <span class="nc">Special</span> <span class="n">specialCard</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">attack</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">{</span> <span class="nc">Speed</span> <span class="o">=</span> <span class="n">speedValue</span>
</span><span class='line'>              <span class="nc">Damage</span> <span class="o">=</span> <span class="n">damageValue</span>
</span><span class='line'>              <span class="nc">Suit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>              <span class="nc">Knockdown</span> <span class="o">=</span> <span class="bp">false</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cards</span><span class="o">,</span> <span class="n">attack</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Special attack cards have an additional constraint: playing a high value speed card with a low value damage card would actually <em>disadvantage</em> the player, and so is not considered a valid play.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeKnockdownAttack</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">cards</span><span class="o">,</span> <span class="n">baseAttack</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">Gen</span><span class="p">.</span><span class="n">oneof</span> <span class="o">[</span> <span class="n">makeNormalAction</span>
</span><span class='line'>                        <span class="n">makeComboAttack</span>
</span><span class='line'>                        <span class="n">makeSpecialAttack</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">cards</span> <span class="o">=</span> <span class="nc">Knockdown</span><span class="o">::</span><span class="n">cards</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">attack</span> <span class="o">=</span> <span class="o">{</span> <span class="n">baseAttack</span> <span class="k">with</span> <span class="nc">Knockdown</span> <span class="o">=</span> <span class="bp">true</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cards</span><span class="o">,</span> <span class="n">attack</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here we make use of the generators we&#39;ve constructed above to create a Knockdown action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeValidAction</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">validAction</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">Gen</span><span class="p">.</span><span class="n">oneof</span> <span class="o">[</span> <span class="n">makeNormalAction</span>
</span><span class='line'>                        <span class="n">makeComboAttack</span>
</span><span class='line'>                        <span class="n">makeSpecialAttack</span>
</span><span class='line'>                        <span class="n">makeKnockdownAttack</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="nc">ValidAction</span> <span class="n">validAction</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Which allows us to write a <code>ValidAction</code> generator.</p>

<p>Now, more interesting is trying to generate plays which are not valid. We&#39;re not trusting the UI to do any validation here, so let&#39;s just come up with everything we can think of&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">multipleNormal</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">let</span><span class="o">!</span> <span class="n">first</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">let</span><span class="o">!</span> <span class="n">normals</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">nonEmptyListOf</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">first</span><span class="o">::</span><span class="n">normals</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="nc">Normal</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>More than one normal card with out another card to combine them is out.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">incompleteComboOrSpecial</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">special</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">Gen</span><span class="p">.</span><span class="n">oneof</span> <span class="o">[</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">map</span> <span class="nc">Combo</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">ComboCard</span><span class="o">&gt;</span>
</span><span class='line'>                        <span class="nn">Gen</span><span class="p">.</span><span class="n">map</span> <span class="nc">Special</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">other</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">[</span><span class="n">special</span><span class="o">;</span> <span class="n">other</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>A combo or special card always requires precisely two normal cards to be a valid play; so here, we only generate one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">onlyKnockdown</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Gen</span><span class="p">.</span><span class="n">constant</span> <span class="o">[</span><span class="nc">Knockdown</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>A combo card can only be played as part of an otherwise valid play, and isn&#39;t allowed on it&#39;s own.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">unmatchedSpeedCombo</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">combo</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">ComboCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal1</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal2</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched1</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">combo</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched2</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">combo</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n1</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal1</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched1</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n2</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal2</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched2</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">[</span><span class="nc">Combo</span> <span class="n">combo</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n1</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n2</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">unmatchedSpeedSpecial</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">special</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal1</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal2</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched1</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">special</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched2</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">special</span><span class="o">.</span><span class="nc">SpeedSuit</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n1</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal1</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched1</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n2</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal2</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched2</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">[</span><span class="nc">Special</span> <span class="n">special</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n1</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n2</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">unmatchedDamageCombo</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">combo</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">ComboCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal1</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal2</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched1</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">combo</span><span class="o">.</span><span class="nc">FollowUpSuit</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched2</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">combo</span><span class="o">.</span><span class="nc">FollowUpSuit</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n1</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal1</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched1</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n2</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal2</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched2</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">[</span><span class="nc">Combo</span> <span class="n">combo</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n1</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n2</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">unmatchedDamageSpecial</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">special</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal1</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">normal2</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">NormalCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched1</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">special</span><span class="o">.</span><span class="nc">DamageSuit</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">unmatched2</span> <span class="o">=</span> <span class="n">allSuitsBut</span> <span class="n">special</span><span class="o">.</span><span class="nc">DamageSuit</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n1</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal1</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched1</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">n2</span> <span class="o">=</span> <span class="o">{</span> <span class="n">normal2</span> <span class="k">with</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">unmatched2</span> <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">[</span><span class="nc">Special</span> <span class="n">special</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n1</span><span class="o">;</span> <span class="nc">Normal</span> <span class="n">n2</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>There&#39;s lots of ways to combine three cards which are not valid combos or specials. Here we use are <code>allSuitsBut</code> helper function to always play just the wrong cards compared to what&#39;s needed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">swappedSpecial</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">specialCard</span> <span class="o">=</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">generate</span><span class="o">&lt;</span><span class="nc">SpecialAttackCard</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">SpeedSuit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">DamageSuit</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">[</span><span class="nc">Special</span> <span class="n">specialCard</span><span class="o">]</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">speedValue</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>            <span class="k">let</span><span class="o">!</span> <span class="n">damageValue</span> <span class="o">=</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">choose</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">speedValue</span><span class="o">)</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">cards</span> <span class="o">=</span>
</span><span class='line'>                <span class="o">[</span> <span class="nc">Normal</span> <span class="o">{</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">SpeedSuit</span><span class="o">;</span> <span class="nc">Value</span> <span class="o">=</span> <span class="n">speedValue</span> <span class="o">}</span>
</span><span class='line'>                  <span class="nc">Normal</span> <span class="o">{</span> <span class="nc">Suit</span> <span class="o">=</span> <span class="n">specialCard</span><span class="o">.</span><span class="nc">DamageSuit</span><span class="o">;</span> <span class="nc">Value</span> <span class="o">=</span> <span class="n">damageValue</span> <span class="o">}</span>
</span><span class='line'>                  <span class="nc">Special</span> <span class="n">specialCard</span> <span class="o">]</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">cards</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And here we create special attacks which are slower than they are damaging. If the speed and damage suit are the same, the cards could be used either way around to create a valid action, so instead we just return the Special card on it&#39;s own without companions to form a different invalid play.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">makeInvalidAction</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">invalidAction</span> <span class="o">=</span>
</span><span class='line'>            <span class="nn">Gen</span><span class="p">.</span><span class="n">oneof</span> <span class="o">[</span> <span class="n">multipleNormal</span>
</span><span class='line'>                        <span class="n">incompleteComboOrSpecial</span>
</span><span class='line'>                        <span class="n">onlyKnockdown</span>
</span><span class='line'>                        <span class="n">unmatchedSpeedCombo</span>
</span><span class='line'>                        <span class="n">unmatchedSpeedSpecial</span>
</span><span class='line'>                        <span class="n">unmatchedDamageCombo</span>
</span><span class='line'>                        <span class="n">unmatchedDamageSpecial</span>
</span><span class='line'>                        <span class="n">swappedSpecial</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="nc">InvalidAction</span> <span class="n">invalidAction</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>There&#39;s more that could be added here, but I decided that was enough to keep me going for the moment and so added my invalid action generator here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">ActionArbs</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">GeneratedAction</span><span class="bp">()</span> <span class="o">:</span> <span class="nc">Arbitrary</span><span class="o">&lt;</span><span class="nc">GeneratedAction</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">gen</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span><span class="o">!</span> <span class="nn">Gen</span><span class="p">.</span><span class="n">oneof</span> <span class="o">[</span>
</span><span class='line'>                        <span class="n">makeValidAction</span>
</span><span class='line'>                        <span class="n">makeInvalidAction</span>
</span><span class='line'>                    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Arb</span><span class="p">.</span><span class="n">fromGen</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">actionConfig</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nn">FsCheckConfig</span><span class="p">.</span><span class="n">defaultConfig</span> <span class="k">with</span>
</span><span class='line'>        <span class="n">arbitrary</span> <span class="o">=</span> <span class="o">[</span><span class="n">typeof</span><span class="o">&lt;</span><span class="nc">DomainArbs</span><span class="o">&gt;</span>
</span><span class='line'>                     <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">ActionArbs</span><span class="o">&gt;]</span> <span class="o">}</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">Tests</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="n">toAction</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">testPropertyWithConfig</span> <span class="n">actionConfig</span> <span class="s2">&quot;toAction function&quot;</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span class="n">action</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">action</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">ValidAction</span> <span class="o">(</span><span class="n">cards</span><span class="o">,</span> <span class="n">action</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">equal</span> <span class="o">(</span><span class="n">toAction</span> <span class="n">cards</span><span class="o">)</span> <span class="o">(</span><span class="nc">Some</span> <span class="n">action</span><span class="o">)</span> <span class="s2">&quot;Is an action&quot;</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">InvalidAction</span> <span class="n">cards</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">Expect</span><span class="p">.</span><span class="n">isNone</span> <span class="o">(</span><span class="n">toAction</span> <span class="n">cards</span><span class="o">)</span> <span class="s2">&quot;Is not an attack&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Finally, I wired up the generators and defined the single property this function should obey: it should return the correct action for a valid play, or <code>None</code> if the play is erroneous.</p>

<h2>The wrap</h2>

<p>Hopefully this is a useful example for those of you using property based tests of how you can encode business logic into them: although this looks like a lot of code, creating even single examples of each of these cases would have been nearly as long and far less effective in testing.</p>

<p>It does tend to lead to a rather iterative approach to development, where as your code starts working for some of the use cases, you begin to notice errors in or missing cases you need to generate, which helps you find more edges cases in your code and round the circle you go again.</p>

<p>If you want, you&#39;re very welcome to take this code to use as a coding Kata - but be warned, it&#39;s not as simple a challenge as you might expect from the few paragraphs at the top of the post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All Saints' Day Sale]]></title>
    <link href="https://blog.mavnn.co.uk/all-saints-day-sale/"/>
    <updated>2017-11-01T09:01:10+00:00</updated>
    <id>https://blog.mavnn.co.uk/all-saints-day-sale</id>
    <content type="html"><![CDATA[<blockquote>
<p>TL;DR: 10% off <a href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/">Building Solid Systems in F#</a> until 7th November 2017</p>
</blockquote>

<p>Lots of people these days seem to like giving Halloween sales, but historically and theologically, Halloween is really just the precursor to the real celebration: <a href="https://en.wikipedia.org/wiki/All_Saints%27_Day">All Saints&#39; Day</a>.</p>

<p>So in the interest of getting the details right, we&#39;re having an All Saints&#39; Day sale, starting today for 7 days. It&#39;s already live, get your 10% off <a href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/">your tickets</a> now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RouteMaster : Master Your Messaging Routes]]></title>
    <link href="https://blog.mavnn.co.uk/routemaster-master-your-messaging-routes/"/>
    <updated>2017-10-27T16:25:53+01:00</updated>
    <id>https://blog.mavnn.co.uk/routemaster-master-your-messaging-routes</id>
    <content type="html"><![CDATA[<p>I&#39;m very pleased to announce the release of an initial alpha of <a href="https://github.com/RouteMasterIntegration/RouteMaster">RouteMaster</a>.</p>

<p>What is it? Well, I&#39;ll let the README speak for itself:</p>

<blockquote>
<p>RouteMaster is a .NET library for writing stateful workflows on top of a message bus. It exists to make the implementation of long running business processes easy in event driven systems.</p>
</blockquote>

<p>There is also example code in the repository so you can see what things are starting to look like.</p>

<p>For those of you following along, this will sound awfully familiar; that&#39;s because RouteMaster is the outcome of my decision to rebuild a <a href="https://blog.mavnn.co.uk/process-management-in-easynetq/">Process Manager</a> for EasyNetQ. The first cut of that was imaginatively called &quot;EasyNetQ.ProcessManager&quot;, but I decided to rename it for three main reasons:</p>

<ul>
<li>On re-reading <a href="http://www.enterpriseintegrationpatterns.com/">Enterprise Integration Patterns</a>, it occurred to me that RouteMaster was an enabler for many of the other patterns as well as the &quot;Process Manager&quot;</li>
<li>The message bus RouteMaster uses is provided as an interface; the main dll has no dependency on EasyNetQ at all</li>
<li>The previous EasyNetQ.ProcessManager is still available as a Nuget package supplied by my previous employer, and they have both the moral and legal rights to the package given I wrote the original on their time</li>
</ul>

<p>A pre-emptive few FAQs:</p>

<h3>Is this ready to use?</h3>

<p>No, not yet. I&#39;m out of time I can afford to spend on it right now, get in touch if you can/want to fund future development.</p>

<p>If you want to play, the code as provided does run and all of the process tests pass.</p>

<h3>Urgh! All the examples are F#!?</h3>

<p>Yes, but there is a C# friendly API in the works. See the first question :)</p>

<h3>What infrastructure do I need to run this?</h3>

<p>At the moment, I&#39;m using EasyNetQ (over RabbitMQ) and PostgreSQL (via Marten) for transport and storage respectively.</p>

<h3>What about things like NServiceBus and MassTransit?</h3>

<p>In some ways they fall in a similar space to RouteMaster, but with a different philosophy. Just as EasyNetQ is a focused library that supplies only part of the functionality you&#39;d find in these larger solutions, RouteMaster is designed to work with your chosen transport abstraction not replace it.</p>

<h2>Ask not what your RouteMaster can do for you, but what you can do for your RouteMaster!</h2>

<p>I&#39;d really like feedback, ideas, use cases and suggestions - leave comments here or ping an issue onto the repository. If you&#39;re feeling really brave and can try and actually experiment with it, but at the moment I&#39;m mostly hoping for concrete use cases and, well, funding.</p>

<p>Quite a few people over the years have hit my website searching for an EasyNetQ process manager, and others have asked me if it&#39;s still available. I&#39;d like to hear from as many of you as possible to build the tightest, simplest solution which will do the job.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[POSTing to Freya]]></title>
    <link href="https://blog.mavnn.co.uk/posting-to-freya/"/>
    <updated>2017-10-25T15:52:57+01:00</updated>
    <id>https://blog.mavnn.co.uk/posting-to-freya</id>
    <content type="html"><![CDATA[<p>I&#39;ve written about how nice Freya is as a library, but documentation is still a little light on the ground.</p>

<p>So here&#39;s a minimal implementation of a &quot;microservice&quot; Freya API, starting from which dotnet commands to run to install the Freya template, through to a running web service.</p>

<p>Make sure you have an up to date .NET Core SDK installed, and grab yourself the handy dandy Freya template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dotnet new -i <span class="s2">&quot;Freya.Template::*&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then create yourself a directory and go into it. The following command will set up a brand new Freya project using kestrel as the underlying webserver, and Hopac (rather than F# Async) for concurrency. Alternatively, you can leave both the options off and you&#39;ll get Freya running on Suave with standard Async.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dotnet new freya --framework kestrel --concurrency hopac
</span></code></pre></td></tr></table></div></figure>

<p>Your project should run at this point; <code>dotnet run</code> will spin up a webserver on port 5000 which will give a 404 at the root and text responses on /hello and /hello/name paths.</p>

<p>Api.fs is where all the magic of configuring Freya happens - KestrelInterop.fs contains boilerplate for making sure Routing information passes correctly between Kestrel and Freya, and Program.fs just starts Kestrel with our Freya API as an OWIN app.</p>

<h3>Adding JSON</h3>

<p>So, this is great and all, but we&#39;re building a microservice aren&#39;t we? That normally means JSON (or at least something more structured than plain text!).</p>

<p>Let&#39;s change things up so that as well as supplying the name to greet in the route, we can POST JSON with a name field to the /hello end point.</p>

<p>To respond in JSON, we need a Freya <code>Represent</code> record. We&#39;re sending a result with a fixed structure, so we don&#39;t need a serialization library or anything, we&#39;ll just construct the JSON by hand. Stick this near the top of Api.fs:</p>

<!-- more -->

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Text</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Text</span><span class="p">.</span><span class="nc">RegularExpressions</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">representGreeting</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">before</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;{ </span><span class="se">\&quot;</span><span class="s2">greeting</span><span class="se">\&quot;</span><span class="s2">: </span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">after</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2"> }&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">extremeSanifier</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">RegularExpressions</span><span class="p">.</span><span class="nc">Regex</span><span class="o">(</span><span class="s2">&quot;[^a-z0-9 ]&quot;</span><span class="o">,</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">Compiled</span> <span class="o">|||</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">IgnoreCase</span><span class="o">)</span>
</span><span class='line'>    <span class="k">fun</span> <span class="n">name</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">safeNameBytes</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">extremeSanifier</span><span class="o">.</span><span class="nc">Replace</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span>
</span><span class='line'>        <span class="o">{</span> <span class="nc">Description</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">{</span> <span class="nc">Charset</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">Charset</span><span class="p">.</span><span class="nc">Utf8</span>
</span><span class='line'>              <span class="nc">Encodings</span> <span class="o">=</span> <span class="nc">None</span>
</span><span class='line'>              <span class="nc">MediaType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span>
</span><span class='line'>              <span class="nc">Languages</span> <span class="o">=</span> <span class="nc">None</span> <span class="o">}</span>
</span><span class='line'>          <span class="nc">Data</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">concat</span> <span class="o">[</span><span class="n">before</span><span class="o">;</span><span class="n">safeNameBytes</span><span class="o">;</span><span class="n">after</span><span class="o">]</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>So here we&#39;re defining an HTTP representation of a response, including media type and other important information.</p>

<p>Aside: why do we return a lambda at the end rather than making representGreeting itself a function? That&#39;s so that we don&#39;t want to rebuild the two byte arrays and the regex every time we call the function.</p>

<p>We also need to be able to read incoming JSON. Well, all we want is a string so lets just check that there&#39;s an &#39;&quot;&#39; at the beginning and end&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">grabString</span> <span class="o">(</span><span class="n">bodyStream</span> <span class="o">:</span> <span class="o">#</span><span class="nc">Stream</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">use</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamReader</span><span class="o">(</span><span class="n">bodyStream</span><span class="o">)</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">reader</span><span class="o">.</span><span class="nc">ReadToEnd</span><span class="bp">()</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">str</span> <span class="k">when</span> <span class="n">str</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="o">.[</span><span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">&lt;|</span> <span class="n">str</span><span class="o">.</span><span class="nc">Substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nc">None</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we can start hooking up the actual root that we want. We need to make some additions to <code>helloMachine</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">helloMachine</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freyaMachine</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// methods [GET; HEAD; OPTIONS]</span>
</span><span class='line'>        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">;</span> <span class="nc">POST</span><span class="o">]</span>
</span><span class='line'>        <span class="n">acceptableMediaTypes</span> <span class="o">[</span><span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span><span class="o">]</span>
</span><span class='line'>        <span class="n">handleOk</span> <span class="n">sayHello</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Magically our endpoint now knows not only that we accept POSTs, but it will end the correct error code if the media type of the POST is not set to JSON.</p>

<p>We also need to update <code>sayHello</code> and <code>name</code>; we&#39;ll extract the method of the request and choose logic for working out the name and creating the response respectively.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">name_</span> <span class="o">=</span> <span class="nn">Route</span><span class="p">.</span><span class="n">atom_</span> <span class="s2">&quot;name&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="n">method_</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">method_</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">name</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">nameO</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">body_</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">map</span> <span class="n">grabString</span>
</span><span class='line'>            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">name_</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">match</span> <span class="n">nameO</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">name</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="s2">&quot;World&quot;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">representResponse</span> <span class="n">greeting</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">representGreeting</span> <span class="n">greeting</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nn">Represent</span><span class="p">.</span><span class="n">text</span> <span class="n">greeting</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And that&#39;s everything we should need. Firing up <a href="https://www.getpostman.com/">PostMan</a> we can find out that posting an empty body gets a 500 (we should probably handle that, looks like the request stream can be null), firing in a string with no media type header gets back a &quot;415 Unsupported Media Type&quot; (did you know that off hand?) and a POST with a correct body (i.e., starts and ends with a &#39;&quot;&#39;) gets us back:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span> <span class="nt">&quot;greeting&quot;</span><span class="p">:</span> <span class="s2">&quot;Hello michael&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>So there you have it. Adding a POST endpoint to Freya.</p>

<h3>Appendix</h3>

<p>Here is the complete Api.fs for you to follow along, with open statements moved to the top of the file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Api</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Text</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Text</span><span class="p">.</span><span class="nc">RegularExpressions</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nc">Core</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Machines</span><span class="p">.</span><span class="nc">Http</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Types</span><span class="p">.</span><span class="nc">Http</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Routers</span><span class="p">.</span><span class="nn">Uri</span><span class="p">.</span><span class="nc">Template</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">representGreeting</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">before</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;{ </span><span class="se">\&quot;</span><span class="s2">greeting</span><span class="se">\&quot;</span><span class="s2">: </span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">after</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2"> }&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">extremeSanifier</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">RegularExpressions</span><span class="p">.</span><span class="nc">Regex</span><span class="o">(</span><span class="s2">&quot;[^a-z0-9 ]&quot;</span><span class="o">,</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">Compiled</span> <span class="o">|||</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">IgnoreCase</span><span class="o">)</span>
</span><span class='line'>    <span class="k">fun</span> <span class="n">name</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">safeNameBytes</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">extremeSanifier</span><span class="o">.</span><span class="nc">Replace</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span>
</span><span class='line'>        <span class="o">{</span> <span class="nc">Description</span> <span class="o">=</span>
</span><span class='line'>            <span class="o">{</span> <span class="nc">Charset</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">Charset</span><span class="p">.</span><span class="nc">Utf8</span>
</span><span class='line'>              <span class="nc">Encodings</span> <span class="o">=</span> <span class="nc">None</span>
</span><span class='line'>              <span class="nc">MediaType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span>
</span><span class='line'>              <span class="nc">Languages</span> <span class="o">=</span> <span class="nc">None</span> <span class="o">}</span>
</span><span class='line'>          <span class="nc">Data</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">concat</span> <span class="o">[</span><span class="n">before</span><span class="o">;</span><span class="n">safeNameBytes</span><span class="o">;</span><span class="n">after</span><span class="o">]</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">grabString</span> <span class="o">(</span><span class="n">bodyStream</span> <span class="o">:</span> <span class="o">#</span><span class="nc">Stream</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">use</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamReader</span><span class="o">(</span><span class="n">bodyStream</span><span class="o">)</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">reader</span><span class="o">.</span><span class="nc">ReadToEnd</span><span class="bp">()</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">str</span> <span class="k">when</span> <span class="n">str</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="o">.[</span><span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="o">&lt;|</span> <span class="n">str</span><span class="o">.</span><span class="nc">Substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nc">None</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">name_</span> <span class="o">=</span> <span class="nn">Route</span><span class="p">.</span><span class="n">atom_</span> <span class="s2">&quot;name&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="n">method_</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">method_</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">name</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">nameO</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">body_</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">map</span> <span class="n">grabString</span>
</span><span class='line'>            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">name_</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">match</span> <span class="n">nameO</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">name</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="s2">&quot;World&quot;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">representResponse</span> <span class="n">greeting</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">representGreeting</span> <span class="n">greeting</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nn">Represent</span><span class="p">.</span><span class="n">text</span> <span class="n">greeting</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">sayHello</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freya</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span><span class="o">!</span> <span class="n">representResponse</span> <span class="o">(</span><span class="n">sprintf</span> <span class="s2">&quot;Hello, %s!&quot;</span> <span class="n">name</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">helloMachine</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freyaMachine</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// methods [GET; HEAD; OPTIONS]</span>
</span><span class='line'>        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">;</span> <span class="nc">POST</span><span class="o">]</span>
</span><span class='line'>        <span class="n">acceptableMediaTypes</span> <span class="o">[</span><span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span><span class="o">]</span>
</span><span class='line'>        <span class="n">handleOk</span> <span class="n">sayHello</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">root</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">freyaRouter</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">resource</span> <span class="s2">&quot;/hello{/name}&quot;</span> <span class="n">helloMachine</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Workflow Alpha]]></title>
    <link href="https://blog.mavnn.co.uk/workflow-alpha/"/>
    <updated>2017-10-09T21:33:36+01:00</updated>
    <id>https://blog.mavnn.co.uk/workflow-alpha</id>
    <content type="html"><![CDATA[<p><img src="https://blog.mavnn.co.uk/images/WorkflowAlpha.png" alt="Log of workflow test running"></p>

<p><strong>It&#39;s alive!</strong> The process manager code I&#39;ve been reconstructing (see <a href="https://blog.mavnn.co.uk/process-management-in-easynetq/">Intro</a> and the <a href="https://blog.mavnn.co.uk/an-in-memory-message-bus-in-100-lines-or-less/">in memory test bus</a>) is slowly starting to take some shape.</p>

<p>As you can see, it comes with nice (<a href="https://github.com/logary/logary#using-logary-in-a-library">no dependency</a>) logging out of the box and it is async all the way down to the underlying transport.</p>

<p>This is still at the underlying plumbing phase in many ways: the code to construct a workflow like this is currently a boilerplate covered ugly mess - but it&#39;s all boilerplate which has been deliberately designed to allow powerful APIs to be built over the top.</p>

<p>Next up: a nice sleek API for creating &quot;pipeline&quot; workflows more easily. Then the real fun starts - pleasant to use abstractions over fork/join semantics&#8230;</p>

<p><em>Interested in seeing faster progress on this project? Drop <a href="mailto://us@mavnn.co.uk">us@mavnn.co.uk</a> a line to talk sponsorship.</em></p>
]]></content>
  </entry>
  
</feed>
