<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 15below | Mavnn's blog]]></title>
  <link href="http://blog.mavnn.co.uk/blog/categories/15below/atom.xml" rel="self"/>
  <link href="http://blog.mavnn.co.uk/"/>
  <updated>2014-07-15T23:29:24+01:00</updated>
  <id>http://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functionally SOLID 2]]></title>
    <link href="http://blog.mavnn.co.uk/functionally-solid-2/"/>
    <updated>2014-05-09T13:43:02+01:00</updated>
    <id>http://blog.mavnn.co.uk/functionally-solid-2</id>
    <content type="html"><![CDATA[<p><em>This post follows on directly from <a href="/going-functionally-solid">Going Functionally SOLID</a></em></p>

<p>In our first session looking at <a href="http://en.wikipedia.org/wiki/Solid_%28object-oriented_design%29">SOLID</a> and functional programming, we tried to apply some SOLID principles to an example piece of code.</p>

<p>We ended up with a set of interfaces like those below, and robot classes could then implement the interfaces to define their capabilities and state. I mentioned the example code was for a giant robot game, yes?</p>

<!-- more -->


<p>```fsharp
type IDestructable =</p>

<pre><code>abstract Armour : int
abstract Dodge : int
abstract Hits : int
abstract Destroyed : bool
abstract TakeDamage : int -&gt; IDestructable
</code></pre>

<p>type IWalk =</p>

<pre><code>abstract Walk : Direction * int -&gt; Location
</code></pre>

<p>type IJump =</p>

<pre><code>abstract Jump : Direction * int -&gt; Location
</code></pre>

<p>type IFly =</p>

<pre><code>abstract Fly : Direction * int -&gt; Location
</code></pre>

<p>type IHazWeapon =</p>

<pre><code>abstract Fire : IDestructable * int -&gt; IDestructable
</code></pre>

<p>type IHazWeapons =</p>

<pre><code>abstract WMDs : List&lt;IHazWeapon&gt;
</code></pre>

<p>type IHazCannon =</p>

<pre><code>inherit IHazWeapon
</code></pre>

<p>type IHazMissiles =</p>

<pre><code>inherit IHazWeapon
</code></pre>

<p>type ITransforming =</p>

<pre><code>abstract Mode : string
abstract ``Transform!`` : string -&gt; ITransforming
</code></pre>

<p>```</p>

<p>For anyone who&rsquo;s worked with SOLID OO code before, this should be looking fairly familiar, and it should be obvious how you could build a class that accepted implementations of these interfaces in it&rsquo;s constructor and then carried the state of the robot (location, hits remaining, etc) around as mutable fields.</p>

<p>But&hellip; this is a turn based game, and we&rsquo;ve decided that we want to use a <a href="en.wikipedia.org/wiki/Minimax">minimax</a> approach to choosing moves for the computer player. Minimax is effectively a tree search, which means that implementing it looks like it would be a prime moment for a bit of concurrency. Each branch of the tree can be calculated independently, after all.</p>

<p>Unfortunately&hellip; our SOLID OO approach is not looking very thread safe. Functional programming revolves around the idea that code is <a href="http://en.wikipedia.org/wiki/Referential_transparency_%28computer_science%29">referentially transparent</a> and that data types are <a href="http://en.wikipedia.org/wiki/Immutable_object">immutable</a>. These two properties immediately lead to thread safe code.</p>

<p>So the rest of the session was spent trying out how different parts of the API code be modelled in a more functional way &ndash; splitting out state into separate immutable value objects, using functions in the place of single method interfaces and playing with discriminated unions (not strictly functional programming related, but they do seem to crop up regularly in functional style languages).</p>

<p>The end results, raw from the discussion, are below. A bit of a mix of the &ldquo;interface&rdquo; and experiments in how you would use it. I think it came out quite nicely, showing how all of the SOLID principles (apart from maybe &ldquo;L&rdquo;!) fall out naturally in nicely designed functional code just as they do in good OO code. In fact some of them, such as &ldquo;Interface Segregation&rdquo; and &ldquo;Single Responsibility&rdquo; are things you almost have to work to avoid &ndash; they both fall out naturally from passing around
pure functions to implement behaviour.</p>

<p>```fsharp
type Destructable =</p>

<pre><code>{
    Armour : int
    Dodge : int
    Hits : int
    Destroyed : bool
}
</code></pre>

<p>// Interface segregation and
// Single responsibility at work
type WeaponFunc =</p>

<pre><code>Destructable -&gt; int -&gt; Destructable
</code></pre>

<p>type Weapon =</p>

<pre><code>| Missile of WeaponFunc
| Cannon of WeaponFunc
</code></pre>

<p>type MoveFunc =</p>

<pre><code>Location -&gt; (Direction * int) -&gt; Location
</code></pre>

<p>type Move =</p>

<pre><code>| Run of MoveFunc
| Jump of MoveFunc
| Fly of MoveFunc
</code></pre>

<p>type Robot =</p>

<pre><code>{
    Id : string
    MovementTypes : Move list
    Weapons : Weapon list
    Location : Location
    DamageStatus : Destructable
}
</code></pre>

<p>// Dependency inversion!
let GiantRobo =</p>

<pre><code>{
    Id = "GiantRobo"
    MovementTypes = [ Run &lt;| fun l m -&gt; l ]
    Weapons = [ Cannon &lt;| fun d i -&gt; d ]
    Location = { Position = (0, 0); Altitude = 0 }
    DamageStatus = { Armour = 10; Dodge = 5; Hits = 100; Destroyed = false }
}
</code></pre>

<p>// Open/closed principle via higher order
// functions
let makeFly runFunc l m =</p>

<pre><code>let newPosition = runFunc l m
{ newPosition with Altitude = 100 }
</code></pre>

<p>let TinyRobo =</p>

<pre><code>{
    Id = "TinyRobo"
    MovementTypes = [ Run &lt;| fun l m -&gt; { l with Position = (10, 10) } ]
    Weapons = [ Cannon &lt;| fun d i -&gt; d ]
    Location = { Position = (0, 0); Altitude = 0 }
    DamageStatus = { Armour = 10; Dodge = 5; Hits = 100; Destroyed = false }
}
</code></pre>

<p>// Separating behaviour and state
module BlowThingsUp =</p>

<pre><code>let TakeDamage destructable damage =
    let newHits = destructable.Hits - damage
    {   destructable with
            Hits = newHits
            Destroyed = newHits &lt;= 0
    }
</code></pre>

<p>// Different possibilities for
// extending that would normally be handled
// by inheritance in OO
module TransformVF1 =</p>

<pre><code>let transform robot =
    {
        robot with
            MovementTypes = [Fly &lt;| fun l m -&gt; { l with Altitude = 100 }]
    }
</code></pre>

<p>type TransformFunc =</p>

<pre><code>Robot -&gt; Robot
</code></pre>

<p>type RobotModel =</p>

<pre><code>| NormalRobot of Robot
| TransformingRobot of Robot * TransformFunc
</code></pre>

<p>type MaybeTransformFunc =</p>

<pre><code>MaybeTransformingRobot -&gt; MaybeTransformingRobot
</code></pre>

<p>and MaybeTransformingRobot =</p>

<pre><code>{
    Id : string
    MovementTypes : Move list
    Weapons : Weapon list
    Location : Location
    DamageStatus : Destructable
    Transform : MaybeTransformFunc option
}
</code></pre>

<p>let Transform mtr =</p>

<pre><code>match mtr.Transform with
| None -&gt;
    mtr
| Some trans -&gt;
    trans mtr
</code></pre>

<p>```</p>

<p>Enjoy, and comments welcome &ndash; this was live coded in a group environment, so I&rsquo;m sure plenty of opportunities for nicer code were missed!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going Functionally SOLID]]></title>
    <link href="http://blog.mavnn.co.uk/going-functionally-solid/"/>
    <updated>2014-04-11T11:45:47+01:00</updated>
    <id>http://blog.mavnn.co.uk/going-functionally-solid</id>
    <content type="html"><![CDATA[<p><em>The one giant robot every programmer should know and love! Meet Big O!</em></p>

<p><img src="/images/Big_o.jpg" alt="Big O" /></p>

<p><em>For all your algorithmic complexity needs. And any giant mecha in need of a good pounding.</em></p>

<p>And now, back to your regularly scheduled blog post&hellip;</p>

<p>Inspired both by <a href="http://blog.ploeh.dk/2014/03/10/solid-the-next-step-is-functional/">Mark Seemann&rsquo;s excellent blog post</a> and by my ongoing campaign to introduce functional programming techniques to <a href="http://www.15below.com/">15below</a> developers who aren&rsquo;t familiar with them yet, I decided it was time to run a mini-series on applying good principles like <a href="http://en.wikipedia.org/wiki/Solid_%28object-oriented_design%29">SOLID</a> in a functional world.</p>

<p>We run weekly one hour &ldquo;Developer Education&rdquo; sessions. For this series I started with a badly written piece of code (it came naturally, given I had limited prep time&hellip;) in a style of someone who has kind of heard about SOLID and functional programming:</p>

<ul>
<li><strong>SOLID</strong>: &ldquo;So, eh, I need some interfaces and things. Concrete bad, interface good. In wonder what the whole DI thing is?&rdquo;</li>
<li><strong>Functional</strong>: &ldquo;And, erm. Chainable functions? Fluent APIs, maybe? That&rsquo;s kind of functional, right?&rdquo;</li>
</ul>


<!-- More -->


<p>And then we had a open house suggesting modifications to the code where I made the changes live as we went along. In this first session, we only got as far as making the code a bit more solid &ndash; tune back in next month for the make it functional session..</p>

<p>Deciding that we needed a more interesting example domain than sending emails for once, I decided to go the whole hog. Below you&rsquo;ll find the before and after versions of &ldquo;HeavyGearSOLID&rdquo;&rsquo;s unit representation code.</p>

<p>Because everything is better with giant robots.</p>

<p>The session was a fun change of pace from other things we&rsquo;ve done, and sparked off a nice bit of discussion (although not as much as I hoped&hellip; heckle more, 15below people!). I&rsquo;m quite looking forward to the next part of the series.</p>

<h2>Before</h2>

<p><code>` fsharp
namespace</code>メタルギアソリッド``</p>

<p>open System
open Utils</p>

<p>type IMecha =</p>

<pre><code>abstract Walk : Direction * int -&gt; IMecha
abstract Jump : Direction * int -&gt; IMecha
abstract Fly : Direction * int -&gt; IMecha
abstract Position : int * int
abstract Hits : int
abstract Destroyed : bool
abstract Dodge : int
abstract Armour : int
abstract TakeDamage : int -&gt; IMecha
abstract FireCannon : IMecha * int -&gt; IMecha
abstract FireMissiles : IMecha * int -&gt; IMecha
</code></pre>

<p>type GiantRobo (position) =</p>

<pre><code>let _position = ref position
let _hits = ref 100
let _destroyed = ref false
let _dodge = ref 5
let _armour = ref 20
let rand = Random()
interface IMecha with
    member x.Walk (dir, distance) =
        let iMecha = x :&gt; IMecha
        if distance &gt; 4 then
            failwith "GiantRobo is slow!"
        else
            _position := Move (!_position) dir distance
            iMecha
    member x.Jump (_, _) =
        raise &lt;| NotImplementedException("GiantRobo can't jump")
    member x.Fly (_, _) =
        raise &lt;| NotImplementedException("GiantRobo can't fly")
    member x.Position =
        !_position
    member x.Hits =
        !_hits                        
    member x.Destroyed =
        !_destroyed
    member x.Dodge =
        !_dodge
    member x.Armour =
        !_armour
    member x.TakeDamage damage =
        _hits := !_hits - damage
        _destroyed := !_hits &lt;= 0
        x :&gt; IMecha
    member x.FireCannon (target, roll) =
        if roll &gt; target.Dodge then
            target.TakeDamage (max 0 (60 - target.Armour))
        else
            target
    member x.FireMissiles (target, roll) =
        raise &lt;| NotImplementedException("Giant Robo has no missiles")
</code></pre>

<p>type ITransformingMecha =</p>

<pre><code>inherit IMecha
abstract Mode : string
abstract ``Transform!`` : string -&gt; ITransformingMecha
</code></pre>

<p>type VF1 (position) =</p>

<pre><code>let _position = ref position
let _hits = ref 50
let _destroyed = ref false
let _dodge = ref 10
let _armour = ref 10
let _mode = ref "Battroid"
interface ITransformingMecha with
    member x.Walk (dir, distance) =
        let iMecha = x :&gt; IMecha
        if !_mode = "Fighter" then failwith "No legs in Fighter mode!"
        if distance &gt; 6 then
            failwith "VF-1 isn't that fast!"
        else
            _position := Move (!_position) dir distance
            iMecha
    member x.Jump (dir, distance) =
        let iMecha = x :&gt; IMecha
        if !_mode = "Fighter" then failwith "Jumping in Fighter mode makes no sense!"
        let maxDistance =
            match !_mode with
            | "GERWALK" -&gt; 8
            | "Battroid" -&gt; 6
            | _ -&gt; failwith "No good"
        if distance &gt; maxDistance then
            failwith "VF-1 isn't that fast!"
        else
            _position := Move (!_position) dir distance
            iMecha
    member x.Fly (dir, distance) =
        let iMecha = x :&gt; IMecha
        if !_mode = "Battroid" then failwith "Battroid mode can't fly"
        let maxDistance =
            match !_mode with
            | "Fighter" -&gt; 20
            | "GERWALK" -&gt; 15
            | _ -&gt; failwith "No good"
        if distance &gt; maxDistance then
            failwith "VF-1 isn't that fast!"
        else
            _position := Move (!_position) dir distance
            iMecha
    member x.Position =
        !_position
    member x.Hits =
        !_hits                        
    member x.Destroyed =
        !_destroyed
    member x.Dodge =
        !_dodge
    member x.Armour =
        !_armour
    member x.TakeDamage damage =
        _hits := !_hits - damage
        _destroyed := !_hits &lt;= 0
        x :&gt; IMecha
    member x.FireCannon (target, roll) =
        if roll &gt; target.Dodge then
            target.TakeDamage (max 0 (20 - target.Armour))
        else
            target
    member x.FireMissiles (target, roll) =
        if roll &gt; (target.Dodge / 2) then
            target.TakeDamage (max 0 (60 - target.Armour))
        else
            target
    member x.Mode =
        !_mode
    member x.``Transform!`` mode =
        match mode with
        | "Fighter" -&gt;
            _mode := "Fighter"
        | "GERWALK" -&gt;
            _mode := "GERWALK"
        | "Battroid" -&gt;
            _mode := "Battroid"
        | _ -&gt;
            failwith "Not a valid VF-1 mode"
        x :&gt; ITransformingMecha
</code></pre>

<p>```</p>

<h2>After</h2>

<p><code>` fsharp
namespace</code>メタルギアソリッド``</p>

<p>open System
open Utils</p>

<p>type Location =</p>

<pre><code>{
    Position : int * int
    Altitude : int
}
</code></pre>

<p>type IDestructable =</p>

<pre><code>abstract Armour : int
abstract Dodge : int
abstract Hits : int
abstract Destroyed : bool
abstract TakeDamage : int -&gt; IDestructable
</code></pre>

<p>type IWalk =</p>

<pre><code>abstract Walk : Direction * int -&gt; Location
</code></pre>

<p>type IJump =</p>

<pre><code>abstract Jump : Direction * int -&gt; Location
</code></pre>

<p>type IFly =</p>

<pre><code>abstract Fly : Direction * int -&gt; Location
</code></pre>

<p>type IHazWeapon =</p>

<pre><code>abstract Fire : IDestructable * int -&gt; IDestructable
</code></pre>

<p>type IHazWeapons =</p>

<pre><code>abstract WMDs : List&lt;IHazWeapon&gt;
</code></pre>

<p>type IHazCannon =</p>

<pre><code>inherit IHazWeapon
</code></pre>

<p>type IHazMissiles =</p>

<pre><code>inherit IHazWeapon
</code></pre>

<p>type NormalDestructable (hits, dodge, armour) =</p>

<pre><code>let _hits = ref 100
let _destroyed = ref false
let _dodge = ref 5
let _armour = ref 20
interface IDestructable with
    member x.Hits =
        !_hits                        
    member x.Destroyed =
        !_destroyed
    member x.Dodge =
        !_dodge
    member x.Armour =
        !_armour
    member x.TakeDamage damage =
        _hits := !_hits - damage
        _destroyed := !_hits &lt;= 0
        x :&gt; IDestructable
</code></pre>

<p>type GiantRobo (position, destructable : #IDestructable) =</p>

<pre><code>let _position = ref position
member x.Position =
    !_position
interface IWalk with
    member x.Walk (dir, distance) =
        if distance &gt; 4 then
            failwith "GiantRobo is slow!"
        else
            { Position = Move (!_position) dir distance; Altitude = 0 }
interface IDestructable with
    member x.Hits = destructable.Hits
    member x.Destroyed = destructable.Destroyed
    member x.Dodge = destructable.Dodge
    member x.Armour = destructable.Armour
    member x.TakeDamage damage = destructable.TakeDamage damage
interface IHazWeapons with
    member x.WMDs =
        [{ new IHazCannon with 
            member x.Fire (target, roll) =
                if roll &gt; target.Dodge then
                    target.TakeDamage (max 0 (60 - target.Armour))
                else
                    target }]
</code></pre>

<p>type ITransforming =</p>

<pre><code>abstract Mode : string
abstract ``Transform!`` : string -&gt; ITransforming
</code></pre>

<p>type VF1 (position) =</p>

<pre><code>let _position = ref position
let _mode = ref "Battroid"
member x.Position =
    !_position
interface IWalk with
    member x.Walk (dir, distance) =
        if !_mode = "Fighter" then failwith "No legs in Fighter mode!"
        if distance &gt; 6 then
            failwith "VF-1 isn't that fast!"
        else
            { Position = Move (!_position) dir distance; Altitude = 0 }
interface IJump with
    member x.Jump (dir, distance) =
        if !_mode = "Fighter" then failwith "Jumping in Fighter mode makes no sense!"
        let maxDistance =
            match !_mode with
            | "GERWALK" -&gt; 8
            | "Battroid" -&gt; 6
            | _ -&gt; failwith "No good"
        if distance &gt; maxDistance then
            failwith "VF-1 isn't that fast!"
        else
            { Position = Move (!_position) dir distance; Altitude = 0 }
interface IFly with
    member x.Fly (dir, distance) =
        if !_mode = "Battroid" then failwith "Battroid mode can't fly"
        let maxDistance =
            match !_mode with
            | "Fighter" -&gt; 20
            | "GERWALK" -&gt; 15
            | _ -&gt; failwith "No good"
        if distance &gt; maxDistance then
            failwith "VF-1 isn't that fast!"
        else
            { Position = Move (!_position) dir distance; Altitude = 0 }
interface IHazWeapons with
    member x.WMDs =
        [
            { new IHazCannon with
                member x.Fire (target, roll) =
                    if roll &gt; target.Dodge then
                        target.TakeDamage (max 0 (20 - target.Armour))
                    else
                        target };
             { new IHazMissiles with
                member x.Fire (target, roll) =
                    if roll &gt; (target.Dodge / 2) then
                        target.TakeDamage (max 0 (60 - target.Armour))
                    else
                        target }
        ]
interface ITransforming with
    member x.Mode =
        !_mode
    member x.``Transform!`` mode =
        match mode with
        | "Fighter" -&gt;
            _mode := "Fighter"
        | "GERWALK" -&gt;
            _mode := "GERWALK"
        | "Battroid" -&gt;
            _mode := "Battroid"
        | _ -&gt;
            failwith "Not a valid VF-1 mode"
        x :&gt; ITransforming
</code></pre>

<p>```</p>

<p><em>This series continues in the imaginatively named &ldquo;<a href="/functionally-solid-2/">Functionally SOLID 2</a>&rdquo;</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding Hygiene: Moving from project references to NuGet dependencies]]></title>
    <link href="http://blog.mavnn.co.uk/coding-hygiene-moving-from-project-references-to-nuget-dependencies/"/>
    <updated>2013-03-08T17:08:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/coding-hygiene-moving-from-project-references-to-nuget-dependencies</id>
    <content type="html"><![CDATA[<p>So, first post with the new blogging engine. Let&rsquo;s see how it goes.</p>

<p>Our code base at <a href="http://15below.com">15below</a> started it&rsquo;s life a fair
while ago, well before any form of .NET package management became
practical. Because of that, we ended up building a lot of code in
&lsquo;lockstep&rsquo; with project references in code as there was no sensible way
of taking versioned binary dependencies.</p>

<p>That&rsquo;s fine and all, but it encourages bad code hygiene: rather than
having sharply defined contracts between components, if you&rsquo;ve got them
all open in the same solution it becomes far too tempting to just nudge
changes around as it&rsquo;s convenient at the time. Changes can infect other
pieces of code, and the power of automatic refactoring across the entire
solution becomes intoxicating.</p>

<p>The result? It becomes very hard to do incremental builds (or
deployments, for that matter). This in turn makes for a long feed back
cycle between making a change, and being able to see it rolled out to a
testing environment.</p>

<p>So as part of the ongoing refactoring that any long lived code base needs to
keep it maintainable and under control, we&rsquo;ve embarked on the process of
splitting our code down into more logically separated repositories that
reference each other via NuGet. This will require us to start being much
more disciplined in our <a href="http://semver.org">semantic versioning</a> than we
have been in the past, but will also allow us to build and deploy
incrementally and massively reduce our feed back times.</p>

<p>As part of splitting out the first logical division (I&rsquo;d like to say
<a href="http://en.wikipedia.org/wiki/Domain-driven_design">domain</a> but we&rsquo;re
not there yet!), I created the new repository and got the included
assemblies up and building on TeamCity. It was only then (stupidly) that
I realised that we had several hundred project references to these
assemblies in our code. There was no way I was going to update them all
by hand, so after a few hours development we now have a script for
idempotently updating a project reference in a [cs|vb|fs]proj file to a
NuGet reference. It does require you to do one update manually first;
especially with assemblies that are strongly signed, I chickened out of
trying to generate the reference nodes that needed to be added
automatically. The script also makes sure that you end up with a
packages.config file with the project that includes the new dependency.</p>

<p>It should be noted that this script has only seen minimal testing, was
coded up for one time use and does not come with a warranty of any kind!
Use at your own risk, and once you understand what it&rsquo;s doing. But for
all that, I hope you find it useful.</p>

<p><div><script src='https://gist.github.com/mavnn/5983379.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Throttling the level of concurrency in F#]]></title>
    <link href="http://blog.mavnn.co.uk/throttling-the-level-of-concurrency-in-f/index.html"/>
    <updated>2013-02-15T00:00:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/throttling-the-level-of-concurrency-in-f/throttling-the-level-of-concurrency-in-f</id>
    <content type="html"><![CDATA[<div>Async.Parallel |&gt; Async.RunSynchronously is great for running a load of stuff in parallel in F#, as long as you don&#39;t mind them all running at the same time.</div>


<p><p /><div>Often, though, you want to map across a sequence and run functions on the elements in parallel, but with a limit to how many are being processed concurrently. Whether you&#39;re doing something CPU heavy and there&#39;s no point running more than the number of processors on the box, or whether you know that you&#39;ll swamp a remote server if you just dump all of your connections on it at once, this issue comes up surprisingly often.</div> <p /><div>As a first stab, you might be tempted to do something like this (if you think like I do):</div><p /><div><script src="https://gist.github.com/4961072.js"></script><br /> </div><p /><div>In a word: don&#39;t. The contention in the Semaphore make this enormously inefficient with even a few hundred tasks.</div><p /><div>In the end, the simplest  implementation I could come up with that didn&#39;t involve dragging in external dependencies was the following:</div> <p /><div><script src="https://gist.github.com/4961056.js"></script><br /></div><p /><div>If anyone has a simpler implementation, leave a comment and let me know!</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fake Part 2: Build and test]]></title>
    <link href="http://blog.mavnn.co.uk/fake-part-2-build-and-test/index.html"/>
    <updated>2013-02-13T00:00:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/fake-part-2-build-and-test/fake-part-2-build-and-test</id>
    <content type="html"><![CDATA[<p>The introduction to this series can be found at <a href="http://blog.mavnn.co.uk/getting-started-with-fake-an-introduction-tag">http://blog.mavnn.co.uk/getting-started-with-fake-an-introduction-tag</a> or just check out my Fake tag.</p>


<p><strong>The scenario</strong></p>


<p>So, you've written your brave new F# 3.0 solution, and now you want to build, test and package it with a shared build setup between your CI environment (which, of course, doesn't have Visual Studio installed) and your developer's machines.</p>


<p><span style="font-size: 13px;">Hopefully this will walk you through most of the potential pitfalls you might find along the way.</span></p>


<p><span style="font-size: 13px;">This post has been written using an actual build.fsx script that we use for a utility project at <a href="http://15below.com" title="15below" target="_blank">15below</a>. We're hiring, so if you're interested in this kind of thing, drop me a line.</span></p>


<p><strong><span style="font-size: 13px;">Set up</span></strong></p>


<p><span style="font-size: 13px;">There is no installer for the F# 3 compiler, so we're going to be playing some games to support building on a TeamCity build agent without VS 2012 installed.</span></p>


<p><span style="font-size: 13px;">The script assumes a few things about your repository:</span></p>


<p>&nbsp;</p>


<ul>
<li><span style="font-size: 13px;">a tools directory with the same NuGet and FSharp directories as at <a href="https://github.com/fsharp/FAKE/tree/develop/tools">https://github.com/fsharp/FAKE/tree/develop/tools</a> (basically a recent nuget.exe in one, and a recent build of the open source F# compiler project in the other)</span></li>
<li><span style="font-size: 13px;">a tools/FAKE directory with a recent build of FAKE (I prefer to have a known version checked into git, but you can read instructions on how to bootstrap it via nuget at <a href="http://www.navision-blog.de/blog/2009/04/01/getting-started-with-fake-a-f-sharp-make-tool/)">http://www.navision-blog.de/blog/2009/04/01/getting-started-with-fake-a-f-sha...</a></span></li>
</ul>


<p>&nbsp;</p>


<p><span style="font-size: 13px;">From here on down is just a heavily commented build.fsx file. I was going to use FSharp.Formatting to nicely format this, but unfortunately the combination of FSharp.Formatting itself and Posterous have defeated me. Something to play with more at a later date.</span></p>


<p><span style="font-size: 13px;"><script src="https://gist.github.com/4944580.js"></script></span></p>


<p><span style="font-size: 13px;">Hopefully this example will give you a start on using FAKE in real projects.</span></p>


<p><span style="font-size: 13px;">In future posts I'd like to address some of the more esoteric bits and pieces we've been using FAKE for, such as building Octopus deployment packages, running integration tests (with full setup and database deployment) and running unit tests in parallel. Stay tuned...</span></p>


<p>&nbsp;</p>


<p>&nbsp;</p>


<p>&nbsp;</p>


<p>&nbsp;</p>

]]></content>
  </entry>
  
</feed>
