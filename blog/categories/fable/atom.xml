<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: fable | Mavnn's blog]]></title>
  <link href="https://blog.mavnn.co.uk/blog/categories/fable/atom.xml" rel="self"/>
  <link href="https://blog.mavnn.co.uk/"/>
  <updated>2020-03-20T20:35:10+00:00</updated>
  <id>https://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Full Stack with Freya]]></title>
    <link href="https://blog.mavnn.co.uk/full-stack-with-freya/"/>
    <updated>2018-05-22T15:04:00+01:00</updated>
    <id>https://blog.mavnn.co.uk/full-stack-with-freya</id>
    <content type="html"><![CDATA[<p>Yesterday night I was about to demo a quick server/client pair with Freya and Fable, and it all went a bit wrong. Some of the issues weren&#39;t related to what I did (computers, gotta love &#39;em) but others were just bits of configuration that I didn&#39;t have at my finger tips.</p>

<p>This means it&#39;s time for a little practice for me, and a mini-tutorial for you (and future me).</p>

<!-- more -->

<h2>What we&#39;re going to do</h2>

<p>We&#39;re going to build a small server application based on Freya which will serve JSON and be a nice RESTful (in the loose sense) API.</p>

<p>Then, we&#39;re going to configure Fable with Elmish to load data from that API. The crucial thing here is that we&#39;re going to configure both projects such that we have a seamless development work flow; automated recompile and restart of the server on code changes, and automatic recompile/reload of the Fable UI on change.</p>

<h2>The server</h2>

<p>Make sure your dotnet core Freya template is up to date:</p>
<div class="highlight"><pre><code class="bash">dotnet new -i Freya
</code></pre></div>
<p>In a root directory for our overall solution, run:</p>
<div class="highlight"><pre><code class="bash">dotnet new freya -lang f# -c hopac -f kestrel -o FateServer
</code></pre></div>
<p>This will create a new directory called &quot;FateServer&quot; with a F# project in it. Go into the directory and make sure everything has restored correctly:</p>
<div class="highlight"><pre><code class="bash"><span class="nb">cd </span>FateServer
dotnet restore
dotnet build
</code></pre></div>
<p>One thing I&#39;ve been slowly learning with dotnet core is that the <code>restore</code> run by default during a build doesn&#39;t always seem to be as effective as actually running the full restore command. Just in general, if Core is behaving strangely, running <code>restore</code> is a good starting point.</p>

<p>Next up is making our server log something: by default, Kestrel logs basically nothing.</p>

<p>Install the logging package (it&#39;s not part of the default Freya template):</p>
<div class="highlight"><pre><code class="bash">dotnet add package Microsoft.Extensions.Logging.Console
dotnet restore
</code></pre></div>
<p>In <code>Program.fs</code> add the following at the end of the open statements:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">AspNetCore</span><span class="p">.</span><span class="nc">Builder</span>
<span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">AspNetCore</span><span class="p">.</span><span class="nc">Hosting</span>
<span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">Extensions</span><span class="p">.</span><span class="nc">Logging</span>

<span class="k">let</span> <span class="n">configureLogging</span> <span class="o">(</span><span class="n">b</span> <span class="o">:</span> <span class="nc">IWebHostBuilder</span><span class="o">)</span> <span class="o">=</span>
    <span class="n">b</span><span class="o">.</span><span class="nc">ConfigureLogging</span><span class="o">(</span><span class="k">fun</span> <span class="n">l</span> <span class="o">-&gt;</span> <span class="n">l</span><span class="o">.</span><span class="nc">AddConsole</span><span class="bp">()</span> <span class="o">|&gt;</span> <span class="n">ignore</span><span class="o">)</span>
</code></pre></div>
<p>Then inject the method into your WebHost configuration pipeline:</p>
<div class="highlight"><pre><code class="fsharp">    <span class="nn">WebHost</span><span class="p">.</span><span class="n">create</span> <span class="bp">()</span>
    <span class="o">|&gt;</span> <span class="nn">WebHost</span><span class="p">.</span><span class="n">bindTo</span> <span class="o">[|</span><span class="s2">&quot;http://localhost:5000&quot;</span><span class="o">|]</span>
    <span class="o">|&gt;</span> <span class="nn">WebHost</span><span class="p">.</span><span class="n">configure</span> <span class="n">configureApp</span>
    <span class="o">|&gt;</span> <span class="n">configureLogging</span>
    <span class="o">|&gt;</span> <span class="nn">WebHost</span><span class="p">.</span><span class="n">buildAndRun</span>
</code></pre></div>
<p>Hey presto! Run your application and get logs!</p>

<p>To finish off the niceties of civilized development, let&#39;s add the watch command to our server.</p>

<p>Crack open the <code>fsproj</code> file and add the following ItemGroup to it:</p>
<div class="highlight"><pre><code class="xml"><span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;DotNetCliToolReference</span> <span class="na">Include=</span><span class="s">&quot;Microsoft.DotNet.Watcher.Tools&quot;</span> <span class="na">Version=</span><span class="s">&quot;2.0.0&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/ItemGroup&gt;</span> 
</code></pre></div>
<p>Run <code>dotnet restore</code> and from now on running <code>dotnet watch run</code> to start continuous development with file watching should work.</p>

<p>Now we just need to serve up some JSON. We want a send a format which Fable understands, and the kind people at the Fable project have written a Newtonsoft configuration for doing exactly that.</p>

<p>Stop watching the build long enough to run:</p>
<div class="highlight"><pre><code class="bash">dotnet add package Fable.JsonConverter
dotnet restore
</code></pre></div>
<p>Next, set up the domain. Create a new file <code>Character.fs</code> (we&#39;re going to be sending back and forth <a href="https://fate-srd.com/fate-accelerated/get-started">Fate Accelerated</a> characters as data). Make sure you add it to the project file before <code>Api.fs</code>.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nc">Character</span>

<span class="k">type</span> <span class="nc">LadderLevel</span> <span class="o">=</span>
    <span class="o">|</span> <span class="nc">BeyondLegendary</span> <span class="k">of</span> <span class="kt">int</span>
    <span class="o">|</span> <span class="nc">Legendary</span>
    <span class="o">|</span> <span class="nc">Epic</span>
    <span class="o">|</span> <span class="nc">Superb</span>
    <span class="o">|</span> <span class="nc">Great</span>
    <span class="o">|</span> <span class="nc">Good</span>
    <span class="o">|</span> <span class="nc">Fair</span>
    <span class="o">|</span> <span class="nc">Average</span>
    <span class="o">|</span> <span class="nc">Mediocre</span>
    <span class="o">|</span> <span class="nc">Poor</span>
    <span class="o">|</span> <span class="nc">Terrible</span>
    <span class="o">|</span> <span class="nc">Abysmal</span>
    <span class="o">|</span> <span class="nc">BeyondAbysmal</span> <span class="k">of</span> <span class="kt">int</span>

<span class="k">type</span> <span class="nc">Character</span> <span class="o">=</span>
    <span class="o">{</span> <span class="nc">Name</span> <span class="o">:</span> <span class="kt">string</span>
      <span class="nc">Careful</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
      <span class="nc">Clever</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
      <span class="nc">Flashy</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
      <span class="nc">Forceful</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
      <span class="nc">Quick</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
      <span class="nc">Sneaky</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
      <span class="nc">HighConcept</span> <span class="o">:</span> <span class="kt">string</span>
      <span class="nc">Trouble</span> <span class="o">:</span> <span class="kt">string</span>
      <span class="nc">Aspects</span> <span class="o">:</span> <span class="kt">string</span> <span class="kt">list</span>
      <span class="nc">Stunts</span> <span class="o">:</span> <span class="kt">string</span> <span class="kt">list</span> <span class="o">}</span>
</code></pre></div>
<p>Now move across to <code>Api.fs</code>. You&#39;ll see that it defaults to a single &quot;greeting&quot; endpoint which responds with a text response. Let&#39;s add a helper for sending JSON correctly, immediately after the existing <code>open</code> statements:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Machines</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nc">Cors</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Types</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nc">Cors</span>
<span class="k">open</span> <span class="nc">System</span>
<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
<span class="k">open</span> <span class="nn">Newtonsoft</span><span class="p">.</span><span class="nc">Json</span>
<span class="k">open</span> <span class="nc">Character</span>

<span class="k">let</span> <span class="n">jsonConverter</span> <span class="o">=</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">JsonConverter</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">JsonConverter</span>

<span class="k">module</span> <span class="nc">Represent</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">json</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">value</span> <span class="o">=</span>
        <span class="k">let</span> <span class="n">data</span> <span class="o">=</span>
            <span class="nn">JsonConvert</span><span class="p">.</span><span class="nc">SerializeObject</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="o">[|</span><span class="n">jsonConverter</span><span class="o">|])</span>
            <span class="o">|&gt;</span> <span class="nn">Text</span><span class="p">.</span><span class="nn">UTF8Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span>
        <span class="k">let</span> <span class="n">desc</span> <span class="o">=</span>
            <span class="o">{</span> <span class="nc">Encodings</span> <span class="o">=</span> <span class="nc">None</span>
              <span class="nc">Charset</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">Charset</span><span class="p">.</span><span class="nc">Utf8</span>
              <span class="nc">Languages</span> <span class="o">=</span> <span class="nc">None</span>
              <span class="nc">MediaType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span> <span class="o">}</span>
        <span class="o">{</span> <span class="nc">Data</span> <span class="o">=</span> <span class="n">data</span>
          <span class="nc">Description</span> <span class="o">=</span> <span class="n">desc</span> <span class="o">}</span>
</code></pre></div>
<p>Next, delete the entire rest of the file and add the following:</p>
<div class="highlight"><pre><code class="fsharp"><span class="c1">// This endpoint requires a URL template with the &quot;name&quot; atom</span>
<span class="k">let</span> <span class="n">name_</span> <span class="o">=</span> <span class="nn">Route</span><span class="p">.</span><span class="n">atom_</span> <span class="s2">&quot;name&quot;</span>

<span class="k">let</span> <span class="n">name</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">nameO</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">name_</span>

        <span class="k">match</span> <span class="n">nameO</span> <span class="k">with</span>
        <span class="o">|</span> <span class="nc">Some</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">name</span>
        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">failwith</span> <span class="s2">&quot;Name is a compulsory element of the URL&quot;</span> <span class="o">}</span>

<span class="c1">// We&#39;re going to hard code our data for now</span>
<span class="k">let</span> <span class="n">exampleCharacters</span> <span class="o">=</span>
    <span class="nc">Map</span> <span class="o">[</span>
        <span class="s2">&quot;bob&quot;</span><span class="o">,</span> <span class="o">{</span> <span class="nc">Name</span> <span class="o">=</span> <span class="s2">&quot;Bob Bobson&quot;</span>
                 <span class="nc">Careful</span> <span class="o">=</span> <span class="nc">Mediocre</span>
                 <span class="nc">Clever</span> <span class="o">=</span> <span class="nc">Fair</span>
                 <span class="nc">Flashy</span> <span class="o">=</span> <span class="nc">Fair</span>
                 <span class="nc">Forceful</span> <span class="o">=</span> <span class="nc">Average</span>
                 <span class="nc">Quick</span> <span class="o">=</span> <span class="nc">Average</span>
                 <span class="nc">Sneaky</span> <span class="o">=</span> <span class="nc">Good</span>
                 <span class="nc">HighConcept</span> <span class="o">=</span> <span class="s2">&quot;The eternal example&quot;</span>
                 <span class="nc">Trouble</span> <span class="o">=</span> <span class="s2">&quot;Lives in the test&quot;</span>
                 <span class="nc">Aspects</span> <span class="o">=</span> <span class="o">[</span> <span class="s2">&quot;It&#39;s only Bob&quot;</span>
                             <span class="s2">&quot;Is he... the recursive one?&quot;</span>
                             <span class="s2">&quot;I&#39;ve got Fred&#39;s back!&quot;</span> <span class="o">]</span>
                 <span class="nc">Stunts</span> <span class="o">=</span> <span class="o">[</span> <span class="s2">&quot;Because everyone assumes I don&#39;t exist, I get +2 on Sneaky rolls to not be noticed.&quot;</span> <span class="o">]</span> <span class="o">}</span>
    <span class="o">]</span>

<span class="c1">// Once per request, try and load the named character (see the memo at the end)</span>
<span class="k">let</span> <span class="n">character</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="k">return</span> <span class="nn">Map</span><span class="p">.</span><span class="n">tryFind</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="nc">ToLowerInvariant</span><span class="bp">()</span><span class="o">)</span> <span class="n">exampleCharacters</span>
    <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">memo</span>

<span class="k">let</span> <span class="n">characterExists</span> <span class="o">=</span>
    <span class="n">character</span> <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="o">.</span><span class="nc">IsSome</span><span class="o">)</span>

<span class="k">let</span> <span class="n">sendCharacter</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">character</span> <span class="o">=</span> <span class="n">character</span>
        <span class="k">return</span> <span class="nn">Represent</span><span class="p">.</span><span class="n">json</span> <span class="o">(</span><span class="n">character</span><span class="o">.</span><span class="nc">Value</span><span class="o">)</span> <span class="o">}</span>

<span class="k">let</span> <span class="n">characterMachine</span> <span class="o">=</span>
    <span class="n">freyaMachine</span> <span class="o">{</span>
<span class="o">#</span><span class="k">if</span> <span class="nc">DEBUG</span>
        <span class="n">cors</span>
        <span class="n">corsOrigins</span> <span class="o">[</span> <span class="nn">SerializedOrigin</span><span class="p">.</span><span class="n">parse</span> <span class="s2">&quot;http://localhost:8080&quot;</span> <span class="o">]</span>
<span class="o">#</span><span class="n">endif</span>
        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">]</span>
        <span class="n">exists</span> <span class="n">characterExists</span>
        <span class="n">handleOk</span> <span class="n">sendCharacter</span> <span class="o">}</span>

<span class="k">let</span> <span class="n">root</span> <span class="o">=</span>
    <span class="n">freyaRouter</span> <span class="o">{</span>
        <span class="n">resource</span> <span class="s2">&quot;/character/{name}&quot;</span> <span class="n">characterMachine</span> <span class="o">}</span>
</code></pre></div>
<p>There&#39;s quite a lot going on in there, but what we&#39;ve defined with <code>characterMachine</code> is a resource which checks if a character exists, and sends it as Fable readable JSON if it does. We then configure a route to point to it.</p>

<p>Critically, we also turn on <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">CORS</a> (Cross Origin Resource Sharing) for localhost:8080 for debug builds. This will enable requests from our Fable client running it&#39;s development server on a different port to talk to the server.</p>

<p>Edit: Zaid Ajaj <a href="https://twitter.com/zaid_ajaj/status/999177873431891968">points out</a> that you can also configure webpack&#39;s dev server to proxy to your development front end. If you&#39;re writing a system where your API and client will be running on the same domain, check out how to do that below.</p>

<h2>The client</h2>

<p>Go back up into the root directory of the solution, and run:</p>
<div class="highlight"><pre><code class="bash">dotnet new -i Fable.Template.Fulma.Minimal
</code></pre></div>
<p>To get a dotnet core template for Fable with F# wrappers for React and Bulma - as well as Elmish pre-installed.</p>

<p>Then run:</p>
<div class="highlight"><pre><code class="bash">dotnet new fulma-minimal -lang f# -o FateClient
</code></pre></div>
<p>To create our client application.</p>

<p>Go into the newly created project directory, and use the built in build scripts to get everything up and running:</p>
<div class="highlight"><pre><code class="bash"><span class="nb">cd </span>FateClient
./fake.sh -t watch
</code></pre></div>
<p>On first run, it will download most of the internet, but such is modern net development.</p>

<p>Browse on over to <a href="http://localhost:8080/">http://localhost:8080/</a> to see the base template before we start hacking away!</p>

<p>Very pretty: and in <code>App.fs</code> we can see the nice clean Elmish code driving it.</p>

<p>If you&#39;re running both API and client on the same domain, this is also a good time to update your webpack config (you&#39;ll find <code>webpack.config.js</code> in your FateClient directory). Amend the <code>devServer</code> section as follows:</p>
<div class="highlight"><pre><code class="json">    <span class="err">devServer:</span> <span class="p">{</span>
      <span class="err">proxy:</span> <span class="err">{</span>
        <span class="err">&#39;/character/*&#39;:</span> <span class="err">{</span>
          <span class="err">target:</span> <span class="err">&#39;http://localhost:5000&#39;,</span>
          <span class="err">changeOrigin:</span> <span class="err">true</span>
        <span class="p">}</span>
      <span class="err">},</span>
      <span class="err">contentBase:</span> <span class="s2">&quot;./static&quot;</span><span class="err">,</span>
      <span class="err">publicPath:</span> <span class="s2">&quot;/&quot;</span><span class="err">,</span>
      <span class="err">hot:</span> <span class="kc">true</span><span class="err">,</span>
      <span class="err">inline:</span> <span class="kc">true</span>
    <span class="err">},</span>
</code></pre></div>
<p>If you do this, you&#39;ll want to change the URL below used to load the data.</p>

<p>Now! Let&#39;s start hacking away. Firstly, we&#39;re going to want to share our character types. I&#39;ve decided here that they are owned by the server, so we need to link the file into the Fable project.</p>

<p>In <code>FateClient.fsproj</code>, add change:</p>
<div class="highlight"><pre><code class="xml">  <span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;Compile</span> <span class="na">Include=</span><span class="s">&quot;App.fs&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/ItemGroup&gt;</span>
</code></pre></div>
<p>to:</p>
<div class="highlight"><pre><code class="xml">  <span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;Compile</span> <span class="na">Include=</span><span class="s">&quot;..\..\FateServer\Character.fs&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;Compile</span> <span class="na">Include=</span><span class="s">&quot;App.fs&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/ItemGroup&gt;</span>
</code></pre></div>
<p>Now we can load up our character. In <code>App.fs</code>, it&#39;s time to expand our model. Change our Elmish app as below:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nn">App</span><span class="p">.</span><span class="nc">View</span>

<span class="k">open</span> <span class="nc">Elmish</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nc">React</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nn">React</span><span class="p">.</span><span class="nc">Props</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">PowerPack</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">PowerPack</span><span class="p">.</span><span class="nc">Fetch</span>
<span class="k">open</span> <span class="nc">Fulma</span>
<span class="k">open</span> <span class="nn">Fulma</span><span class="p">.</span><span class="nc">FontAwesome</span>
<span class="k">open</span> <span class="nc">Character</span>

<span class="k">type</span> <span class="nc">Model</span> <span class="o">=</span>
    <span class="o">{</span> <span class="nc">IsLoading</span> <span class="o">:</span> <span class="kt">bool</span>
      <span class="nc">Character</span> <span class="o">:</span> <span class="nc">Character</span> <span class="n">option</span>
      <span class="nc">ErrorMessage</span> <span class="o">:</span> <span class="kt">string</span> <span class="n">option</span> <span class="o">}</span>

<span class="k">type</span> <span class="nc">Msg</span> <span class="o">=</span>
    <span class="o">|</span> <span class="nc">CharacterLoaded</span> <span class="k">of</span> <span class="nc">Character</span>
    <span class="o">|</span> <span class="nc">LoadingError</span> <span class="k">of</span> <span class="kt">string</span>

<span class="k">let</span> <span class="n">loadBob</span> <span class="bp">()</span> <span class="o">=</span>
    <span class="n">promise</span> <span class="o">{</span>
        <span class="k">let</span> <span class="n">props</span> <span class="o">=</span>
            <span class="o">[</span> <span class="nn">RequestProperties</span><span class="p">.</span><span class="nc">Method</span> <span class="nn">HttpMethod</span><span class="p">.</span><span class="nc">GET</span> <span class="o">]</span>
        <span class="o">#</span><span class="k">if</span> <span class="nc">DEBUG</span>
        <span class="c1">// Use &quot;/character/bob&quot; here if you&#39;ve set up the webpack proxy</span>
        <span class="k">return</span><span class="o">!</span> <span class="n">fetchAs</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="s2">&quot;http://localhost:5000/character/bob&quot;</span> <span class="n">props</span>
        <span class="o">#</span><span class="k">else</span>
        <span class="k">return</span><span class="o">!</span> <span class="n">fetchAs</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="s2">&quot;http://api.example.com/character/bob&quot;</span> <span class="n">props</span>
        <span class="o">#</span><span class="n">endif</span>
    <span class="o">}</span>

<span class="k">let</span> <span class="n">init</span> <span class="o">_</span> <span class="o">=</span>
    <span class="o">{</span> <span class="nc">IsLoading</span> <span class="o">=</span> <span class="bp">true</span>
      <span class="nc">Character</span> <span class="o">=</span> <span class="nc">None</span>
      <span class="nc">ErrorMessage</span> <span class="o">=</span> <span class="nc">None</span> <span class="o">},</span>
    <span class="nn">Cmd</span><span class="p">.</span><span class="n">ofPromise</span> <span class="n">loadBob</span> <span class="bp">()</span> <span class="nc">CharacterLoaded</span> <span class="o">(</span><span class="k">fun</span> <span class="n">e</span> <span class="o">-&gt;</span> <span class="nc">LoadingError</span> <span class="n">e</span><span class="o">.</span><span class="nc">Message</span><span class="o">)</span>

<span class="k">let</span> <span class="k">private</span> <span class="n">update</span> <span class="n">msg</span> <span class="n">model</span> <span class="o">=</span>
    <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
    <span class="o">|</span> <span class="nc">CharacterLoaded</span> <span class="n">bob</span> <span class="o">-&gt;</span>
        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">IsLoading</span> <span class="o">=</span> <span class="bp">false</span>
                     <span class="nc">Character</span> <span class="o">=</span> <span class="nc">Some</span> <span class="n">bob</span> <span class="o">},</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">none</span>
    <span class="o">|</span> <span class="nc">LoadingError</span> <span class="n">error</span> <span class="o">-&gt;</span>
        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">IsLoading</span> <span class="o">=</span> <span class="bp">false</span>
                     <span class="nc">Character</span> <span class="o">=</span> <span class="nc">None</span>
                     <span class="nc">ErrorMessage</span> <span class="o">=</span> <span class="nc">Some</span> <span class="n">error</span> <span class="o">},</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">none</span>

<span class="k">let</span> <span class="n">loadingMessage</span> <span class="n">model</span> <span class="o">=</span>
    <span class="k">if</span> <span class="n">model</span><span class="o">.</span><span class="nc">IsLoading</span> <span class="k">then</span>
        <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Loading...&quot;</span> <span class="o">]</span>
    <span class="k">else</span> <span class="bp">[]</span>

<span class="k">let</span> <span class="n">isRounded</span> <span class="o">:</span> <span class="nc">IHTMLProp</span> <span class="kt">list</span> <span class="o">=</span>
    <span class="o">[</span> <span class="nc">Style</span> <span class="o">[</span> <span class="nc">BorderRadius</span> <span class="s2">&quot;25px&quot;</span> <span class="o">]</span> <span class="o">]</span>

<span class="k">let</span> <span class="n">characterView</span> <span class="n">character</span> <span class="o">=</span>
    <span class="o">[</span> <span class="nn">Hero</span><span class="p">.</span><span class="n">hero</span> <span class="o">[</span> <span class="nn">Hero</span><span class="p">.</span><span class="nc">Color</span> <span class="nc">IsBlack</span>
                  <span class="nn">Hero</span><span class="p">.</span><span class="nc">Props</span> <span class="n">isRounded</span> <span class="o">]</span> <span class="o">[</span>
        <span class="nn">Hero</span><span class="p">.</span><span class="n">body</span> <span class="bp">[]</span> <span class="o">[</span>
            <span class="nn">Container</span><span class="p">.</span><span class="n">container</span> <span class="o">[</span> <span class="nn">Container</span><span class="p">.</span><span class="nc">IsFluid</span>
                                  <span class="nn">Container</span><span class="p">.</span><span class="nc">Modifiers</span>
                                      <span class="o">[</span> <span class="nn">Modifier</span><span class="p">.</span><span class="nc">TextAlignment</span> <span class="o">(</span><span class="nn">Screen</span><span class="p">.</span><span class="nc">All</span><span class="o">,</span> <span class="nn">TextAlignment</span><span class="p">.</span><span class="nc">Centered</span><span class="o">)</span> <span class="o">]</span> <span class="o">]</span> <span class="o">[</span>
                <span class="nn">Heading</span><span class="p">.</span><span class="n">h1</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="n">character</span><span class="o">.</span><span class="nc">Name</span> <span class="o">]</span>
                <span class="n">p</span> <span class="bp">[]</span> <span class="o">[</span>
                    <span class="n">strong</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;High Concept: &quot;</span> <span class="o">]</span>
                    <span class="n">str</span> <span class="n">character</span><span class="o">.</span><span class="nc">HighConcept</span>
                <span class="o">]</span>
                <span class="n">p</span> <span class="bp">[]</span> <span class="o">[</span>
                    <span class="n">strong</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Trouble: &quot;</span> <span class="o">]</span>
                    <span class="n">str</span> <span class="n">character</span><span class="o">.</span><span class="nc">Trouble</span>
                <span class="o">]</span>
            <span class="o">]</span>
        <span class="o">]</span>
      <span class="o">]</span>
      <span class="nn">Columns</span><span class="p">.</span><span class="n">columns</span> <span class="bp">[]</span> <span class="o">[</span>
          <span class="nn">Column</span><span class="p">.</span><span class="n">column</span> <span class="bp">[]</span> <span class="o">[</span>
              <span class="nn">Heading</span><span class="p">.</span><span class="n">h2</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Approaches&quot;</span> <span class="o">]</span>
              <span class="nn">Table</span><span class="p">.</span><span class="n">table</span>
                  <span class="o">[</span> <span class="nn">Table</span><span class="p">.</span><span class="nc">IsBordered</span>
                    <span class="nn">Table</span><span class="p">.</span><span class="nc">IsStriped</span> <span class="o">]</span>
                  <span class="o">[</span> <span class="n">thead</span> <span class="bp">[]</span>
                        <span class="o">[</span> <span class="n">tr</span> <span class="bp">[]</span>
                              <span class="o">[</span> <span class="n">th</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Approach&quot;</span> <span class="o">]</span>
                                <span class="n">th</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Level&quot;</span> <span class="o">]</span> <span class="o">]</span> <span class="o">]</span>
                    <span class="n">tbody</span> <span class="bp">[]</span>
                        <span class="o">[</span> <span class="n">tr</span> <span class="bp">[]</span>
                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Careful&quot;</span> <span class="o">]</span>
                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Careful</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span>
                          <span class="n">tr</span> <span class="bp">[]</span>
                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Clever&quot;</span> <span class="o">]</span>
                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Clever</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span>
                          <span class="n">tr</span> <span class="bp">[]</span>
                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Flashy&quot;</span> <span class="o">]</span>
                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Flashy</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span>
                          <span class="n">tr</span> <span class="bp">[]</span>
                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Forceful&quot;</span> <span class="o">]</span>
                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Forceful</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span>
                          <span class="n">tr</span> <span class="bp">[]</span>
                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Quick&quot;</span> <span class="o">]</span>
                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Quick</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span>
                          <span class="n">tr</span> <span class="bp">[]</span>
                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Sneaky&quot;</span> <span class="o">]</span>
                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Sneaky</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span> <span class="o">]</span>
                  <span class="o">]</span>
          <span class="o">]</span>
          <span class="nn">Column</span><span class="p">.</span><span class="n">column</span> <span class="bp">[]</span> <span class="o">[</span>
              <span class="nn">Heading</span><span class="p">.</span><span class="n">h2</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Other Aspects&quot;</span> <span class="o">]</span>
              <span class="n">ul</span> <span class="bp">[]</span> <span class="o">[</span>
                  <span class="k">yield</span><span class="o">!</span> <span class="o">[</span> <span class="k">for</span> <span class="n">a</span> <span class="k">in</span> <span class="n">character</span><span class="o">.</span><span class="nc">Aspects</span> <span class="o">-&gt;</span> <span class="n">li</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="n">a</span> <span class="o">]</span> <span class="o">]</span>
              <span class="o">]</span>
              <span class="nn">Heading</span><span class="p">.</span><span class="n">h2</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Stunts&quot;</span> <span class="o">]</span>
              <span class="n">ul</span> <span class="bp">[]</span> <span class="o">[</span>
                  <span class="k">yield</span><span class="o">!</span> <span class="o">[</span> <span class="k">for</span> <span class="n">s</span> <span class="k">in</span> <span class="n">character</span><span class="o">.</span><span class="nc">Stunts</span> <span class="o">-&gt;</span> <span class="n">li</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="n">s</span> <span class="o">]</span> <span class="o">]</span>
              <span class="o">]</span>
          <span class="o">]</span>
      <span class="o">]</span>
    <span class="o">]</span>

<span class="k">let</span> <span class="n">errorView</span> <span class="n">message</span> <span class="o">=</span>
    <span class="o">[</span> <span class="nn">Notification</span><span class="p">.</span><span class="n">notification</span> <span class="o">[</span> <span class="nn">Notification</span><span class="p">.</span><span class="nc">Color</span> <span class="nc">IsDanger</span> <span class="o">]</span> <span class="o">[</span>
        <span class="n">str</span> <span class="n">message</span>
    <span class="o">]</span> <span class="o">]</span>

<span class="k">let</span> <span class="k">private</span> <span class="n">view</span> <span class="n">model</span> <span class="n">dispatch</span> <span class="o">=</span>
    <span class="nn">Container</span><span class="p">.</span><span class="n">container</span> <span class="bp">[]</span> <span class="o">[</span>
        <span class="nn">Content</span><span class="p">.</span><span class="n">content</span> <span class="o">[</span> <span class="o">]</span>
          <span class="o">[</span> <span class="k">yield</span><span class="o">!</span> <span class="n">loadingMessage</span> <span class="n">model</span>
            <span class="k">match</span> <span class="n">model</span><span class="o">.</span><span class="nc">Character</span> <span class="k">with</span>
            <span class="o">|</span> <span class="nc">Some</span> <span class="n">c</span> <span class="o">-&gt;</span>
                <span class="k">yield</span><span class="o">!</span> <span class="n">characterView</span> <span class="n">c</span>
            <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>
            <span class="k">match</span> <span class="n">model</span><span class="o">.</span><span class="nc">ErrorMessage</span> <span class="k">with</span>
            <span class="o">|</span> <span class="nc">Some</span> <span class="n">m</span> <span class="o">-&gt;</span>
                <span class="k">yield</span><span class="o">!</span> <span class="n">errorView</span> <span class="n">m</span>
            <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span> <span class="o">]</span>
    <span class="o">]</span>

<span class="k">open</span> <span class="nn">Elmish</span><span class="p">.</span><span class="nc">React</span>
<span class="k">open</span> <span class="nn">Elmish</span><span class="p">.</span><span class="nc">Debug</span>
<span class="k">open</span> <span class="nn">Elmish</span><span class="p">.</span><span class="nc">HMR</span>

<span class="nn">Program</span><span class="p">.</span><span class="n">mkProgram</span> <span class="n">init</span> <span class="n">update</span> <span class="n">view</span>
<span class="o">#</span><span class="k">if</span> <span class="nc">DEBUG</span>
<span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withHMR</span>
<span class="o">#</span><span class="n">endif</span>
<span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withReactUnoptimized</span> <span class="s2">&quot;elmish-app&quot;</span>
<span class="o">#</span><span class="k">if</span> <span class="nc">DEBUG</span>
<span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withDebugger</span>
<span class="o">#</span><span class="n">endif</span>
<span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">run</span>
</code></pre></div>
<p>And there you have it - a simple app that loads &quot;Bob&quot; from our server, using the generic <code>fetchAs</code> method to cast the JSON back into our strongly typed world. Making the application interactive and more attractive is left to the user; it gets quite addictive with a nice type safe wrapper over React and auto-reloading.</p>

<p>Till next time...</p>

<p><img src="/images/bob_bobson.png" alt="The Final Result"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent 2017 - Reading from the Firehose with Fable]]></title>
    <link href="https://blog.mavnn.co.uk/advent-2017-reading-from-the-firehose-with-fable/"/>
    <updated>2017-12-04T13:00:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/advent-2017-reading-from-the-firehose-with-fable</id>
    <content type="html"><![CDATA[<p>Each year, the F# programming community creates an advent calendar of blog posts, coordinated by Sergey Tihon <a href="https://sergeytihon.com/2017/10/22/f-advent-calendar-in-english-2017/">his blog</a>.</p>

<p>I really like the idea, and have taken part in <a href="https://blog.mavnn.co.uk/advent-2016/">2016</a>, <a href="https://blog.mavnn.co.uk/angels-from-the-realms-of-glory/">2015</a> &amp; <a href="https://blog.mavnn.co.uk/modelling-inheritance-with-inheritance/">2014</a>.</p>

<p>Below is this year&#39;s post.</p>

<h1>The plan: speed read Christmas</h1>

<p>So; you want to find out what Christmas is about, where it really came from... but you don&#39;t have much time.</p>

<p>The solution is obvious: take the famous bible passages that churches read every year, and speed read them!</p>

<p>Let&#39;s build an app to help us with that.</p>

<!-- more -->

<h2>The tools: Fable and Elmish</h2>

<p><a href="https://fable-elmish.github.io/elmish/">Fable</a> is a F# to JavaScript compiler, and <a href="https://fable-elmish.github.io/elmish/">Elmish</a> is a library for it designed to provide a Elm/Redux style workflow around it.</p>

<p>If you haven&#39;t used Elm or Redux before, the basic idea is that our application will be based around three things:</p>

<ul>
<li>A state type. This type will contain all of the information about the state of the application at any moment</li>
<li>A message type. This will be a discriminated union with a case for each type of &quot;message&quot; that can update the state of the application.</li>
<li>An update function. This is called every time a message is triggered; it takes the previous state and the message that has just arrived, and produces a new state.</li>
</ul>

<p>These three things are all we need to manage the state of the application, but then we end up needing one final concept: subscribers.</p>

<p>Subscribers can take the current state, but more importantly they are passed a &quot;dispatch&quot; function that allows them to dispatch messages to the applications message queue. This is how we deal with all inputs in an Elmish application, whether from a user or whether it&#39;s things like network requests completing and delivering information our application needs.</p>

<p>The main, most important subscriber is the &quot;view&quot; (i.e. how we&#39;re going to show things to the user). In our app, our view will be displayed via a Fable wrapper for React, creating a single page web application. The view is nearly always capable of also dispatching messages - this is how we model things like buttons the user can click on.</p>

<p>You can find more about this, with pretty diagrams, on the Fable Elmish website linked above.</p>

<h2>Getting started</h2>

<p>Let&#39;s start by setting up the application framework. We&#39;ll need dotnet core installed, and node with a reasonably recent version of yarn if you want to follow along at home.</p>

<p>Make yourself a new directory, and then on the command line you can run the following commands:</p>
<div class="highlight"><pre><code class="sh">dotnet new -i Fable.Template
</code></pre></div>
<p>Installs the Fable template for dotnet core.</p>
<div class="highlight"><pre><code class="sh">dotnet new fable
</code></pre></div>
<p>Creates a new Fable project in this directory, using the directory name for the project name.</p>
<div class="highlight"><pre><code class="sh">yarn install
dotnet restore
</code></pre></div>
<p>Download all the basic dependencies, both for dotnet and JavaScript.</p>

<h2>Adding our dependencies</h2>

<p>Apart from using Fable itself, we also want to make use of Elmish and it&#39;s React plugin.</p>

<p>Add these two libraries to paket.dependencies:</p>
<div class="highlight"><pre><code class="text">nuget Fable.Elmish.Browser
nuget Fable.Elmish.React
</code></pre></div>
<p>Then in the src directory add them to our Fable project as well (in paket.references):</p>
<div class="highlight"><pre><code class="text">Fable.Elmish.Browser
Fable.Elmish.React
</code></pre></div>
<p>Run a paket install to download and add the dotnet parts of the libraries to your project:</p>
<div class="highlight"><pre><code class="text">mono .paket/paket.exe install
</code></pre></div>
<p>Then go into the &quot;src&quot; directory and add the JavaScript libraries that these Fable libraries depend on in the browser.</p>
<div class="highlight"><pre><code class="text">cd src
yarn add react react-dom
dotnet restore
</code></pre></div>
<h2>Setting up the webpage</h2>

<p>Let&#39;s adapt our HTML, in the &quot;public&quot; folder. The Fable template project assumes that we&#39;re going to be using a canvas. We&#39;re writing a text only application, so we&#39;ll just replace the canvas node with a standard <code>div</code> and mark it with an id which we&#39;ll use to tell react where to render the html our code will generate.</p>

<p>Your index.html should end up looking like this:</p>
<div class="highlight"><pre><code class="html"><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;title&gt;</span>Simple Fable App<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&#39;Content-Type&#39;</span> <span class="na">content=</span><span class="s">&#39;text/html; charset=utf-8&#39;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;shortcut icon&quot;</span> <span class="na">href=</span><span class="s">&quot;fable.ico&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span>  <span class="na">href=</span><span class="s">&quot;index.css&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdn.polyfill.io/v2/polyfill.js?features=es6,fetch&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;react-element&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bundle.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div>
<p>We&#39;re going to speed read by displaying each word of the text really big in the middle of the screen one by one (so that you don&#39;t need to move your eyes to read).</p>

<p>Add in a <code>index.css</code> file with the following to set up styles for a large centered container and a class for displaying really large text.</p>
<div class="highlight"><pre><code class="css"><span class="nt">html</span> <span class="p">{</span>
  <span class="k">font-family</span><span class="o">:</span> <span class="k">sans-serif</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.container</span> <span class="p">{</span>
  <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
  <span class="k">top</span><span class="o">:</span> <span class="m">50</span><span class="o">%</span><span class="p">;</span>
  <span class="k">left</span><span class="o">:</span> <span class="m">50</span><span class="o">%</span><span class="p">;</span>
  <span class="n">transform</span><span class="o">:</span> <span class="n">translate</span><span class="p">(</span><span class="m">-50</span><span class="o">%,</span> <span class="m">-50</span><span class="o">%</span><span class="p">);</span>
<span class="p">}</span>

<span class="nc">.theText</span> <span class="p">{</span>
  <span class="k">font-size</span><span class="o">:</span> <span class="m">5em</span><span class="p">;</span>
  <span class="k">margin</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<h2>Writing &quot;JavaScript&quot;</h2>

<p>Fable compiles F# to JavaScript, and comes with tooling to watch your code and update it automatically.</p>

<p>Fire up yarn by going into your &quot;src&quot; directory and running:</p>
<div class="highlight"><pre><code class="text">dotnet fable yarn-start
</code></pre></div>
<p>This will start the fable compiler and keep it running in the background.</p>

<p>We&#39;ve already decided we want to use Elmish with the React view. We&#39;re also going to be loading some external data so we&#39;ll want access to the Fetch API.</p>

<p>Let&#39;s open up all the namespaces which might be relevant:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nc">Advent2017</span>

<span class="k">open</span> <span class="nc">System</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">Core</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">JsInterop</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">Import</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">Browser</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">React</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">ReactDom</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nn">React</span><span class="p">.</span><span class="nc">Props</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">PowerPack</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">PowerPack</span><span class="p">.</span><span class="nc">Fetch</span>
<span class="k">open</span> <span class="nc">Elmish</span>
<span class="k">open</span> <span class="nn">Elmish</span><span class="p">.</span><span class="nc">React</span>
<span class="k">module</span> <span class="nc">R</span> <span class="o">=</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nc">React</span>
</code></pre></div>
<p>Then we need a model; this holds all of the state of our app. The text to be speed read will be stored as an array of strings; we&#39;ll keep a <code>Max</code> field with the index of the last word to make our logic nice and explicit, the <code>Index</code> of the word currently being displayed, the number of ticks <code>SinceLast</code> time we updated the word and the current number of <code>TicksPerUpdate</code>.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">type</span> <span class="nc">Model</span> <span class="o">=</span>
    <span class="o">{</span> <span class="nc">Text</span> <span class="o">:</span> <span class="kt">string</span> <span class="bp">[]</span>
      <span class="nc">Max</span> <span class="o">:</span> <span class="kt">int</span>
      <span class="nc">Index</span> <span class="o">:</span> <span class="kt">int</span>
      <span class="nc">SinceLast</span> <span class="o">:</span> <span class="kt">int</span>
      <span class="nc">TicksPerUpdate</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>
</code></pre></div>
<p>The <code>Msg</code> type represents all the ways that our app can be updated. The user can ask for the text to become faster, or slower; we can finish loading the text via a web request; and a <code>Tick</code> of our timer can go past.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">type</span> <span class="nc">Msg</span> <span class="o">=</span>
    <span class="o">|</span> <span class="nc">Faster</span>
    <span class="o">|</span> <span class="nc">Slower</span>
    <span class="o">|</span> <span class="nc">ReceivedText</span> <span class="k">of</span> <span class="kt">string</span> <span class="bp">[]</span>
    <span class="o">|</span> <span class="nc">Tick</span>
</code></pre></div>
<p>And the actual update logic takes one of those messages and a previous state, and gives us a new state:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">update</span> <span class="n">msg</span> <span class="n">model</span> <span class="o">=</span>
    <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
    <span class="o">|</span> <span class="nc">Tick</span> <span class="o">-&gt;</span>
        <span class="k">match</span> <span class="n">model</span> <span class="k">with</span>
        <span class="o">|</span> <span class="o">{</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">tpu</span><span class="o">;</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">sl</span> <span class="o">}</span> <span class="k">when</span> <span class="n">sl</span> <span class="o">&gt;=</span> <span class="n">tpu</span> <span class="o">&amp;&amp;</span> <span class="n">tpu</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">-&gt;</span>
            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
                <span class="nc">Index</span> <span class="o">=</span> <span class="n">min</span> <span class="n">model</span><span class="o">.</span><span class="nc">Max</span> <span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
                <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
        <span class="o">|</span> <span class="o">{</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">tpu</span><span class="o">;</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">sl</span> <span class="o">}</span> <span class="k">when</span> <span class="n">sl</span> <span class="o">&gt;=</span> <span class="o">(</span><span class="n">tpu</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">tpu</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">-&gt;</span>
            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
                <span class="nc">Index</span> <span class="o">=</span> <span class="n">max</span> <span class="mi">0</span> <span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
                <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">SinceLast</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">}</span>
    <span class="o">|</span> <span class="nc">Faster</span> <span class="o">-&gt;</span>
        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">}</span>
    <span class="o">|</span> <span class="nc">Slower</span> <span class="o">-&gt;</span>
        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">}</span>
    <span class="o">|</span> <span class="nc">ReceivedText</span> <span class="n">text</span> <span class="o">-&gt;</span>
        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
            <span class="nc">Text</span> <span class="o">=</span> <span class="n">text</span>
            <span class="nc">Max</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">length</span> <span class="n">text</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">}</span>
</code></pre></div>
<p>I was feeling a bit silly, so you can make the application go &quot;so fast it goes backwards.&quot; I mean, I&#39;ve had user requirements that make less sense than that before!</p>

<p>Having defined our types and abstract logic, we now need to write the actual functionality of our app, working our way up to a method which starts it off with an initial state.</p>

<p>First some low level grunge for downloading the text we want to read.</p>

<p>We&#39;ll need a url and an auth token for the API we&#39;re using (esv.org provide a really nice API by the way).</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">requestUri</span> <span class="o">=</span>
    <span class="o">[</span> <span class="s2">&quot;https://api.esv.org/v3/passage/text/?q=John%201&quot;</span>
      <span class="s2">&quot;&amp;include-passage-references=false&quot;</span>
      <span class="s2">&quot;&amp;include-first-verse-numbers=false&quot;</span>
      <span class="s2">&quot;&amp;include-verse-numbers=false&quot;</span>
      <span class="s2">&quot;&amp;include-footnotes=false&quot;</span>
      <span class="s2">&quot;&amp;include-footnote-body=false&quot;</span>
      <span class="s2">&quot;&amp;include-passage-horizontal-lines=false&quot;</span>
      <span class="s2">&quot;&amp;include-heading-horizontal-lines=false&quot;</span>
      <span class="s2">&quot;&amp;include-headings=false&quot;</span>
      <span class="o">]</span> <span class="o">|&gt;</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;&quot;</span>

<span class="k">let</span> <span class="n">authToken</span> <span class="o">=</span> <span class="s2">&quot;TEST&quot;</span>
</code></pre></div>
<p>We&#39;ve split it up over multiple lines to make it readable as I&#39;m specifying a lot of options. Nearly all of the them boil down to removing optional metadata from the text (such as verse numbers and translation footnotes). For speed reading we just want the actual words. If you want to run this application a lot, you&#39;ll need to register your application on esv.org to get your own auth token.</p>

<p>The text it tries to download is John 1; it&#39;s one of the most famous Christmas texts, but also very poetic in it&#39;s presentation. I love it, but if you just want &quot;the Christmas story&quot; try a base url of <code>&quot;https://api.esv.org/v3/passage/text/?q=Luke%201-Luke%202:21&quot;</code> instead.</p>

<p>Now, some boiler plate to extract the passage from the JSON blob that esv.org send back to us. I&#39;m totally ignoring any errors that might occur in the request here, you probably don&#39;t want to do that in a real application.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">toText</span> <span class="o">(</span><span class="n">res</span> <span class="o">:</span> <span class="nc">Response</span><span class="o">)</span> <span class="o">=</span>
    <span class="n">res</span><span class="o">.</span><span class="n">text</span><span class="bp">()</span>

<span class="k">let</span> <span class="o">(|</span><span class="nc">Val</span><span class="o">|_|)</span> <span class="n">key</span> <span class="o">=</span> <span class="nn">Map</span><span class="p">.</span><span class="n">ofSeq</span> <span class="o">&gt;&gt;</span> <span class="o">(</span><span class="nn">Map</span><span class="p">.</span><span class="n">tryFind</span> <span class="n">key</span><span class="o">)</span>

<span class="k">let</span> <span class="n">extractPassage</span> <span class="o">(</span><span class="n">str</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">json</span> <span class="o">=</span> <span class="nn">Json</span><span class="p">.</span><span class="n">ofString</span> <span class="n">str</span>
    <span class="k">match</span> <span class="n">json</span> <span class="k">with</span>
    <span class="o">|</span> <span class="nc">Ok</span> <span class="o">(</span><span class="nn">Json</span><span class="p">.</span><span class="nc">Object</span> <span class="o">(</span><span class="nc">Val</span> <span class="s2">&quot;passages&quot;</span> <span class="o">(</span><span class="nn">Json</span><span class="p">.</span><span class="nc">Array</span> <span class="o">[|</span><span class="nn">Json</span><span class="p">.</span><span class="nc">String</span> <span class="n">first</span><span class="o">|])))</span> <span class="o">-&gt;</span> <span class="n">first</span>
    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="s2">&quot;Error&quot;</span>

<span class="k">let</span> <span class="n">getText</span> <span class="n">dispatch</span> <span class="o">=</span>
    <span class="n">fetch</span> <span class="n">requestUri</span> <span class="o">[</span> <span class="n">requestHeaders</span> <span class="o">[</span> <span class="nc">Authorization</span> <span class="o">&lt;|</span> <span class="n">sprintf</span> <span class="s2">&quot;Token %s&quot;</span> <span class="n">authToken</span> <span class="o">]</span> <span class="o">]</span>
    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">bind</span> <span class="n">toText</span>
    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">map</span> <span class="n">extractPassage</span>
    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">text</span> <span class="o">-&gt;</span> <span class="n">text</span><span class="o">.</span><span class="nc">Split</span><span class="o">(</span><span class="nn">Array</span><span class="p">.</span><span class="n">empty</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;,</span> <span class="nn">StringSplitOptions</span><span class="p">.</span><span class="nc">RemoveEmptyEntries</span><span class="o">)</span>
                                 <span class="o">|&gt;</span> <span class="nc">ReceivedText</span>
                                 <span class="o">|&gt;</span> <span class="n">dispatch</span><span class="o">)</span>
</code></pre></div>
<p>So <code>getText</code> will, when passed a <code>dispatch</code> function, call our Url, get the text of he body, throw away everything apart from the text of the passage we actually requested, and then split the passage on any whitespace.</p>

<p>We also want regular <code>ticks</code> coming through and prompting us to move onto the next word (or the previous if we&#39;re going backwards...).</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">triggerUpdate</span> <span class="o">(</span><span class="n">dispatch</span> <span class="o">:</span> <span class="nc">Msg</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">=</span>
    <span class="n">window</span><span class="o">.</span><span class="n">setInterval</span><span class="o">((</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Tick</span><span class="o">),</span> <span class="mi">100</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</code></pre></div>
<p>Next up, we need our view. The view will both receive new versions of the model as they are created, but will also receive a dispatch functions so it can feed new messages into our <code>update</code> function.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">view</span> <span class="n">model</span> <span class="n">dispatch</span> <span class="o">=</span>
    <span class="k">match</span> <span class="n">model</span><span class="o">.</span><span class="nc">Text</span> <span class="k">with</span>
    <span class="o">|</span> <span class="n">t</span> <span class="k">when</span> <span class="nn">Array</span><span class="p">.</span><span class="n">isEmpty</span> <span class="n">t</span> <span class="o">-&gt;</span>
        <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span>
            <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span> <span class="o">[</span><span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Loading...&quot;</span><span class="o">]</span> <span class="o">]</span>
    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
        <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="o">[</span> <span class="nc">ClassName</span> <span class="s2">&quot;container&quot;</span> <span class="o">]</span>
            <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">button</span> <span class="o">[</span> <span class="nc">OnClick</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Faster</span><span class="o">)</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Faster&quot;</span> <span class="o">]</span>
              <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="o">[</span> <span class="nc">ClassName</span> <span class="s2">&quot;theText&quot;</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="n">model</span><span class="o">.</span><span class="nn">Text</span><span class="p">.</span><span class="err">[</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span><span class="o">]</span>  <span class="o">]</span>
              <span class="nn">R</span><span class="p">.</span><span class="n">button</span> <span class="o">[</span> <span class="nc">OnClick</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Slower</span><span class="o">)</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Slower&quot;</span> <span class="o">]</span>
              <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="o">&lt;|</span> <span class="n">sprintf</span> <span class="s2">&quot;Ticks Per Update: %d&quot;</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">]</span> <span class="o">]</span>
</code></pre></div>
<p>It displays a placeholder while we&#39;re loading data, and then buttons to speed up and slow down the speed reading rate.</p>

<p>Finally, we can fire up our application.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">init</span> <span class="bp">()</span> <span class="o">=</span>
    <span class="o">{</span> <span class="nc">Text</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">empty</span>
      <span class="nc">Max</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="nc">Index</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">}</span>

<span class="nn">Program</span><span class="p">.</span><span class="n">mkSimple</span> <span class="n">init</span> <span class="n">update</span> <span class="o">(</span><span class="n">lazyView2</span> <span class="n">view</span><span class="o">)</span>
<span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withSubscription</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">ofSub</span> <span class="n">getText</span><span class="o">)</span>
<span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withSubscription</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">ofSub</span> <span class="n">triggerUpdate</span><span class="o">)</span>
<span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withReact</span> <span class="s2">&quot;react-element&quot;</span>
<span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">run</span>
</code></pre></div>
<p>We just set our initial state and then tell react which element in our html we want to render our view in. Because we are registering <code>getText</code> and <code>triggerUpdate</code> as subscriptions, they will be passed a <code>dispatch</code> function and kicked off immediately, so the first thing our app will do is try and download the text.</p>

<p>Once the text is loaded, we&#39;ll start going forwards through the text, and are buttons for reading faster and slower will be displayed.</p>

<p>Let&#39;s see it in action:</p>

<p><img src="/images/speed_reading.gif" alt="The speed reader in action"></p>

<p>And there we have it - I hope you&#39;ll enjoy this brief trip into writing user interfaces in F#, and your <em>speedy</em> recap of one of the most famous readings from the Christmas story!</p>

<h2>Appendix: The full App.fs</h2>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nc">Advent2017</span>

<span class="k">open</span> <span class="nc">System</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">Core</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">JsInterop</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">Import</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">Browser</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">React</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Import</span><span class="p">.</span><span class="nc">ReactDom</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nn">React</span><span class="p">.</span><span class="nc">Props</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">PowerPack</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">PowerPack</span><span class="p">.</span><span class="nc">Fetch</span>
<span class="k">open</span> <span class="nc">Elmish</span>
<span class="k">open</span> <span class="nn">Elmish</span><span class="p">.</span><span class="nc">React</span>
<span class="k">module</span> <span class="nc">R</span> <span class="o">=</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nc">React</span>

<span class="k">type</span> <span class="nc">Model</span> <span class="o">=</span>
    <span class="o">{</span> <span class="nc">Text</span> <span class="o">:</span> <span class="kt">string</span> <span class="bp">[]</span>
      <span class="nc">Max</span> <span class="o">:</span> <span class="kt">int</span>
      <span class="nc">Index</span> <span class="o">:</span> <span class="kt">int</span>
      <span class="nc">SinceLast</span> <span class="o">:</span> <span class="kt">int</span>
      <span class="nc">TicksPerUpdate</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>

<span class="k">type</span> <span class="nc">Msg</span> <span class="o">=</span>
    <span class="o">|</span> <span class="nc">Faster</span>
    <span class="o">|</span> <span class="nc">Slower</span>
    <span class="o">|</span> <span class="nc">ReceivedText</span> <span class="k">of</span> <span class="kt">string</span> <span class="bp">[]</span>
    <span class="o">|</span> <span class="nc">Tick</span>

<span class="k">let</span> <span class="n">update</span> <span class="n">msg</span> <span class="n">model</span> <span class="o">=</span>
    <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
    <span class="o">|</span> <span class="nc">Tick</span> <span class="o">-&gt;</span>
        <span class="k">match</span> <span class="n">model</span> <span class="k">with</span>
        <span class="o">|</span> <span class="o">{</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">tpu</span><span class="o">;</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">sl</span> <span class="o">}</span> <span class="k">when</span> <span class="n">sl</span> <span class="o">&gt;=</span> <span class="n">tpu</span> <span class="o">&amp;&amp;</span> <span class="n">tpu</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">-&gt;</span>
            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
                <span class="nc">Index</span> <span class="o">=</span> <span class="n">min</span> <span class="n">model</span><span class="o">.</span><span class="nc">Max</span> <span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
                <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
        <span class="o">|</span> <span class="o">{</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">tpu</span><span class="o">;</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">sl</span> <span class="o">}</span> <span class="k">when</span> <span class="n">sl</span> <span class="o">&gt;=</span> <span class="o">(</span><span class="n">tpu</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">tpu</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">-&gt;</span>
            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
                <span class="nc">Index</span> <span class="o">=</span> <span class="n">max</span> <span class="mi">0</span> <span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
                <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
            <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">SinceLast</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">SinceLast</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">}</span>
    <span class="o">|</span> <span class="nc">Faster</span> <span class="o">-&gt;</span>
        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">}</span>
    <span class="o">|</span> <span class="nc">Slower</span> <span class="o">-&gt;</span>
        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">}</span>
    <span class="o">|</span> <span class="nc">ReceivedText</span> <span class="n">text</span> <span class="o">-&gt;</span>
        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span>
            <span class="nc">Text</span> <span class="o">=</span> <span class="n">text</span>
            <span class="nc">Max</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">length</span> <span class="n">text</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">}</span>

<span class="k">let</span> <span class="n">requestUri</span> <span class="o">=</span>
    <span class="o">[</span> <span class="s2">&quot;https://api.esv.org/v3/passage/text/?q=John%201&quot;</span>
      <span class="s2">&quot;&amp;include-passage-references=false&quot;</span>
      <span class="s2">&quot;&amp;include-first-verse-numbers=false&quot;</span>
      <span class="s2">&quot;&amp;include-verse-numbers=false&quot;</span>
      <span class="s2">&quot;&amp;include-footnotes=false&quot;</span>
      <span class="s2">&quot;&amp;include-footnote-body=false&quot;</span>
      <span class="s2">&quot;&amp;include-passage-horizontal-lines=false&quot;</span>
      <span class="s2">&quot;&amp;include-heading-horizontal-lines=false&quot;</span>
      <span class="s2">&quot;&amp;include-headings=false&quot;</span>
      <span class="o">]</span> <span class="o">|&gt;</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;&quot;</span>

<span class="k">let</span> <span class="n">authToken</span> <span class="o">=</span> <span class="s2">&quot;TEST&quot;</span>

<span class="k">let</span> <span class="n">toText</span> <span class="o">(</span><span class="n">res</span> <span class="o">:</span> <span class="nc">Response</span><span class="o">)</span> <span class="o">=</span>
    <span class="n">res</span><span class="o">.</span><span class="n">text</span><span class="bp">()</span>

<span class="k">let</span> <span class="o">(|</span><span class="nc">Val</span><span class="o">|_|)</span> <span class="n">key</span> <span class="o">=</span> <span class="nn">Map</span><span class="p">.</span><span class="n">ofSeq</span> <span class="o">&gt;&gt;</span> <span class="o">(</span><span class="nn">Map</span><span class="p">.</span><span class="n">tryFind</span> <span class="n">key</span><span class="o">)</span>

<span class="k">let</span> <span class="n">extractPassage</span> <span class="o">(</span><span class="n">str</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">json</span> <span class="o">=</span> <span class="nn">Json</span><span class="p">.</span><span class="n">ofString</span> <span class="n">str</span>
    <span class="k">match</span> <span class="n">json</span> <span class="k">with</span>
    <span class="o">|</span> <span class="nc">Ok</span> <span class="o">(</span><span class="nn">Json</span><span class="p">.</span><span class="nc">Object</span> <span class="o">(</span><span class="nc">Val</span> <span class="s2">&quot;passages&quot;</span> <span class="o">(</span><span class="nn">Json</span><span class="p">.</span><span class="nc">Array</span> <span class="o">[|</span><span class="nn">Json</span><span class="p">.</span><span class="nc">String</span> <span class="n">first</span><span class="o">|])))</span> <span class="o">-&gt;</span> <span class="n">first</span>
    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="s2">&quot;Error&quot;</span>

<span class="k">let</span> <span class="n">getText</span> <span class="n">dispatch</span> <span class="o">=</span>
    <span class="n">fetch</span> <span class="n">requestUri</span> <span class="o">[</span> <span class="n">requestHeaders</span> <span class="o">[</span> <span class="nc">Authorization</span> <span class="o">&lt;|</span> <span class="n">sprintf</span> <span class="s2">&quot;Token %s&quot;</span> <span class="n">authToken</span> <span class="o">]</span> <span class="o">]</span>
    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">bind</span> <span class="n">toText</span>
    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">map</span> <span class="n">extractPassage</span>
    <span class="o">|&gt;</span> <span class="nn">Promise</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">text</span> <span class="o">-&gt;</span> <span class="n">text</span><span class="o">.</span><span class="nc">Split</span><span class="o">(</span><span class="nn">Array</span><span class="p">.</span><span class="n">empty</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;,</span> <span class="nn">StringSplitOptions</span><span class="p">.</span><span class="nc">RemoveEmptyEntries</span><span class="o">)</span>
                                 <span class="o">|&gt;</span> <span class="nc">ReceivedText</span>
                                 <span class="o">|&gt;</span> <span class="n">dispatch</span><span class="o">)</span>

<span class="k">let</span> <span class="n">triggerUpdate</span> <span class="o">(</span><span class="n">dispatch</span> <span class="o">:</span> <span class="nc">Msg</span> <span class="o">-&gt;</span> <span class="kt">unit</span><span class="o">)</span> <span class="o">=</span>
    <span class="n">window</span><span class="o">.</span><span class="n">setInterval</span><span class="o">((</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Tick</span><span class="o">),</span> <span class="mi">100</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>

<span class="k">let</span> <span class="n">view</span> <span class="n">model</span> <span class="n">dispatch</span> <span class="o">=</span>
    <span class="k">match</span> <span class="n">model</span><span class="o">.</span><span class="nc">Text</span> <span class="k">with</span>
    <span class="o">|</span> <span class="n">t</span> <span class="k">when</span> <span class="nn">Array</span><span class="p">.</span><span class="n">isEmpty</span> <span class="n">t</span> <span class="o">-&gt;</span>
        <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span>
            <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span> <span class="o">[</span><span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Loading...&quot;</span><span class="o">]</span> <span class="o">]</span>
    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
        <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="o">[</span> <span class="nc">ClassName</span> <span class="s2">&quot;container&quot;</span> <span class="o">]</span>
            <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">button</span> <span class="o">[</span> <span class="nc">OnClick</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Faster</span><span class="o">)</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Faster&quot;</span> <span class="o">]</span>
              <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="o">[</span> <span class="nc">ClassName</span> <span class="s2">&quot;theText&quot;</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="n">model</span><span class="o">.</span><span class="nn">Text</span><span class="p">.</span><span class="err">[</span><span class="n">model</span><span class="o">.</span><span class="nc">Index</span><span class="o">]</span>  <span class="o">]</span>
              <span class="nn">R</span><span class="p">.</span><span class="n">button</span> <span class="o">[</span> <span class="nc">OnClick</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">dispatch</span> <span class="nc">Slower</span><span class="o">)</span> <span class="o">]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="s2">&quot;Slower&quot;</span> <span class="o">]</span>
              <span class="nn">R</span><span class="p">.</span><span class="n">div</span> <span class="bp">[]</span> <span class="o">[</span> <span class="nn">R</span><span class="p">.</span><span class="n">str</span> <span class="o">&lt;|</span> <span class="n">sprintf</span> <span class="s2">&quot;Ticks Per Update: %d&quot;</span> <span class="n">model</span><span class="o">.</span><span class="nc">TicksPerUpdate</span> <span class="o">]</span> <span class="o">]</span>

<span class="k">let</span> <span class="n">init</span> <span class="bp">()</span> <span class="o">=</span>
    <span class="o">{</span> <span class="nc">Text</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">empty</span>
      <span class="nc">Max</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="nc">Index</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="nc">SinceLast</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="nc">TicksPerUpdate</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">}</span>

<span class="nn">Program</span><span class="p">.</span><span class="n">mkSimple</span> <span class="n">init</span> <span class="n">update</span> <span class="o">(</span><span class="n">lazyView2</span> <span class="n">view</span><span class="o">)</span>
<span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withSubscription</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">ofSub</span> <span class="n">getText</span><span class="o">)</span>
<span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withSubscription</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">ofSub</span> <span class="n">triggerUpdate</span><span class="o">)</span>
<span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withReact</span> <span class="s2">&quot;react-element&quot;</span>
<span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">run</span>
</code></pre></div>]]></content>
  </entry>
  
</feed>
