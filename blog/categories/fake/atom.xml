<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: fake | Mavnn's blog]]></title>
  <link href="https://blog.mavnn.co.uk/blog/categories/fake/atom.xml" rel="self"/>
  <link href="https://blog.mavnn.co.uk/"/>
  <updated>2020-03-20T20:35:10+00:00</updated>
  <id>https://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Coding Hygiene: Moving from project references to NuGet dependencies]]></title>
    <link href="https://blog.mavnn.co.uk/coding-hygiene-moving-from-project-references-to-nuget-dependencies/"/>
    <updated>2013-03-08T17:08:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/coding-hygiene-moving-from-project-references-to-nuget-dependencies</id>
    <content type="html"><![CDATA[<p>So, first post with the new blogging engine. Let&#39;s see how it goes.</p>

<p>Our code base at <a href="http://15below.com">15below</a> started it&#39;s life a fair
while ago, well before any form of .NET package management became
practical. Because of that, we ended up building a lot of code in
&#39;lockstep&#39; with project references in code as there was no sensible way
of taking versioned binary dependencies.</p>

<p>That&#39;s fine and all, but it encourages bad code hygiene: rather than
having sharply defined contracts between components, if you&#39;ve got them
all open in the same solution it becomes far too tempting to just nudge
changes around as it&#39;s convenient at the time. Changes can infect other
pieces of code, and the power of automatic refactoring across the entire
solution becomes intoxicating.</p>

<p>The result? It becomes very hard to do incremental builds (or
deployments, for that matter). This in turn makes for a long feed back
cycle between making a change, and being able to see it rolled out to a
testing environment.</p>

<p>So as part of the ongoing refactoring that any long lived code base needs to
keep it maintainable and under control, we&#39;ve embarked on the process of
splitting our code down into more logically separated repositories that
reference each other via NuGet. This will require us to start being much
more disciplined in our <a href="http://semver.org">semantic versioning</a> than we
have been in the past, but will also allow us to build and deploy
incrementally and massively reduce our feed back times.</p>

<p>As part of splitting out the first logical division (I&#39;d like to say
<a href="http://en.wikipedia.org/wiki/Domain-driven_design">domain</a> but we&#39;re
not there yet!), I created the new repository and got the included
assemblies up and building on TeamCity. It was only then (stupidly) that
I realised that we had several hundred project references to these
assemblies in our code. There was no way I was going to update them all
by hand, so after a few hours development we now have a script for
idempotently updating a project reference in a [cs|vb|fs]proj file to a
NuGet reference. It does require you to do one update manually first;
especially with assemblies that are strongly signed, I chickened out of
trying to generate the reference nodes that needed to be added
automatically. The script also makes sure that you end up with a
packages.config file with the project that includes the new dependency.</p>

<p>It should be noted that this script has only seen minimal testing, was
coded up for one time use and does not come with a warranty of any kind!
Use at your own risk, and once you understand what it&#39;s doing. But for
all that, I hope you find it useful.</p>

<p><div><script src='https://gist.githubusercontent.com/mavnn/5983379.js'></script>
<noscript><pre><code>#r &quot;System.Xml.Linq&quot;
#r &quot;tools\FAKE\FakeLib.dll&quot;
open System.IO
open System.Xml
open System.Xml.Linq
open System.Xml.XPath
open Fake

// You&#39;ll want to replace these values...
let nugetId = &quot;my.package.id&quot;
let refName = &quot;my.ref.name&quot;
let packageNode = XElement.Parse &quot;&quot;&quot;&lt;package id=&quot;my.package.id&quot; version=&quot;1.0.0.6&quot; targetFramework=&quot;net40&quot; /&gt;&quot;&quot;&quot;
let refXml =
    &quot;&quot;&quot;
    &lt;Reference Include=&quot;my.ref.name&quot;&gt;
      &lt;HintPath&gt;..\..\packages\my.package.id.1.0.0.6\lib\net40\my.ref.name.dll&lt;/HintPath&gt;
      &lt;Private&gt;True&lt;/Private&gt;
    &lt;/Reference&gt;
    &quot;&quot;&quot;
let hintPathFromRoot =
@&quot;packages\my.package.id.1.0.0.6\lib\net40\my.ref.name.dll&quot;
let sourceRoot = &quot;C:\WhereIKeepMyRepo&quot;

// You should be able to leave the rest alone
let ns = &quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;
let nsm = new XmlNamespaceManager(new NameTable())
nsm.AddNamespace(&quot;ns&quot;, ns)
let nugetPath = sourceRoot @@ &quot;tools&quot; @@ &quot;NuGet&quot; @@ &quot;NuGet.exe&quot;

let HasProjectReference (projDoc : XDocument) refName =
    projDoc.Root.XPathSelectElements(&quot;//ns:ProjectReference[ns:Name=&#39;&quot; + refName + &quot;&#39;]&quot;, nsm)
    |&gt; Seq.length
    |&gt; (&lt;) 0

let GetProjectReference (projDoc : XDocument) refName =
    projDoc.Root.XPathSelectElement(&quot;//ns:ProjectReference[ns:Name=&#39;&quot; + refName + &quot;&#39;]&quot;, nsm)

let DeleteProjectReference refName (projFile : string) =
    let projDoc = XDocument.Load(projFile)
    if HasProjectReference projDoc refName then
        let ref = GetProjectReference projDoc refName
        ref.Remove()
        projDoc.Save(projFile)

let HasReference (projDoc : XDocument) refName =
    projDoc.Root.XPathSelectElements(&quot;//ns:Reference[@Include=&#39;&quot; + refName + &quot;&#39;]&quot;, nsm)
    |&gt; Seq.append &lt;| projDoc.Root.XPathSelectElements(&quot;//ns:Reference[@Include[starts-with(., &#39;&quot; + refName + &quot;,&#39;)]]&quot;, nsm)
    |&gt; Seq.tryPick (fun e -&gt; Some e)

let FirstReference (projDoc : XDocument) =
    projDoc.Root.XPathSelectElements(&quot;//ns:Reference&quot;, nsm)
    |&gt; Seq.head

let GetHintPath hintPathFromRoot root projFile =
    let rootDir = DirectoryInfo(root)
    let projDir = DirectoryInfo(Path.GetDirectoryName(projFile))
    let rec dirDiff (rootDir : DirectoryInfo) (currentDir : DirectoryInfo) levels =
        if rootDir.FullName = currentDir.FullName then
            levels
        else
            dirDiff rootDir (currentDir.Parent) (levels + 1)
    hintPathFromRoot::[for _ in 1..(dirDiff rootDir projDir 0) -&gt; &quot;..&quot;]
    |&gt; List.rev
    |&gt; List.fold (@@) &quot;.&quot;

let UpdateHintPath projFile =
    let ref = XElement.Parse(refXml)
    let xs = XNamespace.Get(ns)
    let el = ref.XPathSelectElement(&quot;//HintPath&quot;)
    el.SetValue (GetHintPath hintPathFromRoot sourceRoot projFile)
    for node in ref.DescendantsAndSelf() do
        node.Name &lt;- xs + node.Name.LocalName
    ref

let EnsureReference refName (projFile : string) =
    let doc = XDocument.Load(projFile)
    match HasReference doc refName with
    | Some el -&gt; el.Remove()
    | None -&gt; ()
    let el = FirstReference doc
    el.AddBeforeSelf(UpdateHintPath projFile)
    doc.Save(projFile)

type PackageFile =
    | Exists of string
    | Missing of string

let GetPackagesDotConfig projFile =
    let dir = Path.GetDirectoryName(projFile)
    let path = dir @@ &quot;packages.config&quot;
    if File.Exists(path) then
        Exists path
    else
        Missing path

let HasPackageReference (doc : XDocument) nugetId =
    doc.XPathSelectElements(&quot;//package[@id = &#39;&quot; + nugetId + &quot;&#39;]&quot;)
    |&gt; Seq.length
    |&gt; (&lt;) 0

let EnsurePackagesDotConfigHasPackage nugetId projFile =
    let doc, path =
        match GetPackagesDotConfig projFile with
        | Missing path -&gt;
            XDocument.Parse(&quot;&lt;packages /&gt;&quot;), path
        | Exists path -&gt;
            XDocument.Load(path), path
    if not &lt;| HasPackageReference doc nugetId then
        doc.Root.XPathSelectElement(&quot;/packages&quot;).Add(packageNode)
        doc.Save path

let UpdateProj (projFile : string) =
    if HasProjectReference (XDocument.Load(projFile)) refName then
        DeleteProjectReference refName projFile
        EnsureReference refName projFile
        EnsurePackagesDotConfigHasPackage nugetId projFile

!+ (@&quot;**\*.csproj&quot;)
++ (@&quot;**\*.fsproj&quot;)
++ (@&quot;**\*.vbproj&quot;)
|&gt; Scan
|&gt; Seq.map (fun proj -&gt; printfn &quot;Updating %s&quot; proj; proj)
|&gt; Seq.iter UpdateProj
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Throttling the level of concurrency in F#]]></title>
    <link href="https://blog.mavnn.co.uk/throttling-the-level-of-concurrency-in-f/"/>
    <updated>2013-02-15T00:00:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/throttling-the-level-of-concurrency-in-f</id>
    <content type="html"><![CDATA[<p>Async.Parallel |&gt; Async.RunSynchronously is great for running a load of stuff in parallel in F#, as long as you don&#39;t mind them all running at the same time.</p>

<p>Often, though, you want to map across a sequence and run functions on the elements in parallel, but with a limit to how many are being processed concurrently. Whether you&#39;re doing something CPU heavy and there&#39;s no point running more than the number of processors on the box, or whether you know that you&#39;ll swamp a remote server if you just dump all of your connections on it at once, this issue comes up surprisingly often.</p>

<p>As a first stab, you might be tempted to do something like this (if you think like I do):</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="k">inline</span> <span class="n">doParallelWithThrottle</span> <span class="n">limit</span> <span class="n">f</span> <span class="n">items</span> <span class="o">=</span>
    <span class="k">use</span> <span class="n">sem</span> <span class="o">=</span> <span class="k">new</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Threading</span><span class="p">.</span><span class="nc">Semaphore</span><span class="o">(</span><span class="n">limit</span><span class="o">,</span> <span class="n">limit</span><span class="o">)</span>
    <span class="n">items</span>
    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">element</span> <span class="o">-&gt;</span> <span class="n">async</span> <span class="o">{</span>
            <span class="n">sem</span><span class="o">.</span><span class="nc">WaitOne</span><span class="bp">()</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
            <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">RunSynchronously</span> <span class="o">&lt;|</span> <span class="n">async</span> <span class="o">{</span> <span class="k">return</span> <span class="n">f</span> <span class="n">element</span> <span class="o">}</span>
            <span class="n">sem</span><span class="o">.</span><span class="nc">Release</span><span class="bp">()</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
            <span class="k">return</span> <span class="n">result</span>
        <span class="o">})</span>
    <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Parallel</span>
    <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">RunSynchronously</span>
</code></pre></div>
<p>In a word: don&#39;t. The contention in the Semaphore make this enormously inefficient with even a few hundred tasks.</p>

<p>In the end, the simplest  implementation I could come up with that didn&#39;t involve dragging in external dependencies was the following:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Collections</span><span class="p">.</span><span class="nc">Concurrent</span>

<span class="k">type</span> <span class="nc">JobRequest</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="nc">T</span><span class="o">&gt;</span> <span class="o">=</span>
    <span class="o">{</span>
        <span class="nc">Id</span> <span class="o">:</span> <span class="kt">int</span>
        <span class="nc">WorkItem</span> <span class="o">:</span> <span class="k">&#39;</span><span class="nc">T</span>
    <span class="o">}</span>

<span class="k">type</span> <span class="nc">WorkRequest</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="nc">T</span><span class="o">&gt;</span> <span class="o">=</span>
    <span class="o">|</span> <span class="nc">Job</span> <span class="k">of</span> <span class="nc">JobRequest</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="nc">T</span><span class="o">&gt;</span>
    <span class="o">|</span> <span class="nc">End</span>

<span class="k">let</span> <span class="k">inline</span> <span class="n">doParallelWithThrottle</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">,</span> <span class="k">&#39;</span><span class="n">b</span><span class="o">&gt;</span> <span class="n">limit</span> <span class="n">f</span> <span class="n">items</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">itemArray</span> <span class="o">=</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toArray</span> <span class="n">items</span>
    <span class="k">let</span> <span class="n">itemCount</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">length</span> <span class="n">itemArray</span>
    <span class="k">let</span> <span class="n">resultMap</span> <span class="o">=</span> <span class="nc">ConcurrentDictionary</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">,</span> <span class="k">&#39;</span><span class="n">b</span><span class="o">&gt;</span><span class="bp">()</span>
    <span class="k">use</span> <span class="n">block</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BlockingCollection</span><span class="o">&lt;</span><span class="nc">WorkRequest</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;&gt;(</span><span class="mi">1</span><span class="o">)</span>
    <span class="k">use</span> <span class="n">completeBlock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BlockingCollection</span><span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;(</span><span class="mi">1</span><span class="o">)</span>
    <span class="k">let</span> <span class="n">monitor</span> <span class="o">=</span> 
        <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span><span class="k">fun</span> <span class="n">inbox</span> <span class="o">-&gt;</span>
            <span class="k">let</span> <span class="k">rec</span> <span class="n">inner</span> <span class="n">complete</span> <span class="o">=</span>
                <span class="n">async</span> <span class="o">{</span>
                    <span class="k">do</span><span class="o">!</span> <span class="n">inbox</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
                    <span class="k">if</span> <span class="n">complete</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">=</span> <span class="n">limit</span> <span class="k">then</span>
                        <span class="n">completeBlock</span><span class="o">.</span><span class="nc">Add</span><span class="o">(</span><span class="bp">()</span><span class="o">)</span>
                        <span class="k">return</span> <span class="bp">()</span>
                    <span class="k">else</span>
                        <span class="k">return</span><span class="o">!</span> <span class="n">inner</span> <span class="o">&lt;|</span> <span class="n">complete</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="o">}</span>
            <span class="n">inner</span> <span class="mi">0</span><span class="o">)</span>
    <span class="k">let</span> <span class="n">createAgent</span> <span class="bp">()</span> <span class="o">=</span>
        <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span>
            <span class="k">fun</span> <span class="n">inbox</span> <span class="o">-&gt;</span>
                <span class="k">let</span> <span class="k">rec</span> <span class="n">inner</span> <span class="bp">()</span> <span class="o">=</span> <span class="n">async</span> <span class="o">{</span>
                        <span class="k">let</span><span class="o">!</span> <span class="n">request</span> <span class="o">=</span> <span class="n">async</span> <span class="o">{</span> <span class="k">return</span> <span class="n">block</span><span class="o">.</span><span class="nc">Take</span><span class="bp">()</span> <span class="o">}</span>
                        <span class="k">match</span> <span class="n">request</span> <span class="k">with</span>
                        <span class="o">|</span> <span class="nc">Job</span> <span class="n">job</span> <span class="o">-&gt;</span>
                            <span class="k">let</span><span class="o">!</span> <span class="n">result</span> <span class="o">=</span> <span class="n">async</span> <span class="o">{</span> <span class="k">return</span> <span class="n">f</span> <span class="o">(</span><span class="n">job</span><span class="o">.</span><span class="nc">WorkItem</span><span class="o">)</span> <span class="o">}</span>
                            <span class="n">resultMap</span><span class="o">.</span><span class="nc">AddOrUpdate</span><span class="o">(</span><span class="n">job</span><span class="o">.</span><span class="nc">Id</span><span class="o">,</span> <span class="n">result</span><span class="o">,</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">result</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
                            <span class="k">return</span><span class="o">!</span> <span class="n">inner</span> <span class="bp">()</span>
                        <span class="o">|</span> <span class="nc">End</span>  <span class="o">-&gt;</span>
                            <span class="n">monitor</span><span class="o">.</span><span class="nc">Post</span> <span class="bp">()</span>                            
                            <span class="k">return</span> <span class="bp">()</span>
                    <span class="o">}</span>
                <span class="n">inner</span> <span class="bp">()</span>
        <span class="o">)</span>
    <span class="k">let</span> <span class="n">agents</span> <span class="o">=</span>
        <span class="o">[|</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..</span><span class="n">limit</span> <span class="o">-&gt;</span> <span class="n">createAgent</span><span class="bp">()</span> <span class="o">|]</span>
    <span class="n">itemArray</span>
    <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">mapi</span> <span class="o">(</span><span class="k">fun</span> <span class="n">i</span> <span class="n">item</span> <span class="o">-&gt;</span> <span class="nc">Job</span> <span class="o">{</span> <span class="nc">Id</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span> <span class="nc">WorkItem</span> <span class="o">=</span> <span class="n">item</span> <span class="o">})</span>
    <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="n">block</span><span class="o">.</span><span class="nc">Add</span><span class="o">)</span>

    <span class="o">[</span><span class="mi">1</span><span class="o">..</span><span class="n">limit</span><span class="o">]</span>
    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">block</span><span class="o">.</span><span class="nc">Add</span><span class="o">(</span><span class="nc">End</span><span class="o">))</span>

    <span class="n">completeBlock</span><span class="o">.</span><span class="nc">Take</span><span class="bp">()</span>
    <span class="k">let</span> <span class="n">results</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">zeroCreate</span> <span class="n">itemCount</span>
    <span class="n">resultMap</span>
    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">kv</span> <span class="o">-&gt;</span> <span class="n">results</span><span class="o">.[</span><span class="n">kv</span><span class="o">.</span><span class="nc">Key</span><span class="o">]</span> <span class="o">&lt;-</span> <span class="n">kv</span><span class="o">.</span><span class="nc">Value</span><span class="o">)</span>
    <span class="n">results</span>
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fake Part 2: Build and test]]></title>
    <link href="https://blog.mavnn.co.uk/fake-part-2-build-and-test/index.html"/>
    <updated>2013-02-13T00:00:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/fake-part-2-build-and-test/fake-part-2-build-and-test</id>
    <content type="html"><![CDATA[<p>The introduction to this series can be found at <a href="https//blog.mavnn.co.uk/getting-started-with-fake-an-introduction-tag">https//blog.mavnn.co.uk/getting-started-with-fake-an-introduction-tag</a> or just check out my Fake tag.</p>

<p><strong>The scenario</strong></p>

<p>So, you've written your brave new F# 3.0 solution, and now you want to build, test and package it with a shared build setup between your CI environment (which, of course, doesn't have Visual Studio installed) and your developer's machines.</p>

<p><span style="font-size: 13px;">Hopefully this will walk you through most of the potential pitfalls you might find along the way.</span></p>

<p><span style="font-size: 13px;">This post has been written using an actual build.fsx script that we use for a utility project at <a href="http://15below.com" title="15below" target="_blank">15below</a>. We're hiring, so if you're interested in this kind of thing, drop me a line.</span></p>

<p><strong><span style="font-size: 13px;">Set up</span></strong></p>

<p><span style="font-size: 13px;">There is no installer for the F# 3 compiler, so we're going to be playing some games to support building on a TeamCity build agent without VS 2012 installed.</span></p>

<p><span style="font-size: 13px;">The script assumes a few things about your repository:</span></p>

<p>&nbsp;</p>

<ul>
<li><span style="font-size: 13px;">a tools directory with the same NuGet and FSharp directories as at <a href="https://github.com/fsharp/FAKE/tree/develop/tools">https://github.com/fsharp/FAKE/tree/develop/tools</a> (basically a recent nuget.exe in one, and a recent build of the open source F# compiler project in the other)</span></li>
<li><span style="font-size: 13px;">a tools/FAKE directory with a recent build of FAKE (I prefer to have a known version checked into git, but you can read instructions on how to bootstrap it via nuget at <a href="http://www.navision-blog.de/blog/2009/04/01/getting-started-with-fake-a-f-sharp-make-tool/)">http://www.navision-blog.de/blog/2009/04/01/getting-started-with-fake-a-f-sha...</a></span></li>
</ul>

<p>&nbsp;</p>

<p><span style="font-size: 13px;">From here on down is just a heavily commented build.fsx file. I was going to use FSharp.Formatting to nicely format this, but unfortunately the combination of FSharp.Formatting itself and Posterous have defeated me. Something to play with more at a later date.</span></p>

<p><span style="font-size: 13px;"><script src="https://gist.github.com/4944580.js"></script></span></p>

<p><span style="font-size: 13px;">Hopefully this example will give you a start on using FAKE in real projects.</span></p>

<p><span style="font-size: 13px;">In future posts I'd like to address some of the more esoteric bits and pieces we've been using FAKE for, such as building Octopus deployment packages, running integration tests (with full setup and database deployment) and running unit tests in parallel. Stay tuned...</span></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Fake - an introduction]]></title>
    <link href="https://blog.mavnn.co.uk/getting-started-with-fake-an-introduction-tag/index.html"/>
    <updated>2013-01-09T00:00:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/getting-started-with-fake-an-introduction-tag/getting-started-with-fake-an-introduction-tag</id>
    <content type="html"><![CDATA[<blockquote><p>This is the first post in what will be a series about how we moved to
using <a href="https://github.com/fsharp/FAKE">Fake</a> for our build and testing
at <a href="http://15below.com">15below</a>. Feel free to follow along for the
ride. It&rsquo;s partly there as a way of keeping the full development group
within the company informed of what&rsquo;s going on, so it will get pretty
detailed and gritty in the later sections, but we decided that there
wasn&rsquo;t anything too company specific in here. So we&rsquo;re sharing it with
you all&hellip;</p></blockquote>

<p>At my current employer, we have a wide range of code all the way from
automatically translated vb6 (to vb.net) to brand spanking new F# and
C#. At the end of the day though, everything runs on .net 4.0
(currently).</p>

<p>With the newer components, we could in theory be building and testing
them independently: messaging based and developed in a TDD style they
tend to have an existing test harness around them and be easy to add
further tests to if it proves necessary.</p>

<p>The legacy code on the other hand, is a bit of a different matter.
It&rsquo;s still in the code base because it works. We know it works,
because customers are using it and getting value from it. The bits
that didn&rsquo;t, or looked like they were getting flaky, are the bits that
have been refactored as we went along. But they are old enough that
what is now considered basic testing hygiene was still a little more
than a twinkle in Kent Beck&rsquo;s eye. (Ok, ok, so the book had been
released. But it wasn&rsquo;t exactly considered common best practice yet).
So until the refactoring work is complete, we&rsquo;re stuck with a system
where the only feasible way of testing some aspects of it is to
actually deploy it somewhere and run some jobs through.</p>

<p>So what does this all have to do with Fake?</p>

<p>Well, basically our continuous integration was getting out of control.
To get the level of functionality and control we needed, we were
ending up with somewhere in the region of 500 lines of re-entrant,
recursive MsBuild scripts. I seriously considered starting the
alt.ms.build.die.die.die newsgroup. A full build on a developer&rsquo;s
machine could take upwards of 45 minutes. Even more painfully, as the
refactoring continued we ended up with TeamCity build configurations
tightly coupled to specific versions of our software, and it was
becoming clear that the whole CI system was going to rapidly collapse
under it&rsquo;s own weight unless things changed.</p>

<p>We needed a solution.</p>

<p>It had to be:</p>

<ul>
<li>Powerful. Programming in MsBuild is&hellip; not fun. Xml is for data.</li>
<li>Storable in git along with our source code.</li>
<li>.net based. We&rsquo;re a .net shop, and our specialist knowledge is .net;
rake wasn&rsquo;t going to cut it. We also didn&rsquo;t want the management
overhead of even more tooling on the build agents.</li>
<li>In active development.</li>
<li>Preferably open source, so even if external development stopped we
could continue to maintain it.</li>
</ul>

<p>As both the company F# evangelist and one of the two people doing most
of the CI work, I was very interested to hear about Fake, especially
after having a chance to chat to it&rsquo;s author (<a href="https://twitter.com/sforkmann">Steffen
Forkmann</a>) and having it recommended by
Don Syme (who wrote F#).</p>

<p>It met all of the criteria above. It&rsquo;s scripts are full F# &ndash; a
language fully supported by Microsoft within it&rsquo;s flagship Visual
Studio product. The scripts can easily be stored in git. It&rsquo;s actively
being worked on, and accepting contributions as a fully open source
product.</p>

<p>Time to give it a try.</p>

<p>Next post: how to set up your &ldquo;HelloWorld.fsx&rdquo; Fake script with your
source, with all the niceties like intellisense that you would want.</p>
]]></content>
  </entry>
  
</feed>
