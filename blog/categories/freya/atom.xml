<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: freya | Mavnn's blog]]></title>
  <link href="https://blog.mavnn.co.uk/blog/categories/freya/atom.xml" rel="self"/>
  <link href="https://blog.mavnn.co.uk/"/>
  <updated>2017-12-08T16:11:37+00:00</updated>
  <id>https://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Logging Freya]]></title>
    <link href="https://blog.mavnn.co.uk/logging-freya/"/>
    <updated>2017-12-08T15:43:57+00:00</updated>
    <id>https://blog.mavnn.co.uk/logging-freya</id>
    <content type="html"><![CDATA[<p>Eugene Tolmachev asked in a comment on a previous post <a href="http://disq.us/p/1oeml1a">how I handle dependency injection</a> with <a href="https://freya.io/">Freya</a>.</p>

<p>So... my first, slightly annoying answer is that I try not to. Mark Seeman has written about this in a <a href="http://blog.ploeh.dk/2017/01/27/from-dependency-injection-to-dependency-rejection/">great series of blog posts</a> which I won&#39;t try and repeat here.</p>

<p>Still, there are occasions where you want to quickly and easily do... something.. with a dependency making use of the context that being inside a Freya workflow provides. Let&#39;s quickly walk through how I inject a logger into a Freya workflow which &quot;knows&quot; about things like the request ID Kestrel has assigned to the current request.</p>

<p>I&#39;m going to use Serilog as an example below, but you could also use any other structured logging library (I like Logary, but there isn&#39;t a .NET Core release at time of writing).</p>

<!-- more -->

<p>I&#39;ll annotate the code inline to give you an idea what it&#39;s doing.</p>

<p>So; our first module is shared code which you&#39;ll probably want to reuse across all of your Freya services. Put it in a separate .fs file (it assumes Serilog has been taken as a dependency).</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nc">Logging</span>

<span class="k">open</span> <span class="nn">Aether</span><span class="p">.</span><span class="nc">Operators</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nc">Core</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nc">Optics</span>
<span class="k">open</span> <span class="nc">Serilog</span>
<span class="k">open</span> <span class="nn">Serilog</span><span class="p">.</span><span class="nc">Context</span>
<span class="k">open</span> <span class="nn">Serilog</span><span class="p">.</span><span class="nc">Configuration</span>

<span class="c1">// We&#39;ll expand the Request module with two news Optics;</span>
<span class="c1">// one uses the &quot;RequestId&quot; constant defined by the Owin</span>
<span class="c1">// specification to extract the ID assigned to this request.</span>
<span class="c1">// The other we&#39;ll define in the &quot;serilog&quot; name space in the</span>
<span class="c1">// Freya context Dictionary (all owin keys start &quot;owin.&quot;)</span>
<span class="o">[&lt;</span><span class="nc">RequireQualifiedAccess</span><span class="o">&gt;]</span>
<span class="k">module</span> <span class="nc">Request</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">requestId_</span> <span class="o">=</span>
            <span class="nn">State</span><span class="p">.</span><span class="n">value_</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;</span> <span class="nn">Constants</span><span class="p">.</span><span class="nc">RequestId</span>
        <span class="o">&gt;-&gt;</span> <span class="nn">Option</span><span class="p">.</span><span class="n">unsafe_</span>

    <span class="c1">// An optic for focussing on an ILogger in the Freya</span>
    <span class="c1">// state. That&#39;s great, but how does the ILogger get</span>
    <span class="c1">// there? Read on...</span>
    <span class="k">let</span> <span class="n">logger_</span> <span class="o">=</span>
            <span class="nn">State</span><span class="p">.</span><span class="n">value_</span><span class="o">&lt;</span><span class="nc">ILogger</span><span class="o">&gt;</span> <span class="s2">&quot;serilog.logger&quot;</span>
        <span class="o">&gt;-&gt;</span> <span class="nn">Option</span><span class="p">.</span><span class="n">unsafe_</span>

<span class="c1">// As a structured logging library, you can attach an</span>
<span class="c1">// array of &quot;values&quot; to a Serilog event - we&#39;ll use this</span>
<span class="c1">// helper to give us a more &quot;F#ish&quot; API</span>
<span class="k">type</span> <span class="nc">SerilogContext</span> <span class="o">=</span>
    <span class="o">{</span> <span class="nc">Template</span> <span class="o">:</span> <span class="kt">string</span>
      <span class="nc">Values</span> <span class="o">:</span> <span class="n">obj</span> <span class="kt">list</span> <span class="o">}</span>

<span class="o">[&lt;</span><span class="nc">RequireQualifiedAccess</span><span class="o">&gt;]</span>
<span class="k">module</span> <span class="nc">Log</span> <span class="o">=</span>
    <span class="c1">// Extract the request ID once per request</span>
    <span class="k">let</span> <span class="k">private</span> <span class="n">rid</span> <span class="o">=</span>
        <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="n">requestId_</span>
        <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">memo</span>

    <span class="c1">// Extract the ILogger once per request</span>
    <span class="k">let</span> <span class="k">private</span> <span class="n">ilogger</span> <span class="o">=</span>
        <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="n">logger_</span>
        <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">memo</span>

    <span class="c1">// A method to inject an ILogger *into* the Freya</span>
    <span class="c1">// state</span>
    <span class="k">let</span> <span class="n">injectLogger</span> <span class="o">(</span><span class="n">config</span> <span class="o">:</span> <span class="nc">LoggerConfiguration</span><span class="o">)</span> <span class="o">=</span>
        <span class="k">let</span> <span class="n">logger</span> <span class="o">=</span>
            <span class="n">config</span>
                <span class="o">.</span><span class="nn">Enrich</span><span class="p">.</span><span class="nc">FromLogContext</span><span class="bp">()</span>
                <span class="o">.</span><span class="nc">CreateLogger</span><span class="bp">()</span>
            <span class="o">:&gt;</span> <span class="nc">ILogger</span>
        <span class="n">freya</span> <span class="o">{</span>
            <span class="k">do</span><span class="o">!</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">set</span> <span class="nn">Request</span><span class="p">.</span><span class="n">logger_</span> <span class="n">logger</span>
            <span class="k">return</span> <span class="nc">Next</span>
        <span class="o">}</span>

    <span class="c1">// From here on in is just an F# friendly wrapper</span>
    <span class="c1">// around Serilog.</span>

    <span class="c1">// Start building up a new log message with a</span>
    <span class="c1">// message template</span>
    <span class="k">let</span> <span class="n">message</span> <span class="n">template</span> <span class="o">=</span>
        <span class="o">{</span> <span class="nc">Template</span> <span class="o">=</span> <span class="n">template</span>
          <span class="nc">Values</span> <span class="o">=</span> <span class="bp">[]</span> <span class="o">}</span>

    <span class="c1">// Add a value to the message context</span>
    <span class="k">let</span> <span class="n">add</span> <span class="n">value</span> <span class="n">context</span> <span class="o">=</span>
        <span class="o">{</span> <span class="n">context</span> <span class="k">with</span> <span class="nc">Values</span> <span class="o">=</span> <span class="o">(</span><span class="n">box</span> <span class="n">value</span><span class="o">)::</span><span class="n">context</span><span class="o">.</span><span class="nc">Values</span> <span class="o">}</span>

    <span class="c1">// Function that knows how to send a message with all of the</span>
    <span class="c1">// values correctly associated, and the requestId set</span>
    <span class="k">let</span> <span class="k">private</span> <span class="n">send</span> <span class="n">f</span> <span class="n">context</span> <span class="o">=</span>
        <span class="n">freya</span> <span class="o">{</span>
            <span class="k">let</span><span class="o">!</span> <span class="n">requestId</span> <span class="o">=</span> <span class="n">rid</span>
            <span class="k">let</span><span class="o">!</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">ilogger</span>
            <span class="n">using</span>
                <span class="o">(</span><span class="nn">LogContext</span><span class="p">.</span><span class="nc">PushProperty</span><span class="o">(</span><span class="s2">&quot;RequestId&quot;</span><span class="o">,</span> <span class="n">requestId</span><span class="o">))</span>
                <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
                     <span class="k">let</span> <span class="n">values</span> <span class="o">=</span>
                         <span class="n">context</span><span class="o">.</span><span class="nc">Values</span>
                         <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">toArray</span>
                         <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">rev</span>
                     <span class="n">f</span> <span class="n">logger</span> <span class="n">context</span><span class="o">.</span><span class="nc">Template</span> <span class="n">values</span><span class="o">)</span>
        <span class="o">}</span>

    <span class="c1">// The four standard log levels</span>
    <span class="k">let</span> <span class="n">debug</span> <span class="n">context</span> <span class="o">=</span>
        <span class="k">let</span> <span class="n">f</span> <span class="o">(</span><span class="n">logger</span> <span class="o">:</span> <span class="nc">ILogger</span><span class="o">)</span> <span class="n">template</span> <span class="o">(</span><span class="n">values</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
            <span class="n">logger</span><span class="o">.</span><span class="nc">Debug</span><span class="o">(</span><span class="n">template</span><span class="o">,</span> <span class="n">values</span><span class="o">)</span>
        <span class="n">send</span> <span class="n">f</span> <span class="n">context</span>

    <span class="k">let</span> <span class="n">info</span> <span class="n">context</span> <span class="o">=</span>
        <span class="k">let</span> <span class="n">f</span> <span class="o">(</span><span class="n">logger</span> <span class="o">:</span> <span class="nc">ILogger</span><span class="o">)</span> <span class="n">template</span> <span class="o">(</span><span class="n">values</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
            <span class="n">logger</span><span class="o">.</span><span class="nc">Information</span><span class="o">(</span><span class="n">template</span><span class="o">,</span> <span class="n">values</span><span class="o">)</span>
        <span class="n">send</span> <span class="n">f</span> <span class="n">context</span>

    <span class="k">let</span> <span class="n">warn</span> <span class="n">context</span> <span class="o">=</span>
        <span class="k">let</span> <span class="n">f</span> <span class="o">(</span><span class="n">logger</span> <span class="o">:</span> <span class="nc">ILogger</span><span class="o">)</span> <span class="n">template</span> <span class="o">(</span><span class="n">values</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
            <span class="n">logger</span><span class="o">.</span><span class="nc">Warning</span><span class="o">(</span><span class="n">template</span><span class="o">,</span> <span class="n">values</span><span class="o">)</span>
        <span class="n">send</span> <span class="n">f</span> <span class="n">context</span>

    <span class="k">let</span> <span class="n">error</span> <span class="n">context</span> <span class="o">=</span>
        <span class="k">let</span> <span class="n">f</span> <span class="o">(</span><span class="n">logger</span> <span class="o">:</span> <span class="nc">ILogger</span><span class="o">)</span> <span class="n">template</span> <span class="o">(</span><span class="n">values</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
            <span class="n">logger</span><span class="o">.</span><span class="nc">Error</span><span class="o">(</span><span class="n">template</span><span class="o">,</span> <span class="n">values</span><span class="o">)</span>
        <span class="n">send</span> <span class="n">f</span> <span class="n">context</span>
</code></pre></div>
<p>So that&#39;s great and all... but how and where do we actually call that <code>injectLogger</code> function?</p>

<p>Well, that goes in your application root where you build your final Freya app.</p>

<p>Mine normally ends up looking something like this:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">root</span> <span class="n">logConfig</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">routes</span> <span class="o">=</span>
        <span class="n">freyaRouter</span> <span class="o">{</span> <span class="c">(* My resources here *)</span> <span class="o">}</span>
    <span class="nn">Log</span><span class="p">.</span><span class="n">injectLogger</span> <span class="n">logConfig</span>
    <span class="o">|&gt;</span> <span class="o">(</span><span class="n">flip</span> <span class="nn">Pipeline</span><span class="p">.</span><span class="n">compose</span><span class="o">)</span> <span class="n">routes</span>
    <span class="o">|&gt;</span> <span class="o">(</span><span class="n">flip</span> <span class="nn">Pipeline</span><span class="p">.</span><span class="n">compose</span><span class="o">)</span> <span class="n">notFound</span>
</code></pre></div>
<p>Because <code>injectLogger</code> returns a Freya <code>Pipeline</code> type which <em>always</em> passes handling onto the next step in the pipeline, all that first step does is add in a newly initialized ILogger to the Freya state, and then passes things on down the chain as normal.</p>

<p>In your Freya code, logging looks like this:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">notFoundResponse</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">path</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="n">path_</span>
        <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Why am I logging a GUID like this one {guid} on requests to {path}?&quot;</span>
            <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">add</span> <span class="o">(</span><span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">)</span>
            <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">add</span> <span class="n">path</span>
            <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">info</span>
        <span class="k">return</span> <span class="n">representJson</span> <span class="s2">&quot;We couldn&#39;t find that&quot;</span>
    <span class="o">}</span>
</code></pre></div>
<p>Notice that <code>do!</code> is required for logging now, as our log methods have type <code>Freya&lt;unit&gt;</code>. This is what allows us to add the request specific context to our logs without explicitly having to append it ourselves every time.</p>

<p>I&#39;m not sure if this strictly answers Eugene&#39;s question, but I hope all you (potential) Freya users out there find it helpful regardless.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[POSTing to Freya]]></title>
    <link href="https://blog.mavnn.co.uk/posting-to-freya/"/>
    <updated>2017-10-25T15:52:57+01:00</updated>
    <id>https://blog.mavnn.co.uk/posting-to-freya</id>
    <content type="html"><![CDATA[<p>I&#39;ve written about how nice Freya is as a library, but documentation is still a little light on the ground.</p>

<p>So here&#39;s a minimal implementation of a &quot;microservice&quot; Freya API, starting from which dotnet commands to run to install the Freya template, through to a running web service.</p>

<p>Make sure you have an up to date .NET Core SDK installed, and grab yourself the handy dandy Freya template:</p>
<div class="highlight"><pre><code class="bash">dotnet new -i <span class="s2">&quot;Freya.Template::*&quot;</span>
</code></pre></div>
<p>Then create yourself a directory and go into it. The following command will set up a brand new Freya project using kestrel as the underlying webserver, and Hopac (rather than F# Async) for concurrency. Alternatively, you can leave both the options off and you&#39;ll get Freya running on Suave with standard Async.</p>
<div class="highlight"><pre><code class="bash">dotnet new freya --framework kestrel --concurrency hopac
</code></pre></div>
<p>Your project should run at this point; <code>dotnet run</code> will spin up a webserver on port 5000 which will give a 404 at the root and text responses on /hello and /hello/name paths.</p>

<p>Api.fs is where all the magic of configuring Freya happens - KestrelInterop.fs contains boilerplate for making sure Routing information passes correctly between Kestrel and Freya, and Program.fs just starts Kestrel with our Freya API as an OWIN app.</p>

<h3>Adding JSON</h3>

<p>So, this is great and all, but we&#39;re building a microservice aren&#39;t we? That normally means JSON (or at least something more structured than plain text!).</p>

<p>Let&#39;s change things up so that as well as supplying the name to greet in the route, we can POST JSON with a name field to the /hello end point.</p>

<p>To respond in JSON, we need a Freya <code>Represent</code> record. We&#39;re sending a result with a fixed structure, so we don&#39;t need a serialization library or anything, we&#39;ll just construct the JSON by hand. Stick this near the top of Api.fs:</p>

<!-- more -->
<div class="highlight"><pre><code class="fsharp"><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Text</span>
<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Text</span><span class="p">.</span><span class="nc">RegularExpressions</span>

<span class="k">let</span> <span class="n">representGreeting</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">before</span> <span class="o">=</span>
        <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;{ </span><span class="se">\&quot;</span><span class="s2">greeting</span><span class="se">\&quot;</span><span class="s2">: </span><span class="se">\&quot;</span><span class="s2">&quot;</span>
    <span class="k">let</span> <span class="n">after</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2"> }&quot;</span>
    <span class="k">let</span> <span class="n">extremeSanifier</span> <span class="o">=</span>
        <span class="nn">RegularExpressions</span><span class="p">.</span><span class="nc">Regex</span><span class="o">(</span><span class="s2">&quot;[^a-z0-9 ]&quot;</span><span class="o">,</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">Compiled</span> <span class="o">|||</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">IgnoreCase</span><span class="o">)</span>
    <span class="k">fun</span> <span class="n">name</span> <span class="o">-&gt;</span>
        <span class="k">let</span> <span class="n">safeNameBytes</span> <span class="o">=</span>
            <span class="n">extremeSanifier</span><span class="o">.</span><span class="nc">Replace</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">)</span>
            <span class="o">|&gt;</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span>
        <span class="o">{</span> <span class="nc">Description</span> <span class="o">=</span>
            <span class="o">{</span> <span class="nc">Charset</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">Charset</span><span class="p">.</span><span class="nc">Utf8</span>
              <span class="nc">Encodings</span> <span class="o">=</span> <span class="nc">None</span>
              <span class="nc">MediaType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span>
              <span class="nc">Languages</span> <span class="o">=</span> <span class="nc">None</span> <span class="o">}</span>
          <span class="nc">Data</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">concat</span> <span class="o">[</span><span class="n">before</span><span class="o">;</span><span class="n">safeNameBytes</span><span class="o">;</span><span class="n">after</span><span class="o">]</span> <span class="o">}</span>
</code></pre></div>
<p>So here we&#39;re defining an HTTP representation of a response, including media type and other important information.</p>

<p>Aside: why do we return a lambda at the end rather than making representGreeting itself a function? That&#39;s so that we don&#39;t want to rebuild the two byte arrays and the regex every time we call the function.</p>

<p>We also need to be able to read incoming JSON. Well, all we want is a string so lets just check that there&#39;s an &#39;&quot;&#39; at the beginning and end...</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>

<span class="k">let</span> <span class="n">grabString</span> <span class="o">(</span><span class="n">bodyStream</span> <span class="o">:</span> <span class="o">#</span><span class="nc">Stream</span><span class="o">)</span> <span class="o">=</span>
    <span class="k">use</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamReader</span><span class="o">(</span><span class="n">bodyStream</span><span class="o">)</span>
    <span class="k">match</span> <span class="n">reader</span><span class="o">.</span><span class="nc">ReadToEnd</span><span class="bp">()</span> <span class="k">with</span>
    <span class="o">|</span> <span class="n">str</span> <span class="k">when</span> <span class="n">str</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="o">.[</span><span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">-&gt;</span>
        <span class="nc">Some</span> <span class="o">&lt;|</span> <span class="n">str</span><span class="o">.</span><span class="nc">Substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">2</span><span class="o">)</span>
    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nc">None</span>
</code></pre></div>
<p>Now we can start hooking up the actual root that we want. We need to make some additions to <code>helloMachine</code>:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">helloMachine</span> <span class="o">=</span>
    <span class="n">freyaMachine</span> <span class="o">{</span>
        <span class="c1">// methods [GET; HEAD; OPTIONS]</span>
        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">;</span> <span class="nc">POST</span><span class="o">]</span>
        <span class="n">acceptableMediaTypes</span> <span class="o">[</span><span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span><span class="o">]</span>
        <span class="n">handleOk</span> <span class="n">sayHello</span> <span class="o">}</span>
</code></pre></div>
<p>Magically our endpoint now knows not only that we accept POSTs, but it will end the correct error code if the media type of the POST is not set to JSON.</p>

<p>We also need to update <code>sayHello</code> and <code>name</code>; we&#39;ll extract the method of the request and choose logic for working out the name and creating the response respectively.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">name_</span> <span class="o">=</span> <span class="nn">Route</span><span class="p">.</span><span class="n">atom_</span> <span class="s2">&quot;name&quot;</span>
<span class="k">let</span> <span class="n">method_</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">method_</span>

<span class="k">let</span> <span class="n">name</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">nameO</span> <span class="o">=</span>
            <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
            <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
                <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">body_</span>
                <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">map</span> <span class="n">grabString</span>
            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">name_</span>

        <span class="k">match</span> <span class="n">nameO</span> <span class="k">with</span>
        <span class="o">|</span> <span class="nc">Some</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">name</span>
        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="s2">&quot;World&quot;</span> <span class="o">}</span>

<span class="k">let</span> <span class="n">representResponse</span> <span class="n">greeting</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
        <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
        <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
            <span class="k">return</span> <span class="n">representGreeting</span> <span class="n">greeting</span>
        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
            <span class="k">return</span> <span class="nn">Represent</span><span class="p">.</span><span class="n">text</span> <span class="n">greeting</span>
    <span class="o">}</span>
</code></pre></div>
<p>And that&#39;s everything we should need. Firing up <a href="https://www.getpostman.com/">PostMan</a> we can find out that posting an empty body gets a 500 (we should probably handle that, looks like the request stream can be null), firing in a string with no media type header gets back a &quot;415 Unsupported Media Type&quot; (did you know that off hand?) and a POST with a correct body (i.e., starts and ends with a &#39;&quot;&#39;) gets us back:</p>
<div class="highlight"><pre><code class="json"><span class="p">{</span> <span class="nt">&quot;greeting&quot;</span><span class="p">:</span> <span class="s2">&quot;Hello michael&quot;</span> <span class="p">}</span>
</code></pre></div>
<p>So there you have it. Adding a POST endpoint to Freya.</p>

<h3>Appendix</h3>

<p>Here is the complete Api.fs for you to follow along, with open statements moved to the top of the file:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nc">Api</span>

<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Text</span>
<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Text</span><span class="p">.</span><span class="nc">RegularExpressions</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nc">Core</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Machines</span><span class="p">.</span><span class="nc">Http</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Types</span><span class="p">.</span><span class="nc">Http</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Routers</span><span class="p">.</span><span class="nn">Uri</span><span class="p">.</span><span class="nc">Template</span>

<span class="k">let</span> <span class="n">representGreeting</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">before</span> <span class="o">=</span>
        <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;{ </span><span class="se">\&quot;</span><span class="s2">greeting</span><span class="se">\&quot;</span><span class="s2">: </span><span class="se">\&quot;</span><span class="s2">&quot;</span>
    <span class="k">let</span> <span class="n">after</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2"> }&quot;</span>
    <span class="k">let</span> <span class="n">extremeSanifier</span> <span class="o">=</span>
        <span class="nn">RegularExpressions</span><span class="p">.</span><span class="nc">Regex</span><span class="o">(</span><span class="s2">&quot;[^a-z0-9 ]&quot;</span><span class="o">,</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">Compiled</span> <span class="o">|||</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">IgnoreCase</span><span class="o">)</span>
    <span class="k">fun</span> <span class="n">name</span> <span class="o">-&gt;</span>
        <span class="k">let</span> <span class="n">safeNameBytes</span> <span class="o">=</span>
            <span class="n">extremeSanifier</span><span class="o">.</span><span class="nc">Replace</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">)</span>
            <span class="o">|&gt;</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span>
        <span class="o">{</span> <span class="nc">Description</span> <span class="o">=</span>
            <span class="o">{</span> <span class="nc">Charset</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">Charset</span><span class="p">.</span><span class="nc">Utf8</span>
              <span class="nc">Encodings</span> <span class="o">=</span> <span class="nc">None</span>
              <span class="nc">MediaType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span>
              <span class="nc">Languages</span> <span class="o">=</span> <span class="nc">None</span> <span class="o">}</span>
          <span class="nc">Data</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">concat</span> <span class="o">[</span><span class="n">before</span><span class="o">;</span><span class="n">safeNameBytes</span><span class="o">;</span><span class="n">after</span><span class="o">]</span> <span class="o">}</span>

<span class="k">let</span> <span class="n">grabString</span> <span class="o">(</span><span class="n">bodyStream</span> <span class="o">:</span> <span class="o">#</span><span class="nc">Stream</span><span class="o">)</span> <span class="o">=</span>
    <span class="k">use</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamReader</span><span class="o">(</span><span class="n">bodyStream</span><span class="o">)</span>
    <span class="k">match</span> <span class="n">reader</span><span class="o">.</span><span class="nc">ReadToEnd</span><span class="bp">()</span> <span class="k">with</span>
    <span class="o">|</span> <span class="n">str</span> <span class="k">when</span> <span class="n">str</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="o">.[</span><span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">-&gt;</span>
        <span class="nc">Some</span> <span class="o">&lt;|</span> <span class="n">str</span><span class="o">.</span><span class="nc">Substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">2</span><span class="o">)</span>
    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nc">None</span>


<span class="k">let</span> <span class="n">name_</span> <span class="o">=</span> <span class="nn">Route</span><span class="p">.</span><span class="n">atom_</span> <span class="s2">&quot;name&quot;</span>
<span class="k">let</span> <span class="n">method_</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">method_</span>

<span class="k">let</span> <span class="n">name</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">nameO</span> <span class="o">=</span>
            <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
            <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
                <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">body_</span>
                <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">map</span> <span class="n">grabString</span>
            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">name_</span>

        <span class="k">match</span> <span class="n">nameO</span> <span class="k">with</span>
        <span class="o">|</span> <span class="nc">Some</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">name</span>
        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="s2">&quot;World&quot;</span> <span class="o">}</span>

<span class="k">let</span> <span class="n">representResponse</span> <span class="n">greeting</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
        <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
        <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
            <span class="k">return</span> <span class="n">representGreeting</span> <span class="n">greeting</span>
        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
            <span class="k">return</span> <span class="nn">Represent</span><span class="p">.</span><span class="n">text</span> <span class="n">greeting</span>
    <span class="o">}</span>

<span class="k">let</span> <span class="n">sayHello</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">name</span> <span class="o">=</span> <span class="n">name</span>

        <span class="k">return</span><span class="o">!</span> <span class="n">representResponse</span> <span class="o">(</span><span class="n">sprintf</span> <span class="s2">&quot;Hello, %s!&quot;</span> <span class="n">name</span><span class="o">)</span> <span class="o">}</span>

<span class="k">let</span> <span class="n">helloMachine</span> <span class="o">=</span>
    <span class="n">freyaMachine</span> <span class="o">{</span>
        <span class="c1">// methods [GET; HEAD; OPTIONS]</span>
        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">;</span> <span class="nc">POST</span><span class="o">]</span>
        <span class="n">acceptableMediaTypes</span> <span class="o">[</span><span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span><span class="o">]</span>
        <span class="n">handleOk</span> <span class="n">sayHello</span> <span class="o">}</span>

<span class="k">let</span> <span class="n">root</span> <span class="o">=</span>
    <span class="n">freyaRouter</span> <span class="o">{</span>
        <span class="n">resource</span> <span class="s2">&quot;/hello{/name}&quot;</span> <span class="n">helloMachine</span> <span class="o">}</span>
</code></pre></div>]]></content>
  </entry>
  
</feed>
