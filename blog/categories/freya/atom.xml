<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: freya | Mavnn's blog]]></title>
  <link href="https://blog.mavnn.co.uk/blog/categories/freya/atom.xml" rel="self"/>
  <link href="https://blog.mavnn.co.uk/"/>
  <updated>2020-03-20T20:35:10+00:00</updated>
  <id>https://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Full Stack with Freya]]></title>
    <link href="https://blog.mavnn.co.uk/full-stack-with-freya/"/>
    <updated>2018-05-22T15:04:00+01:00</updated>
    <id>https://blog.mavnn.co.uk/full-stack-with-freya</id>
    <content type="html"><![CDATA[<p>Yesterday night I was about to demo a quick server/client pair with Freya and Fable, and it all went a bit wrong. Some of the issues weren&#39;t related to what I did (computers, gotta love &#39;em) but others were just bits of configuration that I didn&#39;t have at my finger tips.</p>

<p>This means it&#39;s time for a little practice for me, and a mini-tutorial for you (and future me).</p>

<!-- more -->

<h2>What we&#39;re going to do</h2>

<p>We&#39;re going to build a small server application based on Freya which will serve JSON and be a nice RESTful (in the loose sense) API.</p>

<p>Then, we&#39;re going to configure Fable with Elmish to load data from that API. The crucial thing here is that we&#39;re going to configure both projects such that we have a seamless development work flow; automated recompile and restart of the server on code changes, and automatic recompile/reload of the Fable UI on change.</p>

<h2>The server</h2>

<p>Make sure your dotnet core Freya template is up to date:</p>
<div class="highlight"><pre><code class="bash">dotnet new -i Freya
</code></pre></div>
<p>In a root directory for our overall solution, run:</p>
<div class="highlight"><pre><code class="bash">dotnet new freya -lang f# -c hopac -f kestrel -o FateServer
</code></pre></div>
<p>This will create a new directory called &quot;FateServer&quot; with a F# project in it. Go into the directory and make sure everything has restored correctly:</p>
<div class="highlight"><pre><code class="bash"><span class="nb">cd </span>FateServer
dotnet restore
dotnet build
</code></pre></div>
<p>One thing I&#39;ve been slowly learning with dotnet core is that the <code>restore</code> run by default during a build doesn&#39;t always seem to be as effective as actually running the full restore command. Just in general, if Core is behaving strangely, running <code>restore</code> is a good starting point.</p>

<p>Next up is making our server log something: by default, Kestrel logs basically nothing.</p>

<p>Install the logging package (it&#39;s not part of the default Freya template):</p>
<div class="highlight"><pre><code class="bash">dotnet add package Microsoft.Extensions.Logging.Console
dotnet restore
</code></pre></div>
<p>In <code>Program.fs</code> add the following at the end of the open statements:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">AspNetCore</span><span class="p">.</span><span class="nc">Builder</span>
<span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">AspNetCore</span><span class="p">.</span><span class="nc">Hosting</span>
<span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">Extensions</span><span class="p">.</span><span class="nc">Logging</span>

<span class="k">let</span> <span class="n">configureLogging</span> <span class="o">(</span><span class="n">b</span> <span class="o">:</span> <span class="nc">IWebHostBuilder</span><span class="o">)</span> <span class="o">=</span>
    <span class="n">b</span><span class="o">.</span><span class="nc">ConfigureLogging</span><span class="o">(</span><span class="k">fun</span> <span class="n">l</span> <span class="o">-&gt;</span> <span class="n">l</span><span class="o">.</span><span class="nc">AddConsole</span><span class="bp">()</span> <span class="o">|&gt;</span> <span class="n">ignore</span><span class="o">)</span>
</code></pre></div>
<p>Then inject the method into your WebHost configuration pipeline:</p>
<div class="highlight"><pre><code class="fsharp">    <span class="nn">WebHost</span><span class="p">.</span><span class="n">create</span> <span class="bp">()</span>
    <span class="o">|&gt;</span> <span class="nn">WebHost</span><span class="p">.</span><span class="n">bindTo</span> <span class="o">[|</span><span class="s2">&quot;http://localhost:5000&quot;</span><span class="o">|]</span>
    <span class="o">|&gt;</span> <span class="nn">WebHost</span><span class="p">.</span><span class="n">configure</span> <span class="n">configureApp</span>
    <span class="o">|&gt;</span> <span class="n">configureLogging</span>
    <span class="o">|&gt;</span> <span class="nn">WebHost</span><span class="p">.</span><span class="n">buildAndRun</span>
</code></pre></div>
<p>Hey presto! Run your application and get logs!</p>

<p>To finish off the niceties of civilized development, let&#39;s add the watch command to our server.</p>

<p>Crack open the <code>fsproj</code> file and add the following ItemGroup to it:</p>
<div class="highlight"><pre><code class="xml"><span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;DotNetCliToolReference</span> <span class="na">Include=</span><span class="s">&quot;Microsoft.DotNet.Watcher.Tools&quot;</span> <span class="na">Version=</span><span class="s">&quot;2.0.0&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/ItemGroup&gt;</span> 
</code></pre></div>
<p>Run <code>dotnet restore</code> and from now on running <code>dotnet watch run</code> to start continuous development with file watching should work.</p>

<p>Now we just need to serve up some JSON. We want a send a format which Fable understands, and the kind people at the Fable project have written a Newtonsoft configuration for doing exactly that.</p>

<p>Stop watching the build long enough to run:</p>
<div class="highlight"><pre><code class="bash">dotnet add package Fable.JsonConverter
dotnet restore
</code></pre></div>
<p>Next, set up the domain. Create a new file <code>Character.fs</code> (we&#39;re going to be sending back and forth <a href="https://fate-srd.com/fate-accelerated/get-started">Fate Accelerated</a> characters as data). Make sure you add it to the project file before <code>Api.fs</code>.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nc">Character</span>

<span class="k">type</span> <span class="nc">LadderLevel</span> <span class="o">=</span>
    <span class="o">|</span> <span class="nc">BeyondLegendary</span> <span class="k">of</span> <span class="kt">int</span>
    <span class="o">|</span> <span class="nc">Legendary</span>
    <span class="o">|</span> <span class="nc">Epic</span>
    <span class="o">|</span> <span class="nc">Superb</span>
    <span class="o">|</span> <span class="nc">Great</span>
    <span class="o">|</span> <span class="nc">Good</span>
    <span class="o">|</span> <span class="nc">Fair</span>
    <span class="o">|</span> <span class="nc">Average</span>
    <span class="o">|</span> <span class="nc">Mediocre</span>
    <span class="o">|</span> <span class="nc">Poor</span>
    <span class="o">|</span> <span class="nc">Terrible</span>
    <span class="o">|</span> <span class="nc">Abysmal</span>
    <span class="o">|</span> <span class="nc">BeyondAbysmal</span> <span class="k">of</span> <span class="kt">int</span>

<span class="k">type</span> <span class="nc">Character</span> <span class="o">=</span>
    <span class="o">{</span> <span class="nc">Name</span> <span class="o">:</span> <span class="kt">string</span>
      <span class="nc">Careful</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
      <span class="nc">Clever</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
      <span class="nc">Flashy</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
      <span class="nc">Forceful</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
      <span class="nc">Quick</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
      <span class="nc">Sneaky</span> <span class="o">:</span> <span class="nc">LadderLevel</span>
      <span class="nc">HighConcept</span> <span class="o">:</span> <span class="kt">string</span>
      <span class="nc">Trouble</span> <span class="o">:</span> <span class="kt">string</span>
      <span class="nc">Aspects</span> <span class="o">:</span> <span class="kt">string</span> <span class="kt">list</span>
      <span class="nc">Stunts</span> <span class="o">:</span> <span class="kt">string</span> <span class="kt">list</span> <span class="o">}</span>
</code></pre></div>
<p>Now move across to <code>Api.fs</code>. You&#39;ll see that it defaults to a single &quot;greeting&quot; endpoint which responds with a text response. Let&#39;s add a helper for sending JSON correctly, immediately after the existing <code>open</code> statements:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Machines</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nc">Cors</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Types</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nc">Cors</span>
<span class="k">open</span> <span class="nc">System</span>
<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
<span class="k">open</span> <span class="nn">Newtonsoft</span><span class="p">.</span><span class="nc">Json</span>
<span class="k">open</span> <span class="nc">Character</span>

<span class="k">let</span> <span class="n">jsonConverter</span> <span class="o">=</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">JsonConverter</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">JsonConverter</span>

<span class="k">module</span> <span class="nc">Represent</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">json</span><span class="o">&lt;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">value</span> <span class="o">=</span>
        <span class="k">let</span> <span class="n">data</span> <span class="o">=</span>
            <span class="nn">JsonConvert</span><span class="p">.</span><span class="nc">SerializeObject</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="o">[|</span><span class="n">jsonConverter</span><span class="o">|])</span>
            <span class="o">|&gt;</span> <span class="nn">Text</span><span class="p">.</span><span class="nn">UTF8Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span>
        <span class="k">let</span> <span class="n">desc</span> <span class="o">=</span>
            <span class="o">{</span> <span class="nc">Encodings</span> <span class="o">=</span> <span class="nc">None</span>
              <span class="nc">Charset</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">Charset</span><span class="p">.</span><span class="nc">Utf8</span>
              <span class="nc">Languages</span> <span class="o">=</span> <span class="nc">None</span>
              <span class="nc">MediaType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span> <span class="o">}</span>
        <span class="o">{</span> <span class="nc">Data</span> <span class="o">=</span> <span class="n">data</span>
          <span class="nc">Description</span> <span class="o">=</span> <span class="n">desc</span> <span class="o">}</span>
</code></pre></div>
<p>Next, delete the entire rest of the file and add the following:</p>
<div class="highlight"><pre><code class="fsharp"><span class="c1">// This endpoint requires a URL template with the &quot;name&quot; atom</span>
<span class="k">let</span> <span class="n">name_</span> <span class="o">=</span> <span class="nn">Route</span><span class="p">.</span><span class="n">atom_</span> <span class="s2">&quot;name&quot;</span>

<span class="k">let</span> <span class="n">name</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">nameO</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">name_</span>

        <span class="k">match</span> <span class="n">nameO</span> <span class="k">with</span>
        <span class="o">|</span> <span class="nc">Some</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">name</span>
        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">failwith</span> <span class="s2">&quot;Name is a compulsory element of the URL&quot;</span> <span class="o">}</span>

<span class="c1">// We&#39;re going to hard code our data for now</span>
<span class="k">let</span> <span class="n">exampleCharacters</span> <span class="o">=</span>
    <span class="nc">Map</span> <span class="o">[</span>
        <span class="s2">&quot;bob&quot;</span><span class="o">,</span> <span class="o">{</span> <span class="nc">Name</span> <span class="o">=</span> <span class="s2">&quot;Bob Bobson&quot;</span>
                 <span class="nc">Careful</span> <span class="o">=</span> <span class="nc">Mediocre</span>
                 <span class="nc">Clever</span> <span class="o">=</span> <span class="nc">Fair</span>
                 <span class="nc">Flashy</span> <span class="o">=</span> <span class="nc">Fair</span>
                 <span class="nc">Forceful</span> <span class="o">=</span> <span class="nc">Average</span>
                 <span class="nc">Quick</span> <span class="o">=</span> <span class="nc">Average</span>
                 <span class="nc">Sneaky</span> <span class="o">=</span> <span class="nc">Good</span>
                 <span class="nc">HighConcept</span> <span class="o">=</span> <span class="s2">&quot;The eternal example&quot;</span>
                 <span class="nc">Trouble</span> <span class="o">=</span> <span class="s2">&quot;Lives in the test&quot;</span>
                 <span class="nc">Aspects</span> <span class="o">=</span> <span class="o">[</span> <span class="s2">&quot;It&#39;s only Bob&quot;</span>
                             <span class="s2">&quot;Is he... the recursive one?&quot;</span>
                             <span class="s2">&quot;I&#39;ve got Fred&#39;s back!&quot;</span> <span class="o">]</span>
                 <span class="nc">Stunts</span> <span class="o">=</span> <span class="o">[</span> <span class="s2">&quot;Because everyone assumes I don&#39;t exist, I get +2 on Sneaky rolls to not be noticed.&quot;</span> <span class="o">]</span> <span class="o">}</span>
    <span class="o">]</span>

<span class="c1">// Once per request, try and load the named character (see the memo at the end)</span>
<span class="k">let</span> <span class="n">character</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="k">return</span> <span class="nn">Map</span><span class="p">.</span><span class="n">tryFind</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="nc">ToLowerInvariant</span><span class="bp">()</span><span class="o">)</span> <span class="n">exampleCharacters</span>
    <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">memo</span>

<span class="k">let</span> <span class="n">characterExists</span> <span class="o">=</span>
    <span class="n">character</span> <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="o">.</span><span class="nc">IsSome</span><span class="o">)</span>

<span class="k">let</span> <span class="n">sendCharacter</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">character</span> <span class="o">=</span> <span class="n">character</span>
        <span class="k">return</span> <span class="nn">Represent</span><span class="p">.</span><span class="n">json</span> <span class="o">(</span><span class="n">character</span><span class="o">.</span><span class="nc">Value</span><span class="o">)</span> <span class="o">}</span>

<span class="k">let</span> <span class="n">characterMachine</span> <span class="o">=</span>
    <span class="n">freyaMachine</span> <span class="o">{</span>
<span class="o">#</span><span class="k">if</span> <span class="nc">DEBUG</span>
        <span class="n">cors</span>
        <span class="n">corsOrigins</span> <span class="o">[</span> <span class="nn">SerializedOrigin</span><span class="p">.</span><span class="n">parse</span> <span class="s2">&quot;http://localhost:8080&quot;</span> <span class="o">]</span>
<span class="o">#</span><span class="n">endif</span>
        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">]</span>
        <span class="n">exists</span> <span class="n">characterExists</span>
        <span class="n">handleOk</span> <span class="n">sendCharacter</span> <span class="o">}</span>

<span class="k">let</span> <span class="n">root</span> <span class="o">=</span>
    <span class="n">freyaRouter</span> <span class="o">{</span>
        <span class="n">resource</span> <span class="s2">&quot;/character/{name}&quot;</span> <span class="n">characterMachine</span> <span class="o">}</span>
</code></pre></div>
<p>There&#39;s quite a lot going on in there, but what we&#39;ve defined with <code>characterMachine</code> is a resource which checks if a character exists, and sends it as Fable readable JSON if it does. We then configure a route to point to it.</p>

<p>Critically, we also turn on <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">CORS</a> (Cross Origin Resource Sharing) for localhost:8080 for debug builds. This will enable requests from our Fable client running it&#39;s development server on a different port to talk to the server.</p>

<p>Edit: Zaid Ajaj <a href="https://twitter.com/zaid_ajaj/status/999177873431891968">points out</a> that you can also configure webpack&#39;s dev server to proxy to your development front end. If you&#39;re writing a system where your API and client will be running on the same domain, check out how to do that below.</p>

<h2>The client</h2>

<p>Go back up into the root directory of the solution, and run:</p>
<div class="highlight"><pre><code class="bash">dotnet new -i Fable.Template.Fulma.Minimal
</code></pre></div>
<p>To get a dotnet core template for Fable with F# wrappers for React and Bulma - as well as Elmish pre-installed.</p>

<p>Then run:</p>
<div class="highlight"><pre><code class="bash">dotnet new fulma-minimal -lang f# -o FateClient
</code></pre></div>
<p>To create our client application.</p>

<p>Go into the newly created project directory, and use the built in build scripts to get everything up and running:</p>
<div class="highlight"><pre><code class="bash"><span class="nb">cd </span>FateClient
./fake.sh -t watch
</code></pre></div>
<p>On first run, it will download most of the internet, but such is modern net development.</p>

<p>Browse on over to <a href="http://localhost:8080/">http://localhost:8080/</a> to see the base template before we start hacking away!</p>

<p>Very pretty: and in <code>App.fs</code> we can see the nice clean Elmish code driving it.</p>

<p>If you&#39;re running both API and client on the same domain, this is also a good time to update your webpack config (you&#39;ll find <code>webpack.config.js</code> in your FateClient directory). Amend the <code>devServer</code> section as follows:</p>
<div class="highlight"><pre><code class="json">    <span class="err">devServer:</span> <span class="p">{</span>
      <span class="err">proxy:</span> <span class="err">{</span>
        <span class="err">&#39;/character/*&#39;:</span> <span class="err">{</span>
          <span class="err">target:</span> <span class="err">&#39;http://localhost:5000&#39;,</span>
          <span class="err">changeOrigin:</span> <span class="err">true</span>
        <span class="p">}</span>
      <span class="err">},</span>
      <span class="err">contentBase:</span> <span class="s2">&quot;./static&quot;</span><span class="err">,</span>
      <span class="err">publicPath:</span> <span class="s2">&quot;/&quot;</span><span class="err">,</span>
      <span class="err">hot:</span> <span class="kc">true</span><span class="err">,</span>
      <span class="err">inline:</span> <span class="kc">true</span>
    <span class="err">},</span>
</code></pre></div>
<p>If you do this, you&#39;ll want to change the URL below used to load the data.</p>

<p>Now! Let&#39;s start hacking away. Firstly, we&#39;re going to want to share our character types. I&#39;ve decided here that they are owned by the server, so we need to link the file into the Fable project.</p>

<p>In <code>FateClient.fsproj</code>, add change:</p>
<div class="highlight"><pre><code class="xml">  <span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;Compile</span> <span class="na">Include=</span><span class="s">&quot;App.fs&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/ItemGroup&gt;</span>
</code></pre></div>
<p>to:</p>
<div class="highlight"><pre><code class="xml">  <span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;Compile</span> <span class="na">Include=</span><span class="s">&quot;..\..\FateServer\Character.fs&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;Compile</span> <span class="na">Include=</span><span class="s">&quot;App.fs&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/ItemGroup&gt;</span>
</code></pre></div>
<p>Now we can load up our character. In <code>App.fs</code>, it&#39;s time to expand our model. Change our Elmish app as below:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nn">App</span><span class="p">.</span><span class="nc">View</span>

<span class="k">open</span> <span class="nc">Elmish</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nc">React</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">Helpers</span><span class="p">.</span><span class="nn">React</span><span class="p">.</span><span class="nc">Props</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nc">PowerPack</span>
<span class="k">open</span> <span class="nn">Fable</span><span class="p">.</span><span class="nn">PowerPack</span><span class="p">.</span><span class="nc">Fetch</span>
<span class="k">open</span> <span class="nc">Fulma</span>
<span class="k">open</span> <span class="nn">Fulma</span><span class="p">.</span><span class="nc">FontAwesome</span>
<span class="k">open</span> <span class="nc">Character</span>

<span class="k">type</span> <span class="nc">Model</span> <span class="o">=</span>
    <span class="o">{</span> <span class="nc">IsLoading</span> <span class="o">:</span> <span class="kt">bool</span>
      <span class="nc">Character</span> <span class="o">:</span> <span class="nc">Character</span> <span class="n">option</span>
      <span class="nc">ErrorMessage</span> <span class="o">:</span> <span class="kt">string</span> <span class="n">option</span> <span class="o">}</span>

<span class="k">type</span> <span class="nc">Msg</span> <span class="o">=</span>
    <span class="o">|</span> <span class="nc">CharacterLoaded</span> <span class="k">of</span> <span class="nc">Character</span>
    <span class="o">|</span> <span class="nc">LoadingError</span> <span class="k">of</span> <span class="kt">string</span>

<span class="k">let</span> <span class="n">loadBob</span> <span class="bp">()</span> <span class="o">=</span>
    <span class="n">promise</span> <span class="o">{</span>
        <span class="k">let</span> <span class="n">props</span> <span class="o">=</span>
            <span class="o">[</span> <span class="nn">RequestProperties</span><span class="p">.</span><span class="nc">Method</span> <span class="nn">HttpMethod</span><span class="p">.</span><span class="nc">GET</span> <span class="o">]</span>
        <span class="o">#</span><span class="k">if</span> <span class="nc">DEBUG</span>
        <span class="c1">// Use &quot;/character/bob&quot; here if you&#39;ve set up the webpack proxy</span>
        <span class="k">return</span><span class="o">!</span> <span class="n">fetchAs</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="s2">&quot;http://localhost:5000/character/bob&quot;</span> <span class="n">props</span>
        <span class="o">#</span><span class="k">else</span>
        <span class="k">return</span><span class="o">!</span> <span class="n">fetchAs</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="s2">&quot;http://api.example.com/character/bob&quot;</span> <span class="n">props</span>
        <span class="o">#</span><span class="n">endif</span>
    <span class="o">}</span>

<span class="k">let</span> <span class="n">init</span> <span class="o">_</span> <span class="o">=</span>
    <span class="o">{</span> <span class="nc">IsLoading</span> <span class="o">=</span> <span class="bp">true</span>
      <span class="nc">Character</span> <span class="o">=</span> <span class="nc">None</span>
      <span class="nc">ErrorMessage</span> <span class="o">=</span> <span class="nc">None</span> <span class="o">},</span>
    <span class="nn">Cmd</span><span class="p">.</span><span class="n">ofPromise</span> <span class="n">loadBob</span> <span class="bp">()</span> <span class="nc">CharacterLoaded</span> <span class="o">(</span><span class="k">fun</span> <span class="n">e</span> <span class="o">-&gt;</span> <span class="nc">LoadingError</span> <span class="n">e</span><span class="o">.</span><span class="nc">Message</span><span class="o">)</span>

<span class="k">let</span> <span class="k">private</span> <span class="n">update</span> <span class="n">msg</span> <span class="n">model</span> <span class="o">=</span>
    <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
    <span class="o">|</span> <span class="nc">CharacterLoaded</span> <span class="n">bob</span> <span class="o">-&gt;</span>
        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">IsLoading</span> <span class="o">=</span> <span class="bp">false</span>
                     <span class="nc">Character</span> <span class="o">=</span> <span class="nc">Some</span> <span class="n">bob</span> <span class="o">},</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">none</span>
    <span class="o">|</span> <span class="nc">LoadingError</span> <span class="n">error</span> <span class="o">-&gt;</span>
        <span class="o">{</span> <span class="n">model</span> <span class="k">with</span> <span class="nc">IsLoading</span> <span class="o">=</span> <span class="bp">false</span>
                     <span class="nc">Character</span> <span class="o">=</span> <span class="nc">None</span>
                     <span class="nc">ErrorMessage</span> <span class="o">=</span> <span class="nc">Some</span> <span class="n">error</span> <span class="o">},</span> <span class="nn">Cmd</span><span class="p">.</span><span class="n">none</span>

<span class="k">let</span> <span class="n">loadingMessage</span> <span class="n">model</span> <span class="o">=</span>
    <span class="k">if</span> <span class="n">model</span><span class="o">.</span><span class="nc">IsLoading</span> <span class="k">then</span>
        <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Loading...&quot;</span> <span class="o">]</span>
    <span class="k">else</span> <span class="bp">[]</span>

<span class="k">let</span> <span class="n">isRounded</span> <span class="o">:</span> <span class="nc">IHTMLProp</span> <span class="kt">list</span> <span class="o">=</span>
    <span class="o">[</span> <span class="nc">Style</span> <span class="o">[</span> <span class="nc">BorderRadius</span> <span class="s2">&quot;25px&quot;</span> <span class="o">]</span> <span class="o">]</span>

<span class="k">let</span> <span class="n">characterView</span> <span class="n">character</span> <span class="o">=</span>
    <span class="o">[</span> <span class="nn">Hero</span><span class="p">.</span><span class="n">hero</span> <span class="o">[</span> <span class="nn">Hero</span><span class="p">.</span><span class="nc">Color</span> <span class="nc">IsBlack</span>
                  <span class="nn">Hero</span><span class="p">.</span><span class="nc">Props</span> <span class="n">isRounded</span> <span class="o">]</span> <span class="o">[</span>
        <span class="nn">Hero</span><span class="p">.</span><span class="n">body</span> <span class="bp">[]</span> <span class="o">[</span>
            <span class="nn">Container</span><span class="p">.</span><span class="n">container</span> <span class="o">[</span> <span class="nn">Container</span><span class="p">.</span><span class="nc">IsFluid</span>
                                  <span class="nn">Container</span><span class="p">.</span><span class="nc">Modifiers</span>
                                      <span class="o">[</span> <span class="nn">Modifier</span><span class="p">.</span><span class="nc">TextAlignment</span> <span class="o">(</span><span class="nn">Screen</span><span class="p">.</span><span class="nc">All</span><span class="o">,</span> <span class="nn">TextAlignment</span><span class="p">.</span><span class="nc">Centered</span><span class="o">)</span> <span class="o">]</span> <span class="o">]</span> <span class="o">[</span>
                <span class="nn">Heading</span><span class="p">.</span><span class="n">h1</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="n">character</span><span class="o">.</span><span class="nc">Name</span> <span class="o">]</span>
                <span class="n">p</span> <span class="bp">[]</span> <span class="o">[</span>
                    <span class="n">strong</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;High Concept: &quot;</span> <span class="o">]</span>
                    <span class="n">str</span> <span class="n">character</span><span class="o">.</span><span class="nc">HighConcept</span>
                <span class="o">]</span>
                <span class="n">p</span> <span class="bp">[]</span> <span class="o">[</span>
                    <span class="n">strong</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Trouble: &quot;</span> <span class="o">]</span>
                    <span class="n">str</span> <span class="n">character</span><span class="o">.</span><span class="nc">Trouble</span>
                <span class="o">]</span>
            <span class="o">]</span>
        <span class="o">]</span>
      <span class="o">]</span>
      <span class="nn">Columns</span><span class="p">.</span><span class="n">columns</span> <span class="bp">[]</span> <span class="o">[</span>
          <span class="nn">Column</span><span class="p">.</span><span class="n">column</span> <span class="bp">[]</span> <span class="o">[</span>
              <span class="nn">Heading</span><span class="p">.</span><span class="n">h2</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Approaches&quot;</span> <span class="o">]</span>
              <span class="nn">Table</span><span class="p">.</span><span class="n">table</span>
                  <span class="o">[</span> <span class="nn">Table</span><span class="p">.</span><span class="nc">IsBordered</span>
                    <span class="nn">Table</span><span class="p">.</span><span class="nc">IsStriped</span> <span class="o">]</span>
                  <span class="o">[</span> <span class="n">thead</span> <span class="bp">[]</span>
                        <span class="o">[</span> <span class="n">tr</span> <span class="bp">[]</span>
                              <span class="o">[</span> <span class="n">th</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Approach&quot;</span> <span class="o">]</span>
                                <span class="n">th</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Level&quot;</span> <span class="o">]</span> <span class="o">]</span> <span class="o">]</span>
                    <span class="n">tbody</span> <span class="bp">[]</span>
                        <span class="o">[</span> <span class="n">tr</span> <span class="bp">[]</span>
                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Careful&quot;</span> <span class="o">]</span>
                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Careful</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span>
                          <span class="n">tr</span> <span class="bp">[]</span>
                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Clever&quot;</span> <span class="o">]</span>
                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Clever</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span>
                          <span class="n">tr</span> <span class="bp">[]</span>
                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Flashy&quot;</span> <span class="o">]</span>
                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Flashy</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span>
                          <span class="n">tr</span> <span class="bp">[]</span>
                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Forceful&quot;</span> <span class="o">]</span>
                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Forceful</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span>
                          <span class="n">tr</span> <span class="bp">[]</span>
                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Quick&quot;</span> <span class="o">]</span>
                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Quick</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span>
                          <span class="n">tr</span> <span class="bp">[]</span>
                              <span class="o">[</span> <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Sneaky&quot;</span> <span class="o">]</span>
                                <span class="n">td</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="o">&lt;|</span> <span class="n">character</span><span class="o">.</span><span class="nn">Sneaky</span><span class="p">.</span><span class="nc">ToString</span><span class="bp">()</span> <span class="o">]</span> <span class="o">]</span> <span class="o">]</span>
                  <span class="o">]</span>
          <span class="o">]</span>
          <span class="nn">Column</span><span class="p">.</span><span class="n">column</span> <span class="bp">[]</span> <span class="o">[</span>
              <span class="nn">Heading</span><span class="p">.</span><span class="n">h2</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Other Aspects&quot;</span> <span class="o">]</span>
              <span class="n">ul</span> <span class="bp">[]</span> <span class="o">[</span>
                  <span class="k">yield</span><span class="o">!</span> <span class="o">[</span> <span class="k">for</span> <span class="n">a</span> <span class="k">in</span> <span class="n">character</span><span class="o">.</span><span class="nc">Aspects</span> <span class="o">-&gt;</span> <span class="n">li</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="n">a</span> <span class="o">]</span> <span class="o">]</span>
              <span class="o">]</span>
              <span class="nn">Heading</span><span class="p">.</span><span class="n">h2</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="s2">&quot;Stunts&quot;</span> <span class="o">]</span>
              <span class="n">ul</span> <span class="bp">[]</span> <span class="o">[</span>
                  <span class="k">yield</span><span class="o">!</span> <span class="o">[</span> <span class="k">for</span> <span class="n">s</span> <span class="k">in</span> <span class="n">character</span><span class="o">.</span><span class="nc">Stunts</span> <span class="o">-&gt;</span> <span class="n">li</span> <span class="bp">[]</span> <span class="o">[</span> <span class="n">str</span> <span class="n">s</span> <span class="o">]</span> <span class="o">]</span>
              <span class="o">]</span>
          <span class="o">]</span>
      <span class="o">]</span>
    <span class="o">]</span>

<span class="k">let</span> <span class="n">errorView</span> <span class="n">message</span> <span class="o">=</span>
    <span class="o">[</span> <span class="nn">Notification</span><span class="p">.</span><span class="n">notification</span> <span class="o">[</span> <span class="nn">Notification</span><span class="p">.</span><span class="nc">Color</span> <span class="nc">IsDanger</span> <span class="o">]</span> <span class="o">[</span>
        <span class="n">str</span> <span class="n">message</span>
    <span class="o">]</span> <span class="o">]</span>

<span class="k">let</span> <span class="k">private</span> <span class="n">view</span> <span class="n">model</span> <span class="n">dispatch</span> <span class="o">=</span>
    <span class="nn">Container</span><span class="p">.</span><span class="n">container</span> <span class="bp">[]</span> <span class="o">[</span>
        <span class="nn">Content</span><span class="p">.</span><span class="n">content</span> <span class="o">[</span> <span class="o">]</span>
          <span class="o">[</span> <span class="k">yield</span><span class="o">!</span> <span class="n">loadingMessage</span> <span class="n">model</span>
            <span class="k">match</span> <span class="n">model</span><span class="o">.</span><span class="nc">Character</span> <span class="k">with</span>
            <span class="o">|</span> <span class="nc">Some</span> <span class="n">c</span> <span class="o">-&gt;</span>
                <span class="k">yield</span><span class="o">!</span> <span class="n">characterView</span> <span class="n">c</span>
            <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>
            <span class="k">match</span> <span class="n">model</span><span class="o">.</span><span class="nc">ErrorMessage</span> <span class="k">with</span>
            <span class="o">|</span> <span class="nc">Some</span> <span class="n">m</span> <span class="o">-&gt;</span>
                <span class="k">yield</span><span class="o">!</span> <span class="n">errorView</span> <span class="n">m</span>
            <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span> <span class="o">]</span>
    <span class="o">]</span>

<span class="k">open</span> <span class="nn">Elmish</span><span class="p">.</span><span class="nc">React</span>
<span class="k">open</span> <span class="nn">Elmish</span><span class="p">.</span><span class="nc">Debug</span>
<span class="k">open</span> <span class="nn">Elmish</span><span class="p">.</span><span class="nc">HMR</span>

<span class="nn">Program</span><span class="p">.</span><span class="n">mkProgram</span> <span class="n">init</span> <span class="n">update</span> <span class="n">view</span>
<span class="o">#</span><span class="k">if</span> <span class="nc">DEBUG</span>
<span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withHMR</span>
<span class="o">#</span><span class="n">endif</span>
<span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withReactUnoptimized</span> <span class="s2">&quot;elmish-app&quot;</span>
<span class="o">#</span><span class="k">if</span> <span class="nc">DEBUG</span>
<span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">withDebugger</span>
<span class="o">#</span><span class="n">endif</span>
<span class="o">|&gt;</span> <span class="nn">Program</span><span class="p">.</span><span class="n">run</span>
</code></pre></div>
<p>And there you have it - a simple app that loads &quot;Bob&quot; from our server, using the generic <code>fetchAs</code> method to cast the JSON back into our strongly typed world. Making the application interactive and more attractive is left to the user; it gets quite addictive with a nice type safe wrapper over React and auto-reloading.</p>

<p>Till next time...</p>

<p><img src="/images/bob_bobson.png" alt="The Final Result"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Token Bearer Authentication in Freya]]></title>
    <link href="https://blog.mavnn.co.uk/token-bearer-authentication-in-freya/"/>
    <updated>2018-01-10T11:03:48+00:00</updated>
    <id>https://blog.mavnn.co.uk/token-bearer-authentication-in-freya</id>
    <content type="html"><![CDATA[<p>As part of my <a href="/building-solid-systems-in-f-number/">Building Solid Systems</a> course, I&#39;ll be talking about authentication in distributed systems. I wanted a practical demonstration that people could play with, so I added token bearer authentication to a Freya API.</p>

<p>Here&#39;s how.</p>

<!-- more -->

<h3>System design</h3>

<p>Over the years, I have become a big believer in using standards where standards exist (unless they&#39;re actively terrible); as such, for authentication we&#39;ll be assuming that our system includes an OAuth2 compliant authorization server. Depending on our needs, this might be an external service or a self hosted solution such as <a href="https://identityserver.io/">IdentityServer</a>.</p>

<p>We&#39;re going to set up an API which will use &quot;token bearer&quot; authentication. This means that the client is responsible for obtaining a valid token from our authorization server which includes a claim for access to the resource our API represents. How the client gets the token, we don&#39;t really care: there are several ways of obtaining a grant from an OAuth2 server and I won&#39;t be going too far down that rabbit hole here (although check the end of the article for an example).</p>

<h3>The code</h3>

<p>Let&#39;s start coding, and add authentication to the &quot;hello&quot; endpoint of the Freya template project. Set up a new file for our <code>Auth</code> module, and open up everything we need.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nc">Auth</span>

<span class="k">open</span> <span class="nc">System</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nc">Core</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Machines</span><span class="p">.</span><span class="nc">Http</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nc">Http</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Types</span><span class="p">.</span><span class="nc">Http</span>
<span class="k">open</span> <span class="nc">Hopac</span>
<span class="k">open</span> <span class="nc">IdentityModel</span>
<span class="k">open</span> <span class="nn">IdentityModel</span><span class="p">.</span><span class="nc">Client</span>
<span class="k">open</span> <span class="nc">Logging</span>
</code></pre></div>
<p>Most of these should make sense; the additions are <code>IdentityModel</code> and a <code>Logging</code> module. IdentityModel is a NuGet package supplied by the IdentityServer project which implements the basics of the OAuth2 specification from a consumers point of view, and gives a nice client API over the top of the various endpoints an OAuth2 compliant server should implement.</p>

<p>The <code>Logging</code> module is the one from my <a href="/logging-freya/">previous blog post</a>; any logging here is optional, but in practice is <em>really very helpful</em> in an actual production distributed system.</p>

<p>The first thing we&#39;re going to do is create a <code>DiscoveryClient</code>. OAuth2 servers provide a discovery document which specifies things like it&#39;s public key and the locations of the other endpoints. In theory, this information can change over time - in this case I&#39;m going to statically grab it on service start up.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">discoClient</span> <span class="o">=</span>
    <span class="k">new</span> <span class="nc">DiscoveryClient</span><span class="o">(</span><span class="s2">&quot;http://idserver:5000&quot;</span><span class="o">)</span>

<span class="n">discoClient</span><span class="o">.</span><span class="nn">Policy</span><span class="p">.</span><span class="nc">RequireHttps</span> <span class="o">&lt;-</span> <span class="bp">false</span>
<span class="n">discoClient</span><span class="o">.</span><span class="nn">Policy</span><span class="p">.</span><span class="nc">ValidateEndpoints</span> <span class="o">&lt;-</span> <span class="bp">false</span>
<span class="n">discoClient</span><span class="o">.</span><span class="nn">Policy</span><span class="p">.</span><span class="nc">ValidateIssuerName</span> <span class="o">&lt;-</span> <span class="bp">false</span>

<span class="k">let</span> <span class="n">doc</span> <span class="o">=</span>
    <span class="n">discoClient</span><span class="o">.</span><span class="nc">GetAsync</span><span class="bp">()</span>
    <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">AwaitTask</span>
    <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">RunSynchronously</span>
</code></pre></div>
<p>Your configuration here will vary considerably: I&#39;m running within a kubernetes cluster using an internal DNS record, so I&#39;m overriding the normal safety checks. If you are deploying a service which will be calling the identity server on an external network, you obviously shouldn&#39;t do this...</p>

<p>The <code>freyaMachine</code> has separate decision points for whether the request is <code>authorized</code> and whether it&#39;s <code>allowed</code>. Authorized is the simplest: a request is authorized if it has an authorization header. Let&#39;s build a method which checks that for us:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">isAuthed</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">hasHeader</span> <span class="o">=</span>
            <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="nn">Headers</span><span class="p">.</span><span class="n">authorization_</span>
            <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">opt</span> <span class="o">-&gt;</span> <span class="n">opt</span><span class="o">.</span><span class="nc">IsSome</span><span class="o">)</span>
        <span class="k">if</span> <span class="n">hasHeader</span> <span class="k">then</span>
            <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Auth header found&quot;</span>
                <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">debug</span>
        <span class="k">else</span>
            <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;No auth header&quot;</span>
                <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">debug</span>
        <span class="k">return</span> <span class="n">hasHeader</span>
    <span class="o">}</span>
</code></pre></div>
<p>Most of the code here is actually logging - but you won&#39;t regret it when your customers ask you why they can&#39;t authenticate against your API.</p>

<p>Now we&#39;re onto the more interesting case; the caller has made an attempt to access a secured resource, and they&#39;ve supplied some authentication to try and do so.</p>

<p>Let&#39;s check first if they&#39;ve supplied a &quot;Bearer&quot; token; this is the only authentication style we&#39;re allowing at the moment.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">token</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">auth</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="nn">Headers</span><span class="p">.</span><span class="n">authorization_</span>
        <span class="k">match</span> <span class="n">auth</span> <span class="k">with</span>
        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
            <span class="c1">// We should never reach this branch without an auth header -</span>
            <span class="c1">// it should be caught by the isAuthed check</span>
            <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;No auth header found when checking authorization&quot;</span>
                <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">warn</span>
            <span class="k">return</span> <span class="nc">None</span>
        <span class="o">|</span> <span class="nc">Some</span> <span class="n">a</span> <span class="k">when</span> <span class="ow">not</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="nc">StartsWith</span><span class="o">(</span><span class="s2">&quot;Bearer &quot;</span><span class="o">))</span> <span class="o">-&gt;</span>
            <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Auth found, but not of type Bearer&quot;</span>
                <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">debug</span>
            <span class="k">return</span> <span class="nc">None</span>
        <span class="o">|</span> <span class="nc">Some</span> <span class="n">a</span> <span class="o">-&gt;</span>
            <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Bearer token extracted&quot;</span>
                <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">debug</span>
            <span class="k">return</span> <span class="nc">Some</span> <span class="o">&lt;|</span> <span class="n">a</span><span class="o">.</span><span class="nc">Substring</span><span class="o">(</span><span class="mi">7</span><span class="o">)</span>
    <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">memo</span>
</code></pre></div>
<p>Now we can check the token to see if it is valid. If the token is a JWT token we could choose to check it locally; we have the public key of the issuer available. Here I&#39;ve decided to go the route of checking each token with the issuer, as that means that we pick up things like token cancellation. Your strategy here will depend a lot on your use case, and <code>IdentityModel</code> also allows for caching to allow a good compromise.</p>

<p>Checking the token can be done via an asynchronous call with the <code>IntrospectionClient</code>. As I&#39;m using Freya compiled against <code>Hopac</code> I&#39;m wrapping it in a <code>job</code> - you could equally wrap it in an <code>async</code> block if you&#39;ve using Async Freya.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">checkToken</span> <span class="n">apiName</span> <span class="n">apiSecret</span> <span class="n">t</span> <span class="o">=</span>
    <span class="n">job</span> <span class="o">{</span>
        <span class="k">use</span> <span class="n">introClient</span> <span class="o">=</span>
            <span class="k">new</span> <span class="nc">IntrospectionClient</span><span class="o">(</span><span class="n">doc</span><span class="o">.</span><span class="nc">IntrospectionEndpoint</span><span class="o">,</span>
                                    <span class="n">apiName</span><span class="o">,</span> <span class="n">apiSecret</span><span class="o">)</span>
        <span class="k">return</span><span class="o">!</span>
            <span class="n">introClient</span><span class="o">.</span><span class="nc">SendAsync</span><span class="o">(</span><span class="nc">IntrospectionRequest</span><span class="o">(</span><span class="nc">Token</span> <span class="o">=</span> <span class="n">t</span><span class="o">))</span>
            <span class="o">|&gt;</span> <span class="nn">Hopac</span><span class="p">.</span><span class="nn">Job</span><span class="p">.</span><span class="n">awaitTask</span>
    <span class="o">}</span>
</code></pre></div>
<p>And now the last step is to build a <code>allowed</code> decision point. Our decision point takes three parameters: the name of this API resource, as known to the identity server, the shared secret between resource and identity server, and the scope this particular resource within the API requires. Normally this will be something like <code>read</code> or <code>write</code>. An entire API will normally share a single name and secret, while each endpoint may require a different scope.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">isAllowedFor</span> <span class="n">apiName</span> <span class="n">apiSecret</span> <span class="n">scope</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">token</span> <span class="o">=</span> <span class="n">token</span>
        <span class="k">match</span> <span class="n">token</span> <span class="k">with</span>
        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
            <span class="k">return</span> <span class="bp">false</span>
        <span class="o">|</span> <span class="nc">Some</span> <span class="n">t</span> <span class="o">-&gt;</span>
            <span class="k">let</span><span class="o">!</span> <span class="n">resp</span> <span class="o">=</span>
                <span class="n">checkToken</span> <span class="n">apiName</span> <span class="n">apiSecret</span> <span class="n">t</span>
                <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">fromJob</span>
            <span class="k">let</span> <span class="n">scopeMatch</span> <span class="o">=</span>
                <span class="n">resp</span><span class="o">.</span><span class="nc">Claims</span>
                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">exists</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="o">.</span><span class="nc">Type</span> <span class="o">=</span> <span class="s2">&quot;scope&quot;</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">.</span><span class="nc">Value</span> <span class="o">=</span> <span class="n">scope</span><span class="o">)</span>
            <span class="k">let</span> <span class="n">clientId</span> <span class="o">=</span>
                <span class="n">resp</span><span class="o">.</span><span class="nc">Claims</span>
                <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">tryFind</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="o">.</span><span class="nc">Type</span> <span class="o">=</span> <span class="s2">&quot;client_id&quot;</span><span class="o">)</span>
            <span class="k">let</span> <span class="n">isAllowed</span> <span class="o">=</span>
                <span class="n">resp</span><span class="o">.</span><span class="nc">IsActive</span> <span class="o">&amp;&amp;</span> <span class="n">scopeMatch</span> <span class="o">&amp;&amp;</span> <span class="n">clientId</span><span class="o">.</span><span class="nc">IsSome</span>
            <span class="k">if</span> <span class="n">isAllowed</span> <span class="k">then</span>
                <span class="k">do</span><span class="o">!</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">set</span>
                        <span class="nn">Request</span><span class="p">.</span><span class="n">clientId_</span>
                        <span class="o">(</span><span class="n">clientId</span> <span class="o">|&gt;</span> <span class="nn">Option</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="o">.</span><span class="nc">Value</span><span class="o">))</span>
                <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Request allowed to scope {scope}&quot;</span>
                    <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">add</span> <span class="n">scope</span>
                    <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">info</span>
            <span class="k">else</span>
                <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Invalid token supplied&quot;</span>
                    <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">debug</span>
            <span class="k">return</span> <span class="n">isAllowed</span>
    <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">memo</span>

<span class="k">let</span> <span class="n">authMachine</span> <span class="n">apiName</span> <span class="n">apiSecret</span> <span class="n">scope</span> <span class="o">=</span>
    <span class="n">freyaMachine</span> <span class="o">{</span>
        <span class="n">allowed</span> <span class="o">(</span><span class="n">isAllowedFor</span> <span class="n">apiName</span> <span class="n">apiSecret</span> <span class="n">scope</span><span class="o">)</span>
        <span class="n">authorized</span> <span class="n">isAuthed</span>
        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">]</span> <span class="o">}</span>
</code></pre></div>
<p>Apart from actually checking whether access is allowed, the other important thing we do here is add the calling clientId to the OWIN state. This means that we can make use of the clientId in any further pipeline steps (and in our logging).</p>

<p>So: we now have an <code>authMachine</code> which will check if you&#39;re allowed to do something... but doesn&#39;t actually do anything itself.</p>

<p>Time to switch back to <code>Api.fs</code> from the template project (making sure you&#39;ve added in both the <code>Logging</code> and <code>Auth</code> modules to the project).</p>

<p>Amend your <code>helloMachine</code> as follows:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">helloMachine</span> <span class="o">=</span>
    <span class="n">freyaMachine</span> <span class="o">{</span>
        <span class="n">including</span> <span class="o">(</span><span class="n">authMachine</span> <span class="s2">&quot;myApi&quot;</span> <span class="s2">&quot;apiSecret&quot;</span> <span class="s2">&quot;myApi.read&quot;</span><span class="o">)</span>
        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">]</span>
        <span class="n">handleOk</span> <span class="n">sayHello</span> <span class="o">}</span>
</code></pre></div>
<p>and finally make sure that you remember to inject your logger (see the previous blog post):</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">root</span> <span class="n">config</span> <span class="o">=</span>
    <span class="nn">Pipeline</span><span class="p">.</span><span class="n">compose</span>
        <span class="o">(</span><span class="nn">Log</span><span class="p">.</span><span class="n">injectLogger</span> <span class="n">config</span><span class="o">)</span>
        <span class="o">(</span><span class="n">freyaRouter</span> <span class="o">{</span> <span class="n">resource</span> <span class="s2">&quot;/hello{/name}&quot;</span> <span class="n">helloMachine</span> <span class="o">})</span>
</code></pre></div>
<p>Now we should be able to spin everything up.</p>

<h3>Trying it all out</h3>

<p>We&#39;ll be using <a href="https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/">Client Credential</a> authentication for this example; this is a grant type used when a &quot;client&quot; is requesting access to a &quot;resource&quot; when no &quot;user&quot; is present. It&#39;s a standard grant type covered by the OAuth specification, and we&#39;re going to assume that we have an OAuth2 compliant authority available to issue allow introspection of tokens.</p>

<p>This type of grant is generally used for service to service communication - there&#39;s no user interaction at all, just an agreed pre-shared &quot;client secret&quot; (an API key).</p>

<p>First we need to get a token from our identity server using our clientId and clientSecret (this client must be configured in the identity server).</p>

<p>If you&#39;re using IdentityServer4 like I am, your request will look like this (curl format):</p>
<div class="highlight"><pre><code class="bash">curl -X POST <span class="se">\</span>
  http://identity.mavnn.co.uk/connect/token <span class="se">\</span>
  -H <span class="s1">&#39;cache-control: no-cache&#39;</span> <span class="se">\</span>
  -H <span class="s1">&#39;content-type: application/x-www-form-urlencoded&#39;</span> <span class="se">\</span>
  -d <span class="s1">&#39;grant_type=client_credentials&amp;scope=myApi.read&amp;client_id=myClient&amp;client_secret=mySecret&#39;</span>
</code></pre></div>
<p>You&#39;ll get back a response including a token:</p>
<div class="highlight"><pre><code class="json"><span class="p">{</span>
    <span class="nt">&quot;access_token&quot;</span><span class="p">:</span> <span class="s2">&quot;eyJhbGciOi...&quot;</span><span class="p">,</span>
    <span class="nt">&quot;expires_in&quot;</span><span class="p">:</span> <span class="mi">3600</span><span class="p">,</span>
    <span class="nt">&quot;token_type&quot;</span><span class="p">:</span> <span class="s2">&quot;Bearer&quot;</span>
<span class="p">}</span>
</code></pre></div>
<p>Now when you call the secured API, you need to add the token to your headers:</p>
<div class="highlight"><pre><code class="bash">curl -X GET <span class="se">\</span>
  http://localhost/hello <span class="se">\</span>
  -H <span class="s1">&#39;authorization: Bearer eyJhbGciOi...&#39;</span>
</code></pre></div>
<p>If you don&#39;t supply the <code>authorization</code> header at all, you correctly get a <code>401</code> response; if the token is invalid or you (for example) try and use <code>Basic</code> authentication, you receive a <code>403</code>. Both return with an empty body; if you wanted to make the pages pretty you would need to add <code>handleUnauthorized</code> and <code>handleForbidden</code> to your <code>freyaMachine</code>. Here, for an API it&#39;s probably as meaningful to just leave the response empty. There isn&#39;t any further information to supply, after all.</p>

<p>And there it is: token bearer authentication set up for Freya.</p>

<p>Interested in how you can set up the whole environment in Kubernetes including IdentityServer, logging, metrics and all the other mod cons you could desire? There&#39;s still time to sign up for <a href="/building-solid-systems-in-f-number/">Building Solid Systems in F#</a> at the end of the month!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logging Freya]]></title>
    <link href="https://blog.mavnn.co.uk/logging-freya/"/>
    <updated>2017-12-08T15:43:57+00:00</updated>
    <id>https://blog.mavnn.co.uk/logging-freya</id>
    <content type="html"><![CDATA[<p>Eugene Tolmachev asked in a comment on a previous post <a href="http://disq.us/p/1oeml1a">how I handle dependency injection</a> with <a href="https://freya.io/">Freya</a>.</p>

<p>So... my first, slightly annoying answer is that I try not to. Mark Seeman has written about this in a <a href="http://blog.ploeh.dk/2017/01/27/from-dependency-injection-to-dependency-rejection/">great series of blog posts</a> which I won&#39;t try and repeat here.</p>

<p>Still, there are occasions where you want to quickly and easily do... something.. with a dependency making use of the context that being inside a Freya workflow provides. Let&#39;s quickly walk through how I inject a logger into a Freya workflow which &quot;knows&quot; about things like the request ID Kestrel has assigned to the current request.</p>

<p>I&#39;m going to use Serilog as an example below, but you could also use any other structured logging library (I like Logary, but there isn&#39;t a .NET Core release at time of writing).</p>

<!-- more -->

<p>I&#39;ll annotate the code inline to give you an idea what it&#39;s doing.</p>

<p>So; our first module is shared code which you&#39;ll probably want to reuse across all of your Freya services. Put it in a separate .fs file (it assumes Serilog has been taken as a dependency).</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nc">Logging</span>

<span class="k">open</span> <span class="nn">Aether</span><span class="p">.</span><span class="nc">Operators</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nc">Core</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nc">Optics</span>
<span class="k">open</span> <span class="nc">Serilog</span>
<span class="k">open</span> <span class="nn">Serilog</span><span class="p">.</span><span class="nc">Context</span>
<span class="k">open</span> <span class="nn">Serilog</span><span class="p">.</span><span class="nc">Configuration</span>

<span class="c1">// We&#39;ll expand the Request module with two news Optics;</span>
<span class="c1">// one uses the &quot;RequestId&quot; constant defined by the Owin</span>
<span class="c1">// specification to extract the ID assigned to this request.</span>
<span class="c1">// The other we&#39;ll define in the &quot;serilog&quot; name space in the</span>
<span class="c1">// Freya context Dictionary (all owin keys start &quot;owin.&quot;)</span>
<span class="o">[&lt;</span><span class="nc">RequireQualifiedAccess</span><span class="o">&gt;]</span>
<span class="k">module</span> <span class="nc">Request</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">requestId_</span> <span class="o">=</span>
            <span class="nn">State</span><span class="p">.</span><span class="n">value_</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;</span> <span class="nn">Constants</span><span class="p">.</span><span class="nc">RequestId</span>
        <span class="o">&gt;-&gt;</span> <span class="nn">Option</span><span class="p">.</span><span class="n">unsafe_</span>

    <span class="c1">// An optic for focussing on an ILogger in the Freya</span>
    <span class="c1">// state. That&#39;s great, but how does the ILogger get</span>
    <span class="c1">// there? Read on...</span>
    <span class="k">let</span> <span class="n">logger_</span> <span class="o">=</span>
            <span class="nn">State</span><span class="p">.</span><span class="n">value_</span><span class="o">&lt;</span><span class="nc">ILogger</span><span class="o">&gt;</span> <span class="s2">&quot;serilog.logger&quot;</span>
        <span class="o">&gt;-&gt;</span> <span class="nn">Option</span><span class="p">.</span><span class="n">unsafe_</span>

<span class="c1">// As a structured logging library, you can attach an</span>
<span class="c1">// array of &quot;values&quot; to a Serilog event - we&#39;ll use this</span>
<span class="c1">// helper to give us a more &quot;F#ish&quot; API</span>
<span class="k">type</span> <span class="nc">SerilogContext</span> <span class="o">=</span>
    <span class="o">{</span> <span class="nc">Template</span> <span class="o">:</span> <span class="kt">string</span>
      <span class="nc">Values</span> <span class="o">:</span> <span class="n">obj</span> <span class="kt">list</span> <span class="o">}</span>

<span class="o">[&lt;</span><span class="nc">RequireQualifiedAccess</span><span class="o">&gt;]</span>
<span class="k">module</span> <span class="nc">Log</span> <span class="o">=</span>
    <span class="c1">// Extract the request ID once per request</span>
    <span class="k">let</span> <span class="k">private</span> <span class="n">rid</span> <span class="o">=</span>
        <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="n">requestId_</span>
        <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">memo</span>

    <span class="c1">// Extract the ILogger once per request</span>
    <span class="k">let</span> <span class="k">private</span> <span class="n">ilogger</span> <span class="o">=</span>
        <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="n">logger_</span>
        <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">memo</span>

    <span class="c1">// A method to inject an ILogger *into* the Freya</span>
    <span class="c1">// state</span>
    <span class="k">let</span> <span class="n">injectLogger</span> <span class="o">(</span><span class="n">config</span> <span class="o">:</span> <span class="nc">LoggerConfiguration</span><span class="o">)</span> <span class="o">=</span>
        <span class="k">let</span> <span class="n">logger</span> <span class="o">=</span>
            <span class="n">config</span>
                <span class="o">.</span><span class="nn">Enrich</span><span class="p">.</span><span class="nc">FromLogContext</span><span class="bp">()</span>
                <span class="o">.</span><span class="nc">CreateLogger</span><span class="bp">()</span>
            <span class="o">:&gt;</span> <span class="nc">ILogger</span>
        <span class="n">freya</span> <span class="o">{</span>
            <span class="k">do</span><span class="o">!</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">set</span> <span class="nn">Request</span><span class="p">.</span><span class="n">logger_</span> <span class="n">logger</span>
            <span class="k">return</span> <span class="nc">Next</span>
        <span class="o">}</span>

    <span class="c1">// From here on in is just an F# friendly wrapper</span>
    <span class="c1">// around Serilog.</span>

    <span class="c1">// Start building up a new log message with a</span>
    <span class="c1">// message template</span>
    <span class="k">let</span> <span class="n">message</span> <span class="n">template</span> <span class="o">=</span>
        <span class="o">{</span> <span class="nc">Template</span> <span class="o">=</span> <span class="n">template</span>
          <span class="nc">Values</span> <span class="o">=</span> <span class="bp">[]</span> <span class="o">}</span>

    <span class="c1">// Add a value to the message context</span>
    <span class="k">let</span> <span class="n">add</span> <span class="n">value</span> <span class="n">context</span> <span class="o">=</span>
        <span class="o">{</span> <span class="n">context</span> <span class="k">with</span> <span class="nc">Values</span> <span class="o">=</span> <span class="o">(</span><span class="n">box</span> <span class="n">value</span><span class="o">)::</span><span class="n">context</span><span class="o">.</span><span class="nc">Values</span> <span class="o">}</span>

    <span class="c1">// Function that knows how to send a message with all of the</span>
    <span class="c1">// values correctly associated, and the requestId set</span>
    <span class="k">let</span> <span class="k">private</span> <span class="n">send</span> <span class="n">f</span> <span class="n">context</span> <span class="o">=</span>
        <span class="n">freya</span> <span class="o">{</span>
            <span class="k">let</span><span class="o">!</span> <span class="n">requestId</span> <span class="o">=</span> <span class="n">rid</span>
            <span class="k">let</span><span class="o">!</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">ilogger</span>
            <span class="n">using</span>
                <span class="o">(</span><span class="nn">LogContext</span><span class="p">.</span><span class="nc">PushProperty</span><span class="o">(</span><span class="s2">&quot;RequestId&quot;</span><span class="o">,</span> <span class="n">requestId</span><span class="o">))</span>
                <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span>
                     <span class="k">let</span> <span class="n">values</span> <span class="o">=</span>
                         <span class="n">context</span><span class="o">.</span><span class="nc">Values</span>
                         <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">toArray</span>
                         <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">rev</span>
                     <span class="n">f</span> <span class="n">logger</span> <span class="n">context</span><span class="o">.</span><span class="nc">Template</span> <span class="n">values</span><span class="o">)</span>
        <span class="o">}</span>

    <span class="c1">// The four standard log levels</span>
    <span class="k">let</span> <span class="n">debug</span> <span class="n">context</span> <span class="o">=</span>
        <span class="k">let</span> <span class="n">f</span> <span class="o">(</span><span class="n">logger</span> <span class="o">:</span> <span class="nc">ILogger</span><span class="o">)</span> <span class="n">template</span> <span class="o">(</span><span class="n">values</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
            <span class="n">logger</span><span class="o">.</span><span class="nc">Debug</span><span class="o">(</span><span class="n">template</span><span class="o">,</span> <span class="n">values</span><span class="o">)</span>
        <span class="n">send</span> <span class="n">f</span> <span class="n">context</span>

    <span class="k">let</span> <span class="n">info</span> <span class="n">context</span> <span class="o">=</span>
        <span class="k">let</span> <span class="n">f</span> <span class="o">(</span><span class="n">logger</span> <span class="o">:</span> <span class="nc">ILogger</span><span class="o">)</span> <span class="n">template</span> <span class="o">(</span><span class="n">values</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
            <span class="n">logger</span><span class="o">.</span><span class="nc">Information</span><span class="o">(</span><span class="n">template</span><span class="o">,</span> <span class="n">values</span><span class="o">)</span>
        <span class="n">send</span> <span class="n">f</span> <span class="n">context</span>

    <span class="k">let</span> <span class="n">warn</span> <span class="n">context</span> <span class="o">=</span>
        <span class="k">let</span> <span class="n">f</span> <span class="o">(</span><span class="n">logger</span> <span class="o">:</span> <span class="nc">ILogger</span><span class="o">)</span> <span class="n">template</span> <span class="o">(</span><span class="n">values</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
            <span class="n">logger</span><span class="o">.</span><span class="nc">Warning</span><span class="o">(</span><span class="n">template</span><span class="o">,</span> <span class="n">values</span><span class="o">)</span>
        <span class="n">send</span> <span class="n">f</span> <span class="n">context</span>

    <span class="k">let</span> <span class="n">error</span> <span class="n">context</span> <span class="o">=</span>
        <span class="k">let</span> <span class="n">f</span> <span class="o">(</span><span class="n">logger</span> <span class="o">:</span> <span class="nc">ILogger</span><span class="o">)</span> <span class="n">template</span> <span class="o">(</span><span class="n">values</span> <span class="o">:</span> <span class="n">obj</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
            <span class="n">logger</span><span class="o">.</span><span class="nc">Error</span><span class="o">(</span><span class="n">template</span><span class="o">,</span> <span class="n">values</span><span class="o">)</span>
        <span class="n">send</span> <span class="n">f</span> <span class="n">context</span>
</code></pre></div>
<p>So that&#39;s great and all... but how and where do we actually call that <code>injectLogger</code> function?</p>

<p>Well, that goes in your application root where you build your final Freya app.</p>

<p>Mine normally ends up looking something like this:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">root</span> <span class="n">logConfig</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">routes</span> <span class="o">=</span>
        <span class="n">freyaRouter</span> <span class="o">{</span> <span class="c">(* My resources here *)</span> <span class="o">}</span>
    <span class="nn">Log</span><span class="p">.</span><span class="n">injectLogger</span> <span class="n">logConfig</span>
    <span class="o">|&gt;</span> <span class="o">(</span><span class="n">flip</span> <span class="nn">Pipeline</span><span class="p">.</span><span class="n">compose</span><span class="o">)</span> <span class="n">routes</span>
    <span class="o">|&gt;</span> <span class="o">(</span><span class="n">flip</span> <span class="nn">Pipeline</span><span class="p">.</span><span class="n">compose</span><span class="o">)</span> <span class="n">notFound</span>
</code></pre></div>
<p>Because <code>injectLogger</code> returns a Freya <code>Pipeline</code> type which <em>always</em> passes handling onto the next step in the pipeline, all that first step does is add in a newly initialized ILogger to the Freya state, and then passes things on down the chain as normal.</p>

<p>In your Freya code, logging looks like this:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">notFoundResponse</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">path</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Request</span><span class="p">.</span><span class="n">path_</span>
        <span class="k">do</span><span class="o">!</span> <span class="nn">Log</span><span class="p">.</span><span class="n">message</span> <span class="s2">&quot;Why am I logging a GUID like this one {guid} on requests to {path}?&quot;</span>
            <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">add</span> <span class="o">(</span><span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span><span class="o">)</span>
            <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">add</span> <span class="n">path</span>
            <span class="o">|&gt;</span> <span class="nn">Log</span><span class="p">.</span><span class="n">info</span>
        <span class="k">return</span> <span class="n">representJson</span> <span class="s2">&quot;We couldn&#39;t find that&quot;</span>
    <span class="o">}</span>
</code></pre></div>
<p>Notice that <code>do!</code> is required for logging now, as our log methods have type <code>Freya&lt;unit&gt;</code>. This is what allows us to add the request specific context to our logs without explicitly having to append it ourselves every time.</p>

<p>I&#39;m not sure if this strictly answers Eugene&#39;s question, but I hope all you (potential) Freya users out there find it helpful regardless.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[POSTing to Freya]]></title>
    <link href="https://blog.mavnn.co.uk/posting-to-freya/"/>
    <updated>2017-10-25T15:52:57+01:00</updated>
    <id>https://blog.mavnn.co.uk/posting-to-freya</id>
    <content type="html"><![CDATA[<p>I&#39;ve written about how nice Freya is as a library, but documentation is still a little light on the ground.</p>

<p>So here&#39;s a minimal implementation of a &quot;microservice&quot; Freya API, starting from which dotnet commands to run to install the Freya template, through to a running web service.</p>

<p>Make sure you have an up to date .NET Core SDK installed, and grab yourself the handy dandy Freya template:</p>
<div class="highlight"><pre><code class="bash">dotnet new -i <span class="s2">&quot;Freya.Template::*&quot;</span>
</code></pre></div>
<p>Then create yourself a directory and go into it. The following command will set up a brand new Freya project using kestrel as the underlying webserver, and Hopac (rather than F# Async) for concurrency. Alternatively, you can leave both the options off and you&#39;ll get Freya running on Suave with standard Async.</p>
<div class="highlight"><pre><code class="bash">dotnet new freya --framework kestrel --concurrency hopac
</code></pre></div>
<p>Your project should run at this point; <code>dotnet run</code> will spin up a webserver on port 5000 which will give a 404 at the root and text responses on /hello and /hello/name paths.</p>

<p>Api.fs is where all the magic of configuring Freya happens - KestrelInterop.fs contains boilerplate for making sure Routing information passes correctly between Kestrel and Freya, and Program.fs just starts Kestrel with our Freya API as an OWIN app.</p>

<h3>Adding JSON</h3>

<p>So, this is great and all, but we&#39;re building a microservice aren&#39;t we? That normally means JSON (or at least something more structured than plain text!).</p>

<p>Let&#39;s change things up so that as well as supplying the name to greet in the route, we can POST JSON with a name field to the /hello end point.</p>

<p>To respond in JSON, we need a Freya <code>Represent</code> record. We&#39;re sending a result with a fixed structure, so we don&#39;t need a serialization library or anything, we&#39;ll just construct the JSON by hand. Stick this near the top of Api.fs:</p>

<!-- more -->
<div class="highlight"><pre><code class="fsharp"><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Text</span>
<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Text</span><span class="p">.</span><span class="nc">RegularExpressions</span>

<span class="k">let</span> <span class="n">representGreeting</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">before</span> <span class="o">=</span>
        <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;{ </span><span class="se">\&quot;</span><span class="s2">greeting</span><span class="se">\&quot;</span><span class="s2">: </span><span class="se">\&quot;</span><span class="s2">&quot;</span>
    <span class="k">let</span> <span class="n">after</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2"> }&quot;</span>
    <span class="k">let</span> <span class="n">extremeSanifier</span> <span class="o">=</span>
        <span class="nn">RegularExpressions</span><span class="p">.</span><span class="nc">Regex</span><span class="o">(</span><span class="s2">&quot;[^a-z0-9 ]&quot;</span><span class="o">,</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">Compiled</span> <span class="o">|||</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">IgnoreCase</span><span class="o">)</span>
    <span class="k">fun</span> <span class="n">name</span> <span class="o">-&gt;</span>
        <span class="k">let</span> <span class="n">safeNameBytes</span> <span class="o">=</span>
            <span class="n">extremeSanifier</span><span class="o">.</span><span class="nc">Replace</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">)</span>
            <span class="o">|&gt;</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span>
        <span class="o">{</span> <span class="nc">Description</span> <span class="o">=</span>
            <span class="o">{</span> <span class="nc">Charset</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">Charset</span><span class="p">.</span><span class="nc">Utf8</span>
              <span class="nc">Encodings</span> <span class="o">=</span> <span class="nc">None</span>
              <span class="nc">MediaType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span>
              <span class="nc">Languages</span> <span class="o">=</span> <span class="nc">None</span> <span class="o">}</span>
          <span class="nc">Data</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">concat</span> <span class="o">[</span><span class="n">before</span><span class="o">;</span><span class="n">safeNameBytes</span><span class="o">;</span><span class="n">after</span><span class="o">]</span> <span class="o">}</span>
</code></pre></div>
<p>So here we&#39;re defining an HTTP representation of a response, including media type and other important information.</p>

<p>Aside: why do we return a lambda at the end rather than making representGreeting itself a function? That&#39;s so that we don&#39;t want to rebuild the two byte arrays and the regex every time we call the function.</p>

<p>We also need to be able to read incoming JSON. Well, all we want is a string so lets just check that there&#39;s an &#39;&quot;&#39; at the beginning and end...</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>

<span class="k">let</span> <span class="n">grabString</span> <span class="o">(</span><span class="n">bodyStream</span> <span class="o">:</span> <span class="o">#</span><span class="nc">Stream</span><span class="o">)</span> <span class="o">=</span>
    <span class="k">use</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamReader</span><span class="o">(</span><span class="n">bodyStream</span><span class="o">)</span>
    <span class="k">match</span> <span class="n">reader</span><span class="o">.</span><span class="nc">ReadToEnd</span><span class="bp">()</span> <span class="k">with</span>
    <span class="o">|</span> <span class="n">str</span> <span class="k">when</span> <span class="n">str</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="o">.[</span><span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">-&gt;</span>
        <span class="nc">Some</span> <span class="o">&lt;|</span> <span class="n">str</span><span class="o">.</span><span class="nc">Substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">2</span><span class="o">)</span>
    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nc">None</span>
</code></pre></div>
<p>Now we can start hooking up the actual root that we want. We need to make some additions to <code>helloMachine</code>:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">helloMachine</span> <span class="o">=</span>
    <span class="n">freyaMachine</span> <span class="o">{</span>
        <span class="c1">// methods [GET; HEAD; OPTIONS]</span>
        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">;</span> <span class="nc">POST</span><span class="o">]</span>
        <span class="n">acceptableMediaTypes</span> <span class="o">[</span><span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span><span class="o">]</span>
        <span class="n">handleOk</span> <span class="n">sayHello</span> <span class="o">}</span>
</code></pre></div>
<p>Magically our endpoint now knows not only that we accept POSTs, but it will end the correct error code if the media type of the POST is not set to JSON.</p>

<p>We also need to update <code>sayHello</code> and <code>name</code>; we&#39;ll extract the method of the request and choose logic for working out the name and creating the response respectively.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">name_</span> <span class="o">=</span> <span class="nn">Route</span><span class="p">.</span><span class="n">atom_</span> <span class="s2">&quot;name&quot;</span>
<span class="k">let</span> <span class="n">method_</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">method_</span>

<span class="k">let</span> <span class="n">name</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">nameO</span> <span class="o">=</span>
            <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
            <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
                <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">body_</span>
                <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">map</span> <span class="n">grabString</span>
            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">name_</span>

        <span class="k">match</span> <span class="n">nameO</span> <span class="k">with</span>
        <span class="o">|</span> <span class="nc">Some</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">name</span>
        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="s2">&quot;World&quot;</span> <span class="o">}</span>

<span class="k">let</span> <span class="n">representResponse</span> <span class="n">greeting</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
        <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
        <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
            <span class="k">return</span> <span class="n">representGreeting</span> <span class="n">greeting</span>
        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
            <span class="k">return</span> <span class="nn">Represent</span><span class="p">.</span><span class="n">text</span> <span class="n">greeting</span>
    <span class="o">}</span>
</code></pre></div>
<p>And that&#39;s everything we should need. Firing up <a href="https://www.getpostman.com/">PostMan</a> we can find out that posting an empty body gets a 500 (we should probably handle that, looks like the request stream can be null), firing in a string with no media type header gets back a &quot;415 Unsupported Media Type&quot; (did you know that off hand?) and a POST with a correct body (i.e., starts and ends with a &#39;&quot;&#39;) gets us back:</p>
<div class="highlight"><pre><code class="json"><span class="p">{</span> <span class="nt">&quot;greeting&quot;</span><span class="p">:</span> <span class="s2">&quot;Hello michael&quot;</span> <span class="p">}</span>
</code></pre></div>
<p>So there you have it. Adding a POST endpoint to Freya.</p>

<h3>Appendix</h3>

<p>Here is the complete Api.fs for you to follow along, with open statements moved to the top of the file:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nc">Api</span>

<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Text</span>
<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Text</span><span class="p">.</span><span class="nc">RegularExpressions</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nc">Core</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Machines</span><span class="p">.</span><span class="nc">Http</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Types</span><span class="p">.</span><span class="nc">Http</span>
<span class="k">open</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Routers</span><span class="p">.</span><span class="nn">Uri</span><span class="p">.</span><span class="nc">Template</span>

<span class="k">let</span> <span class="n">representGreeting</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">before</span> <span class="o">=</span>
        <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;{ </span><span class="se">\&quot;</span><span class="s2">greeting</span><span class="se">\&quot;</span><span class="s2">: </span><span class="se">\&quot;</span><span class="s2">&quot;</span>
    <span class="k">let</span> <span class="n">after</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2"> }&quot;</span>
    <span class="k">let</span> <span class="n">extremeSanifier</span> <span class="o">=</span>
        <span class="nn">RegularExpressions</span><span class="p">.</span><span class="nc">Regex</span><span class="o">(</span><span class="s2">&quot;[^a-z0-9 ]&quot;</span><span class="o">,</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">Compiled</span> <span class="o">|||</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">IgnoreCase</span><span class="o">)</span>
    <span class="k">fun</span> <span class="n">name</span> <span class="o">-&gt;</span>
        <span class="k">let</span> <span class="n">safeNameBytes</span> <span class="o">=</span>
            <span class="n">extremeSanifier</span><span class="o">.</span><span class="nc">Replace</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">)</span>
            <span class="o">|&gt;</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span>
        <span class="o">{</span> <span class="nc">Description</span> <span class="o">=</span>
            <span class="o">{</span> <span class="nc">Charset</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">Charset</span><span class="p">.</span><span class="nc">Utf8</span>
              <span class="nc">Encodings</span> <span class="o">=</span> <span class="nc">None</span>
              <span class="nc">MediaType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span>
              <span class="nc">Languages</span> <span class="o">=</span> <span class="nc">None</span> <span class="o">}</span>
          <span class="nc">Data</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">concat</span> <span class="o">[</span><span class="n">before</span><span class="o">;</span><span class="n">safeNameBytes</span><span class="o">;</span><span class="n">after</span><span class="o">]</span> <span class="o">}</span>

<span class="k">let</span> <span class="n">grabString</span> <span class="o">(</span><span class="n">bodyStream</span> <span class="o">:</span> <span class="o">#</span><span class="nc">Stream</span><span class="o">)</span> <span class="o">=</span>
    <span class="k">use</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamReader</span><span class="o">(</span><span class="n">bodyStream</span><span class="o">)</span>
    <span class="k">match</span> <span class="n">reader</span><span class="o">.</span><span class="nc">ReadToEnd</span><span class="bp">()</span> <span class="k">with</span>
    <span class="o">|</span> <span class="n">str</span> <span class="k">when</span> <span class="n">str</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="o">.[</span><span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">-&gt;</span>
        <span class="nc">Some</span> <span class="o">&lt;|</span> <span class="n">str</span><span class="o">.</span><span class="nc">Substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">str</span><span class="o">.</span><span class="nc">Length</span> <span class="o">-</span> <span class="mi">2</span><span class="o">)</span>
    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nc">None</span>


<span class="k">let</span> <span class="n">name_</span> <span class="o">=</span> <span class="nn">Route</span><span class="p">.</span><span class="n">atom_</span> <span class="s2">&quot;name&quot;</span>
<span class="k">let</span> <span class="n">method_</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">method_</span>

<span class="k">let</span> <span class="n">name</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">nameO</span> <span class="o">=</span>
            <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
            <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
                <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optics</span><span class="p">.</span><span class="nn">Http</span><span class="p">.</span><span class="nn">Request</span><span class="p">.</span><span class="n">body_</span>
                <span class="o">|&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="n">map</span> <span class="n">grabString</span>
            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">name_</span>

        <span class="k">match</span> <span class="n">nameO</span> <span class="k">with</span>
        <span class="o">|</span> <span class="nc">Some</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">name</span>
        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="s2">&quot;World&quot;</span> <span class="o">}</span>

<span class="k">let</span> <span class="n">representResponse</span> <span class="n">greeting</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="nn">Freya</span><span class="p">.</span><span class="nn">Optic</span><span class="p">.</span><span class="n">get</span> <span class="n">method_</span>
        <span class="k">match</span> <span class="n">requestMethod</span> <span class="k">with</span>
        <span class="o">|</span> <span class="nc">POST</span> <span class="o">-&gt;</span>
            <span class="k">return</span> <span class="n">representGreeting</span> <span class="n">greeting</span>
        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
            <span class="k">return</span> <span class="nn">Represent</span><span class="p">.</span><span class="n">text</span> <span class="n">greeting</span>
    <span class="o">}</span>

<span class="k">let</span> <span class="n">sayHello</span> <span class="o">=</span>
    <span class="n">freya</span> <span class="o">{</span>
        <span class="k">let</span><span class="o">!</span> <span class="n">name</span> <span class="o">=</span> <span class="n">name</span>

        <span class="k">return</span><span class="o">!</span> <span class="n">representResponse</span> <span class="o">(</span><span class="n">sprintf</span> <span class="s2">&quot;Hello, %s!&quot;</span> <span class="n">name</span><span class="o">)</span> <span class="o">}</span>

<span class="k">let</span> <span class="n">helloMachine</span> <span class="o">=</span>
    <span class="n">freyaMachine</span> <span class="o">{</span>
        <span class="c1">// methods [GET; HEAD; OPTIONS]</span>
        <span class="n">methods</span> <span class="o">[</span><span class="nc">GET</span><span class="o">;</span> <span class="nc">HEAD</span><span class="o">;</span> <span class="nc">OPTIONS</span><span class="o">;</span> <span class="nc">POST</span><span class="o">]</span>
        <span class="n">acceptableMediaTypes</span> <span class="o">[</span><span class="nn">MediaType</span><span class="p">.</span><span class="nc">Json</span><span class="o">]</span>
        <span class="n">handleOk</span> <span class="n">sayHello</span> <span class="o">}</span>

<span class="k">let</span> <span class="n">root</span> <span class="o">=</span>
    <span class="n">freyaRouter</span> <span class="o">{</span>
        <span class="n">resource</span> <span class="s2">&quot;/hello{/name}&quot;</span> <span class="n">helloMachine</span> <span class="o">}</span>
</code></pre></div>]]></content>
  </entry>
  
</feed>
