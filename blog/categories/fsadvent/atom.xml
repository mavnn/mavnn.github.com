<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: FsAdvent | Mavnn's blog]]></title>
  <link href="https://blog.mavnn.co.uk/blog/categories/fsadvent/atom.xml" rel="self"/>
  <link href="https://blog.mavnn.co.uk/"/>
  <updated>2017-09-14T15:09:10+01:00</updated>
  <id>https://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Advent 2016]]></title>
    <link href="https://blog.mavnn.co.uk/advent-2016/"/>
    <updated>2016-12-18T00:30:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/advent-2016</id>
    <content type="html"><![CDATA[<style>
table.jup, .jup th, .jup td {
  border: 1px solid #e7e3e7;
  padding: 0.5em;
  margin: 0.5em;
}
table.jup  {
  margin-bottom: 1.5em;
}
</style>

<p>Each year I like to make my F# advent post centered around an aspect of the actual Christmas story, so this year I decided to look at the actual text of the Christmas story.</p>

<p>There are a couple of direct historical accounts recorded in the bible, in the Gospels of Mark and Luke. But Jesus&#39;s birth is a central point of the overall biblical story, with links to the Old Testiment books written before and referenced in places through the New Testiment.</p>

<p>Sounds like a graph to me, so lets see how far we can take some analysis.</p>

<p>Fortunately, someone has already produced a <a href="https://www.openbible.info/labs/cross-references/">text file with a whole bunch of cross references</a> in a nice regular format. So all we need to get started is a nice parser. We&#39;ll also want to pull in some metadata about the structure of the bible as a book in JSON format from the people at <a href="http://bibles.org/pages/api/documentation">bibles.org</a>.</p>

<p>Time to reference some dependencies to do our heavy lifting for us: FParsec for parsing, and FSharp.Data for the JSON type provider.</p>

<p>I&#39;m writing this in the excellent Jupyter F# notebook (and then exporting it as markdown), so I&#39;ll use their Paket helpers to grab my dependencies (this should work on the Azure notebooks as well, although I&#39;ve only tried it locally).</p>

<!-- more -->
<div class="highlight"><pre><code class="fsharp"><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;Paket.fsx&quot;</span>

<span class="nn">Paket</span><span class="p">.</span><span class="nc">Package</span> <span class="o">[</span><span class="s2">&quot;FParsec&quot;</span><span class="o">;</span> <span class="s2">&quot;FSharp.Data&quot;</span><span class="o">]</span>
</code></pre></div><div class="highlight"><pre><code class="text">&lt;null&gt;
</code></pre></div><div class="highlight"><pre><code class="fsharp"><span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;packages/FParsec/lib/net40-client/FParsecCS.dll&quot;</span>
<span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;packages/FParsec/lib/net40-client/FParsec.dll&quot;</span>
<span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;packages/FSharp.Data/lib/net40/FSharp.Data.dll&quot;</span>
<span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;packages/FSharp.Data/lib/net40/FSharp.Data.DesignTime.dll&quot;</span>
<span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;packages/Zlib.Portable/lib/portable-net4+sl5+wp8+win8+wpa81+MonoTouch+MonoAndroid/Zlib.Portable.dll&quot;</span>
</code></pre></div>
<p>So. This is F#, so the first thing we&#39;ll be wanting is our domain model. What do we need to represent our data in the type system?</p>

<p>Well, there is a standardized system for referencing locations in biblical text; we give a book of the bible (the bible is actually a mini-library of sub-books written at different times), the chapter (in theory a thematic block within a book) and a verse (a fairly arbitrary devision of a sentence or two of text). The chapter and verse devisions were not added by the authors, but by monks and scholars well after the fact, but they do give us an accurate way of pointing to a small defined chunk of biblical text between different printings and translations.</p>

<p>It&#39;s also frequently useful to refer to a range of verses with in a book.</p>

<p>So we&#39;re going to define three main types: <code>ChapterAndVerse</code> (what it sounds like), <code>Location</code> (book name and <code>ChapterAndVerse</code>) and <code>Range</code> (book name, start <code>ChapterAndVerse</code> and end <code>ChapterAndVerse</code>).</p>

<p>We&#39;ll use units of measure to make sure we can&#39;t swap chapters for verses by mistake, and add some helper methods to give nice string representations of the types and a concise syntax for creating instances of the types.</p>

<p>As an aside: the ordering of the books within the bible is fairly arbitrary, so a range that crosses between two books is meaningless. This is why a range is between to <code>ChapterAndVerse</code>s, not between two <code>Location</code>s - remember folks, make illegal states unrepresentable.</p>
<div class="highlight"><pre><code class="fsharp"><span class="o">[&lt;</span><span class="nc">Measure</span><span class="o">&gt;]</span> <span class="k">type</span> <span class="nc">Chapter</span>
<span class="o">[&lt;</span><span class="nc">Measure</span><span class="o">&gt;]</span> <span class="k">type</span> <span class="nc">Verse</span>
<span class="o">[&lt;</span><span class="nc">Measure</span><span class="o">&gt;]</span> <span class="k">type</span> <span class="n">c</span> <span class="o">=</span> <span class="nc">Chapter</span>
<span class="o">[&lt;</span><span class="nc">Measure</span><span class="o">&gt;]</span> <span class="k">type</span> <span class="n">v</span> <span class="o">=</span> <span class="nc">Verse</span>

<span class="k">type</span> <span class="nc">ChapterAndVerse</span> <span class="o">=</span>
  <span class="o">{</span> <span class="nc">Chapter</span> <span class="o">:</span> <span class="kt">int</span><span class="o">&lt;</span><span class="nc">Chapter</span><span class="o">&gt;</span>
    <span class="nc">Verse</span> <span class="o">:</span> <span class="kt">int</span><span class="o">&lt;</span><span class="nc">Verse</span><span class="o">&gt;</span> <span class="o">}</span>
  <span class="k">static</span> <span class="k">member</span> <span class="nc">Make</span> <span class="n">c</span> <span class="n">v</span> <span class="o">=</span>
    <span class="o">{</span> <span class="nc">Chapter</span> <span class="o">=</span> <span class="n">c</span>
      <span class="nc">Verse</span> <span class="o">=</span> <span class="n">v</span> <span class="o">}</span>
  <span class="k">override</span> <span class="n">x</span><span class="o">.</span><span class="nc">ToString</span> <span class="bp">()</span> <span class="o">=</span>
    <span class="n">sprintf</span> <span class="s2">&quot;%d.%d&quot;</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="nc">Chapter</span> <span class="o">/</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="nc">Verse</span> <span class="o">/</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>

<span class="k">let</span> <span class="n">cv</span> <span class="o">=</span>
  <span class="nn">ChapterAndVerse</span><span class="p">.</span><span class="nc">Make</span>

<span class="k">type</span> <span class="nc">Location</span> <span class="o">=</span>
  <span class="o">{</span> <span class="nc">Book</span> <span class="o">:</span> <span class="kt">string</span>
    <span class="nc">ChapterAndVerse</span> <span class="o">:</span> <span class="nc">ChapterAndVerse</span> <span class="o">}</span>
  <span class="k">static</span> <span class="k">member</span> <span class="nc">Make</span> <span class="n">b</span> <span class="n">c</span> <span class="n">v</span> <span class="o">=</span>
    <span class="o">{</span> <span class="nc">Book</span> <span class="o">=</span> <span class="n">b</span>
      <span class="nc">ChapterAndVerse</span> <span class="o">=</span> <span class="o">{</span> <span class="nc">Chapter</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span> <span class="nc">Verse</span> <span class="o">=</span> <span class="n">v</span> <span class="o">}</span> <span class="o">}</span>
  <span class="k">override</span> <span class="n">x</span><span class="o">.</span><span class="nc">ToString</span> <span class="bp">()</span> <span class="o">=</span>
     <span class="n">sprintf</span> <span class="s2">&quot;%s.%O&quot;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Book</span> <span class="n">x</span><span class="o">.</span><span class="nc">ChapterAndVerse</span>

<span class="k">let</span> <span class="n">loc</span> <span class="o">=</span>
  <span class="nn">Location</span><span class="p">.</span><span class="nc">Make</span>

<span class="k">type</span> <span class="nc">Range</span> <span class="o">=</span>
  <span class="o">{</span> <span class="nc">Book</span> <span class="o">:</span> <span class="kt">string</span>
    <span class="nc">Start</span> <span class="o">:</span> <span class="nc">ChapterAndVerse</span>
    <span class="nc">End</span> <span class="o">:</span> <span class="nc">ChapterAndVerse</span> <span class="o">}</span>
  <span class="k">static</span> <span class="k">member</span> <span class="nc">Make</span> <span class="n">b</span> <span class="n">s</span> <span class="n">e</span> <span class="o">=</span>
    <span class="o">{</span> <span class="nc">Book</span> <span class="o">=</span> <span class="n">b</span>
      <span class="nc">Start</span> <span class="o">=</span> <span class="n">s</span>
      <span class="nc">End</span> <span class="o">=</span> <span class="n">e</span> <span class="o">}</span>
  <span class="k">override</span> <span class="n">x</span><span class="o">.</span><span class="nc">ToString</span> <span class="bp">()</span> <span class="o">=</span>
    <span class="n">sprintf</span> <span class="s2">&quot;%s.%O-%s.%O&quot;</span> <span class="n">x</span><span class="o">.</span><span class="nc">Book</span> <span class="n">x</span><span class="o">.</span><span class="nc">Start</span> <span class="n">x</span><span class="o">.</span><span class="nc">Book</span> <span class="n">x</span><span class="o">.</span><span class="nc">End</span>

<span class="k">let</span> <span class="n">r</span> <span class="o">=</span>
  <span class="nn">Range</span><span class="p">.</span><span class="nc">Make</span>
</code></pre></div>
<p>We&#39;ll also need to be able to test if a location is within a range:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">contains</span> <span class="o">(</span><span class="n">range</span> <span class="o">:</span> <span class="nc">Range</span><span class="o">)</span> <span class="n">location</span> <span class="o">=</span>
  <span class="k">let</span> <span class="n">lower</span> <span class="o">=</span> <span class="o">{</span> <span class="nn">Location</span><span class="p">.</span><span class="nc">Book</span> <span class="o">=</span> <span class="n">range</span><span class="o">.</span><span class="nc">Book</span><span class="o">;</span> <span class="nc">ChapterAndVerse</span> <span class="o">=</span> <span class="n">range</span><span class="o">.</span><span class="nc">Start</span> <span class="o">}</span>
  <span class="k">let</span> <span class="n">upper</span> <span class="o">=</span> <span class="o">{</span> <span class="nn">Location</span><span class="p">.</span><span class="nc">Book</span> <span class="o">=</span> <span class="n">range</span><span class="o">.</span><span class="nc">Book</span><span class="o">;</span> <span class="nc">ChapterAndVerse</span> <span class="o">=</span> <span class="n">range</span><span class="o">.</span><span class="nc">End</span> <span class="o">}</span>
  <span class="n">location</span> <span class="o">&gt;=</span> <span class="n">lower</span> <span class="o">&amp;&amp;</span> <span class="n">location</span> <span class="o">&lt;=</span> <span class="n">upper</span>
</code></pre></div>
<p>And get a feel of how this all works.</p>
<div class="highlight"><pre><code class="fsharp"><span class="n">contains</span> <span class="o">(</span><span class="n">r</span> <span class="s2">&quot;Gen&quot;</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">10</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;))</span> <span class="o">(</span><span class="n">loc</span> <span class="s2">&quot;Gen&quot;</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>
</code></pre></div><div class="highlight"><pre><code class="text">true
</code></pre></div>
<p>Genesis 1:2 (verse 2 of chapter 1 of the book of Genesis) is indeed within the range Genesis 1:1-2:10.</p>
<div class="highlight"><pre><code class="fsharp"><span class="n">contains</span> <span class="o">(</span><span class="n">r</span> <span class="s2">&quot;Gen&quot;</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">10</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;))</span> <span class="o">(</span><span class="n">loc</span> <span class="s2">&quot;Gen&quot;</span> <span class="mi">3</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>
</code></pre></div><div class="highlight"><pre><code class="text">false
</code></pre></div>
<p>While Genesis 3:2 is not. Good stuff.</p>

<p>We have a working domain now, let&#39;s have a look at the input data.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
<span class="k">let</span> <span class="n">input</span> <span class="o">=</span>
  <span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllLines</span> <span class="o">&lt;|</span> <span class="nn">Path</span><span class="p">.</span><span class="nc">Combine</span><span class="o">(__</span><span class="n">SOURCE_DIRECTORY__</span><span class="o">,</span> <span class="s2">&quot;cross_references.txt&quot;</span><span class="o">)</span>

<span class="n">input</span>
</code></pre></div><div class="highlight"><pre><code class="text">[|&quot;From Verse   To Verse    Votes   #www.openbible.info CC-BY 2016-12-05&quot;;
  &quot;Gen.1.1  Heb.11.3    67&quot;; &quot;Gen.1.1   1Chr.16.26  11&quot;; &quot;Gen.1.1   Eccl.12.1   4&quot;;
  &quot;Gen.1.1  Prov.3.19   19&quot;; &quot;Gen.1.1   Ps.124.8    16&quot;; &quot;Gen.1.1   Isa.65.17   8&quot;;
  &quot;Gen.1.1  Ps.104.24   17&quot;; &quot;Gen.1.1   Ps.121.2    14&quot;; &quot;Gen.1.1   Rev.14.7    23&quot;;
  &quot;Gen.1.1  Isa.40.26   18&quot;; &quot;Gen.1.1   Rev.3.14    9&quot;; &quot;Gen.1.1    Job.38.4    43&quot;;
  &quot;Gen.1.1  Exod.20.11  34&quot;; &quot;Gen.1.1   Isa.37.16   17&quot;; &quot;Gen.1.1   Prov.16.4   14&quot;;
  &quot;Gen.1.1  Ps.104.30   14&quot;; &quot;Gen.1.1   Col.1.16-Col.1.17   36&quot;; &quot;Gen.1.1   1John.1.1   14&quot;;
  &quot;Gen.1.1  Isa.45.18   53&quot;; &quot;Gen.1.1   2Pet.3.5    26&quot;; &quot;Gen.1.1   Rom.1.19-Rom.1.20   15&quot;;
  &quot;Gen.1.1  Isa.44.24   26&quot;; &quot;Gen.1.1   Ps.115.15   21&quot;; &quot;Gen.1.1   Mark.13.19  14&quot;;
  &quot;Gen.1.1  Isa.42.5    42&quot;; &quot;Gen.1.1   Ps.134.3    14&quot;; &quot;Gen.1.1   Rev.21.6    3&quot;;
  &quot;Gen.1.1  Jer.51.15   21&quot;; &quot;Gen.1.1   Rev.22.13   4&quot;; &quot;Gen.1.1    Ps.33.6 15&quot;;
  &quot;Gen.1.1  Isa.51.13   17&quot;; &quot;Gen.1.1   Isa.40.28   17&quot;; &quot;Gen.1.1   John.1.1-John.1.3   56&quot;;
  &quot;Gen.1.1  Ps.89.11-Ps.89.12   16&quot;; &quot;Gen.1.1   Ps.90.2 18&quot;; &quot;Gen.1.1   Matt.11.25  2&quot;;
  &quot;Gen.1.1  Jer.32.17   21&quot;; &quot;Gen.1.1   Ps.148.4-Ps.148.5   16&quot;; &quot;Gen.1.1   Rev.10.6    18&quot;;
  &quot;Gen.1.1  Ps.96.5 13&quot;; &quot;Gen.1.1   Isa.51.16   17&quot;; &quot;Gen.1.1   Jer.10.12   21&quot;;
  &quot;Gen.1.1  Ps.102.25   18&quot;; &quot;Gen.1.1   Rom.11.36   14&quot;; &quot;Gen.1.1   Acts.14.15  21&quot;;
  &quot;Gen.1.1  Job.26.13   9&quot;; &quot;Gen.1.1    Eph.3.9 14&quot;; &quot;Gen.1.1   Rev.4.11    44&quot;;
  &quot;Gen.1.1  Ps.33.9 17&quot;; &quot;Gen.1.1   Neh.9.6 28&quot;; &quot;Gen.1.1   Ps.146.6    17&quot;;
  &quot;Gen.1.1  Heb.3.4 15&quot;; &quot;Gen.1.1   Heb.1.2 19&quot;; &quot;Gen.1.1   Heb.1.10    41&quot;;
  &quot;Gen.1.1  Ps.136.5    24&quot;; &quot;Gen.1.1   Zech.12.1   16&quot;; &quot;Gen.1.1   Exod.31.18  -11&quot;;
  &quot;Gen.1.1  Prov.8.22-Prov.8.30 19&quot;; &quot;Gen.1.1   Acts.17.24  39&quot;;
  &quot;Gen.1.1  Acts.4.24   16&quot;; &quot;Gen.1.1   1Cor.8.6    18&quot;; &quot;Gen.1.1   Ps.8.3  17&quot;;
  &quot;Gen.1.2  Jer.4.23    17&quot;; &quot;Gen.1.2   Ps.33.6 1&quot;; &quot;Gen.1.2    Job.26.14   0&quot;;
  &quot;Gen.1.2  Nah.2.10    -5&quot;; &quot;Gen.1.2   Job.26.7    0&quot;; &quot;Gen.1.2    Isa.40.12-Isa.40.14 -2&quot;;
  &quot;Gen.1.2  Isa.45.18   7&quot;; &quot;Gen.1.2    Ps.104.30   9&quot;; &quot;Gen.1.3    1John.2.8   3&quot;;
  &quot;Gen.1.3  Job.36.30   1&quot;; &quot;Gen.1.3    Ps.33.9 4&quot;; &quot;Gen.1.3    Eph.5.8 1&quot;;
  &quot;Gen.1.3  Isa.60.19   7&quot;; &quot;Gen.1.3    2Cor.4.6    14&quot;; &quot;Gen.1.3   Isa.45.7    7&quot;;
  &quot;Gen.1.3  Ps.97.11    4&quot;; &quot;Gen.1.3    John.11.43  -1&quot;; &quot;Gen.1.3   1John.1.5   8&quot;;
  &quot;Gen.1.3  John.1.9    2&quot;; &quot;Gen.1.3    Job.38.19   3&quot;; &quot;Gen.1.3    John.3.19   3&quot;;
  &quot;Gen.1.3  Ps.33.6 6&quot;; &quot;Gen.1.3    John.1.5    9&quot;; &quot;Gen.1.3    Matt.8.3    -2&quot;;
  &quot;Gen.1.3  Ps.148.5    5&quot;; &quot;Gen.1.3    Eph.5.14    2&quot;; &quot;Gen.1.3    Ps.104.2    2&quot;;
  &quot;Gen.1.3  Ps.118.27   1&quot;; &quot;Gen.1.3    1Tim.6.16   1&quot;; &quot;Gen.1.4    Gen.1.18    4&quot;;
  &quot;Gen.1.4  Gen.1.10    1&quot;; &quot;Gen.1.4    Eccl.11.7   1&quot;; &quot;Gen.1.4    Gen.1.25    1&quot;;
  &quot;Gen.1.4  Gen.1.31    1&quot;; &quot;Gen.1.4    Eccl.2.13   2&quot;; &quot;Gen.1.4    Gen.1.12    2&quot;;
  &quot;Gen.1.5  Gen.1.23    2&quot;; ...|]
</code></pre></div>
<p>Looking fairly straight forward here; in fact, after a brief search I realised the format versed here is actually based on a standard called <a href="http://www.crosswire.org/osis/">OSIS</a>, although without all of the unneeded XML bits. Good call.</p>

<p>&quot;Votes&quot; is taken from the original source of these cross references, a context in which it was possible for people to agree or disagree on whether the verses in question are actually linked. For this post I&#39;m just going to ignore the votes, although they&#39;d make an interesting weighting for future investigations.</p>

<p>Time to build a parser to turn this text format into our nice domain types.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">open</span> <span class="nc">FParsec</span>

<span class="k">let</span> <span class="n">makeString</span> <span class="n">chars</span> <span class="o">=</span>
  <span class="n">chars</span> <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">ofList</span> <span class="o">|&gt;</span> <span class="nn">System</span><span class="p">.</span><span class="nc">String</span>

<span class="c1">// parse a location</span>
<span class="k">let</span> <span class="n">plocation</span> <span class="o">=</span>
  <span class="k">let</span> <span class="n">dot</span> <span class="o">=</span> <span class="n">pchar</span> <span class="sc">&#39;.&#39;</span>
  <span class="k">let</span> <span class="n">notDot</span> <span class="o">=</span> <span class="n">satisfy</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">c</span> <span class="o">&lt;&gt;</span> <span class="sc">&#39;.&#39;</span><span class="o">)</span>
  <span class="c1">// Take at least one non-dot character.</span>
  <span class="c1">// Build a string from the characters taken.</span>
  <span class="c1">// This is the book name.</span>
  <span class="o">(</span><span class="n">many1</span> <span class="n">notDot</span> <span class="o">|&gt;&gt;</span> <span class="n">makeString</span><span class="o">)</span>
  <span class="c1">// Check the book name is followed by a dot and</span>
  <span class="c1">// then throw it away (.&gt;&gt; only keeps the result</span>
  <span class="c1">// from the left)</span>
  <span class="o">.&gt;&gt;</span> <span class="n">dot</span>
  <span class="c1">// Parse a int; keep both the book and the int.</span>
  <span class="c1">// This is the chapter (.&gt;&gt;. keeps left and right</span>
  <span class="c1">// results, puts them in a tuple)</span>
  <span class="o">.&gt;&gt;.</span> <span class="n">pint32</span>
  <span class="c1">// As above.</span>
  <span class="o">.&gt;&gt;</span> <span class="n">dot</span>
  <span class="c1">// Capture the verse int; we now have a tuple on</span>
  <span class="c1">// the left so we end up with a tuple containing</span>
  <span class="c1">// a tuple and an int</span>
  <span class="o">.&gt;&gt;.</span> <span class="n">pint32</span>
  <span class="c1">// Map the awkward tuple structure into our nice</span>
  <span class="c1">// domain type ``Location`` if we&#39;ve found all of</span>
  <span class="c1">// the required data</span>
  <span class="o">|&gt;&gt;</span> <span class="o">(</span><span class="k">fun</span> <span class="o">((</span><span class="n">book</span><span class="o">,</span> <span class="n">chapter</span><span class="o">),</span> <span class="n">verse</span><span class="o">)</span> <span class="o">-&gt;</span>
       <span class="n">loc</span> <span class="n">book</span> <span class="o">(</span><span class="n">chapter</span> <span class="o">*</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">verse</span> <span class="o">*</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;))</span>

<span class="c1">// Parse a range</span>
<span class="k">let</span> <span class="n">prange</span> <span class="o">=</span>
  <span class="c1">// In the format above, a range is either a single</span>
  <span class="c1">// verse (representation same as a location) or as</span>
  <span class="c1">// a start and an end location separated by &quot;-&quot;.</span>
  <span class="c1">// We&#39;ll create a parser for the optional second half</span>
  <span class="c1">// first...</span>
  <span class="k">let</span> <span class="n">endOfRange</span> <span class="o">=</span>
    <span class="n">pchar</span> <span class="sc">&#39;-&#39;</span>
    <span class="c1">// &gt;&gt;. throws away the result from the left</span>
    <span class="o">&gt;&gt;.</span> <span class="n">plocation</span>
  <span class="c1">// Here we take the start and optional end location</span>
  <span class="c1">// and then map them to our domain type.</span>
  <span class="n">plocation</span> <span class="o">.&gt;&gt;.</span> <span class="o">(</span><span class="n">opt</span> <span class="n">endOfRange</span><span class="o">)</span>
  <span class="o">&gt;&gt;=</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">starting</span><span class="o">,</span> <span class="n">ending</span><span class="o">)</span> <span class="o">-&gt;</span>
  <span class="k">fun</span> <span class="n">stream</span> <span class="o">-&gt;</span>
    <span class="k">let</span> <span class="n">ending</span> <span class="o">=</span> <span class="n">defaultArg</span> <span class="n">ending</span> <span class="n">starting</span>
    <span class="k">if</span> <span class="n">starting</span><span class="o">.</span><span class="nc">Book</span> <span class="o">&lt;&gt;</span> <span class="n">ending</span><span class="o">.</span><span class="nc">Book</span> <span class="k">then</span>
      <span class="nc">Reply</span><span class="o">(</span><span class="nc">Error</span><span class="o">,</span> <span class="n">expectedString</span> <span class="s2">&quot;Both ends of range should be in the same book&quot;</span><span class="o">)</span>
    <span class="k">else</span>
      <span class="n">r</span> <span class="n">starting</span><span class="o">.</span><span class="nc">Book</span> <span class="n">starting</span><span class="o">.</span><span class="nc">ChapterAndVerse</span> <span class="n">ending</span><span class="o">.</span><span class="nc">ChapterAndVerse</span>
      <span class="o">|&gt;</span> <span class="nc">Reply</span><span class="o">)</span>

<span class="c1">// Finally, a row from the text file is just a location</span>
<span class="c1">// followed by space, followed by a range, then a space</span>
<span class="c1">// and the votes. Spaces and votes are ignored by careful</span>
<span class="c1">// use of discarding operators.</span>
<span class="k">let</span> <span class="n">row</span> <span class="o">:</span> <span class="nc">Parser</span><span class="o">&lt;_,</span> <span class="kt">unit</span><span class="o">&gt;</span> <span class="o">=</span>
  <span class="n">plocation</span>
  <span class="o">.&gt;&gt;</span> <span class="n">spaces1</span>
  <span class="o">.&gt;&gt;.</span> <span class="n">prange</span>
  <span class="o">.&gt;&gt;</span> <span class="n">spaces1</span>
  <span class="o">.&gt;&gt;</span> <span class="n">pint32</span>
  <span class="o">.&gt;&gt;</span> <span class="n">eof</span>
</code></pre></div>
<p>A few trials (of correct and incorrect inputs) suggest that our parser is working nicely.</p>
<div class="highlight"><pre><code class="fsharp"><span class="s2">&quot;Gen.1.1&quot;</span> <span class="o">|&gt;</span> <span class="n">run</span> <span class="n">plocation</span>
</code></pre></div><div class="highlight"><pre><code class="text">Success: {Book = &quot;Gen&quot;;
 ChapterAndVerse = {Chapter = 1;
                    Verse = 1;};}
</code></pre></div><div class="highlight"><pre><code class="fsharp"><span class="s2">&quot;Gen.1.1-Gen.3.10&quot;</span> <span class="o">|&gt;</span> <span class="n">run</span> <span class="n">prange</span>
</code></pre></div><div class="highlight"><pre><code class="text">Success: {Book = &quot;Gen&quot;;
 Start = {Chapter = 1;
          Verse = 1;};
 End = {Chapter = 3;
        Verse = 10;};}
</code></pre></div><div class="highlight"><pre><code class="fsharp"><span class="s2">&quot;Gen.1.1-Heb.11.3&quot;</span> <span class="o">|&gt;</span> <span class="n">run</span> <span class="n">prange</span>
</code></pre></div><div class="highlight"><pre><code class="text">Failure:
Error in Ln: 1 Col: 17
Gen.1.1-Heb.11.3
                ^
Note: The error occurred at the end of the input stream.
Expecting: &#39;Both ends of range should be in the same book&#39;
</code></pre></div><div class="highlight"><pre><code class="fsharp"><span class="s2">&quot;Gen.1.1    Heb.11.3    67&quot;</span> <span class="o">|&gt;</span> <span class="n">run</span> <span class="n">row</span>
</code></pre></div><div class="highlight"><pre><code class="text">Success: ({Book = &quot;Gen&quot;;
  ChapterAndVerse = {Chapter = 1;
                     Verse = 1;};}, {Book = &quot;Heb&quot;;
                                     Start = {Chapter = 11;
                                              Verse = 3;};
                                     End = {Chapter = 11;
                                            Verse = 3;};})
</code></pre></div><div class="highlight"><pre><code class="fsharp"><span class="s2">&quot;Gen.1.1.22 Heb.11.3    67&quot;</span> <span class="o">|&gt;</span> <span class="n">run</span> <span class="n">row</span>
</code></pre></div><div class="highlight"><pre><code class="text">Failure:
Error in Ln: 1 Col: 8
Gen.1.1.22      Heb.11.3        67
       ^
Expecting: whitespace
</code></pre></div>
<p>Now let&#39;s run our parser over the input file, and get ourselves a list of cross references.</p>

<p>There&#39;s quite a few of them, so we&#39;ll only display the first 10.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">crossReferences</span> <span class="o">=</span>
  <span class="n">input</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">skip</span> <span class="mi">1</span> <span class="c1">// skip the row titles</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="n">run</span> <span class="n">row</span><span class="o">)</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">choose</span> <span class="o">(</span><span class="k">function</span>
                 <span class="o">|</span> <span class="nc">Success</span> <span class="o">(</span><span class="n">reference</span><span class="o">,</span> <span class="o">_,</span> <span class="o">_)</span> <span class="o">-&gt;</span> <span class="nc">Some</span> <span class="n">reference</span>
                 <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nc">None</span><span class="o">)</span>

<span class="n">crossReferences</span>
<span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">10</span>
<span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Table</span>
</code></pre></div>
<table class="jup"><thead><tr><th>Item1</th><th>Item2</th></tr></thead><tbody><tr><td>Gen.1.1</td><td>Heb.11.3-Heb.11.3</td></tr><tr><td>Gen.1.1</td><td>1Chr.16.26-1Chr.16.26</td></tr><tr><td>Gen.1.1</td><td>Eccl.12.1-Eccl.12.1</td></tr><tr><td>Gen.1.1</td><td>Prov.3.19-Prov.3.19</td></tr><tr><td>Gen.1.1</td><td>Ps.124.8-Ps.124.8</td></tr><tr><td>Gen.1.1</td><td>Isa.65.17-Isa.65.17</td></tr><tr><td>Gen.1.1</td><td>Ps.104.24-Ps.104.24</td></tr><tr><td>Gen.1.1</td><td>Ps.121.2-Ps.121.2</td></tr><tr><td>Gen.1.1</td><td>Rev.14.7-Rev.14.7</td></tr><tr><td>Gen.1.1</td><td>Isa.40.26-Isa.40.26</td></tr><tbody></tbody></table>

<p>This is all great and everything, but I&#39;d also like to have some way of mapping out where these verses are in the Bible and using the full names of the books. I didn&#39;t feel like entering all the data by hand, but fortunately <a href="http://bibles.org">bibles.org</a> have done it for me. Time to break out that json type provider...</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">type</span> <span class="nc">BibleInfo</span> <span class="o">=</span> <span class="nn">FSharp</span><span class="p">.</span><span class="nn">Data</span><span class="p">.</span><span class="nc">JsonProvider</span><span class="o">&lt;</span><span class="s2">&quot;./books.js&quot;</span><span class="o">&gt;</span>
</code></pre></div><div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">bibleInfo</span> <span class="o">=</span> <span class="nn">BibleInfo</span><span class="p">.</span><span class="nc">Load</span><span class="o">(</span><span class="s2">&quot;./books.js&quot;</span><span class="o">)</span>
</code></pre></div>
<p>And create a map from short to full names.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">bookMap</span> <span class="o">=</span>
  <span class="n">bibleInfo</span><span class="o">.</span><span class="nn">Response</span><span class="p">.</span><span class="nc">Books</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="o">.</span><span class="nc">Abbr</span><span class="o">,</span> <span class="n">b</span><span class="o">.</span><span class="nc">Name</span><span class="o">)</span>
  <span class="o">|&gt;</span> <span class="nn">Map</span><span class="p">.</span><span class="n">ofSeq</span>

<span class="n">bookMap</span>
</code></pre></div><div class="highlight"><pre><code class="text">map
  [(&quot;1Chr&quot;, &quot;1 Chronicles&quot;); (&quot;1Cor&quot;, &quot;1 Corinthians&quot;); (&quot;1Esd&quot;, &quot;1 Esdras&quot;);
   (&quot;1John&quot;, &quot;1 John&quot;); (&quot;1Kgs&quot;, &quot;1 Kings&quot;); (&quot;1Macc&quot;, &quot;1 Maccabees&quot;);
   (&quot;1Pet&quot;, &quot;1 Peter&quot;); (&quot;1Sam&quot;, &quot;1 Samuel&quot;); (&quot;1Thess&quot;, &quot;1 Thessalonians&quot;); ...]
</code></pre></div>
<p>Now we have all of the actual data we need.</p>

<p>We&#39;ll start from the historical accounts of Jesus&#39;s actual birth...</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">story</span> <span class="o">=</span> <span class="o">[</span>
    <span class="c1">// Matthew&#39;s account</span>
    <span class="n">r</span> <span class="s2">&quot;Matt&quot;</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">18</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">18</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>

    <span class="c1">// Luke&#39;s account part 1</span>
    <span class="n">r</span> <span class="s2">&quot;Luke&quot;</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">26</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">56</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>

    <span class="c1">// Luke&#39;s account part 2</span>
    <span class="n">r</span> <span class="s2">&quot;Luke&quot;</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">1</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">cv</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">c</span><span class="o">&gt;</span> <span class="mi">21</span><span class="o">&lt;</span><span class="n">v</span><span class="o">&gt;)</span>
  <span class="o">]</span>
</code></pre></div>
<p>...and then find all of the cross references which come <em>from</em> a verse in these ranges...</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">findCrossReferencesOfRange</span> <span class="n">references</span> <span class="n">range</span> <span class="o">=</span>
  <span class="n">references</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">reference</span> <span class="o">-&gt;</span> <span class="n">contains</span> <span class="n">range</span> <span class="o">&lt;|</span> <span class="n">fst</span> <span class="n">reference</span><span class="o">)</span>
</code></pre></div><div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">allCrossReferences</span> <span class="n">references</span> <span class="n">ranges</span> <span class="o">=</span>
  <span class="n">ranges</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">fold</span> <span class="o">(</span><span class="k">fun</span> <span class="n">found</span> <span class="n">range</span> <span class="o">-&gt;</span>
    <span class="nn">Seq</span><span class="p">.</span><span class="n">concat</span> <span class="o">[</span><span class="n">findCrossReferencesOfRange</span> <span class="n">references</span> <span class="n">range</span><span class="o">;</span><span class="n">found</span><span class="o">])</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">empty</span>
</code></pre></div>
<p>...giving us a sequence of every range cross referenced from the Christmas story.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">christmasRefs</span> <span class="o">=</span>
  <span class="n">allCrossReferences</span> <span class="n">crossReferences</span> <span class="n">story</span>
</code></pre></div><div class="highlight"><pre><code class="fsharp"><span class="n">christmasRefs</span> <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">length</span>
</code></pre></div><div class="highlight"><pre><code class="text">1042
</code></pre></div><div class="highlight"><pre><code class="fsharp"><span class="n">christmasRefs</span>
<span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">10</span>
<span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Table</span>
</code></pre></div>
<table class="jup"><thead><tr><th>Item1</th><th>Item2</th></tr></thead><tbody><tr><td>Luke.2.1</td><td>Acts.11.28-Acts.11.28</td></tr><tr><td>Luke.2.1</td><td>Matt.24.14-Matt.24.14</td></tr><tr><td>Luke.2.1</td><td>Acts.25.21-Acts.25.21</td></tr><tr><td>Luke.2.1</td><td>Acts.25.11-Acts.25.11</td></tr><tr><td>Luke.2.1</td><td>Rom.1.8-Rom.1.8</td></tr><tr><td>Luke.2.1</td><td>Luke.3.1-Luke.3.1</td></tr><tr><td>Luke.2.1</td><td>Phil.4.22-Phil.4.22</td></tr><tr><td>Luke.2.1</td><td>Mark.16.15-Mark.16.15</td></tr><tr><td>Luke.2.1</td><td>Matt.22.17-Matt.22.17</td></tr><tr><td>Luke.2.1</td><td>Mark.14.9-Mark.14.9</td></tr><tbody></tbody></table>

<p>We&#39;re getting closer. Before we dive into the graph, we&#39;ll have a quick poke around the data.</p>

<p>Like, which are the top 10 books most commonly cross referenced to?</p>
<div class="highlight"><pre><code class="fsharp"><span class="c1">// count per book, sort by descending</span>
<span class="k">let</span> <span class="n">byBook</span> <span class="o">=</span>
  <span class="n">christmasRefs</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">r</span> <span class="o">-&gt;</span> <span class="n">bookMap</span><span class="o">.[(</span><span class="n">snd</span> <span class="n">r</span><span class="o">).</span><span class="nc">Book</span><span class="o">])</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">countBy</span> <span class="n">id</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">sortByDescending</span> <span class="n">snd</span>

<span class="n">byBook</span> <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">10</span> <span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Table</span>
</code></pre></div>
<table class="jup"><thead><tr><th>Item1</th><th>Item2</th></tr></thead><tbody><tr><td>Luke</td><td>129</td></tr><tr><td>Matthew</td><td>115</td></tr><tr><td>Psalm</td><td>101</td></tr><tr><td>Isaiah</td><td>74</td></tr><tr><td>Acts</td><td>68</td></tr><tr><td>John</td><td>66</td></tr><tr><td>Genesis</td><td>52</td></tr><tr><td>Revelation</td><td>33</td></tr><tr><td>Exodus</td><td>27</td></tr><tr><td>Jeremiah</td><td>26</td></tr><tbody></tbody></table>

<p>Getting closer to the data we want to create an edge and node graph from, let&#39;s look at the links between books.</p>
<div class="highlight"><pre><code class="fsharp"><span class="c1">// Count how many times a book is referenced from each of our</span>
<span class="c1">// source books</span>
<span class="k">let</span> <span class="n">fromBookToBook</span> <span class="o">=</span>
  <span class="n">christmasRefs</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">from</span><span class="o">,</span> <span class="k">to&#39;</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">bookMap</span><span class="o">.[</span><span class="n">from</span><span class="o">.</span><span class="nc">Book</span><span class="o">],</span> <span class="n">bookMap</span><span class="o">.[</span><span class="k">to&#39;</span><span class="o">.</span><span class="nc">Book</span><span class="o">])</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">countBy</span> <span class="n">id</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">sortByDescending</span> <span class="n">snd</span>

<span class="n">fromBookToBook</span>
<span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">10</span>
<span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Table</span>
</code></pre></div>
<table class="jup"><thead><tr><th>Item1</th><th>Item2</th></tr></thead><tbody><tr><td>(Luke, Luke)</td><td>94</td></tr><tr><td>(Luke, Psalm)</td><td>72</td></tr><tr><td>(Matthew, Matthew)</td><td>63</td></tr><tr><td>(Luke, Matthew)</td><td>52</td></tr><tr><td>(Luke, Isaiah)</td><td>52</td></tr><tr><td>(Luke, Acts)</td><td>37</td></tr><tr><td>(Luke, John)</td><td>35</td></tr><tr><td>(Matthew, Luke)</td><td>35</td></tr><tr><td>(Matthew, Acts)</td><td>31</td></tr><tr><td>(Matthew, John)</td><td>31</td></tr><tbody></tbody></table>

<p>And now we&#39;ve arrived. I&#39;ve not found a nice simple way of generating graph images in .net, so we&#39;ll turn to the well used d3 javascript library to help us out, given we&#39;re running in a web page.</p>

<p>We need to also to have a way of turning our data into a valid javascript representation. We&#39;ll need to feed d3 an array of nodes (just the names of the books of the Bible). Then we&#39;ll have an array of &quot;links&quot;, which we&#39;ll also give a &quot;strength&quot; field to represent the number of cross references. The links need to use the index of the source and target in the node list.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">names</span> <span class="o">=</span>
  <span class="n">bibleInfo</span><span class="o">.</span><span class="nn">Response</span><span class="p">.</span><span class="nc">Books</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="o">.</span><span class="nc">Name</span><span class="o">)</span>

<span class="c1">// Simple string concatination will do the job here,</span>
<span class="c1">// for more complex data we could use an actual JSON</span>
<span class="c1">// serialization library</span>
<span class="k">let</span> <span class="n">nodes</span> <span class="o">=</span>
  <span class="n">names</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="n">sprintf</span> <span class="s2">&quot;{ id: %A, x: 0, y: 0 }&quot;</span> <span class="n">name</span><span class="o">)</span>
  <span class="o">|&gt;</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;,</span><span class="se">\n</span><span class="s2">&quot;</span>
  <span class="o">|&gt;</span> <span class="n">sprintf</span> <span class="s2">&quot;[%s]&quot;</span>

<span class="k">let</span> <span class="n">links</span> <span class="o">=</span>
  <span class="n">fromBookToBook</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">((</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">),</span> <span class="n">strength</span><span class="o">)</span> <span class="o">-&gt;</span>
    <span class="k">let</span> <span class="n">sourceI</span> <span class="o">=</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">findIndex</span> <span class="o">((=)</span> <span class="n">source</span><span class="o">)</span> <span class="n">names</span>
    <span class="k">let</span> <span class="n">targetI</span> <span class="o">=</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">findIndex</span> <span class="o">((=)</span> <span class="n">target</span><span class="o">)</span> <span class="n">names</span>
    <span class="n">sprintf</span> <span class="s2">&quot;{ source: %d, target: %d, strength: %d }&quot;</span> <span class="n">sourceI</span> <span class="n">targetI</span> <span class="n">strength</span><span class="o">)</span>
  <span class="o">|&gt;</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;,</span><span class="se">\n</span><span class="s2">&quot;</span>
  <span class="o">|&gt;</span> <span class="n">sprintf</span> <span class="s2">&quot;[%s]&quot;</span>
</code></pre></div>
<p>Now we need some javascript and html to get this all up and running. Let&#39;s make sure we have d3 loaded on the page.</p>
<div class="highlight"><pre><code class="fsharp"><span class="s2">&quot;&quot;&quot;&lt;script src=&#39;http://d3js.org/d3.v3.min.js&#39;&gt;&lt;/script&gt;&quot;&quot;&quot;</span> <span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Html</span> <span class="o">|&gt;</span> <span class="nc">Display</span>
</code></pre></div>
<script src='http://d3js.org/d3.v3.min.js'></script>
<div class="highlight"><pre><code class="text">&lt;null&gt;
</code></pre></div>
<p>And now we can just enter our raw javascript to create the graph, with the node and link data from above. Hopefully most of this will make some sense on a read through but the basic flow is:</p>

<ol>
<li>Inject an svg element into our page</li>
<li>Create a force layout with some standard properties (gravity to keep everything near the middle, charge to keep nodes from overlapping)</li>
<li>Make the desired distance between linked nodes shorter the &quot;stronger&quot; the link is.</li>
<li>Add lines for links, and circles and text for nodes.</li>
<li>Fire a call back to reposition the links and nodes as the force simualtion runs</li>
</ol>

<p>If you&#39;ve read down here from the beginning, the graph has probably settled into a steady state, but feel free to reload the page and watch the nodes bounce around.</p>
<div class="highlight"><pre><code class="fsharp"><span class="n">sprintf</span> <span class="s2">&quot;&quot;&quot;</span>
<span class="s2">&lt;style&gt;</span>
<span class="s2">.node {</span>
<span class="s2">    fill: #5cc;</span>
<span class="s2">    stroke: #2aa;</span>
<span class="s2">    stroke-width: 2px;</span>
<span class="s2">}</span>

<span class="s2">.link {</span>
<span class="s2">    stroke: #777;</span>
<span class="s2">    stroke-width: 2px;</span>
<span class="s2">}</span>
<span class="s2">&lt;/style&gt;</span>


<span class="s2">&lt;div id=&quot;</span><span class="n">viz</span><span class="s2">&quot;&gt;&lt;/div&gt;</span>

<span class="s2">&lt;script&gt;</span>
<span class="s2">var width = 800;</span>
<span class="s2">var height = 800;</span>

<span class="s2">var nodeData = %s;</span>

<span class="s2">var linkData = %s;</span>

<span class="s2">var force = null,</span>
<span class="s2">    nodes = null,</span>
<span class="s2">    nodeTitles = null,</span>
<span class="s2">    links = null;</span>

<span class="s2">var svg = d3.select(&#39;#viz&#39;).append(&#39;svg&#39;)</span>
<span class="s2">    .attr(&#39;width&#39;, width)</span>
<span class="s2">    .attr(&#39;height&#39;, height);</span>

<span class="s2">var initForce = function() {</span>
<span class="s2">    svg.selectAll(&#39;*&#39;).remove();</span>

<span class="s2">    force = d3.layout.force()</span>
<span class="s2">        .size([width, height])</span>
<span class="s2">        .nodes(nodeData)</span>
<span class="s2">        .links(linkData)</span>
<span class="s2">        .gravity(0.5)</span>
<span class="s2">        .charge([-1000]);</span>

<span class="s2">    force.linkDistance(function (link) { return 400 / link.strength });</span>

<span class="s2">    links = svg.selectAll(&#39;.link&#39;)</span>
<span class="s2">        .data(linkData)</span>
<span class="s2">        .enter().append(&#39;line&#39;)</span>
<span class="s2">        .attr(&#39;class&#39;, &#39;link&#39;);</span>

<span class="s2">    nodes = svg.selectAll(&#39;.node&#39;)</span>
<span class="s2">        .data(nodeData)</span>
<span class="s2">        .enter().append(&#39;circle&#39;)</span>
<span class="s2">        .attr(&#39;class&#39;, &#39;node&#39;)</span>
<span class="s2">        .attr(&#39;r&#39;, width / 50);</span>

<span class="s2">    nodeTitles = svg.selectAll(&#39;text&#39;)</span>
<span class="s2">        .data(nodeData)</span>
<span class="s2">        .enter().append(&#39;text&#39;)</span>
<span class="s2">        .attr(&#39;text-anchor&#39;, &#39;middle&#39;)</span>
<span class="s2">        .text(function (d) { return d.id })</span>
<span class="s2">        .attr(&#39;font-family&#39;, &#39;sans&#39;)</span>
<span class="s2">        .attr(&#39;font-size&#39;, 16)</span>
<span class="s2">        .attr(&#39;fill&#39;, &#39;black&#39;);</span>

<span class="s2">    force.on(&#39;tick&#39;, stepForce);</span>
<span class="s2">};</span>

<span class="s2">var stepForce = function() {</span>

<span class="s2">    nodes.attr(&#39;cx&#39;, function(d) { return d.x; })</span>
<span class="s2">        .attr(&#39;cy&#39;, function(d) { return d.y; });</span>

<span class="s2">    nodeTitles.attr(&#39;x&#39;, function(d) { return d.x; })</span>
<span class="s2">        .attr(&#39;y&#39;, function(d) { return d.y; });</span>

<span class="s2">    links.attr(&#39;x1&#39;, function(d) { return d.source.x; })</span>
<span class="s2">        .attr(&#39;y1&#39;, function(d) { return d.source.y; })</span>
<span class="s2">        .attr(&#39;x2&#39;, function(d) { return d.target.x; })</span>
<span class="s2">        .attr(&#39;y2&#39;, function(d) { return d.target.y; });</span>
<span class="s2">};</span>

<span class="s2">initForce();</span>
<span class="s2">force.start();</span>
<span class="s2">&lt;/script&gt;</span>
<span class="s2">&quot;&quot;&quot;</span> <span class="n">nodes</span> <span class="n">links</span>
<span class="o">|&gt;</span> <span class="nn">Util</span><span class="p">.</span><span class="nc">Html</span>
</code></pre></div>
<style>
.node {
    fill: #5cc;
    stroke: #2aa;
    stroke-width: 2px;
}

.link {
    stroke: #777;
    stroke-width: 2px;
}
</style>

<div id="viz"></div>

<script>
var width = 800;
var height = 800;

var nodeData = [{ id: "Genesis", x: 0, y: 0 },
{ id: "Exodus", x: 0, y: 0 },
{ id: "Leviticus", x: 0, y: 0 },
{ id: "Numbers", x: 0, y: 0 },
{ id: "Deuteronomy", x: 0, y: 0 },
{ id: "Joshua", x: 0, y: 0 },
{ id: "Judges", x: 0, y: 0 },
{ id: "Ruth", x: 0, y: 0 },
{ id: "1 Samuel", x: 0, y: 0 },
{ id: "2 Samuel", x: 0, y: 0 },
{ id: "1 Kings", x: 0, y: 0 },
{ id: "2 Kings", x: 0, y: 0 },
{ id: "1 Chronicles", x: 0, y: 0 },
{ id: "2 Chronicles", x: 0, y: 0 },
{ id: "Ezra", x: 0, y: 0 },
{ id: "Nehemiah", x: 0, y: 0 },
{ id: "Esther", x: 0, y: 0 },
{ id: "Job", x: 0, y: 0 },
{ id: "Psalm", x: 0, y: 0 },
{ id: "Proverbs", x: 0, y: 0 },
{ id: "Ecclesiastes", x: 0, y: 0 },
{ id: "Song of Songs", x: 0, y: 0 },
{ id: "Isaiah", x: 0, y: 0 },
{ id: "Jeremiah", x: 0, y: 0 },
{ id: "Lamentations", x: 0, y: 0 },
{ id: "Ezekiel", x: 0, y: 0 },
{ id: "Daniel", x: 0, y: 0 },
{ id: "Hosea", x: 0, y: 0 },
{ id: "Joel", x: 0, y: 0 },
{ id: "Amos", x: 0, y: 0 },
{ id: "Obadiah", x: 0, y: 0 },
{ id: "Jonah", x: 0, y: 0 },
{ id: "Micah", x: 0, y: 0 },
{ id: "Nahum", x: 0, y: 0 },
{ id: "Habakkuk", x: 0, y: 0 },
{ id: "Zephaniah", x: 0, y: 0 },
{ id: "Haggai", x: 0, y: 0 },
{ id: "Zechariah", x: 0, y: 0 },
{ id: "Malachi", x: 0, y: 0 },
{ id: "Tobit", x: 0, y: 0 },
{ id: "Judith", x: 0, y: 0 },
{ id: "Esther (Greek)", x: 0, y: 0 },
{ id: "The Wisdom of Solomon", x: 0, y: 0 },
{ id: "Sirach", x: 0, y: 0 },
{ id: "Baruch", x: 0, y: 0 },
{ id: "Letter of Jeremiah", x: 0, y: 0 },
{ id: "1 Maccabees", x: 0, y: 0 },
{ id: "2 Maccabees", x: 0, y: 0 },
{ id: "1 Esdras", x: 0, y: 0 },
{ id: "2 Esdras", x: 0, y: 0 },
{ id: "The Prayer of Manasseh", x: 0, y: 0 },
{ id: "Matthew", x: 0, y: 0 },
{ id: "Mark", x: 0, y: 0 },
{ id: "Luke", x: 0, y: 0 },
{ id: "John", x: 0, y: 0 },
{ id: "Acts", x: 0, y: 0 },
{ id: "Romans", x: 0, y: 0 },
{ id: "1 Corinthians", x: 0, y: 0 },
{ id: "2 Corinthians", x: 0, y: 0 },
{ id: "Galatians", x: 0, y: 0 },
{ id: "Ephesians", x: 0, y: 0 },
{ id: "Philippians", x: 0, y: 0 },
{ id: "Colossians", x: 0, y: 0 },
{ id: "1 Thessalonians", x: 0, y: 0 },
{ id: "2 Thessalonians", x: 0, y: 0 },
{ id: "1 Timothy", x: 0, y: 0 },
{ id: "2 Timothy", x: 0, y: 0 },
{ id: "Titus", x: 0, y: 0 },
{ id: "Philemon", x: 0, y: 0 },
{ id: "Hebrews", x: 0, y: 0 },
{ id: "James", x: 0, y: 0 },
{ id: "1 Peter", x: 0, y: 0 },
{ id: "2 Peter", x: 0, y: 0 },
{ id: "1 John", x: 0, y: 0 },
{ id: "2 John", x: 0, y: 0 },
{ id: "3 John", x: 0, y: 0 },
{ id: "Jude", x: 0, y: 0 },
{ id: "Revelation", x: 0, y: 0 }];

var linkData = [{ source: 53, target: 53, strength: 94 },
{ source: 53, target: 18, strength: 72 },
{ source: 51, target: 51, strength: 63 },
{ source: 53, target: 51, strength: 52 },
{ source: 53, target: 22, strength: 52 },
{ source: 53, target: 55, strength: 37 },
{ source: 53, target: 54, strength: 35 },
{ source: 51, target: 53, strength: 35 },
{ source: 51, target: 55, strength: 31 },
{ source: 51, target: 54, strength: 31 },
{ source: 51, target: 18, strength: 29 },
{ source: 53, target: 0, strength: 26 },
{ source: 51, target: 0, strength: 26 },
{ source: 51, target: 22, strength: 22 },
{ source: 53, target: 8, strength: 20 },
{ source: 53, target: 77, strength: 17 },
{ source: 51, target: 77, strength: 16 },
{ source: 51, target: 1, strength: 14 },
{ source: 53, target: 56, strength: 13 },
{ source: 53, target: 61, strength: 13 },
{ source: 53, target: 52, strength: 13 },
{ source: 53, target: 1, strength: 13 },
{ source: 53, target: 60, strength: 13 },
{ source: 53, target: 23, strength: 13 },
{ source: 51, target: 23, strength: 13 },
{ source: 53, target: 26, strength: 12 },
{ source: 51, target: 17, strength: 11 },
{ source: 53, target: 69, strength: 9 },
{ source: 51, target: 19, strength: 9 },
{ source: 53, target: 59, strength: 8 },
{ source: 53, target: 25, strength: 8 },
{ source: 53, target: 17, strength: 8 },
{ source: 51, target: 69, strength: 8 },
{ source: 51, target: 10, strength: 8 },
{ source: 51, target: 3, strength: 8 },
{ source: 53, target: 67, strength: 7 },
{ source: 53, target: 7, strength: 6 },
{ source: 53, target: 58, strength: 6 },
{ source: 53, target: 6, strength: 6 },
{ source: 53, target: 57, strength: 6 },
{ source: 53, target: 9, strength: 6 },
{ source: 51, target: 26, strength: 6 },
{ source: 53, target: 32, strength: 5 },
{ source: 53, target: 37, strength: 5 },
{ source: 53, target: 70, strength: 5 },
{ source: 51, target: 25, strength: 5 },
{ source: 51, target: 14, strength: 5 },
{ source: 51, target: 5, strength: 5 },
{ source: 53, target: 11, strength: 4 },
{ source: 53, target: 71, strength: 4 },
{ source: 53, target: 5, strength: 4 },
{ source: 51, target: 2, strength: 4 },
{ source: 51, target: 6, strength: 4 },
{ source: 51, target: 11, strength: 4 },
{ source: 51, target: 56, strength: 4 },
{ source: 51, target: 7, strength: 4 },
{ source: 51, target: 8, strength: 4 },
{ source: 53, target: 4, strength: 3 },
{ source: 53, target: 19, strength: 3 },
{ source: 53, target: 65, strength: 3 },
{ source: 53, target: 62, strength: 3 },
{ source: 53, target: 73, strength: 3 },
{ source: 53, target: 38, strength: 3 },
{ source: 51, target: 4, strength: 3 },
{ source: 51, target: 52, strength: 3 },
{ source: 51, target: 73, strength: 3 },
{ source: 51, target: 13, strength: 3 },
{ source: 51, target: 9, strength: 3 },
{ source: 53, target: 10, strength: 2 },
{ source: 53, target: 20, strength: 2 },
{ source: 53, target: 27, strength: 2 },
{ source: 53, target: 29, strength: 2 },
{ source: 53, target: 34, strength: 2 },
{ source: 53, target: 35, strength: 2 },
{ source: 51, target: 62, strength: 2 },
{ source: 51, target: 60, strength: 2 },
{ source: 51, target: 37, strength: 2 },
{ source: 51, target: 66, strength: 2 },
{ source: 51, target: 32, strength: 2 },
{ source: 51, target: 38, strength: 2 },
{ source: 51, target: 12, strength: 2 },
{ source: 51, target: 57, strength: 2 },
{ source: 51, target: 27, strength: 2 },
{ source: 53, target: 66, strength: 1 },
{ source: 53, target: 64, strength: 1 },
{ source: 53, target: 12, strength: 1 },
{ source: 53, target: 2, strength: 1 },
{ source: 53, target: 30, strength: 1 },
{ source: 53, target: 3, strength: 1 },
{ source: 53, target: 13, strength: 1 },
{ source: 53, target: 76, strength: 1 },
{ source: 51, target: 59, strength: 1 },
{ source: 51, target: 28, strength: 1 },
{ source: 51, target: 67, strength: 1 },
{ source: 51, target: 58, strength: 1 },
{ source: 51, target: 65, strength: 1 },
{ source: 51, target: 70, strength: 1 },
{ source: 51, target: 36, strength: 1 },
{ source: 51, target: 15, strength: 1 },
{ source: 51, target: 24, strength: 1 },
{ source: 51, target: 72, strength: 1 }];

var force = null,
    nodes = null,
    nodeTitles = null,
    links = null;

var svg = d3.select('#viz').append('svg')
    .attr('width', width)
    .attr('height', height);
    
var initForce = function() {
    svg.selectAll('*').remove();

    force = d3.layout.force()
        .size([width, height])
        .nodes(nodeData)
        .links(linkData)
        .gravity(0.5)
        .charge([-1000]);
        
    force.linkDistance(function (link) { return 400 / link.strength });

    links = svg.selectAll('.link')
        .data(linkData)
        .enter().append('line')
        .attr('class', 'link');
    
    nodes = svg.selectAll('.node')
        .data(nodeData)
        .enter().append('circle')
        .attr('class', 'node')
        .attr('r', width / 50);
        
    nodeTitles = svg.selectAll('text')
        .data(nodeData)
        .enter().append('text')
        .attr('text-anchor', 'middle')
        .text(function (d) { return d.id })
        .attr('font-family', 'sans')
        .attr('font-size', 16)
        .attr('fill', 'black');
    
    force.on('tick', stepForce);
};

var stepForce = function() {

    nodes.attr('cx', function(d) { return d.x; })
        .attr('cy', function(d) { return d.y; });

    nodeTitles.attr('x', function(d) { return d.x; })
        .attr('y', function(d) { return d.y; });

    links.attr('x1', function(d) { return d.source.x; })
        .attr('y1', function(d) { return d.source.y; })
        .attr('x2', function(d) { return d.target.x; })
        .attr('y2', function(d) { return d.target.y; });
};

initForce();
force.start();
</script>

<p>And there it is. A nice force layout graph based on our F# data, displaying the properties you would expect. Matthew and Luke as the &quot;source&quot; nodes have settled somewhere near the centre, with books commonly referenced from both squeezed inbetween. An outer ring of books referenced infrequently or from only one of the other form the next ring, and then around the edges we have the books not referenced at all during the Christmas story.</p>

<p>I hope you enjoyed this magical mystery tour of Jupyter, d3 and the Christmas story!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angels from the realms of glory]]></title>
    <link href="https://blog.mavnn.co.uk/angels-from-the-realms-of-glory/"/>
    <updated>2015-12-19T12:00:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/angels-from-the-realms-of-glory</id>
    <content type="html"><![CDATA[<blockquote>
<p>An angel of the Lord appeared to them, and the glory of the Lord shone around them, and they were terrified. <ref><a href="https://www.biblegateway.com/passage/?search=luke+2:9&version=NIV" title="Luke 2:9">Luke 2:9</a></ref></p>
</blockquote>

<p>It&#39;s that time of year again, where the F# community get together to source a collection of weird, wonderful and occasionally useful blog posts on life, the universe and sometimes Christmas.</p>

<p>As mentioned in last years post, I like to go back to the source when it comes to advent posts, so lets dive back into the book of Luke (and learn about agent based programming as we go).</p>

<!-- more -->

<h3>The plan</h3>

<p>We&#39;re going to simulate the angelic choir as they sing for the shepherds, although with a
couple of minor limitations. One is I don&#39;t feel like dealing with cross platform audio issues
(and don&#39;t think I could do the voices justice anyway...) and the other is that I can&#39;t draw
for toffee.</p>

<p>So we&#39;re going to simulate a view of the angels from a long way away out of earshot.</p>

<p>The final result should end up looking something like this (your results may vary depending
on console colour scheme, but I&#39;d suggest dark background for the best effect!):</p>

<p><img src="https://blog.mavnn.co.uk/images/angels1.gif"/></p>

<h3>Step 1: atomic writes to the console</h3>

<p>If you&#39;ve tried to use the <code>System.Console</code> namespace in .net, you&#39;ll have discovered a few
things about it. The biggest problem we want to deal with, is that writing a character in colour
to the console is not atomic.</p>

<p>You have to:</p>
<div class="highlight"><pre><code class="fsharp"><span class="c1">// Set the cursor to the position you want to write</span>
<span class="nn">Console</span><span class="p">.</span><span class="nc">SetCursorPosition</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span>
<span class="c1">// Change the foreground colour to the colour you want</span>
<span class="nn">Console</span><span class="p">.</span><span class="nc">ForegroundColor</span> <span class="o">&lt;-</span> <span class="n">c</span>
<span class="c1">// Write the character</span>
<span class="nn">Console</span><span class="p">.</span><span class="nc">Write</span> <span class="o">(</span><span class="kt">string</span> <span class="n">m</span><span class="o">)</span>
</code></pre></div>
<p>In async code, different threads doing this at the same time will mix these operations up,
as there&#39;s no way to know what an other thread is doing with the cursor while you try and
set up your own write.</p>

<p>For this we&#39;re going to set up our first agent: the console agent. It will be responsible
for all writes to the screen in our program.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="o">(|</span><span class="nc">ConsoleColour</span><span class="o">|)</span> <span class="n">i</span> <span class="o">=</span>
  <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="k">then</span>
    <span class="nn">ConsoleColor</span><span class="p">.</span><span class="nc">Black</span>
  <span class="k">elif</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">15</span> <span class="k">then</span>
    <span class="nn">ConsoleColor</span><span class="p">.</span><span class="nc">White</span>
  <span class="k">else</span>
    <span class="n">enum</span> <span class="n">i</span>

<span class="k">let</span> <span class="n">console</span> <span class="o">=</span>
  <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span>
    <span class="k">fun</span> <span class="n">agent</span> <span class="o">-&gt;</span>
      <span class="k">let</span> <span class="k">rec</span> <span class="n">inner</span> <span class="bp">()</span> <span class="o">=</span>
        <span class="n">async</span> <span class="o">{</span>
          <span class="k">let</span><span class="o">!</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="nc">ConsoleColour</span> <span class="n">c</span><span class="o">,</span> <span class="n">m</span> <span class="o">:</span> <span class="kt">char</span><span class="o">)</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
          <span class="nn">Console</span><span class="p">.</span><span class="nc">SetCursorPosition</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span>
          <span class="nn">Console</span><span class="p">.</span><span class="nc">ForegroundColor</span> <span class="o">&lt;-</span> <span class="n">c</span>
          <span class="nn">Console</span><span class="p">.</span><span class="nc">Write</span> <span class="o">(</span><span class="kt">string</span> <span class="n">m</span><span class="o">)</span>
          <span class="k">return</span><span class="o">!</span> <span class="n">inner</span> <span class="bp">()</span> <span class="o">}</span>
      <span class="n">inner</span> <span class="bp">()</span><span class="o">)</span>

<span class="n">console</span><span class="o">.</span><span class="nn">Error</span><span class="p">.</span><span class="nc">Add</span><span class="o">(</span><span class="k">fun</span> <span class="n">e</span> <span class="o">-&gt;</span> <span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="n">e</span><span class="o">.</span><span class="nc">Message</span><span class="o">)</span>
</code></pre></div>
<p>The <code>(|ConsoleColour|)</code> construct is what&#39;s called an active pattern. With it, we can pattern
match on any integer and be guaranteed to get a valid ConsoleColor enum out. It also spells
&quot;colour&quot; correctly :D.</p>

<p>Then we start a <code>MailboxProcessor</code> (the default name for an agent in F#). This agent listens
for messages which consist of: an x coordinate, a y coordinate, an int for colour and a character
to write. The overall agent is implemented as an async block and so will not block a thread while
waiting for messages - but it will guarantee that it will not start processing the next message
until the current one is finished.</p>

<p>Hey presto! We can now safely write to the console from any thread simply by calling <code>console.Post.</code></p>

<p>We&#39;ll try it out by creating some random stationary angels.</p>

<p>First, we&#39;ll initialize some infinite sequences of random numbers:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">seedx</span><span class="o">,</span> <span class="n">seedy</span><span class="o">,</span> <span class="n">seedc</span> <span class="o">=</span> <span class="mi">100</span><span class="o">,</span> <span class="mi">150</span><span class="o">,</span> <span class="mi">200</span>

<span class="k">let</span> <span class="n">randX</span> <span class="o">=</span> <span class="nc">Random</span><span class="o">(</span><span class="n">seedx</span><span class="o">)</span>
<span class="k">let</span> <span class="n">randY</span> <span class="o">=</span> <span class="nc">Random</span><span class="o">(</span><span class="n">seedy</span><span class="o">)</span>
<span class="k">let</span> <span class="n">randC</span> <span class="o">=</span> <span class="nc">Random</span><span class="o">(</span><span class="n">seedc</span><span class="o">)</span>

<span class="k">let</span> <span class="n">randSeq</span> <span class="o">(</span><span class="n">rand</span> <span class="o">:</span> <span class="nc">Random</span><span class="o">)</span> <span class="n">min&#39;</span> <span class="n">max&#39;</span> <span class="o">=</span>
  <span class="nn">Seq</span><span class="p">.</span><span class="n">unfold</span> <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">rand</span><span class="o">.</span><span class="nc">Next</span><span class="o">(</span><span class="n">min&#39;</span><span class="o">,</span> <span class="n">max&#39;</span><span class="o">),</span> <span class="bp">()</span><span class="o">))</span> <span class="bp">()</span>

<span class="k">let</span> <span class="n">xSeq</span> <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randX</span> <span class="n">xZero</span> <span class="o">(</span><span class="n">width</span> <span class="o">+</span> <span class="n">xZero</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
<span class="k">let</span> <span class="n">ySeq</span> <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randY</span> <span class="n">yZero</span> <span class="o">(</span><span class="n">height</span> <span class="o">+</span> <span class="n">yZero</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
<span class="k">let</span> <span class="n">cSeq</span> <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randC</span> <span class="mi">0</span> <span class="mi">15</span>
</code></pre></div>
<p>Then we&#39;ll wrap the write in an async method, and draw our angels across the screen concurrently;
each angel will wait 50 milliseconds per unit across the x axis to give a nice staggered appearance.</p>

<p>You can find a full listing in <a href="https://github.com/mavnn/advent2015/blob/master/advent1.fsx">advent1.fsx</a>. Running it should give you something like this:</p>

<p><img src="https://blog.mavnn.co.uk/images/angels2.gif"/></p>

<blockquote>
<p>But the angel said to them, “Do not be afraid. I bring you good news that will cause great joy for all the people. Today in the town of David a Savior has been born to you; he is the Messiah, the Lord. This will be a sign to you: You will find a baby wrapped in cloths and lying in a manger.” <ref><a href="https://www.biblegateway.com/passage/?search=luke+2:10-12&version=NIV" title="Luke 2:10-12">Luke 2:10-12</a></ref></p>
</blockquote>

<h2>Step 2: Add event loop</h2>

<p>Onwards! Time to make our angels move. Following on with the theme, we&#39;re going to make an agent
responsible for ticking off each &#39;loop&#39; of events.</p>

<p>We&#39;ll add some safety to our console agent to make sure that writes outside the console don&#39;t
cause us issues:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">width</span>  <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">WindowWidth</span>
<span class="k">let</span> <span class="n">height</span> <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">WindowHeight</span>

<span class="k">let</span> <span class="n">xZero</span>  <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">WindowLeft</span>
<span class="k">let</span> <span class="n">yZero</span>  <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">WindowTop</span>

<span class="k">let</span> <span class="o">(|</span><span class="nc">ConsoleColour</span><span class="o">|)</span> <span class="n">i</span> <span class="o">=</span>
  <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="k">then</span>
    <span class="nn">ConsoleColor</span><span class="p">.</span><span class="nc">Black</span>
  <span class="k">elif</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">15</span> <span class="k">then</span>
    <span class="nn">ConsoleColor</span><span class="p">.</span><span class="nc">White</span>
  <span class="k">else</span>
    <span class="n">enum</span> <span class="n">i</span>

<span class="k">let</span> <span class="o">(|</span><span class="nc">X</span><span class="o">|)</span> <span class="n">x</span> <span class="o">=</span>
  <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">xZero</span> <span class="k">then</span>
    <span class="n">xZero</span>
  <span class="k">elif</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="n">width</span> <span class="k">then</span>
    <span class="n">width</span> <span class="o">-</span> <span class="mi">1</span>
  <span class="k">else</span>
    <span class="n">x</span>

<span class="k">let</span> <span class="o">(|</span><span class="nc">Y</span><span class="o">|)</span> <span class="n">y</span> <span class="o">=</span>
  <span class="k">if</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">yZero</span> <span class="k">then</span>
    <span class="n">yZero</span>
  <span class="k">elif</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="n">height</span> <span class="k">then</span>
    <span class="n">height</span> <span class="o">-</span> <span class="mi">1</span>
  <span class="k">else</span>
    <span class="n">y</span>

<span class="k">let</span> <span class="n">console</span> <span class="o">=</span>
  <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span>
    <span class="k">fun</span> <span class="n">agent</span> <span class="o">-&gt;</span>
      <span class="k">let</span> <span class="k">rec</span> <span class="n">inner</span> <span class="bp">()</span> <span class="o">=</span>
        <span class="n">async</span> <span class="o">{</span>
          <span class="k">let</span><span class="o">!</span> <span class="o">(</span><span class="nc">X</span> <span class="n">x</span><span class="o">,</span> <span class="nc">Y</span> <span class="n">y</span><span class="o">,</span> <span class="nc">ConsoleColour</span> <span class="n">c</span><span class="o">,</span> <span class="n">m</span> <span class="o">:</span> <span class="kt">char</span><span class="o">)</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
          <span class="nn">Console</span><span class="p">.</span><span class="nc">SetCursorPosition</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span>
          <span class="nn">Console</span><span class="p">.</span><span class="nc">ForegroundColor</span> <span class="o">&lt;-</span> <span class="n">c</span>
          <span class="nn">Console</span><span class="p">.</span><span class="nc">Write</span> <span class="o">(</span><span class="kt">string</span> <span class="n">m</span><span class="o">)</span>
          <span class="k">return</span><span class="o">!</span> <span class="n">inner</span> <span class="bp">()</span> <span class="o">}</span>
      <span class="n">inner</span> <span class="bp">()</span><span class="o">)</span>

<span class="n">console</span><span class="o">.</span><span class="nn">Error</span><span class="p">.</span><span class="nc">Add</span><span class="o">(</span><span class="k">fun</span> <span class="n">e</span> <span class="o">-&gt;</span> <span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="n">e</span><span class="o">.</span><span class="nc">Message</span><span class="o">)</span>
</code></pre></div>
<p>Notice the use of the X and Y active patterns to enforce our domain constraints on the underlying
.net type.</p>

<p>We&#39;ll also have some types for keeping track of an angels position and velocity.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">type</span> <span class="nc">Vector2</span> <span class="o">=</span>
  <span class="o">{</span> <span class="n">x</span> <span class="o">:</span> <span class="kt">float</span><span class="o">;</span> <span class="n">y</span> <span class="o">:</span> <span class="kt">float</span> <span class="o">}</span>
  <span class="k">static</span> <span class="k">member</span> <span class="o">(+)</span> <span class="o">({</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x1</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y1</span> <span class="o">},</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x2</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y2</span> <span class="o">})</span> <span class="o">=</span>
    <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x1</span> <span class="o">+</span> <span class="n">x2</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y1</span> <span class="o">+</span> <span class="n">y2</span> <span class="o">}</span>
  <span class="k">static</span> <span class="k">member</span> <span class="o">(-)</span> <span class="o">({</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x1</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y1</span> <span class="o">},</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x2</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y2</span> <span class="o">})</span> <span class="o">=</span>
    <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x1</span> <span class="o">-</span> <span class="n">x2</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y1</span> <span class="o">-</span> <span class="n">y2</span> <span class="o">}</span>
  <span class="k">static</span> <span class="k">member</span> <span class="nc">Abs</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x1</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y1</span> <span class="o">}</span> <span class="o">=</span>
    <span class="n">x1</span> <span class="o">*</span> <span class="n">x1</span> <span class="o">+</span> <span class="n">y1</span> <span class="o">*</span> <span class="n">y1</span>
    <span class="o">|&gt;</span> <span class="n">sqrt</span>

<span class="k">type</span> <span class="nc">AngelInfo</span> <span class="o">=</span>
  <span class="o">{</span> <span class="nc">Position</span> <span class="o">:</span> <span class="nc">Vector2</span>
    <span class="nc">Velocity</span> <span class="o">:</span> <span class="nc">Vector2</span> <span class="o">}</span>
</code></pre></div>
<p>Here we&#39;ve defined + and - on a two element vector, and a helper function to calculate the vectors
magnitude.</p>

<p>Now we&#39;re ready to set up our event loop agent. I&#39;m going to call mine <code>ping</code>.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">type</span> <span class="nc">AngelMessage</span> <span class="o">=</span>
  <span class="o">|</span> <span class="nc">Init</span> <span class="k">of</span> <span class="nc">AsyncReplyChannel</span><span class="o">&lt;</span><span class="nc">AngelInfo</span><span class="o">&gt;</span>
  <span class="o">|</span> <span class="nc">Next</span> <span class="k">of</span> <span class="nc">AngelInfo</span> <span class="kt">list</span> <span class="o">*</span> <span class="nc">AsyncReplyChannel</span><span class="o">&lt;</span><span class="nc">AngelInfo</span><span class="o">&gt;</span>

<span class="k">let</span> <span class="n">ping</span> <span class="o">=</span>
  <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span>
    <span class="k">fun</span> <span class="n">agent</span> <span class="o">-&gt;</span>
      <span class="k">let</span> <span class="k">rec</span> <span class="n">inner</span> <span class="o">(</span><span class="n">angels</span> <span class="o">:</span> <span class="nc">MailboxProcessor</span><span class="o">&lt;</span><span class="nc">AngelMessage</span><span class="o">&gt;</span> <span class="kt">list</span><span class="o">)</span> <span class="n">infos</span> <span class="o">=</span>
        <span class="n">async</span> <span class="o">{</span>
          <span class="c1">// Ask the angels where they will be next</span>
          <span class="k">let</span><span class="o">!</span> <span class="n">newInfos</span> <span class="o">=</span>
            <span class="n">angels</span>
            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">angel</span> <span class="o">-&gt;</span> <span class="n">angel</span><span class="o">.</span><span class="nc">PostAndAsyncReply</span> <span class="o">(</span><span class="k">fun</span> <span class="n">r</span> <span class="o">-&gt;</span> <span class="nc">Next</span><span class="o">(</span><span class="n">infos</span><span class="o">,</span> <span class="n">r</span><span class="o">)))</span>
            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Parallel</span>

          <span class="k">let</span> <span class="n">newInfos</span> <span class="o">=</span> <span class="n">newInfos</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">ofArray</span>

          <span class="c1">// Erase old locations</span>
          <span class="k">do</span><span class="o">!</span>
            <span class="n">infos</span>
            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="n">p</span> <span class="o">}</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">)</span>
            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">setAsync</span> <span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">.</span><span class="n">x</span><span class="o">)</span> <span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">.</span><span class="n">y</span><span class="o">)</span> <span class="mi">0</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>
            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Parallel</span>
            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Ignore</span>

          <span class="c1">// Draw new locations</span>
          <span class="k">do</span><span class="o">!</span>
            <span class="n">newInfos</span>
            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="n">p</span> <span class="o">}</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">)</span>
            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">setAsync</span> <span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">.</span><span class="n">x</span><span class="o">)</span> <span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">.</span><span class="n">y</span><span class="o">)</span> <span class="mi">15</span> <span class="sc">&#39;*&#39;</span><span class="o">)</span>
            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Parallel</span>
            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Ignore</span>

          <span class="k">do</span><span class="o">!</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Sleep</span> <span class="mi">100</span>
          <span class="k">return</span><span class="o">!</span> <span class="n">inner</span> <span class="n">angels</span> <span class="n">newInfos</span>
        <span class="o">}</span>
      <span class="k">let</span> <span class="n">init</span> <span class="bp">()</span> <span class="o">=</span>
        <span class="n">async</span> <span class="o">{</span>
          <span class="c1">// Wait for angels to be passed in</span>
          <span class="k">let</span><span class="o">!</span> <span class="o">(</span><span class="n">msg</span> <span class="o">:</span> <span class="nc">MailboxProcessor</span><span class="o">&lt;</span><span class="nc">AngelMessage</span><span class="o">&gt;</span> <span class="kt">list</span><span class="o">)</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>

          <span class="k">let</span><span class="o">!</span> <span class="n">infos</span> <span class="o">=</span>
            <span class="n">msg</span>
            <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">angel</span> <span class="o">-&gt;</span> <span class="n">angel</span><span class="o">.</span><span class="nc">PostAndAsyncReply</span> <span class="nc">Init</span><span class="o">)</span>
            <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Parallel</span>

          <span class="k">return</span><span class="o">!</span> <span class="n">inner</span> <span class="n">msg</span> <span class="o">(</span><span class="n">infos</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">ofArray</span><span class="o">)</span>
        <span class="o">}</span>
      <span class="n">init</span> <span class="bp">()</span>
    <span class="o">)</span>
</code></pre></div>
<p>This agent is a bit more chunky. If you look down to the end of the body, you&#39;ll see it starts
by calling <code>init</code>. This method is responsible for waiting for the initial list of angels that
will populate our night sky. The angels themselves will be agents that listen for the AngelMessage
type.</p>

<p><code>init</code> sends an <code>Init</code> message to each angel, asking it for it&#39;s initial position and velocity.
The message consists solely of a reply channel which the angel will use to pass back the information.</p>

<p>Once all the angels have reported in, we pass control to the recursive inner loop. On each round
through, the <code>ping</code> agent asks every angel where it&#39;s moving to. It then writes spaces to every square on the console that held an angel last
tick, and finally draws the new positions of every angel.</p>

<p>And most of our infrastructure is in place! Let&#39;s test it with a collection of angels that will
start with a random position and velocity and move in a straight line for a while.</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">xSeq</span>  <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randX</span> <span class="n">xZero</span> <span class="o">(</span><span class="n">width</span> <span class="o">+</span> <span class="n">xZero</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
<span class="k">let</span> <span class="n">ySeq</span>  <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randY</span> <span class="n">yZero</span> <span class="o">(</span><span class="n">height</span> <span class="o">+</span> <span class="n">yZero</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
<span class="k">let</span> <span class="n">vxSeq</span> <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randX</span> <span class="o">-</span><span class="mi">5</span> <span class="mi">5</span>
<span class="k">let</span> <span class="n">vySeq</span> <span class="o">=</span> <span class="n">randSeq</span> <span class="n">randY</span> <span class="o">-</span><span class="mi">5</span> <span class="mi">5</span>

<span class="k">let</span> <span class="n">createAngel</span> <span class="n">logic</span> <span class="n">angelInfo</span> <span class="o">=</span>
  <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span>
    <span class="k">fun</span> <span class="n">agent</span> <span class="o">-&gt;</span>
      <span class="k">let</span> <span class="k">rec</span> <span class="n">inner</span> <span class="n">currentInfo</span> <span class="o">=</span>
        <span class="n">async</span> <span class="o">{</span>
          <span class="k">let</span><span class="o">!</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
          <span class="k">return</span><span class="o">!</span>
            <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
            <span class="o">|</span> <span class="nc">Init</span> <span class="n">r</span> <span class="o">-&gt;</span>
              <span class="n">r</span><span class="o">.</span><span class="nc">Reply</span> <span class="n">currentInfo</span>
              <span class="n">inner</span> <span class="n">currentInfo</span>
            <span class="o">|</span> <span class="nc">Next</span> <span class="o">(</span><span class="n">infos</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span> <span class="o">-&gt;</span>
              <span class="k">let</span> <span class="n">newInfo</span> <span class="o">=</span> <span class="n">logic</span> <span class="n">currentInfo</span> <span class="n">infos</span>
              <span class="n">r</span><span class="o">.</span><span class="nc">Reply</span> <span class="n">newInfo</span>
              <span class="n">inner</span> <span class="n">newInfo</span>
        <span class="o">}</span>
      <span class="n">inner</span> <span class="n">angelInfo</span><span class="o">)</span>

<span class="k">let</span> <span class="n">angels</span> <span class="o">=</span>
  <span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="o">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">xSeq</span> <span class="n">ySeq</span><span class="o">)</span> <span class="o">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">vxSeq</span> <span class="n">vySeq</span><span class="o">)</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">10</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span>
      <span class="o">(</span><span class="k">fun</span> <span class="o">((</span><span class="n">px</span><span class="o">,</span> <span class="n">py</span><span class="o">),</span> <span class="o">(</span><span class="n">vx</span><span class="o">,</span> <span class="n">vy</span><span class="o">))</span> <span class="o">-&gt;</span>
        <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">px</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">py</span> <span class="o">};</span> <span class="nc">Velocity</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">vx</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">py</span> <span class="o">}})</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="n">createAngel</span> <span class="o">(</span><span class="k">fun</span> <span class="n">c</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">c</span> <span class="k">with</span> <span class="nc">Position</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="nc">Position</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="nc">Velocity</span> <span class="o">}))</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toList</span>

<span class="c1">// Start the whole thing off</span>
<span class="n">ping</span><span class="o">.</span><span class="nc">Post</span> <span class="n">angels</span>

<span class="nn">Console</span><span class="p">.</span><span class="nc">ReadLine</span><span class="bp">()</span>

<span class="nn">Console</span><span class="p">.</span><span class="nc">ForegroundColor</span> <span class="o">&lt;-</span> <span class="nn">ConsoleColor</span><span class="p">.</span><span class="nc">White</span>
<span class="nn">Console</span><span class="p">.</span><span class="nc">CursorVisible</span> <span class="o">&lt;-</span> <span class="bp">true</span>
</code></pre></div>
<p>Each of our angels knows how to report its initial state, and how to apply a function called <code>logic</code> to it&#39;s previous state to generate the new position. For testing, the <code>logic</code> we&#39;re passing in is just to add its velocity to it&#39;s current position each time its asked.</p>

<p>Full listing is in <a href="https://github.com/mavnn/advent2015/blob/master/advent2.fsx">advent2.fsx</a>, and running it should give us something like this:</p>

<p><img src="https://blog.mavnn.co.uk/images/angels3.gif"/></p>

<blockquote>
<p>Suddenly a great company of the heavenly host appeared with the angel, praising God and saying,</p>

<p>“Glory to God in the highest heaven,
   and on earth peace to those on whom his favor rests.” <ref><a href="https://www.biblegateway.com/passage/?search=luke+2:13-14&version=NIV" title="Luke 2:13-14">Luke 2:13-14</a></ref></p>
</blockquote>

<h3>Adding some dancing</h3>

<p>But! Angels in straight lines doesn&#39;t sound much fun. We&#39;ll make our angels a bit more interesting
by implementing a simple <a href="https://en.wikipedia.org/wiki/Boids">boid</a> variant.</p>

<p>First we&#39;ll add the ability to specify a colour as part of our angel info (check the full listing for details). We&#39;ll also expand the vectors to implement multiplication, division and a magnitude limit.</p>

<p>Then we can add a <code>logic</code> module:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nc">Logic</span> <span class="o">=</span>
  <span class="k">let</span> <span class="k">private</span> <span class="n">surrounding</span> <span class="n">radius</span> <span class="o">(</span><span class="n">us</span> <span class="o">:</span> <span class="nc">AngelInfo</span><span class="o">)</span> <span class="o">(</span><span class="n">others</span> <span class="o">:</span> <span class="nc">AngelInfo</span> <span class="kt">list</span><span class="o">)</span> <span class="o">=</span>
    <span class="n">others</span>
    <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="nn">Vector2</span><span class="p">.</span><span class="n">abs</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="nc">Position</span> <span class="o">-</span> <span class="n">us</span><span class="o">.</span><span class="nc">Position</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">radius</span><span class="o">)</span>

  <span class="k">let</span> <span class="k">private</span> <span class="n">desiredVel</span> <span class="n">angels</span> <span class="o">=</span>
    <span class="n">angels</span>
    <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">fold</span>
        <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">i</span><span class="o">)</span> <span class="n">angel</span> <span class="o">-&gt;</span>
          <span class="o">(</span><span class="n">angel</span><span class="o">.</span><span class="nc">Velocity</span> <span class="o">+</span> <span class="n">v</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">))</span> <span class="o">({</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.},</span> <span class="mi">0</span><span class="o">)</span>
    <span class="o">|&gt;</span> <span class="k">fun</span> <span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">i</span><span class="o">)</span> <span class="o">-&gt;</span>
        <span class="k">match</span> <span class="n">i</span> <span class="k">with</span>
        <span class="o">|</span> <span class="mi">0</span> <span class="o">-&gt;</span>
          <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span> <span class="o">}</span>
        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
          <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">x</span> <span class="o">/</span> <span class="kt">float</span> <span class="n">i</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">y</span> <span class="o">/</span> <span class="kt">float</span> <span class="n">i</span> <span class="o">}</span>

  <span class="k">let</span> <span class="k">private</span> <span class="n">avoid</span> <span class="n">this</span> <span class="n">angels</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">dodge</span> <span class="n">v</span> <span class="o">=</span>
      <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span> <span class="o">/</span> <span class="n">v</span><span class="o">.</span><span class="n">x</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="o">.</span>
        <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span> <span class="o">/</span> <span class="n">v</span><span class="o">.</span><span class="n">y</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="o">.</span> <span class="o">}</span> <span class="o">*</span> <span class="o">(</span><span class="nn">List</span><span class="p">.</span><span class="n">length</span> <span class="n">angels</span> <span class="o">|&gt;</span> <span class="kt">float</span><span class="o">)</span>
    <span class="k">match</span> <span class="n">angels</span> <span class="k">with</span>
    <span class="o">|</span> <span class="bp">[]</span> <span class="o">|</span> <span class="o">[_]</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span> <span class="o">}</span>
    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
      <span class="n">angels</span>
      <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">angel</span> <span class="o">-&gt;</span> <span class="n">angel</span><span class="o">.</span><span class="nc">Position</span> <span class="o">-</span> <span class="n">this</span><span class="o">.</span><span class="nc">Position</span><span class="o">)</span>
      <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">reduce</span> <span class="o">(+)</span>
      <span class="o">|&gt;</span> <span class="n">dodge</span>

  <span class="k">let</span> <span class="n">boid</span> <span class="n">midpoint</span> <span class="n">friendRadius</span> <span class="n">dodgeRadius</span> <span class="n">maxAcc</span> <span class="n">maxVel</span> <span class="n">this</span> <span class="n">angels</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">groupVel</span> <span class="o">=</span>
      <span class="n">surrounding</span> <span class="n">friendRadius</span> <span class="n">this</span> <span class="n">angels</span>
      <span class="o">|&gt;</span> <span class="n">desiredVel</span>
      <span class="o">|&gt;</span> <span class="nn">Vector2</span><span class="p">.</span><span class="n">limit</span> <span class="n">maxVel</span>
    <span class="k">let</span> <span class="n">avoidCollision</span> <span class="o">=</span>
      <span class="n">surrounding</span> <span class="n">dodgeRadius</span> <span class="n">this</span> <span class="n">angels</span>
      <span class="o">|&gt;</span> <span class="n">avoid</span> <span class="n">this</span>
      <span class="o">|&gt;</span> <span class="nn">Vector2</span><span class="p">.</span><span class="n">limit</span> <span class="n">maxVel</span>
    <span class="k">let</span> <span class="n">towardsMiddle</span> <span class="o">=</span>
      <span class="n">midpoint</span> <span class="o">-</span> <span class="n">this</span><span class="o">.</span><span class="nc">Position</span>
      <span class="o">|&gt;</span> <span class="nn">Vector2</span><span class="p">.</span><span class="n">limit</span> <span class="n">maxVel</span>
    <span class="k">let</span> <span class="n">acceleration</span> <span class="o">=</span>
      <span class="o">(</span><span class="n">groupVel</span> <span class="o">*</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span> <span class="o">+</span> <span class="n">avoidCollision</span> <span class="o">*</span> <span class="mi">2</span><span class="o">.</span> <span class="o">+</span> <span class="n">towardsMiddle</span><span class="o">)</span>
      <span class="o">/</span> <span class="mi">3</span><span class="o">.</span>
    <span class="o">{</span> <span class="n">this</span> <span class="k">with</span> <span class="nc">Position</span> <span class="o">=</span> <span class="n">this</span><span class="o">.</span><span class="nc">Position</span> <span class="o">+</span> <span class="n">this</span><span class="o">.</span><span class="nc">Velocity</span>
                <span class="nc">Velocity</span> <span class="o">=</span> <span class="o">(</span><span class="n">this</span><span class="o">.</span><span class="nc">Velocity</span> <span class="o">+</span> <span class="n">acceleration</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="nn">Vector2</span><span class="p">.</span><span class="n">limit</span> <span class="n">maxVel</span> <span class="o">}</span>

  <span class="k">let</span> <span class="n">stationary</span> <span class="n">this</span> <span class="o">_</span> <span class="o">=</span>
    <span class="o">{</span> <span class="n">this</span> <span class="k">with</span> <span class="nc">Velocity</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span> <span class="o">}</span> <span class="o">}</span>
</code></pre></div>
<p>Nothing super exciting here individually - we have methods for discovering other angels nearby
(<code>surrounding</code>), the average velocity of a group of angels (<code>desiredVel</code>) and a rough guess
at not running into a group of nearby angels (<code>avoid</code>). All could probably be improved!</p>

<p>Putting it all together, the <code>boid</code> method calculates the acceleration the angel would &quot;like&quot; to
have to follow all if its rules fully, and then limits that by a specified maximum acceleration.
I played with the weighting of the rules a bit to get something that looked kind of nice, and also
decided to make my life easier by aiming cohesion towards the middle of the screen rather than the
middle of the flock.</p>

<p>Generating our angels is now just a case of partially applying boid with the parameters of our
choice:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">angels</span> <span class="o">=</span>
  <span class="nn">Seq</span><span class="p">.</span><span class="n">zip3</span> <span class="o">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">xSeq</span> <span class="n">ySeq</span><span class="o">)</span> <span class="o">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">zip</span> <span class="n">vxSeq</span> <span class="n">vySeq</span><span class="o">)</span> <span class="n">cSeq</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">40</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span>
      <span class="o">(</span><span class="k">fun</span> <span class="o">((</span><span class="n">px</span><span class="o">,</span> <span class="n">py</span><span class="o">),</span> <span class="o">(</span><span class="n">vx</span><span class="o">,</span> <span class="n">vy</span><span class="o">),</span> <span class="n">c</span><span class="o">)</span> <span class="o">-&gt;</span>
       <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">px</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">py</span> <span class="o">}</span>
         <span class="nc">Velocity</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">vx</span><span class="o">;</span> <span class="n">y</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">vy</span> <span class="o">}</span>
         <span class="nc">Colour</span>   <span class="o">=</span> <span class="n">c</span> <span class="o">})</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="n">createAngel</span> <span class="o">(</span><span class="nn">Logic</span><span class="p">.</span><span class="n">boid</span> <span class="n">midpoint</span> <span class="mi">10</span><span class="o">.</span> <span class="mi">1</span><span class="o">.</span> <span class="mi">0</span><span class="o">.</span><span class="mi">3</span> <span class="mi">1</span><span class="o">.))</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">append</span>
      <span class="o">[(</span><span class="n">createAngel</span>
         <span class="nn">Logic</span><span class="p">.</span><span class="n">stationary</span> <span class="o">{</span> <span class="nc">Position</span> <span class="o">=</span> <span class="n">midpoint</span>
                            <span class="nc">Velocity</span> <span class="o">=</span> <span class="o">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span> <span class="o">}</span>
                            <span class="nc">Colour</span>   <span class="o">=</span> <span class="mi">15</span> <span class="o">})]</span>
  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toList</span>
</code></pre></div>
<p>The ones in listing <a href="https://github.com/mavnn/advent2015/blob/master/advent3.fsx">advent3.fsx</a> give something reasonably nice, looking like:</p>

<p><img src="https://blog.mavnn.co.uk/images/angels4.gif"/></p>

<p>One word of warning: there&#39;s a bug in the avoidance which I haven&#39;t had a chance to track down,
so if you add too many angels they&#39;ll all push each other into the top left corner. Oops.</p>

<p>And that&#39;s all for now. I hope you enjoyed this brief dive into agent based programming,
and how we can use agents to separate responsibility and protect against unwanted race conditions.</p>

<p>As you can see, this framework allows easy modification of angel logic, and in fact allows for
every angel to have its own implementation without much added complexity - as long as it replies to
the same messages.</p>

<p>Happy Christmas, and God bless.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modelling Inheritance with Inheritance]]></title>
    <link href="https://blog.mavnn.co.uk/modelling-inheritance-with-inheritance/"/>
    <updated>2014-12-18T12:01:41+00:00</updated>
    <id>https://blog.mavnn.co.uk/modelling-inheritance-with-inheritance</id>
    <content type="html"><![CDATA[<blockquote>
<p>This post is part of the <a href="https://sergeytihon.wordpress.com/tag/fsadvent/">F# Advent Calendar</a> 2014, which is stuffed full of other interesting posts. Go have a read!</p>
</blockquote>

<p>Note: This post is epic in length. If you just want to see the final resulting script of much silliness, skip straight to <a href="#conclusion">the conclusion</a>!</p>

<p>Note 2: If you just want to see an example of a sane generated type provider, <a href="https://github.com/mavnn/FPDays.TypeProvider/">the code from my FPDays tutorial</a> is a much better bet.</p>

<p>Note 3: There is a lot of code below. If you&#39;re viewing this on a desktop, I suggest collapsing the sidebar to the right otherwise you&#39;ll have a lot of horizontal scroll bars. If you&#39;re on a mobile device, you might want to bookmark for later.</p>

<p>So... I&#39;ve been playing with generated (not erased) type providers for a bit, and meaning to write something up about them. Most of the documentation out there is for erased type providers, and to be honest they have a lot of advantages in terms of performance.</p>

<p>But they also have two fundamental limitations:</p>

<ul>
<li>You can&#39;t used erased F# types in any other .net language</li>
<li>You can&#39;t use reflection on erased types (even in F#)</li>
</ul>

<p>So let&#39;s see if we can have a play with generated types, and then - given this is Christmas, and all - let&#39;s see if we can build Jesus&#39; family tree in the .net type system. After all, if you&#39;re going to use inheritance to model something, how about modelling inheritance?</p>

<!-- more -->

<blockquote>
<p>If you need a reminder of type provider basics, check out <a href="https//blog.mavnn.co.uk/type-providers-from-the-ground-up/">Type Providers from the Ground Up</a></p>
</blockquote>

<p>Let&#39;s start with a really basic example of a generative type provider. We&#39;ll just create a single type with a static property on it.</p>

<p>First, our input. We&#39;re going to grab <a href="https://www.biblegateway.com/passage/?search=matthew+1%3A2-16&amp;version=NIV">the genealogy of Jesus from Matthew</a> and then massage the content just enough that the first name on each line is a &quot;parent&quot;, and any other names on a line are... other people. We&#39;ll assume they&#39;re siblings, although actually not all of them are.</p>
<div class="highlight"><pre><code class="text">Abraham was the father of Isaac,
Isaac the father of Jacob,
Jacob the father of Judah and his brothers,
Judah the father of Perez and Zerah, whose mother was Tamar,
Perez the father of Hezron,
Hezron the father of Ram,
Ram the father of Amminadab,
... (some other people here) ...
Akim the father of Elihud,
Elihud the father of Eleazar,
Eleazar the father of Matthan,
Matthan the father of Jacob,
Jacob the father of Joseph, the husband of Mary, 
and Mary was the mother of Jesus who is called the Messiah.
</code></pre></div>
<p>For round one, we&#39;re just going to put this string into a type as a property.</p>

<p>Our type provider file looks a bit like this:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nc">AdventProvider</span>
<span class="o">#</span><span class="k">if</span> <span class="nc">INTERACTIVE</span>
<span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fsi&quot;</span>
<span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fs&quot;</span>
<span class="o">#</span><span class="n">endif</span>

<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
<span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
<span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
<span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>

<span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
<span class="k">type</span> <span class="nc">AdventProvider</span> <span class="o">(</span><span class="n">cfg</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>

    <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;Advent.Provided&quot;</span>
    <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
    <span class="k">let</span> <span class="n">tempAsmPath</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">ChangeExtension</span><span class="o">(</span><span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetTempFileName</span><span class="bp">()</span><span class="o">,</span> <span class="s2">&quot;.dll&quot;</span><span class="o">)</span>
    <span class="k">let</span> <span class="n">tempAsm</span> <span class="o">=</span> <span class="nc">ProvidedAssembly</span> <span class="n">tempAsmPath</span>

    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;Family&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
    <span class="k">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span><span class="nc">ProvidedStaticParameter</span><span class="o">(</span><span class="s2">&quot;Genealogy&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)]</span>

    <span class="k">do</span>
        <span class="n">t</span><span class="o">.</span><span class="nc">DefineStaticParameters</span><span class="o">(</span>
            <span class="n">parameters</span><span class="o">,</span>
            <span class="k">fun</span> <span class="n">typeName</span> <span class="n">args</span> <span class="o">-&gt;</span>
                <span class="k">let</span> <span class="n">genealogy</span> <span class="o">=</span> <span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:?&gt;</span> <span class="kt">string</span>
                <span class="k">let</span> <span class="n">inputFile</span> <span class="o">=</span> 
                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">cfg</span><span class="o">.</span><span class="nc">ResolutionFolder</span><span class="o">,</span> <span class="n">genealogy</span><span class="o">)</span>
                <span class="k">let</span> <span class="n">raw</span> <span class="o">=</span>
                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllLines</span> <span class="n">inputFile</span>

                <span class="k">let</span> <span class="n">g</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span>
                            <span class="n">asm</span><span class="o">,</span> 
                            <span class="n">ns</span><span class="o">,</span> 
                            <span class="n">typeName</span><span class="o">,</span> 
                            <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> 
                            <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>

                <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;Raw&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span> <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)</span>
                <span class="k">let</span> <span class="n">rawStr</span> <span class="o">=</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">raw</span>
                <span class="n">s</span><span class="o">.</span><span class="nc">GetterCode</span> <span class="o">&lt;-</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Value</span> <span class="n">rawStr</span>
                <span class="n">g</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">s</span>

                <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">g</span><span class="o">]</span>

                <span class="n">g</span>
            <span class="o">)</span>

    <span class="k">do</span>
        <span class="n">this</span><span class="o">.</span><span class="nc">RegisterRuntimeAssemblyLocationAsProbingFolder</span> <span class="n">cfg</span>
        <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">t</span><span class="o">]</span>
        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">t</span><span class="o">])</span>

<span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
<span class="k">do</span> <span class="bp">()</span>
</code></pre></div>
<p>What&#39;s with the <code>#if INTERACTIVE</code> bits? Well, that&#39;ll be the subject of another blog post soon; I&#39;m doing must of my type provider dev in Vim these days to avoid the Visual Studio restart cycle, so I thought I might as well skip the fsproj file completely.</p>

<p>In the actual provider itself, there&#39;s a few new things to note if you&#39;ve only previously done erased type provider development.</p>
<div class="highlight"><pre><code class="fsharp">    <span class="k">let</span> <span class="n">tempAsmPath</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">ChangeExtension</span><span class="o">(</span><span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetTempFileName</span><span class="bp">()</span><span class="o">,</span> <span class="s2">&quot;.dll&quot;</span><span class="o">)</span>
    <span class="k">let</span> <span class="n">tempAsm</span> <span class="o">=</span> <span class="nc">ProvidedAssembly</span> <span class="n">tempAsmPath</span>
</code></pre></div>
<p>Generative type providers, unlike erased type providers, actually pass IL (.net byte code) to the compiler rather than just a quotation. To achieve that, we need to write the IL into an actual assembly that the compiler will then merge into the dll it&#39;s compiling.</p>

<p>Let&#39;s try that again, slower. The compiler will be building a piece of code that uses your type provider into <code>Output.dll</code>. It will call into your type provider, which needs to write the IL of the type/codes it&#39;s generating to disk into <code>Temp.dll</code>. The compiler will then take the IL from <code>Temp.dll</code> and insert it into <code>Output.dll</code>. At this point, we have no further use for <code>Temp.dll</code>, hence why we&#39;re using <code>GetTempFileName</code> to get a file in the OS temporary file
folder.</p>

<p>The <code>ProvidedTypes</code> API knows how to create these temporary dlls, so we wrap our filename in the <code>ProvidedAssembly</code> type.</p>
<div class="highlight"><pre><code class="fsharp">    <span class="k">do</span>
        <span class="n">this</span><span class="o">.</span><span class="nc">RegisterRuntimeAssemblyLocationAsProbingFolder</span> <span class="n">cfg</span>
        <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">t</span><span class="o">]</span>
        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">t</span><span class="o">])</span>
</code></pre></div>
<p>We also need to specify which types need adding to the temporary assembly. Here we&#39;re specifying that the parameterized type (the one that takes a filename) should be added; on line 46 of the main code you&#39;ll see the type generated when a parameter is supplied being added. We also need to tell the type provider where the runtime dll is being created - fortunately, a helper method works this out for us when given the config item from the type provider constructor.</p>

<p>It&#39;s important to note that nested types <em>should not</em> be added to the temporary assembly. That&#39;s handled by adding the root.</p>

<p>So, if you compile this code down you can invoke it like this:</p>
<div class="highlight"><pre><code class="fsharp"><span class="o">#!/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">fsharpi</span>
<span class="c1">// Put all of this in a file called something like Families.fsx</span>
<span class="c1">// Yes, that hashbang line means if you make it executable it</span>
<span class="c1">// will run on linux/mac</span>
<span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;AdventProvider.dll&quot;</span>

<span class="k">open</span> <span class="nc">AdventProvider</span>
<span class="k">open</span> <span class="nn">Advent</span><span class="p">.</span><span class="nc">Provided</span>

<span class="k">type</span> <span class="nc">JesusGenerations</span> <span class="o">=</span> <span class="nc">Family</span><span class="o">&lt;</span><span class="s2">&quot;Genealogy.txt&quot;</span><span class="o">&gt;</span>

<span class="n">printfn</span> <span class="s2">&quot;%s&quot;</span> <span class="nn">JesusGenerations</span><span class="p">.</span><span class="nc">Raw</span>
</code></pre></div>
<p>Excellent! A real, valid .net type. You can only invoke the type provider from F#, but the types generated are usable across the .net language universe - and reflection works fine.</p>

<p>So... phase two. Let&#39;s see if we can parse something sane out of our plain text mess to turn into types. I&#39;m not going to go into this in detail, but because I wanted to avoid the complication of external dependencies I just wrote a very simple regex based parser for this.</p>

<p>Behold! The <code>Parser.fs</code> file:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nc">Parser</span>
<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Text</span><span class="p">.</span><span class="nc">RegularExpressions</span>

<span class="k">type</span> <span class="nc">Person</span> <span class="o">=</span>
    <span class="o">{</span>
        <span class="nc">Name</span> <span class="o">:</span> <span class="kt">string</span>
        <span class="nc">Heir</span> <span class="o">:</span> <span class="nc">Person</span> <span class="n">option</span>
        <span class="nc">Others</span> <span class="o">:</span> <span class="kt">string</span> <span class="kt">list</span>
    <span class="o">}</span>

<span class="k">let</span> <span class="n">namesRegex</span> <span class="o">=</span> <span class="nc">Regex</span><span class="o">(@</span><span class="s2">&quot;(?&lt;name&gt;[A-Z][a-z]+)&quot;</span><span class="o">,</span> <span class="nn">RegexOptions</span><span class="p">.</span><span class="nc">Compiled</span><span class="o">)</span>

<span class="k">let</span> <span class="nc">ParseToNames</span> <span class="n">line</span> <span class="o">=</span>
    <span class="n">namesRegex</span><span class="o">.</span><span class="nc">Matches</span><span class="o">(</span><span class="n">line</span><span class="o">)</span>
    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">cast</span><span class="o">&lt;</span><span class="nc">Match</span><span class="o">&gt;</span>
    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">m</span> <span class="o">-&gt;</span> <span class="n">m</span><span class="o">.</span><span class="nn">Groups</span><span class="p">.</span><span class="err">[&quot;</span><span class="n">name</span><span class="s2">&quot;].Value)</span>
<span class="s2">    |&gt; Seq.filter (fun n -&gt; n &lt;&gt; &quot;</span><span class="nc">King</span><span class="s2">&quot; &amp;&amp; n &lt;&gt; &quot;</span><span class="nc">Messiah</span><span class="s2">&quot; &amp;&amp; n &lt;&gt; &quot;</span><span class="nc">Babylon</span><span class="s2">&quot;)</span>
<span class="s2">    |&gt; Seq.toList</span>
<span class="s2">    |&gt; function h::t -&gt; h, t | [] -&gt; failwith &quot;</span><span class="nc">No</span> <span class="n">blank</span> <span class="n">lines</span><span class="o">!</span><span class="s2">&quot;</span>

<span class="s2">let rec NamesToPerson names =</span>
<span class="s2">    match names with</span>
<span class="s2">    | [] -&gt; None</span>
<span class="s2">    | (father,others)::t -&gt;</span>
<span class="s2">        let heir =</span>
<span class="s2">            match t with</span>
<span class="s2">            | [] -&gt; None</span>
<span class="s2">            | (heir, _)::_ -&gt; Some heir</span>
<span class="s2">        Some {</span>
<span class="s2">            Name = father</span>
<span class="s2">            Heir = NamesToPerson t</span>
<span class="s2">            Others =</span>
<span class="s2">                others</span>
<span class="s2">                |&gt; List.filter</span>
<span class="s2">                    (fun c -&gt;</span>
<span class="s2">                        match heir with</span>
<span class="s2">                        | Some h -&gt; c &lt;&gt; h</span>
<span class="s2">                        | None -&gt; true)</span>
<span class="s2">        }</span>

<span class="s2">let Parse lines =</span>
<span class="s2">    lines</span>
<span class="s2">    |&gt; List.map ParseToNames</span>
<span class="s2">    |&gt; NamesToPerson</span>
</code></pre></div>
<p>Nb. Never, ever, ever build a parser like this for production code. Treat this as a &quot;how not to build a parser&quot; example, and go read something like <a href="http://trelford.com/blog/post/parser.aspx">Phil&#39;s excellent parsing posts</a> instead.</p>

<p>So... what can we do this this?</p>

<p>Let&#39;s start be parsing our file, and seeing if we can build a nested set of types representing the family tree.</p>

<p>Recursive type building! Go!</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nc">AdventProvider</span>
<span class="o">#</span><span class="k">if</span> <span class="nc">INTERACTIVE</span>
<span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fsi&quot;</span>
<span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fs&quot;</span>
<span class="o">#</span><span class="n">load</span> <span class="s2">&quot;Parser.fs&quot;</span>
<span class="o">#</span><span class="n">endif</span>

<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
<span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
<span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
<span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
<span class="k">open</span> <span class="nc">Parser</span>

<span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
<span class="k">type</span> <span class="nc">AdventProvider</span> <span class="o">(</span><span class="n">cfg</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>

    <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;Advent.Provided&quot;</span>
    <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
    <span class="k">let</span> <span class="n">tempAsmPath</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">ChangeExtension</span><span class="o">(</span><span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetTempFileName</span><span class="bp">()</span><span class="o">,</span> <span class="s2">&quot;.dll&quot;</span><span class="o">)</span>
    <span class="k">let</span> <span class="n">tempAsm</span> <span class="o">=</span> <span class="nc">ProvidedAssembly</span> <span class="n">tempAsmPath</span>

    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;Family&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
    <span class="k">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span><span class="nc">ProvidedStaticParameter</span><span class="o">(</span><span class="s2">&quot;Genealogy&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)]</span>

    <span class="k">do</span>
        <span class="n">t</span><span class="o">.</span><span class="nc">DefineStaticParameters</span><span class="o">(</span>
            <span class="n">parameters</span><span class="o">,</span>
            <span class="k">fun</span> <span class="n">typeName</span> <span class="n">args</span> <span class="o">-&gt;</span>
                <span class="k">let</span> <span class="n">genealogy</span> <span class="o">=</span> <span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:?&gt;</span> <span class="kt">string</span>
                <span class="k">let</span> <span class="n">inputFile</span> <span class="o">=</span> 
                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">cfg</span><span class="o">.</span><span class="nc">ResolutionFolder</span><span class="o">,</span> <span class="n">genealogy</span><span class="o">)</span>
                <span class="k">let</span> <span class="n">raw</span> <span class="o">=</span>
                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllLines</span> <span class="n">inputFile</span>
                <span class="k">let</span> <span class="n">input</span> <span class="o">=</span>
                    <span class="n">raw</span>
                    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toList</span>
                    <span class="o">|&gt;</span> <span class="nc">Parse</span>

                <span class="k">let</span> <span class="n">g</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span>
                            <span class="n">asm</span><span class="o">,</span> 
                            <span class="n">ns</span><span class="o">,</span> 
                            <span class="n">typeName</span><span class="o">,</span> 
                            <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> 
                            <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
                <span class="n">g</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Class</span><span class="o">)</span>

                <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;Raw&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span> <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)</span>
                <span class="k">let</span> <span class="n">rawStr</span> <span class="o">=</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">raw</span>
                <span class="n">s</span><span class="o">.</span><span class="nc">GetterCode</span> <span class="o">&lt;-</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Value</span> <span class="n">rawStr</span>
                <span class="n">g</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">s</span>

                <span class="k">let</span> <span class="k">rec</span> <span class="n">personToType</span> <span class="o">(</span><span class="n">father</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">(</span><span class="n">person</span> <span class="o">:</span> <span class="nc">Person</span><span class="o">)</span> <span class="o">=</span>
                    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="o">(</span><span class="n">father</span> <span class="o">:&gt;</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Type</span><span class="o">),</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
                    <span class="n">t</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Class</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span><span class="o">)</span>
                    <span class="n">father</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">t</span>
                    <span class="k">match</span> <span class="n">person</span><span class="o">.</span><span class="nc">Heir</span> <span class="k">with</span>
                    <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">personToType</span> <span class="n">t</span> <span class="n">p</span>
                    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>

                <span class="k">match</span> <span class="n">input</span> <span class="k">with</span>
                <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span>
                    <span class="n">personToType</span> <span class="n">g</span> <span class="n">p</span>
                <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
                    <span class="bp">()</span>

                <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">g</span><span class="o">]</span>

                <span class="n">g</span>
            <span class="o">)</span>

    <span class="k">do</span>
        <span class="n">this</span><span class="o">.</span><span class="nc">RegisterRuntimeAssemblyLocationAsProbingFolder</span> <span class="n">cfg</span>
        <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">t</span><span class="o">]</span>
        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">t</span><span class="o">])</span>

<span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
<span class="k">do</span> <span class="bp">()</span>
</code></pre></div>
<p>It&#39;s not looking too bad... but we&#39;re also getting our first hint of trouble to come. The first time I tried to use this provider, I didn&#39;t have lines 46 and 55. It turns out that the default attributes of a <code>ProvidedTypeDefinition</code> set the <code>Sealed</code> attribute on the class that&#39;s generated. If you then try and build a type that inherits from it, you get an error when you try and consume the types from the provider.</p>

<p>But, hey? We&#39;ve worked around that, right? I&#39;m sure there&#39;s no reason it&#39;s set that way by default...</p>

<p>And: we have types. Lots of types:</p>
<div class="highlight"><pre><code class="fsharp"><span class="o">#!/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">fsharpi</span>
<span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;AdventProvider.dll&quot;</span>

<span class="k">open</span> <span class="nc">AdventProvider</span>
<span class="k">open</span> <span class="nn">Advent</span><span class="p">.</span><span class="nc">Provided</span>

<span class="k">type</span> <span class="nc">JesusGenerations</span> <span class="o">=</span> <span class="nc">Family</span><span class="o">&lt;</span><span class="s2">&quot;Genealogy.txt&quot;</span><span class="o">&gt;</span>

<span class="n">printfn</span> <span class="s2">&quot;%s&quot;</span> <span class="nn">JesusGenerations</span><span class="p">.</span><span class="nc">Raw</span>

<span class="nn">JesusGenerations</span><span class="p">.</span><span class="nn">Abraham</span><span class="p">.</span><span class="nn">Isaac</span><span class="p">.</span><span class="nn">Jacob</span><span class="p">.</span><span class="nn">Judah</span><span class="p">.</span><span class="nn">Perez</span><span class="p">.</span><span class="nn">Hezron</span><span class="p">.</span><span class="nn">Ram</span><span class="p">.</span><span class="nc">Amminadab</span>
<span class="c1">// ... there&#39;s more where that came from</span>
</code></pre></div>
<p>We can even do things like this:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="nc">DescendedFromAbraham</span> <span class="o">(</span><span class="n">person</span> <span class="o">:</span> <span class="nn">JesusGenerations</span><span class="p">.</span><span class="nc">Abraham</span><span class="o">)</span> <span class="o">=</span>
    <span class="bp">true</span>
</code></pre></div>
<p>Compile time family tree checking - pretty nifty. Except... when we try and call this function we realise we have a problem. None of these classes have constructors.</p>

<p>Hmmm.</p>

<p>Let&#39;s try and add one. Nothing fancy - just a default constructor.</p>

<p>We&#39;ll replace the <code>personToType</code> method with this:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="k">rec</span> <span class="n">personToType</span> <span class="o">(</span><span class="n">father</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">(</span><span class="n">person</span> <span class="o">:</span> <span class="nc">Person</span><span class="o">)</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="o">(</span><span class="n">father</span> <span class="o">:&gt;</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Type</span><span class="o">),</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
    <span class="n">t</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Class</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span><span class="o">)</span>
    <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">)</span>
    <span class="n">c</span><span class="o">.</span><span class="nc">InvokeCode</span> <span class="o">&lt;-</span>
        <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span>
            <span class="k">match</span> <span class="n">args</span> <span class="k">with</span>
            <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span>
                <span class="n">failwith</span> <span class="s2">&quot;Generated constructors should always pass the instance as the first argument!&quot;</span>
            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
                <span class="o">&lt;@@</span> <span class="bp">()</span> <span class="o">@@&gt;</span>
    <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">c</span>
    <span class="n">father</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">t</span>
    <span class="k">match</span> <span class="n">person</span><span class="o">.</span><span class="nc">Heir</span> <span class="k">with</span>
    <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">personToType</span> <span class="n">t</span> <span class="n">p</span>
    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</code></pre></div>
<p>All looks good. In here you can see one of the first differences between erased and generated type. For a generated type, the first input arg to the constructor is the instance of the type to be initialized - and the return type of the constructor should be null.</p>

<p>The only problem is that our type provider errors immediately on usage with an &quot;Argument cannot be null. Parameter name: obj&quot; error. Not immediately informative.</p>

<p>A quick check with a type provider providing a single type later, we can confirm that the constructor above is valid; sounds like we&#39;re having issues with the fact that we&#39;re inheriting from a provided type. Maybe they&#39;re sealed for a reason after all. Still; we&#39;re not to be deterred so easily!</p>

<p><em>Cue dramatic music of choice!</em></p>

<p>Taking an guess, we&#39;ll assume this might have something to do with the <code>JesusGenerations</code> type not having a constructor; we&#39;ll add one and try again and... no dice. Same error.</p>

<p>Which is round about the time I noticed that provided constructors also have a <code>BaseConstructorCall</code> property. Time for a slightly more invasive rewrite, leaving us an overall type provider that looks like this:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nc">AdventProvider</span>
<span class="o">#</span><span class="k">if</span> <span class="nc">INTERACTIVE</span>
<span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fsi&quot;</span>
<span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fs&quot;</span>
<span class="o">#</span><span class="n">load</span> <span class="s2">&quot;Parser.fs&quot;</span>
<span class="o">#</span><span class="n">endif</span>

<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
<span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
<span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
<span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
<span class="k">open</span> <span class="nc">Parser</span>

<span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
<span class="k">type</span> <span class="nc">AdventProvider</span> <span class="o">(</span><span class="n">cfg</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>

    <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;Advent.Provided&quot;</span>
    <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
    <span class="k">let</span> <span class="n">tempAsmPath</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">ChangeExtension</span><span class="o">(</span><span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetTempFileName</span><span class="bp">()</span><span class="o">,</span> <span class="s2">&quot;.dll&quot;</span><span class="o">)</span>
    <span class="k">let</span> <span class="n">tempAsm</span> <span class="o">=</span> <span class="nc">ProvidedAssembly</span> <span class="n">tempAsmPath</span>

    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;Family&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
    <span class="k">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span><span class="nc">ProvidedStaticParameter</span><span class="o">(</span><span class="s2">&quot;Genealogy&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)]</span>

    <span class="k">do</span>
        <span class="n">t</span><span class="o">.</span><span class="nc">DefineStaticParameters</span><span class="o">(</span>
            <span class="n">parameters</span><span class="o">,</span>
            <span class="k">fun</span> <span class="n">typeName</span> <span class="n">args</span> <span class="o">-&gt;</span>
                <span class="k">let</span> <span class="n">genealogy</span> <span class="o">=</span> <span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:?&gt;</span> <span class="kt">string</span>
                <span class="k">let</span> <span class="n">inputFile</span> <span class="o">=</span> 
                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">cfg</span><span class="o">.</span><span class="nc">ResolutionFolder</span><span class="o">,</span> <span class="n">genealogy</span><span class="o">)</span>
                <span class="k">let</span> <span class="n">raw</span> <span class="o">=</span>
                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllLines</span> <span class="n">inputFile</span>
                <span class="k">let</span> <span class="n">input</span> <span class="o">=</span>
                    <span class="n">raw</span>
                    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toList</span>
                    <span class="o">|&gt;</span> <span class="nc">Parse</span>

                <span class="k">let</span> <span class="n">g</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span>
                            <span class="n">asm</span><span class="o">,</span> 
                            <span class="n">ns</span><span class="o">,</span> 
                            <span class="n">typeName</span><span class="o">,</span> 
                            <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> 
                            <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
                <span class="n">g</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Class</span><span class="o">)</span>

                <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;Raw&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span> <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)</span>
                <span class="k">let</span> <span class="n">rawStr</span> <span class="o">=</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">raw</span>
                <span class="n">s</span><span class="o">.</span><span class="nc">GetterCode</span> <span class="o">&lt;-</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Value</span> <span class="n">rawStr</span>
                <span class="n">g</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">s</span>

                <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">)</span>
                <span class="n">c</span><span class="o">.</span><span class="nc">InvokeCode</span> <span class="o">&lt;-</span>
                    <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span>
                        <span class="k">match</span> <span class="n">args</span> <span class="k">with</span>
                        <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span>
                            <span class="n">failwith</span> <span class="s2">&quot;Generated constructors should always pass the instance as the first argument!&quot;</span>
                        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
                            <span class="o">&lt;@@</span> <span class="bp">()</span> <span class="o">@@&gt;</span>
                <span class="n">g</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">c</span>

                <span class="k">let</span> <span class="k">rec</span> <span class="n">personToType</span> <span class="o">(</span><span class="n">father</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="n">fatherCtor</span> <span class="o">(</span><span class="n">person</span> <span class="o">:</span> <span class="nc">Person</span><span class="o">)</span> <span class="o">=</span>
                    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="o">(</span><span class="n">father</span> <span class="o">:&gt;</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Type</span><span class="o">),</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
                    <span class="n">t</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Class</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span><span class="o">)</span>
                    <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="bp">[]</span><span class="o">)</span>
                    <span class="n">c</span><span class="o">.</span><span class="nc">BaseConstructorCall</span> <span class="o">&lt;-</span> <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">fatherCtor</span><span class="o">,</span> <span class="n">args</span><span class="o">)</span>
                    <span class="n">c</span><span class="o">.</span><span class="nc">InvokeCode</span> <span class="o">&lt;-</span>
                        <span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span>
                            <span class="k">match</span> <span class="n">args</span> <span class="k">with</span>
                            <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span>
                                <span class="n">failwith</span> <span class="s2">&quot;Generated constructors should always pass the instance as the first argument!&quot;</span>
                            <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
                                <span class="o">&lt;@@</span> <span class="bp">()</span> <span class="o">@@&gt;</span>
                    <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">c</span>
                    <span class="n">father</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">t</span>
                    <span class="k">match</span> <span class="n">person</span><span class="o">.</span><span class="nc">Heir</span> <span class="k">with</span>
                    <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">personToType</span> <span class="n">t</span> <span class="n">c</span> <span class="n">p</span>
                    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>

                <span class="k">match</span> <span class="n">input</span> <span class="k">with</span>
                <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span>
                    <span class="n">personToType</span> <span class="n">g</span> <span class="n">c</span> <span class="n">p</span>
                <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
                    <span class="bp">()</span>

                <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">g</span><span class="o">]</span>

                <span class="n">g</span>
            <span class="o">)</span>

    <span class="k">do</span>
        <span class="n">this</span><span class="o">.</span><span class="nc">RegisterRuntimeAssemblyLocationAsProbingFolder</span> <span class="n">cfg</span>
        <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">t</span><span class="o">]</span>
        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">t</span><span class="o">])</span>

<span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
<span class="k">do</span> <span class="bp">()</span>
</code></pre></div>
<p>It all builds, we can reference it... and then we get: </p>
<div class="highlight"><pre><code class="text">The type provider &#39;AdventProvider+AdventProvider&#39; reported an error: User defined subclasses of System.Type are not yet supported
</code></pre></div>
<p>Hmm. Irritating. Especially as the error message is actually incorrect; we&#39;re not subclassing System.Type and we know that that was working correctly as the types were being generated correctly before we tried to add constructors to them. But it looks like we might have hit the limits of what the current type provider implementation allows.</p>

<p>But we&#39;re still not quite done yet; let&#39;s turn the insanity up a notch.</p>

<p><em>Cue your choice of even more dramatic music or Benny Hill here</em></p>

<p>As well as actual inheritance in .net, we have interfaces which can be used to model inheritance. Let&#39;s have a last throw of the dice, and see whether we can create generated interfaces to do compile time ancestry checking.</p>

<p>Adding an <code>Interface</code> at every level turns out to be fairly easy, and it appears we can create generated interfaces - a useful trick to have up your sleeve. Let&#39;s have a look what that looks like:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nc">AdventProvider</span>
<span class="o">#</span><span class="k">if</span> <span class="nc">INTERACTIVE</span>
<span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fsi&quot;</span>
<span class="o">#</span><span class="n">load</span> <span class="s2">&quot;paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fs&quot;</span>
<span class="o">#</span><span class="n">load</span> <span class="s2">&quot;Parser.fs&quot;</span>
<span class="o">#</span><span class="n">endif</span>

<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
<span class="k">open</span> <span class="nn">ProviderImplementation</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
<span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
<span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
<span class="k">open</span> <span class="nc">Parser</span>

<span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
<span class="k">type</span> <span class="nc">AdventProvider</span> <span class="o">(</span><span class="n">cfg</span> <span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span> <span class="bp">()</span>

    <span class="k">let</span> <span class="n">ns</span> <span class="o">=</span> <span class="s2">&quot;Advent.Provided&quot;</span>
    <span class="k">let</span> <span class="n">asm</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
    <span class="k">let</span> <span class="n">tempAsmPath</span> <span class="o">=</span> <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">ChangeExtension</span><span class="o">(</span><span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetTempFileName</span><span class="bp">()</span><span class="o">,</span> <span class="s2">&quot;.dll&quot;</span><span class="o">)</span>
    <span class="k">let</span> <span class="n">tempAsm</span> <span class="o">=</span> <span class="nc">ProvidedAssembly</span> <span class="n">tempAsmPath</span>

    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">asm</span><span class="o">,</span> <span class="n">ns</span><span class="o">,</span> <span class="s2">&quot;Family&quot;</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
    <span class="k">let</span> <span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span><span class="nc">ProvidedStaticParameter</span><span class="o">(</span><span class="s2">&quot;Genealogy&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;)]</span>

    <span class="k">do</span>
        <span class="n">t</span><span class="o">.</span><span class="nc">DefineStaticParameters</span><span class="o">(</span>
            <span class="n">parameters</span><span class="o">,</span>
            <span class="k">fun</span> <span class="n">typeName</span> <span class="n">args</span> <span class="o">-&gt;</span>
                <span class="k">let</span> <span class="n">genealogy</span> <span class="o">=</span> <span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:?&gt;</span> <span class="kt">string</span>
                <span class="k">let</span> <span class="n">inputFile</span> <span class="o">=</span> 
                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">Combine</span><span class="o">(</span><span class="n">cfg</span><span class="o">.</span><span class="nc">ResolutionFolder</span><span class="o">,</span> <span class="n">genealogy</span><span class="o">)</span>
                <span class="k">let</span> <span class="n">raw</span> <span class="o">=</span>
                    <span class="nn">System</span><span class="p">.</span><span class="nn">IO</span><span class="p">.</span><span class="nn">File</span><span class="p">.</span><span class="nc">ReadAllLines</span> <span class="n">inputFile</span>
                <span class="k">let</span> <span class="n">input</span> <span class="o">=</span>
                    <span class="n">raw</span>
                    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toList</span>
                    <span class="o">|&gt;</span> <span class="nc">Parse</span>

                <span class="k">let</span> <span class="n">g</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span>
                            <span class="n">asm</span><span class="o">,</span> 
                            <span class="n">ns</span><span class="o">,</span> 
                            <span class="n">typeName</span><span class="o">,</span> 
                            <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> 
                            <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>

                <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;Raw&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span> <span class="nc">IsStatic</span> <span class="o">=</span> <span class="bp">true</span><span class="o">)</span>
                <span class="k">let</span> <span class="n">rawStr</span> <span class="o">=</span> <span class="nn">String</span><span class="p">.</span><span class="n">concat</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">raw</span>
                <span class="n">s</span><span class="o">.</span><span class="nc">GetterCode</span> <span class="o">&lt;-</span> <span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nn">Expr</span><span class="p">.</span><span class="nc">Value</span> <span class="n">rawStr</span>
                <span class="n">g</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">s</span>

                <span class="k">let</span> <span class="k">rec</span> <span class="n">personToType</span> <span class="o">(</span><span class="n">father</span> <span class="o">:</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">)</span> <span class="o">(</span><span class="n">fatherInterfaces</span> <span class="o">:</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Type</span> <span class="kt">list</span><span class="o">)</span> <span class="o">(</span><span class="n">person</span> <span class="o">:</span> <span class="nc">Person</span><span class="o">)</span> <span class="o">=</span>
                    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
                    <span class="k">let</span> <span class="n">parentInterface</span> <span class="o">=</span>
                        <span class="k">match</span> <span class="n">fatherInterfaces</span> <span class="k">with</span>
                        <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span> <span class="nc">None</span>
                        <span class="o">|</span> <span class="n">h</span><span class="o">::_</span> <span class="o">-&gt;</span> <span class="nc">Some</span> <span class="n">h</span>
                    <span class="k">let</span> <span class="n">i</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="s2">&quot;I&quot;</span> <span class="o">+</span> <span class="n">person</span><span class="o">.</span><span class="nc">Name</span><span class="o">,</span> <span class="nc">None</span><span class="o">,</span> <span class="nc">IsErased</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span>
                    <span class="n">i</span><span class="o">.</span><span class="nc">SetAttributes</span> <span class="o">(</span><span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Public</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Interface</span> <span class="o">|||</span> <span class="nn">TypeAttributes</span><span class="p">.</span><span class="nc">Abstract</span><span class="o">)</span>
                    <span class="n">father</span><span class="o">.</span><span class="nc">AddMembers</span> <span class="o">[</span><span class="n">t</span><span class="o">;</span><span class="n">i</span><span class="o">]</span>
                    <span class="k">match</span> <span class="n">person</span><span class="o">.</span><span class="nc">Heir</span> <span class="k">with</span>
                    <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">personToType</span> <span class="n">t</span> <span class="o">(</span><span class="n">i</span> <span class="o">:&gt;</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Type</span><span class="o">::</span><span class="n">fatherInterfaces</span><span class="o">)</span> <span class="n">p</span>
                    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>

                <span class="k">match</span> <span class="n">input</span> <span class="k">with</span>
                <span class="o">|</span> <span class="nc">Some</span> <span class="n">p</span> <span class="o">-&gt;</span>
                    <span class="n">personToType</span> <span class="n">g</span> <span class="bp">[]</span> <span class="n">p</span>
                <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
                    <span class="bp">()</span>

                <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">g</span><span class="o">]</span>

                <span class="n">g</span>
            <span class="o">)</span>

    <span class="k">do</span>
        <span class="n">this</span><span class="o">.</span><span class="nc">RegisterRuntimeAssemblyLocationAsProbingFolder</span> <span class="n">cfg</span>
        <span class="n">tempAsm</span><span class="o">.</span><span class="nc">AddTypes</span> <span class="o">[</span><span class="n">t</span><span class="o">]</span>
        <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">ns</span><span class="o">,</span> <span class="o">[</span><span class="n">t</span><span class="o">])</span>

<span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
<span class="k">do</span> <span class="bp">()</span>
</code></pre></div>
<p>Line 58 and 59 do all the work - normally an interface has no base type, and we need to reset the type attributes to make the interface look like an interface to the compiler. This all works well - but doesn&#39;t, of course, give us any inheritance. Lets see if we can use those &quot;fatherInterfaces&quot; I&#39;ve fed into the function to get us any closer.</p>

<p>A brief experiment with <code>IDisposable</code> shows us that if we change the base type of the interface to <code>Some typeof&lt;System.IDisposable&gt;</code>, that actually works. Again - useful type provider knowledge, but doesn&#39;t help us here. No dice on using the parent interface as the base type - we just start getting into more of the problems we were having above inheriting from other generated types.</p>

<p>So let&#39;s see what happens if instead we use implement interface instead of trying to inherit the interface; it seems about as reasonable as anything else we&#39;re tried so far...</p>

<p>We&#39;ll add this:</p>
<div class="highlight"><pre><code class="fsharp"><span class="n">fatherInterfaces</span>
<span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="n">i</span><span class="o">.</span><span class="nc">AddInterfaceImplementation</span>
</code></pre></div>
<p>after line 59 of the version above and see what happens.</p>

<h2><a name="conclusion"></a> Conclusion</h2>

<p>And suddenly... hey presto! We can do things like this:</p>
<div class="highlight"><pre><code class="fsharp"><span class="o">#!/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">fsharpi</span>
<span class="o">#</span><span class="n">r</span> <span class="o">@</span><span class="s2">&quot;AdventProvider.dll&quot;</span>

<span class="k">open</span> <span class="nc">AdventProvider</span>
<span class="k">open</span> <span class="nn">Advent</span><span class="p">.</span><span class="nc">Provided</span>

<span class="k">type</span> <span class="nc">JesusGenerations</span> <span class="o">=</span> <span class="nc">Family</span><span class="o">&lt;</span><span class="s2">&quot;Genealogy.txt&quot;</span><span class="o">&gt;</span>

<span class="n">printfn</span> <span class="s2">&quot;%s&quot;</span> <span class="o">(</span><span class="nn">JesusGenerations</span><span class="p">.</span><span class="nn">Raw</span><span class="p">.</span><span class="nc">Substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">20</span><span class="o">)</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span><span class="o">)</span>

<span class="k">let</span> <span class="n">descendentOfAbraham</span> <span class="o">(_</span> <span class="o">:</span> <span class="o">#</span><span class="nn">JesusGenerations</span><span class="p">.</span><span class="nc">IAbraham</span><span class="o">)</span> <span class="o">=</span> <span class="bp">true</span>
<span class="k">let</span> <span class="n">descendentOfDavid</span> 
        <span class="o">(_</span> <span class="o">:</span> 
            <span class="o">#</span><span class="nn">JesusGenerations</span>
                <span class="p">.</span><span class="nn">Abraham</span>
                <span class="p">.</span><span class="nn">Isaac</span>
                <span class="p">.</span><span class="nn">Jacob</span>
                <span class="p">.</span><span class="nn">Judah</span>
                <span class="p">.</span><span class="nn">Perez</span>
                <span class="p">.</span><span class="nn">Hezron</span>
                <span class="p">.</span><span class="nn">Ram</span>
                <span class="p">.</span><span class="nn">Amminadab</span>
                <span class="p">.</span><span class="nn">Nahshon</span>
                <span class="p">.</span><span class="nn">Salmon</span>
                <span class="p">.</span><span class="nn">Boaz</span>
                <span class="p">.</span><span class="nn">Obed</span>
                <span class="p">.</span><span class="nn">Jesse</span>
                <span class="p">.</span><span class="nc">IDavid</span><span class="o">)</span> <span class="o">=</span> <span class="bp">true</span>


<span class="c1">// This compiles...</span>
<span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="o">&lt;|</span> <span class="n">descendentOfAbraham</span> <span class="o">({</span> <span class="k">new</span> <span class="nn">JesusGenerations</span><span class="p">.</span><span class="nn">Abraham</span><span class="p">.</span><span class="nc">IIsaac</span> <span class="o">})</span>

<span class="c1">// So does this:</span>
<span class="n">printfn</span> <span class="s2">&quot;%A&quot;</span> <span class="o">&lt;|</span>
    <span class="n">descendentOfDavid</span> 
        <span class="o">({</span> <span class="k">new</span> <span class="nn">JesusGenerations</span>
                <span class="p">.</span><span class="nn">Abraham</span>
                <span class="p">.</span><span class="nn">Isaac</span>
                <span class="p">.</span><span class="nn">Jacob</span>
                <span class="p">.</span><span class="nn">Judah</span>
                <span class="p">.</span><span class="nn">Perez</span>
                <span class="p">.</span><span class="nn">Hezron</span>
                <span class="p">.</span><span class="nn">Ram</span>
                <span class="p">.</span><span class="nn">Amminadab</span>
                <span class="p">.</span><span class="nn">Nahshon</span>
                <span class="p">.</span><span class="nn">Salmon</span>
                <span class="p">.</span><span class="nn">Boaz</span>
                <span class="p">.</span><span class="nn">Obed</span>
                <span class="p">.</span><span class="nn">Jesse</span>
                <span class="p">.</span><span class="nn">David</span>
                <span class="p">.</span><span class="nn">Solomon</span>
                <span class="p">.</span><span class="nn">Rehoboam</span>
                <span class="p">.</span><span class="nc">IAbijah</span> <span class="o">})</span>

<span class="c1">// This doesn&#39;t - how cool is that?</span>
<span class="c">(* printfn &quot;%A&quot; &lt;|</span>
<span class="c">    descendentOfDavid ({ new JesusGenerations.Abraham.IIsaac }) *)</span>
</code></pre></div>
<p>Which personally I think is pretty awesome.</p>

<p>There is, unfortunately, only one problem. Whilst we now have compile time propositional logic... unfortunately our code fails at runtime with a type load error. Whilst the compiler is happy with the IL my random hacking has turned at, apparently the runtime is not.</p>

<p>Maybe next year...</p>

<p>I hope you enjoyed this random journey down the rabbit hole of type providers; and if you&#39;re interested in looking into the genealogy a bit further <a href="http://christianity.about.com/od/biblefactsandlists/a/jesusgenealogy.htm">this article</a> gives a brief overview of a few things, like why we think Jesus has two different genealogies in the bible and how Jewish genealogies didn&#39;t always include every generation.</p>

<p>See you next time: and if anyone can get the inheritance to work properly, I&#39;ll owe you a beverage of (reasonable) choice!</p>

<p>The code from this blog post can, as normal be found on github in the <a href="https://github.com/mavnn/Advent2014">Advent2014</a> repository.</p>

<p>It&#39;s set up to be developed in Vim or Emacs without project files on a nix system, but it will probably play nicely with Visual Studio as well.</p>
]]></content>
  </entry>
  
</feed>
