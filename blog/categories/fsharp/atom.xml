<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: FSharp | Mavnn's blog]]></title>
  <link href="http://blog.mavnn.co.uk/blog/categories/fsharp/atom.xml" rel="self"/>
  <link href="http://blog.mavnn.co.uk/"/>
  <updated>2015-05-21T16:33:52+01:00</updated>
  <id>http://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implementing classic OO style code in F#]]></title>
    <link href="http://blog.mavnn.co.uk/implementing-classic-oo-style-code-in-f-number/"/>
    <updated>2013-09-24T14:21:00+01:00</updated>
    <id>http://blog.mavnn.co.uk/implementing-classic-oo-style-code-in-f-number</id>
    <content type="html"><![CDATA[<p>As part of writing up notes for introducing F# as a programming language to experienced C# devs I was looking for examples
of heavily OO code being implemented in F#. Then I realised that I&rsquo;d written at least one suitable example myself.</p>

<p>In the <a href="" title="https://github.com/mavnn/NuGetPlus">NuGetPlus project</a> I needed to implement a ProjectSystem class that was almost a direct copy of the MSBuildProjectSystem in the NuGet commandline client.</p>

<p>So without further ado, F# and then C# versions of a class with inheritance and which implements several interfaces.</p>

<!--more-->


<p>The <a href="" title="https://github.com/mavnn/NuGetPlus/blob/master/NuGetPlus.Core/ProjectSystem.fs">ProjectSystem class from NuGetPlus</a>:</p>

<p>``` fsharp
[<AutoOpen>]
module NuGetPlus.ProjectSystem</p>

<p>open System
open System.IO
open System.Collections.Generic
open System.Reflection
open Microsoft.Build.Evaluation
open NuGet</p>

<p>let TryGetProject projectFile =</p>

<pre><code>ProjectCollection.GlobalProjectCollection.GetLoadedProjects(projectFile) 
|&gt; Seq.tryFind(fun p -&gt; p.FullPath = projectFile)
</code></pre>

<p>type ProjectSystem(projectFile : string) =</p>

<pre><code>inherit PhysicalFileSystem(Path.GetDirectoryName(projectFile))

let project = 
    match TryGetProject projectFile with
    | Some project -&gt; project
    | None -&gt; Project(projectFile)

let projectName = Path.GetFileNameWithoutExtension &lt;| project.FullPath
let framework = 
    new Runtime.Versioning.FrameworkName(project.GetPropertyValue
                                             ("TargetFrameworkMoniker"))

let GetReferenceByName name =
    project.GetItems("Reference")
    |&gt; Seq.filter
           (fun i -&gt; 
               i.EvaluatedInclude.StartsWith
                   (name, StringComparison.OrdinalIgnoreCase))
    |&gt; Seq.tryFind
           (fun i -&gt; 
               AssemblyName(i.EvaluatedInclude)
                   .Name.Equals(name, StringComparison.OrdinalIgnoreCase))

let GetReferenceByPath path = 
    let name = Path.GetFileNameWithoutExtension path
    GetReferenceByName name

interface IProjectSystem with
    member x.TargetFramework with get () = framework
    member x.ProjectName with get () = projectName

    member x.AddReference(path, stream) = 
        let fullPath = PathUtility.GetAbsolutePath(x.Root, path)
        let relPath = 
            PathUtility.GetRelativePath(project.FullPath, fullPath)
        let includeName = Path.GetFileNameWithoutExtension fullPath
        project.AddItem
            ("Reference", includeName, [|KeyValuePair("HintPath", relPath)|]) 
        |&gt; ignore
        project.Save()

    member x.AddFrameworkReference name = 
        project.AddItem("Reference", name) |&gt; ignore
        project.Save()

    member x.ReferenceExists path = 
        match GetReferenceByName path with
        | Some _ -&gt; true
        | None -&gt; false

    member x.RemoveReference path = 
        match GetReferenceByPath path with
        | Some i -&gt; 
            project.RemoveItem(i) |&gt; ignore
            project.Save()
        | None -&gt; ()

    member x.IsSupportedFile path = true
    member x.ResolvePath path = path
    member x.IsBindingRedirectSupported with get () = true

    member x.AddImport((targetPath : string), location) = 
        if project.Xml.Imports = null 
           || project.Xml.Imports 
              |&gt; Seq.forall
                     (fun import -&gt; 
                         not 
                         &lt;| targetPath.Equals
                                (import.Project, 
                                 StringComparison.OrdinalIgnoreCase)) then 
            project.Xml.AddImport(targetPath) |&gt; ignore
            project.ReevaluateIfNecessary()
            project.Save()

    member x.RemoveImport(targetPath : string) = 
        match project.Xml.Imports 
              |&gt; Seq.tryFind
                     (fun import -&gt; 
                         targetPath.Equals
                             (import.Project, 
                              StringComparison.OrdinalIgnoreCase)) with
        | None -&gt; ()
        | Some i -&gt; 
            project.Xml.RemoveChild(i)
            project.ReevaluateIfNecessary()
            project.Save()

    member x.FileExistsInProject(path : string) = 
        project.Items 
        |&gt; Seq.exists
               (fun i -&gt; 
                   i.EvaluatedInclude.Equals
                       (path, StringComparison.OrdinalIgnoreCase) 
                   &amp;&amp; (String.IsNullOrEmpty(i.ItemType) 
                       || i.ItemType.[0] &lt;&gt; '_'))

interface IPropertyProvider with
    member x.GetPropertyValue name = project.GetPropertyValue(name) :&gt; obj
</code></pre>

<p>```</p>

<p>and the <a href="" title="http://nuget.codeplex.com/SourceControl/latest#src/CommandLine/Common/MSBuildProjectSystem.cs">MSBuildProjectSystem class from NuGet</a>:</p>

<p>``` fsharp
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Versioning;
using Microsoft.Build.Evaluation;</p>

<p>namespace NuGet.Common
{</p>

<pre><code>public class MSBuildProjectSystem : PhysicalFileSystem, IMSBuildProjectSystem
{
    public MSBuildProjectSystem(string projectFile)
        : base(Path.GetDirectoryName(projectFile))
    {
        Project = GetProject(projectFile);
    }

    public bool IsBindingRedirectSupported
    {
        get
        {
            return true;
        }
    }

    private Project Project
    {
        get;
        set;
    }

    public void AddFrameworkReference(string name)
    {
        // No-op
    }

    public void AddReference(string referencePath, Stream stream)
    {
        string fullPath = PathUtility.GetAbsolutePath(Root, referencePath);
        string relativePath = PathUtility.GetRelativePath(Project.FullPath, fullPath);
        // REVIEW: Do we need to use the fully qualified the assembly name for strong named assemblies?
        string include = Path.GetFileNameWithoutExtension(fullPath);

        Project.AddItem("Reference",
                        include,
                        new[] { 
                                new KeyValuePair&lt;string, string&gt;("HintPath", relativePath)
                            });
    }

    public dynamic GetPropertyValue(string propertyName)
    {
        return Project.GetPropertyValue(propertyName);
    }

    public bool IsSupportedFile(string path)
    {
        return true;
    }

    public string ProjectName
    {
        get
        {
            return Path.GetFileNameWithoutExtension(Project.FullPath);
        }
    }

    public bool ReferenceExists(string name)
    {
        return GetReference(name) != null;
    }

    public void RemoveReference(string name)
    {
        ProjectItem assemblyReference = GetReference(name);
        if (assemblyReference != null)
        {
            Project.RemoveItem(assemblyReference);
        }
    }

    private IEnumerable&lt;ProjectItem&gt; GetItems(string itemType, string name)
    {
        return Project.GetItems(itemType).Where(i =&gt; i.EvaluatedInclude.StartsWith(name, StringComparison.OrdinalIgnoreCase));
    }

    public ProjectItem GetReference(string name)
    {
        name = Path.GetFileNameWithoutExtension(name);
        return GetItems("Reference", name)
            .FirstOrDefault(
                item =&gt;
                new AssemblyName(item.EvaluatedInclude).Name.Equals(name, StringComparison.OrdinalIgnoreCase));
    }

    public FrameworkName TargetFramework
    {
        get
        {
            string moniker = GetPropertyValue("TargetFrameworkMoniker");
            if (String.IsNullOrEmpty(moniker))
            {
                return null;
            }
            return new FrameworkName(moniker);
        }
    }

    public string ResolvePath(string path)
    {
        return path;
    }

    public void Save()
    {
        Project.Save();
    }

    public bool FileExistsInProject(string path)
    {
        // some ItemTypes which starts with _ are added by various MSBuild tasks for their own purposes
        // and they do not represent content files of the projects. Therefore, we exclude them when checking for file existence.
        return Project.Items.Any(
            i =&gt; i.EvaluatedInclude.Equals(path, StringComparison.OrdinalIgnoreCase) &amp;&amp; 
                 (String.IsNullOrEmpty(i.ItemType) || i.ItemType[0] != '_'));
    }

    private static Project GetProject(string projectFile)
    {
        return ProjectCollection.GlobalProjectCollection.GetLoadedProjects(projectFile).FirstOrDefault() ?? new Project(projectFile);
    }

    public void AddImport(string targetPath, ProjectImportLocation location)
    {
        if (targetPath == null)
        {
            throw new ArgumentNullException("targetPath");
        }

        // adds an &lt;Import&gt; element to this project file.
        if (Project.Xml.Imports == null ||
            Project.Xml.Imports.All(import =&gt; !targetPath.Equals(import.Project, StringComparison.OrdinalIgnoreCase)))
        {
            Project.Xml.AddImport(targetPath);
            NuGet.MSBuildProjectUtility.AddEnsureImportedTarget(Project, targetPath);
            Project.ReevaluateIfNecessary();
            Project.Save();
        }
    }

    public void RemoveImport(string targetPath)
    {
        if (targetPath == null)
        {
            throw new ArgumentNullException("targetPath");
        }

        if (Project.Xml.Imports != null)
        {
            // search for this import statement and remove it
            var importElement = Project.Xml.Imports.FirstOrDefault(
                import =&gt; targetPath.Equals(import.Project, StringComparison.OrdinalIgnoreCase));

            if (importElement != null)
            {
                Project.Xml.RemoveChild(importElement);
                NuGet.MSBuildProjectUtility.RemoveEnsureImportedTarget(Project, targetPath);
                Project.ReevaluateIfNecessary();
                Project.Save();
            }
        }
    }
}
</code></pre>

<p>}
```</p>

<p>I can&rsquo;t honestly remember if they do exactly the same thing, but they are pretty similar and implement the same interfaces and inheritance. As you can see, while F#&rsquo;s focus is being functional it will support OO code just fine, which is very useful indeed when you need to interop with .NET code from other languages and coding styles.</p>
]]></content>
  </entry>
  
</feed>
