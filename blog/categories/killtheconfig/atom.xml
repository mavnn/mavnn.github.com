<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: killTheConfig | Mavnn's blog]]></title>
  <link href="http://blog.mavnn.co.uk/blog/categories/killtheconfig/atom.xml" rel="self"/>
  <link href="http://blog.mavnn.co.uk/"/>
  <updated>2015-05-06T13:10:14+01:00</updated>
  <id>http://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A short interlude into adaptive polling]]></title>
    <link href="http://blog.mavnn.co.uk/a-short-interlude-into-adaptive-polling-tag-f/"/>
    <updated>2013-01-22T00:00:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/a-short-interlude-into-adaptive-polling-tag-f</id>
    <content type="html"><![CDATA[<p>Your windows service is watching an email inbox.</p>

<p>How often should it poll?</p>

<p>Once every 5 minutes? Every 10? Then of course you realise that it should be different for every customer… or maybe every mailbox. You need more config!</p>

<h3>Or not.</h3>

<p>The real answer, of course, is something completely different: it should poll a lot when a lot of emails are arriving, and not very much when they aren’t.</p>

<p>It took a lot longer than it should have done to get my maths brain back on, but with the help of my wife I eventually settled on this code for deciding the intervals between polls:</p>

<p>``` fsharp
let interval i =</p>

<pre><code>let x = float i
let maxWait = 60. * 10.
let raisePower x = pown (x /10.) 4
(maxWait * (raisePower x)) / (raisePower x + 1.)
|&gt; (*) 1000. |&gt; int
</code></pre>

<p>```</p>

<p>The ‘i’ in this function is the number of times we’ve polled since the last time a new email was received (if one is received, we reset i to 0).</p>

<p>If you plot this out on a graph, you get something that looks like this:</p>

<p><img src="http://www.wolframalpha.com/share/img?i=d41d8cd98f00b204e9800998ecf8427ehd954rh40i&amp;f=HBQTQYZYGY4TOM3CGRSGMMBWGAYDCM3DGYZGMOBWGFRDANDCMUZAaaaa" alt="" /></p>

<p>You can play with the shape of the graph at <a href="http://www.wolframalpha.com/share/clip?f=d41d8cd98f00b204e9800998ecf8427ehd954rh40i">Wolfram|Alpha if you&rsquo;re feeling really geeky</a> :).</p>

<p>This gives us very aggressive polling for the first few minutes after discovering an email, then dropping off rapidly to close to the one every ten minutes mark that I decided was a reasonable background polling rate.</p>

<p>It&rsquo;s not truly adaptive in the machine learning sense, but it gives a very good first cut that is an awful lot better than any fixed value could be.</p>
]]></content>
  </entry>
  
</feed>
