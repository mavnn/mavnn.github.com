<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: prognet | Mavnn's blog]]></title>
  <link href="https://blog.mavnn.co.uk/blog/categories/prognet/atom.xml" rel="self"/>
  <link href="https://blog.mavnn.co.uk/"/>
  <updated>2020-03-20T20:35:10+00:00</updated>
  <id>https://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functional Programming in the Wild]]></title>
    <link href="https://blog.mavnn.co.uk/functional-programming-in-the-wild/"/>
    <updated>2017-09-18T11:49:58+01:00</updated>
    <id>https://blog.mavnn.co.uk/functional-programming-in-the-wild</id>
    <content type="html"><![CDATA[<p>Last week was the annual <a href="https://skillsmatter.com/conferences/8268-progressive-dot-net-2017">Progressive .Net</a> conference, hosted at <a href="https://skillsmatter.com">SkillsMatter</a>.</p>

<p>It was a bit of a strange conference for me; I was invited to speak, and very much enjoyed meeting up with everyone but I also had a bunch of other work I needed to get done. That means that unlike some other conferences I won&#39;t be able to give much speaker feedback!</p>

<p>However, there were a few sessions I managed to pay some attention to and some thoughts about my own that I&#39;d like to record - so here goes!</p>

<!-- more -->

<h2><a href="https://skillsmatter.com/skillscasts/10458-pilot-decision-management#video">Pilot Decision Making for Beginners</a></h2>

<p><a href="https://twitter.com/CliffordAgius">Clifford Agnius</a> is an airline pilot and .net developer who gave a really nice talk on how to make decisions - whether you need to make them <strong>right now</strong> (hint: practice in advance) or whether you need to decide on a plan.</p>

<p>It was tempting to just nod along and go &quot;oh, that&#39;s just common sense&quot; - until it strikes you that codified, pre-agreed common sense is pretty spectacularly valuable.</p>

<h2><a href="https://skillsmatter.com/skillscasts/10670-have-i-got-dot-net-for-you">Have I got .NET for You</a></h2>

<p>&quot;Have I got .NET for You&quot; was fun, and <a href="https://twitter.com/dylanbeattie">Dylan Beattie</a> is a very silly boy.</p>

<h2>A Practical Introduction to Functional Programming with F#</h2>

<p>This was me; no video I&#39;m afraid, as it was a 3 hour practical session.</p>

<p>I was really pleased by the turn out for this - I&#39;m guessing there were 30-40 people there (anyone who actually counted, feel free to correct me!).</p>

<p><img src="/images/crowd_view.jpg" alt="View of the room filling up"></p>

<p>I had to make a rather quick swerve in the presentation of the topic right at the beginning, as I had been expecting a group most of whom had tried F# and wanted to learn more about functional programming - while I actually got a group where only 3 people had even looked at F# who wanted to learn about functional programming!</p>

<p>After walking people through the first couple of exercises to get the basic syntax down, people seemed to be off and flying (SkillsMatter has a good coffee supply):</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">At <a href="https://twitter.com/hashtag/prognet?src=hash">#prognet</a> trying to turn coffee into F# with <a href="https://twitter.com/mavnn">@mavnn</a> think I need more coffee...</p>&mdash; Clifford Agius (@CliffordAgius) <a href="https://twitter.com/CliffordAgius/status/908645096622522368">September 15, 2017</a></blockquote>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">Mind being blown learning f# from <a href="https://twitter.com/mavnn">@mavnn</a> at <a href="https://twitter.com/hashtag/ProgNET?src=hash">#ProgNET</a>. May need more coffee!</p>&mdash; Steve Gordon (@stevejgordon) <a href="https://twitter.com/stevejgordon/status/908635653675585536">September 15, 2017</a></blockquote>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">Awesome F# tutorial by <a href="https://twitter.com/mavnn">@mavnn</a> <a href="https://twitter.com/hashtag/ProgNet?src=hash">#ProgNet</a></p>&mdash; Salman Iqbal (@SoulmanIqbal) <a href="https://twitter.com/SoulmanIqbal/status/908638281201537024">September 15, 2017</a></blockquote>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">Intro to <a href="https://twitter.com/hashtag/fsharp?src=hash">#fsharp</a> at <a href="https://twitter.com/hashtag/ProgNET?src=hash">#ProgNET</a> ...I&#39;m getting &quot;loads of stuff is inferred for free&quot;..very nice! <a href="https://t.co/t7eoivAeU2">pic.twitter.com/t7eoivAeU2</a></p>&mdash; Abbie Davis (@abbie_davis_000) <a href="https://twitter.com/abbie_davis_000/status/908628569001267200">September 15, 2017</a></blockquote>

<script async src="https://blog.mavnn.co.uk//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Mind being blown is a good thing, right?</p>

<p>All in all, much fun was had by all (I think).</p>

<h2>The Web that Never Was</h2>

<p>Dylan&#39;s final key note was a alternative history of the web, a combination of (real) good ideas that were dropped due to the vagaries of history and application of 20-20 hindsight.</p>

<p>Apart from being entertaining, it was also thought provoking for anyone designing software today.</p>

<p>Also: Dylan is still a very silly boy.</p>

<p>At time of writing the recording of this hadn&#39;t been published, but I suspect it will appear shortly.</p>

<h2>Wrap!</h2>

<p>All in all, I very much enjoyed ProgNet and I&#39;m hoping to be involved again next year - apart from the sessions there was also plentiful coffee, chats, and opportunities to catch up with interesting people.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[System.Console is why we can't have nice things]]></title>
    <link href="https://blog.mavnn.co.uk/system-dot-console-is-why-we-cant-have-nice-things/"/>
    <updated>2017-08-31T16:30:18+01:00</updated>
    <id>https://blog.mavnn.co.uk/system-dot-console-is-why-we-cant-have-nice-things</id>
    <content type="html"><![CDATA[<p>In writing a simple tutorial for this years <a href="https://skillsmatter.com/conferences/8268-progressive-dot-net-2017#program">Progressive .Net</a> I thought I&#39;d use the Console to allow some nice visual feedback with requiring a dependency.</p>

<p>TD;LR: <code>System.Console</code> (at least on dotnet core 2.0) is not as threadsafe as you&#39;d hope, and means that writing any simple cross platform console UI is nearly impossible.</p>

<!-- more -->

<p>So, I started with a draw method like this:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">type</span> <span class="nc">Coord</span> <span class="o">=</span>
    <span class="o">{</span> <span class="nc">X</span> <span class="o">:</span> <span class="kt">int</span>
      <span class="nc">Y</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>

<span class="k">let</span> <span class="n">draw</span> <span class="n">changes</span> <span class="o">=</span>
    <span class="n">changes</span>
    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">coord</span><span class="o">,</span> <span class="n">item</span> <span class="o">:</span> <span class="kt">char</span><span class="o">)</span> <span class="o">-&gt;</span>
        <span class="nn">Console</span><span class="p">.</span><span class="nc">CursorLeft</span> <span class="o">&lt;-</span> <span class="n">coord</span><span class="o">.</span><span class="nc">X</span>
        <span class="nn">Console</span><span class="p">.</span><span class="nc">CursorTop</span> <span class="o">&lt;-</span> <span class="n">coord</span><span class="o">.</span><span class="nc">Y</span>
        <span class="nn">Console</span><span class="p">.</span><span class="nc">Write</span> <span class="n">item</span><span class="o">)</span>
</code></pre></div>
<p>This method just takes a sequence of coordinates and characters to write in them, and then moves the cursor around the console to write your inputs. And it works fine.</p>

<p>Then I wanted a sequence of keys pressed by the user:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">type</span> <span class="nc">Directions</span> <span class="o">=</span>
    <span class="o">|</span> <span class="nc">Up</span>
    <span class="o">|</span> <span class="nc">Down</span>
    <span class="o">|</span> <span class="nc">Left</span>
    <span class="o">|</span> <span class="nc">Right</span>
    <span class="o">|</span> <span class="nc">Stay</span>

<span class="k">let</span> <span class="n">inputUnfolder</span> <span class="n">prev</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">read</span> <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">ReadKey</span><span class="o">(</span><span class="bp">true</span><span class="o">)</span>
    <span class="k">match</span> <span class="n">read</span><span class="o">.</span><span class="nc">Key</span> <span class="k">with</span>
    <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">UpArrow</span> <span class="o">-&gt;</span>
        <span class="nc">Some</span> <span class="o">(</span><span class="nc">Up</span><span class="o">,</span> <span class="nc">Up</span><span class="o">)</span>
    <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">DownArrow</span> <span class="o">-&gt;</span>
        <span class="nc">Some</span> <span class="o">(</span><span class="nc">Down</span><span class="o">,</span> <span class="nc">Down</span><span class="o">)</span>
    <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">LeftArrow</span> <span class="o">-&gt;</span>
        <span class="nc">Some</span> <span class="o">(</span><span class="nc">Left</span><span class="o">,</span> <span class="nc">Down</span><span class="o">)</span>
    <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">RightArrow</span> <span class="o">-&gt;</span>
        <span class="nc">Some</span> <span class="o">(</span><span class="nc">Right</span><span class="o">,</span> <span class="nc">Right</span><span class="o">)</span>
    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
        <span class="nc">Some</span> <span class="o">(</span><span class="n">prev</span><span class="o">,</span> <span class="n">prev</span><span class="o">)</span>

<span class="k">let</span> <span class="n">keysPressed</span> <span class="o">=</span>
    <span class="nn">Seq</span><span class="p">.</span><span class="n">unfold</span> <span class="n">inputUnfolder</span> <span class="nc">Stay</span>
</code></pre></div>
<p>Again, this works fine. And as long as you take one item from the input stream, do all your drawing and then take the next item everything continues to be good.</p>

<p>But... this story doesn&#39;t end here. What I was really after was accepting key presses on one thread, and drawing on another.</p>

<p>First problem: it turns out that calling <code>Console.ReadKey</code> on one thread, and setting <code>Console.CursorTop/Left</code> on another causes a deadlock.</p>

<p>A bit of research led to the <code>Console.KeyAvailable</code> property, and rewriting <code>inputFolder</code>:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="k">rec</span> <span class="n">inputUnfolder</span> <span class="n">prev</span> <span class="o">=</span>
    <span class="k">if</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">KeyAvailable</span> <span class="k">then</span>
        <span class="k">let</span> <span class="n">read</span> <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">ReadKey</span><span class="o">(</span><span class="bp">true</span><span class="o">)</span>
        <span class="k">match</span> <span class="n">read</span><span class="o">.</span><span class="nc">Key</span> <span class="k">with</span>
        <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">UpArrow</span> <span class="o">-&gt;</span>
            <span class="nc">Some</span> <span class="o">(</span><span class="nc">Up</span><span class="o">,</span> <span class="nc">Up</span><span class="o">)</span>
        <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">DownArrow</span> <span class="o">-&gt;</span>
            <span class="nc">Some</span> <span class="o">(</span><span class="nc">Down</span><span class="o">,</span> <span class="nc">Down</span><span class="o">)</span>
        <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">LeftArrow</span> <span class="o">-&gt;</span>
            <span class="nc">Some</span> <span class="o">(</span><span class="nc">Left</span><span class="o">,</span> <span class="nc">Down</span><span class="o">)</span>
        <span class="o">|</span> <span class="nn">ConsoleKey</span><span class="p">.</span><span class="nc">RightArrow</span> <span class="o">-&gt;</span>
            <span class="nc">Some</span> <span class="o">(</span><span class="nc">Right</span><span class="o">,</span> <span class="nc">Right</span><span class="o">)</span>
        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span>
            <span class="nc">Some</span> <span class="o">(</span><span class="n">prev</span><span class="o">,</span> <span class="n">prev</span><span class="o">)</span>
    <span class="k">else</span>
        <span class="nn">Async</span><span class="p">.</span><span class="nc">Sleep</span> <span class="mi">1</span> <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">RunSynchronously</span>
        <span class="n">inputUnfolder</span> <span class="n">prev</span>
</code></pre></div>
<p>Yeah! Spin loop. That looks totally healthy.</p>

<p>Unfortunately, we now have the issue that because <code>Console.ReadKey</code> is not actively blocking at the moment the key is pressed, the input key is printed directly to the console. There doesn&#39;t appear to be anyway of blocking this.</p>

<p>The real pity about all of this is not that it&#39;s just wasted a couple of hours of my life writing a &quot;simple&quot; tutorial (although that&#39;s pretty annoying!); it&#39;s the fact that with dotnet core being genuinely cross platform, I was hoping to use it to write a few nice console UI based applications. It turns out that apart from the well know performance issues of <code>System.Console</code>, it doesn&#39;t currently appear to be possible at all.</p>
]]></content>
  </entry>
  
</feed>
