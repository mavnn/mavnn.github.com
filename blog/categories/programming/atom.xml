<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Mavnn's blog]]></title>
  <link href="https://blog.mavnn.co.uk/blog/categories/programming/atom.xml" rel="self"/>
  <link href="https://blog.mavnn.co.uk/"/>
  <updated>2020-03-20T20:35:10+00:00</updated>
  <id>https://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Being a priest and programming]]></title>
    <link href="https://blog.mavnn.co.uk/being-a-priest-and-programming/"/>
    <updated>2013-09-29T20:19:00+01:00</updated>
    <id>https://blog.mavnn.co.uk/being-a-priest-and-programming</id>
    <content type="html"><![CDATA[<blockquote>
<p>But you are a chosen people, a royal priesthood, a holy nation, Godâ€™s special possession, that you may declare the praises of him who called you out of darkness into his wonderful light. <a href="http://www.biblegateway.com/passage/?search=1%20Peter+2:9&amp;version=NIV">(1 Peter 2:9)</a></p>
</blockquote>

<p>Warning: this post may contain theology and other non-programming related
material. You have been warned...</p>

<p><a href="http://hrbc.org.uk">Our church</a> started a new sermon series last week, and as the
sermon was going on various other bits and pieces came together in my mind, and
I knew that I was going to have to at least try and get them down in writing or
they were going to run around my head for the next few days.</p>

<p>It comes up regularly for us as Christians that God isn&#39;t small enough to be
contained to Sunday mornings - he wants a larger part of our lives than that,
in fact the central part. But the idea of worshipping God with your whole
life often begins to get a bit weird when you actually stop and think about it.
Worship (&#39;to assign worth to something&#39;) is not a strange idea to any of us,
although we might not use that language - I&#39;m sure you can all think of a
respected author, favourite footballer or awe inspiring musician. And if you
buy into the whole Christian idea of who and what God is (infinitely powerful
and awesomely loving, perfect judge who offers grace, amazing sense of humour)
then the idea that a Christian is going to worship God also shouldn&#39;t seem that
strange.</p>

<p>But with your whole life? There&#39;s <a href="http://biblia.com/bible/esv/Romans%2012.1%E2%80%932">no doubt</a>
<a href="http://www.biblegateway.com/passage/?search=Deuteronomy+6&amp;version=NIV">biblically</a>
or in the teachings of both <a href="http://www.desiringgod.org/resource-library/sermons/all-of-life-as-worship">Christian teachers</a>
and <a href="http://www.jewfaq.org/prayer/shema.htm">Jewish tradition</a> that this is
precisely what is expected of us. But... when you write computer code as a day
job, what does that actually mean?</p>

<p>And then it struck me. It means being a <a href="https://people.gnome.org/%7Emichael/">Michael Meeks</a> or a <a href="https://twitter.com/jonskeet/status/8423111419">Jon Skeet</a>. Probably not in the
specific details - I&#39;ve not met either of them personally, but in the attitude
they show to life and the people around them. If you&#39;re not in the programming
field (probably, if you don&#39;t happen to be in a similar area of the programming
field to me...) you&#39;re not likely to have heard of them. But they&#39;ve both
developed an enormous amount of respect in a field that is frequently full of
highly opinionated staunch atheists while being openly professing Christians.</p>

<p>So we wrap round to where we started - the idea from 1 Peter of
all Christians being priests. (I&#39;m not using the term here in the catholic
sense, so bear with me...). This comes up a lot when people relate one of the
core Christian doctrines - that people who have come into a relation with
Christ can come directly to God without an intermediary. But that wasn&#39;t the only
role of priests in the Old Testament. Yes, they were the only people who could
enter God&#39;s presence... but they weren&#39;t only going there for themselves. They
<em>were</em> the intermediaries, &#39;introducing&#39; others to God&#39;s presence, carrying
blessings from God to them and petitions from them to God.</p>

<p>Jon and Michael are dedicated to
what they do, they are good at it and they are &#39;graceful&#39;. In the sense that
they treat the people around them with respect and as professionals, teaching
and helping without regard to the others faith and without forcing argument and
discussion where it&#39;s not wanted. Both are obviously willing to talk to people
who want to (Michael even links to a fun page on <a href="http://christianthinktank.com/objedex.html">Christian Think Tank</a> for those who are
interested), but there isn&#39;t a pressure there.</p>

<p>And maybe that&#39;s what some small part of everyday worship looks like; I can&#39;t help feeling that by
being respectable (in the sense of, worthy of some respect) and making the fact
of their faith public, people like Jon and Michael have been doing their bit to
draw others closer to this God I worship. They&#39;ve caused a doubt and a second
look at what faith really means in the mind of those who would otherwise live
in an atheist bubble, carelessly dismissing the idea of God as the ramblings of
the obviously stupid and insane. Because these men are clearly neither.</p>

<p>This is encouraging to me, and I hope to a lot of out there who go to work, work hard
and tell people that you made it to church this Sunday. Because if you look
around you&#39;ll probably begin to see these people around you, the Jons and Michaels
who are making a difference just by living a life based on Christ&#39;s in the everyday.</p>

<p>And guess what? If you&#39;re a Christian, letting people know without pressure and
getting your coding/plumbing/teaching/building/etc. done you&#39;re probably making a difference
too. You might be the last to see
it, but I&#39;m sure others do. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing classic OO style code in F#]]></title>
    <link href="https://blog.mavnn.co.uk/implementing-classic-oo-style-code-in-f-number/"/>
    <updated>2013-09-24T14:21:00+01:00</updated>
    <id>https://blog.mavnn.co.uk/implementing-classic-oo-style-code-in-f-number</id>
    <content type="html"><![CDATA[<p>As part of writing up notes for introducing F# as a programming language to experienced C# devs I was looking for examples
of heavily OO code being implemented in F#. Then I realised that I&#39;d written at least one suitable example myself.</p>

<p>In the <a href="%22https://github.com/mavnn/NuGetPlus%22">NuGetPlus project</a> I needed to implement a ProjectSystem class that was almost a direct copy of the MSBuildProjectSystem in the NuGet commandline client.</p>

<p>So without further ado, F# and then C# versions of a class with inheritance and which implements several interfaces.</p>

<!--more-->

<p>The <a href="%22https://github.com/mavnn/NuGetPlus/blob/master/NuGetPlus.Core/ProjectSystem.fs%22">ProjectSystem class from NuGetPlus</a>:</p>
<div class="highlight"><pre><code class="fsharp"><span class="o">[&lt;</span><span class="nc">AutoOpen</span><span class="o">&gt;]</span>
<span class="k">module</span> <span class="nn">NuGetPlus</span><span class="p">.</span><span class="nc">ProjectSystem</span>

<span class="k">open</span> <span class="nc">System</span>
<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Collections</span><span class="p">.</span><span class="nc">Generic</span>
<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
<span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">Build</span><span class="p">.</span><span class="nc">Evaluation</span>
<span class="k">open</span> <span class="nc">NuGet</span>

<span class="k">let</span> <span class="nc">TryGetProject</span> <span class="n">projectFile</span> <span class="o">=</span> 
    <span class="nn">ProjectCollection</span><span class="p">.</span><span class="nn">GlobalProjectCollection</span><span class="p">.</span><span class="nc">GetLoadedProjects</span><span class="o">(</span><span class="n">projectFile</span><span class="o">)</span> 
    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">tryFind</span><span class="o">(</span><span class="k">fun</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="nc">FullPath</span> <span class="o">=</span> <span class="n">projectFile</span><span class="o">)</span>

<span class="k">type</span> <span class="nc">ProjectSystem</span><span class="o">(</span><span class="n">projectFile</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span> 
    <span class="k">inherit</span> <span class="nc">PhysicalFileSystem</span><span class="o">(</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetDirectoryName</span><span class="o">(</span><span class="n">projectFile</span><span class="o">))</span>

    <span class="k">let</span> <span class="n">project</span> <span class="o">=</span> 
        <span class="k">match</span> <span class="nc">TryGetProject</span> <span class="n">projectFile</span> <span class="k">with</span>
        <span class="o">|</span> <span class="nc">Some</span> <span class="n">project</span> <span class="o">-&gt;</span> <span class="n">project</span>
        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="nc">Project</span><span class="o">(</span><span class="n">projectFile</span><span class="o">)</span>

    <span class="k">let</span> <span class="n">projectName</span> <span class="o">=</span> <span class="nn">Path</span><span class="p">.</span><span class="nc">GetFileNameWithoutExtension</span> <span class="o">&lt;|</span> <span class="n">project</span><span class="o">.</span><span class="nc">FullPath</span>
    <span class="k">let</span> <span class="n">framework</span> <span class="o">=</span> 
        <span class="k">new</span> <span class="nn">Runtime</span><span class="p">.</span><span class="nn">Versioning</span><span class="p">.</span><span class="nc">FrameworkName</span><span class="o">(</span><span class="n">project</span><span class="o">.</span><span class="nc">GetPropertyValue</span>
                                                 <span class="o">(</span><span class="s2">&quot;TargetFrameworkMoniker&quot;</span><span class="o">))</span>

    <span class="k">let</span> <span class="nc">GetReferenceByName</span> <span class="n">name</span> <span class="o">=</span>
        <span class="n">project</span><span class="o">.</span><span class="nc">GetItems</span><span class="o">(</span><span class="s2">&quot;Reference&quot;</span><span class="o">)</span>
        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">filter</span>
               <span class="o">(</span><span class="k">fun</span> <span class="n">i</span> <span class="o">-&gt;</span> 
                   <span class="n">i</span><span class="o">.</span><span class="nn">EvaluatedInclude</span><span class="p">.</span><span class="nc">StartsWith</span>
                       <span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="nn">StringComparison</span><span class="p">.</span><span class="nc">OrdinalIgnoreCase</span><span class="o">))</span>
        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">tryFind</span>
               <span class="o">(</span><span class="k">fun</span> <span class="n">i</span> <span class="o">-&gt;</span> 
                   <span class="nc">AssemblyName</span><span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="nc">EvaluatedInclude</span><span class="o">)</span>
                       <span class="o">.</span><span class="nn">Name</span><span class="p">.</span><span class="nc">Equals</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="nn">StringComparison</span><span class="p">.</span><span class="nc">OrdinalIgnoreCase</span><span class="o">))</span>

    <span class="k">let</span> <span class="nc">GetReferenceByPath</span> <span class="n">path</span> <span class="o">=</span> 
        <span class="k">let</span> <span class="n">name</span> <span class="o">=</span> <span class="nn">Path</span><span class="p">.</span><span class="nc">GetFileNameWithoutExtension</span> <span class="n">path</span>
        <span class="nc">GetReferenceByName</span> <span class="n">name</span>

    <span class="k">interface</span> <span class="nc">IProjectSystem</span> <span class="k">with</span>
        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">TargetFramework</span> <span class="k">with</span> <span class="n">get</span> <span class="bp">()</span> <span class="o">=</span> <span class="n">framework</span>
        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">ProjectName</span> <span class="k">with</span> <span class="n">get</span> <span class="bp">()</span> <span class="o">=</span> <span class="n">projectName</span>

        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">AddReference</span><span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="n">stream</span><span class="o">)</span> <span class="o">=</span> 
            <span class="k">let</span> <span class="n">fullPath</span> <span class="o">=</span> <span class="nn">PathUtility</span><span class="p">.</span><span class="nc">GetAbsolutePath</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="nc">Root</span><span class="o">,</span> <span class="n">path</span><span class="o">)</span>
            <span class="k">let</span> <span class="n">relPath</span> <span class="o">=</span> 
                <span class="nn">PathUtility</span><span class="p">.</span><span class="nc">GetRelativePath</span><span class="o">(</span><span class="n">project</span><span class="o">.</span><span class="nc">FullPath</span><span class="o">,</span> <span class="n">fullPath</span><span class="o">)</span>
            <span class="k">let</span> <span class="n">includeName</span> <span class="o">=</span> <span class="nn">Path</span><span class="p">.</span><span class="nc">GetFileNameWithoutExtension</span> <span class="n">fullPath</span>
            <span class="n">project</span><span class="o">.</span><span class="nc">AddItem</span>
                <span class="o">(</span><span class="s2">&quot;Reference&quot;</span><span class="o">,</span> <span class="n">includeName</span><span class="o">,</span> <span class="o">[|</span><span class="nc">KeyValuePair</span><span class="o">(</span><span class="s2">&quot;HintPath&quot;</span><span class="o">,</span> <span class="n">relPath</span><span class="o">)|])</span> 
            <span class="o">|&gt;</span> <span class="n">ignore</span>
            <span class="n">project</span><span class="o">.</span><span class="nc">Save</span><span class="bp">()</span>

        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">AddFrameworkReference</span> <span class="n">name</span> <span class="o">=</span> 
            <span class="n">project</span><span class="o">.</span><span class="nc">AddItem</span><span class="o">(</span><span class="s2">&quot;Reference&quot;</span><span class="o">,</span> <span class="n">name</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
            <span class="n">project</span><span class="o">.</span><span class="nc">Save</span><span class="bp">()</span>

        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">ReferenceExists</span> <span class="n">path</span> <span class="o">=</span> 
            <span class="k">match</span> <span class="nc">GetReferenceByName</span> <span class="n">path</span> <span class="k">with</span>
            <span class="o">|</span> <span class="nc">Some</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">true</span>
            <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">false</span>

        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">RemoveReference</span> <span class="n">path</span> <span class="o">=</span> 
            <span class="k">match</span> <span class="nc">GetReferenceByPath</span> <span class="n">path</span> <span class="k">with</span>
            <span class="o">|</span> <span class="nc">Some</span> <span class="n">i</span> <span class="o">-&gt;</span> 
                <span class="n">project</span><span class="o">.</span><span class="nc">RemoveItem</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
                <span class="n">project</span><span class="o">.</span><span class="nc">Save</span><span class="bp">()</span>
            <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>

        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">IsSupportedFile</span> <span class="n">path</span> <span class="o">=</span> <span class="bp">true</span>
        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">ResolvePath</span> <span class="n">path</span> <span class="o">=</span> <span class="n">path</span>
        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">IsBindingRedirectSupported</span> <span class="k">with</span> <span class="n">get</span> <span class="bp">()</span> <span class="o">=</span> <span class="bp">true</span>

        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">AddImport</span><span class="o">((</span><span class="n">targetPath</span> <span class="o">:</span> <span class="kt">string</span><span class="o">),</span> <span class="n">location</span><span class="o">)</span> <span class="o">=</span> 
            <span class="k">if</span> <span class="n">project</span><span class="o">.</span><span class="nn">Xml</span><span class="p">.</span><span class="nc">Imports</span> <span class="o">=</span> <span class="k">null</span> 
               <span class="o">||</span> <span class="n">project</span><span class="o">.</span><span class="nn">Xml</span><span class="p">.</span><span class="nc">Imports</span> 
                  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">forall</span>
                         <span class="o">(</span><span class="k">fun</span> <span class="n">import</span> <span class="o">-&gt;</span> 
                             <span class="ow">not</span> 
                             <span class="o">&lt;|</span> <span class="n">targetPath</span><span class="o">.</span><span class="nc">Equals</span>
                                    <span class="o">(</span><span class="n">import</span><span class="o">.</span><span class="nc">Project</span><span class="o">,</span> 
                                     <span class="nn">StringComparison</span><span class="p">.</span><span class="nc">OrdinalIgnoreCase</span><span class="o">))</span> <span class="k">then</span> 
                <span class="n">project</span><span class="o">.</span><span class="nn">Xml</span><span class="p">.</span><span class="nc">AddImport</span><span class="o">(</span><span class="n">targetPath</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
                <span class="n">project</span><span class="o">.</span><span class="nc">ReevaluateIfNecessary</span><span class="bp">()</span>
                <span class="n">project</span><span class="o">.</span><span class="nc">Save</span><span class="bp">()</span>

        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">RemoveImport</span><span class="o">(</span><span class="n">targetPath</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span> 
            <span class="k">match</span> <span class="n">project</span><span class="o">.</span><span class="nn">Xml</span><span class="p">.</span><span class="nc">Imports</span> 
                  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">tryFind</span>
                         <span class="o">(</span><span class="k">fun</span> <span class="n">import</span> <span class="o">-&gt;</span> 
                             <span class="n">targetPath</span><span class="o">.</span><span class="nc">Equals</span>
                                 <span class="o">(</span><span class="n">import</span><span class="o">.</span><span class="nc">Project</span><span class="o">,</span> 
                                  <span class="nn">StringComparison</span><span class="p">.</span><span class="nc">OrdinalIgnoreCase</span><span class="o">))</span> <span class="k">with</span>
            <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="bp">()</span>
            <span class="o">|</span> <span class="nc">Some</span> <span class="n">i</span> <span class="o">-&gt;</span> 
                <span class="n">project</span><span class="o">.</span><span class="nn">Xml</span><span class="p">.</span><span class="nc">RemoveChild</span><span class="o">(</span><span class="n">i</span><span class="o">)</span>
                <span class="n">project</span><span class="o">.</span><span class="nc">ReevaluateIfNecessary</span><span class="bp">()</span>
                <span class="n">project</span><span class="o">.</span><span class="nc">Save</span><span class="bp">()</span>

        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">FileExistsInProject</span><span class="o">(</span><span class="n">path</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span> 
            <span class="n">project</span><span class="o">.</span><span class="nc">Items</span> 
            <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">exists</span>
                   <span class="o">(</span><span class="k">fun</span> <span class="n">i</span> <span class="o">-&gt;</span> 
                       <span class="n">i</span><span class="o">.</span><span class="nn">EvaluatedInclude</span><span class="p">.</span><span class="nc">Equals</span>
                           <span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="nn">StringComparison</span><span class="p">.</span><span class="nc">OrdinalIgnoreCase</span><span class="o">)</span> 
                       <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nn">String</span><span class="p">.</span><span class="nc">IsNullOrEmpty</span><span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="nc">ItemType</span><span class="o">)</span> 
                           <span class="o">||</span> <span class="n">i</span><span class="o">.</span><span class="nn">ItemType</span><span class="p">.</span><span class="err">[0]</span> <span class="err">&lt;&gt;</span> <span class="err">&#39;</span><span class="n">_&#39;</span><span class="o">))</span>

    <span class="k">interface</span> <span class="nc">IPropertyProvider</span> <span class="k">with</span>
        <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">GetPropertyValue</span> <span class="n">name</span> <span class="o">=</span> <span class="n">project</span><span class="o">.</span><span class="nc">GetPropertyValue</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">:&gt;</span> <span class="n">obj</span>
</code></pre></div>
<p>and the <a href="%22http://nuget.codeplex.com/SourceControl/latest#src/CommandLine/Common/MSBuildProjectSystem.cs%22">MSBuildProjectSystem class from NuGet</a>:</p>
<div class="highlight"><pre><code class="fsharp"><span class="n">using</span> <span class="nc">System</span><span class="o">;</span>
<span class="n">using</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Collections</span><span class="p">.</span><span class="nc">Generic</span><span class="o">;</span>
<span class="n">using</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span><span class="o">;</span>
<span class="n">using</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Linq</span><span class="o">;</span>
<span class="n">using</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span><span class="o">;</span>
<span class="n">using</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Runtime</span><span class="p">.</span><span class="nc">Versioning</span><span class="o">;</span>
<span class="n">using</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">Build</span><span class="p">.</span><span class="nc">Evaluation</span><span class="o">;</span>

<span class="k">namespace</span> <span class="nn">NuGet</span><span class="p">.</span><span class="nc">Common</span>
<span class="o">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">MSBuildProjectSystem</span> <span class="o">:</span> <span class="nc">PhysicalFileSystem</span><span class="o">,</span> <span class="nc">IMSBuildProjectSystem</span>
    <span class="o">{</span>
        <span class="k">public</span> <span class="nc">MSBuildProjectSystem</span><span class="o">(</span><span class="kt">string</span> <span class="n">projectFile</span><span class="o">)</span>
            <span class="o">:</span> <span class="k">base</span><span class="o">(</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetDirectoryName</span><span class="o">(</span><span class="n">projectFile</span><span class="o">))</span>
        <span class="o">{</span>
            <span class="nc">Project</span> <span class="o">=</span> <span class="nc">GetProject</span><span class="o">(</span><span class="n">projectFile</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="kt">bool</span> <span class="nc">IsBindingRedirectSupported</span>
        <span class="o">{</span>
            <span class="n">get</span>
            <span class="o">{</span>
                <span class="k">return</span> <span class="bp">true</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">private</span> <span class="nc">Project</span> <span class="nc">Project</span>
        <span class="o">{</span>
            <span class="n">get</span><span class="o">;</span>
            <span class="n">set</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nc">AddFrameworkReference</span><span class="o">(</span><span class="kt">string</span> <span class="n">name</span><span class="o">)</span>
        <span class="o">{</span>
            <span class="c1">// No-op</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nc">AddReference</span><span class="o">(</span><span class="kt">string</span> <span class="n">referencePath</span><span class="o">,</span> <span class="nc">Stream</span> <span class="n">stream</span><span class="o">)</span>
        <span class="o">{</span>
            <span class="kt">string</span> <span class="n">fullPath</span> <span class="o">=</span> <span class="nn">PathUtility</span><span class="p">.</span><span class="nc">GetAbsolutePath</span><span class="o">(</span><span class="nc">Root</span><span class="o">,</span> <span class="n">referencePath</span><span class="o">);</span>
            <span class="kt">string</span> <span class="n">relativePath</span> <span class="o">=</span> <span class="nn">PathUtility</span><span class="p">.</span><span class="nc">GetRelativePath</span><span class="o">(</span><span class="nn">Project</span><span class="p">.</span><span class="nc">FullPath</span><span class="o">,</span> <span class="n">fullPath</span><span class="o">);</span>
            <span class="c1">// REVIEW: Do we need to use the fully qualified the assembly name for strong named assemblies?</span>
            <span class="kt">string</span> <span class="n">include</span> <span class="o">=</span> <span class="nn">Path</span><span class="p">.</span><span class="nc">GetFileNameWithoutExtension</span><span class="o">(</span><span class="n">fullPath</span><span class="o">);</span>

            <span class="nn">Project</span><span class="p">.</span><span class="nc">AddItem</span><span class="o">(</span><span class="s2">&quot;Reference&quot;</span><span class="o">,</span>
                            <span class="n">include</span><span class="o">,</span>
                            <span class="k">new</span><span class="bp">[]</span> <span class="o">{</span> 
                                    <span class="k">new</span> <span class="nc">KeyValuePair</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">,</span> <span class="kt">string</span><span class="o">&gt;(</span><span class="s2">&quot;HintPath&quot;</span><span class="o">,</span> <span class="n">relativePath</span><span class="o">)</span>
                                <span class="o">});</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="n">dynamic</span> <span class="nc">GetPropertyValue</span><span class="o">(</span><span class="kt">string</span> <span class="n">propertyName</span><span class="o">)</span>
        <span class="o">{</span>
            <span class="k">return</span> <span class="nn">Project</span><span class="p">.</span><span class="nc">GetPropertyValue</span><span class="o">(</span><span class="n">propertyName</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="kt">bool</span> <span class="nc">IsSupportedFile</span><span class="o">(</span><span class="kt">string</span> <span class="n">path</span><span class="o">)</span>
        <span class="o">{</span>
            <span class="k">return</span> <span class="bp">true</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="nc">ProjectName</span>
        <span class="o">{</span>
            <span class="n">get</span>
            <span class="o">{</span>
                <span class="k">return</span> <span class="nn">Path</span><span class="p">.</span><span class="nc">GetFileNameWithoutExtension</span><span class="o">(</span><span class="nn">Project</span><span class="p">.</span><span class="nc">FullPath</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="kt">bool</span> <span class="nc">ReferenceExists</span><span class="o">(</span><span class="kt">string</span> <span class="n">name</span><span class="o">)</span>
        <span class="o">{</span>
            <span class="k">return</span> <span class="nc">GetReference</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">!=</span> <span class="k">null</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nc">RemoveReference</span><span class="o">(</span><span class="kt">string</span> <span class="n">name</span><span class="o">)</span>
        <span class="o">{</span>
            <span class="nc">ProjectItem</span> <span class="n">assemblyReference</span> <span class="o">=</span> <span class="nc">GetReference</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">assemblyReference</span> <span class="o">!=</span> <span class="k">null</span><span class="o">)</span>
            <span class="o">{</span>
                <span class="nn">Project</span><span class="p">.</span><span class="nc">RemoveItem</span><span class="o">(</span><span class="n">assemblyReference</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">private</span> <span class="nc">IEnumerable</span><span class="o">&lt;</span><span class="nc">ProjectItem</span><span class="o">&gt;</span> <span class="nc">GetItems</span><span class="o">(</span><span class="kt">string</span> <span class="n">itemType</span><span class="o">,</span> <span class="kt">string</span> <span class="n">name</span><span class="o">)</span>
        <span class="o">{</span>
            <span class="k">return</span> <span class="nn">Project</span><span class="p">.</span><span class="nc">GetItems</span><span class="o">(</span><span class="n">itemType</span><span class="o">).</span><span class="nc">Where</span><span class="o">(</span><span class="n">i</span> <span class="o">=&gt;</span> <span class="n">i</span><span class="o">.</span><span class="nn">EvaluatedInclude</span><span class="p">.</span><span class="nc">StartsWith</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="nn">StringComparison</span><span class="p">.</span><span class="nc">OrdinalIgnoreCase</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="nc">ProjectItem</span> <span class="nc">GetReference</span><span class="o">(</span><span class="kt">string</span> <span class="n">name</span><span class="o">)</span>
        <span class="o">{</span>
            <span class="n">name</span> <span class="o">=</span> <span class="nn">Path</span><span class="p">.</span><span class="nc">GetFileNameWithoutExtension</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
            <span class="k">return</span> <span class="nc">GetItems</span><span class="o">(</span><span class="s2">&quot;Reference&quot;</span><span class="o">,</span> <span class="n">name</span><span class="o">)</span>
                <span class="o">.</span><span class="nc">FirstOrDefault</span><span class="o">(</span>
                    <span class="n">item</span> <span class="o">=&gt;</span>
                    <span class="k">new</span> <span class="nc">AssemblyName</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="nc">EvaluatedInclude</span><span class="o">).</span><span class="nn">Name</span><span class="p">.</span><span class="nc">Equals</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="nn">StringComparison</span><span class="p">.</span><span class="nc">OrdinalIgnoreCase</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="nc">FrameworkName</span> <span class="nc">TargetFramework</span>
        <span class="o">{</span>
            <span class="n">get</span>
            <span class="o">{</span>
                <span class="kt">string</span> <span class="n">moniker</span> <span class="o">=</span> <span class="nc">GetPropertyValue</span><span class="o">(</span><span class="s2">&quot;TargetFrameworkMoniker&quot;</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="nn">String</span><span class="p">.</span><span class="nc">IsNullOrEmpty</span><span class="o">(</span><span class="n">moniker</span><span class="o">))</span>
                <span class="o">{</span>
                    <span class="k">return</span> <span class="k">null</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nc">FrameworkName</span><span class="o">(</span><span class="n">moniker</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="nc">ResolvePath</span><span class="o">(</span><span class="kt">string</span> <span class="n">path</span><span class="o">)</span>
        <span class="o">{</span>
            <span class="k">return</span> <span class="n">path</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nc">Save</span><span class="bp">()</span>
        <span class="o">{</span>
            <span class="nn">Project</span><span class="p">.</span><span class="nc">Save</span><span class="bp">()</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="kt">bool</span> <span class="nc">FileExistsInProject</span><span class="o">(</span><span class="kt">string</span> <span class="n">path</span><span class="o">)</span>
        <span class="o">{</span>
            <span class="c1">// some ItemTypes which starts with _ are added by various MSBuild tasks for their own purposes</span>
            <span class="c1">// and they do not represent content files of the projects. Therefore, we exclude them when checking for file existence.</span>
            <span class="k">return</span> <span class="nn">Project</span><span class="p">.</span><span class="nn">Items</span><span class="p">.</span><span class="nc">Any</span><span class="o">(</span>
                <span class="n">i</span> <span class="o">=&gt;</span> <span class="n">i</span><span class="o">.</span><span class="nn">EvaluatedInclude</span><span class="p">.</span><span class="nc">Equals</span><span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="nn">StringComparison</span><span class="p">.</span><span class="nc">OrdinalIgnoreCase</span><span class="o">)</span> <span class="o">&amp;&amp;</span> 
                     <span class="o">(</span><span class="nn">String</span><span class="p">.</span><span class="nc">IsNullOrEmpty</span><span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="nc">ItemType</span><span class="o">)</span> <span class="o">||</span> <span class="n">i</span><span class="o">.</span><span class="nc">ItemType</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">!=</span> <span class="sc">&#39;_&#39;</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="nc">Project</span> <span class="nc">GetProject</span><span class="o">(</span><span class="kt">string</span> <span class="n">projectFile</span><span class="o">)</span>
        <span class="o">{</span>
            <span class="k">return</span> <span class="nn">ProjectCollection</span><span class="p">.</span><span class="nn">GlobalProjectCollection</span><span class="p">.</span><span class="nc">GetLoadedProjects</span><span class="o">(</span><span class="n">projectFile</span><span class="o">).</span><span class="nc">FirstOrDefault</span><span class="bp">()</span> <span class="o">??</span> <span class="k">new</span> <span class="nc">Project</span><span class="o">(</span><span class="n">projectFile</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nc">AddImport</span><span class="o">(</span><span class="kt">string</span> <span class="n">targetPath</span><span class="o">,</span> <span class="nc">ProjectImportLocation</span> <span class="n">location</span><span class="o">)</span>
        <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">targetPath</span> <span class="o">==</span> <span class="k">null</span><span class="o">)</span>
            <span class="o">{</span>
                <span class="n">throw</span> <span class="k">new</span> <span class="nc">ArgumentNullException</span><span class="o">(</span><span class="s2">&quot;targetPath&quot;</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="c1">// adds an &lt;Import&gt; element to this project file.</span>
            <span class="k">if</span> <span class="o">(</span><span class="nn">Project</span><span class="p">.</span><span class="nn">Xml</span><span class="p">.</span><span class="nc">Imports</span> <span class="o">==</span> <span class="k">null</span> <span class="o">||</span>
                <span class="nn">Project</span><span class="p">.</span><span class="nn">Xml</span><span class="p">.</span><span class="nn">Imports</span><span class="p">.</span><span class="nc">All</span><span class="o">(</span><span class="n">import</span> <span class="o">=&gt;</span> <span class="o">!</span><span class="n">targetPath</span><span class="o">.</span><span class="nc">Equals</span><span class="o">(</span><span class="n">import</span><span class="o">.</span><span class="nc">Project</span><span class="o">,</span> <span class="nn">StringComparison</span><span class="p">.</span><span class="nc">OrdinalIgnoreCase</span><span class="o">)))</span>
            <span class="o">{</span>
                <span class="nn">Project</span><span class="p">.</span><span class="nn">Xml</span><span class="p">.</span><span class="nc">AddImport</span><span class="o">(</span><span class="n">targetPath</span><span class="o">);</span>
                <span class="nn">NuGet</span><span class="p">.</span><span class="nn">MSBuildProjectUtility</span><span class="p">.</span><span class="nc">AddEnsureImportedTarget</span><span class="o">(</span><span class="nc">Project</span><span class="o">,</span> <span class="n">targetPath</span><span class="o">);</span>
                <span class="nn">Project</span><span class="p">.</span><span class="nc">ReevaluateIfNecessary</span><span class="bp">()</span><span class="o">;</span>
                <span class="nn">Project</span><span class="p">.</span><span class="nc">Save</span><span class="bp">()</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nc">RemoveImport</span><span class="o">(</span><span class="kt">string</span> <span class="n">targetPath</span><span class="o">)</span>
        <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">targetPath</span> <span class="o">==</span> <span class="k">null</span><span class="o">)</span>
            <span class="o">{</span>
                <span class="n">throw</span> <span class="k">new</span> <span class="nc">ArgumentNullException</span><span class="o">(</span><span class="s2">&quot;targetPath&quot;</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="k">if</span> <span class="o">(</span><span class="nn">Project</span><span class="p">.</span><span class="nn">Xml</span><span class="p">.</span><span class="nc">Imports</span> <span class="o">!=</span> <span class="k">null</span><span class="o">)</span>
            <span class="o">{</span>
                <span class="c1">// search for this import statement and remove it</span>
                <span class="n">var</span> <span class="n">importElement</span> <span class="o">=</span> <span class="nn">Project</span><span class="p">.</span><span class="nn">Xml</span><span class="p">.</span><span class="nn">Imports</span><span class="p">.</span><span class="nc">FirstOrDefault</span><span class="o">(</span>
                    <span class="n">import</span> <span class="o">=&gt;</span> <span class="n">targetPath</span><span class="o">.</span><span class="nc">Equals</span><span class="o">(</span><span class="n">import</span><span class="o">.</span><span class="nc">Project</span><span class="o">,</span> <span class="nn">StringComparison</span><span class="p">.</span><span class="nc">OrdinalIgnoreCase</span><span class="o">));</span>

                <span class="k">if</span> <span class="o">(</span><span class="n">importElement</span> <span class="o">!=</span> <span class="k">null</span><span class="o">)</span>
                <span class="o">{</span>
                    <span class="nn">Project</span><span class="p">.</span><span class="nn">Xml</span><span class="p">.</span><span class="nc">RemoveChild</span><span class="o">(</span><span class="n">importElement</span><span class="o">);</span>
                    <span class="nn">NuGet</span><span class="p">.</span><span class="nn">MSBuildProjectUtility</span><span class="p">.</span><span class="nc">RemoveEnsureImportedTarget</span><span class="o">(</span><span class="nc">Project</span><span class="o">,</span> <span class="n">targetPath</span><span class="o">);</span>
                    <span class="nn">Project</span><span class="p">.</span><span class="nc">ReevaluateIfNecessary</span><span class="bp">()</span><span class="o">;</span>
                    <span class="nn">Project</span><span class="p">.</span><span class="nc">Save</span><span class="bp">()</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>I can&#39;t honestly remember if they do exactly the same thing, but they are pretty similar and implement the same interfaces and inheritance. As you can see, while F#&#39;s focus is being functional it will support OO code just fine, which is very useful indeed when you need to interop with .NET code from other languages and coding styles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A short interlude into adaptive polling]]></title>
    <link href="https://blog.mavnn.co.uk/a-short-interlude-into-adaptive-polling-tag-f/"/>
    <updated>2013-01-22T00:00:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/a-short-interlude-into-adaptive-polling-tag-f</id>
    <content type="html"><![CDATA[<p>Your windows service is watching an email inbox.</p>

<p>How often should it poll?</p>

<p>Once every 5 minutes? Every 10? Then of course you realise that it should be different for every customerâ€¦ or maybe every mailbox. You need more config!</p>

<h3>Or not.</h3>

<p>The real answer, of course, is something completely different: it should poll a lot when a lot of emails are arriving, and not very much when they arenâ€™t.</p>

<p>It took a lot longer than it should have done to get my maths brain back on, but with the help of my wife I eventually settled on this code for deciding the intervals between polls:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="n">interval</span> <span class="n">i</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">i</span>
    <span class="k">let</span> <span class="n">maxWait</span> <span class="o">=</span> <span class="mi">60</span><span class="o">.</span> <span class="o">*</span> <span class="mi">10</span><span class="o">.</span>
    <span class="k">let</span> <span class="n">raisePower</span> <span class="n">x</span> <span class="o">=</span> <span class="n">pown</span> <span class="o">(</span><span class="n">x</span> <span class="o">/</span><span class="mi">10</span><span class="o">.)</span> <span class="mi">4</span>
    <span class="o">(</span><span class="n">maxWait</span> <span class="o">*</span> <span class="o">(</span><span class="n">raisePower</span> <span class="n">x</span><span class="o">))</span> <span class="o">/</span> <span class="o">(</span><span class="n">raisePower</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="o">.)</span>
    <span class="o">|&gt;</span> <span class="o">(*)</span> <span class="mi">1000</span><span class="o">.</span> <span class="o">|&gt;</span> <span class="kt">int</span>
</code></pre></div>
<p>The â€˜iâ€™ in this function is the number of times weâ€™ve polled since the last time a new email was received (if one is received, we reset i to 0).</p>

<p>If you plot this out on a graph, you get something that looks like this:</p>

<p><img src="http://www.wolframalpha.com/share/img?i=d41d8cd98f00b204e9800998ecf8427ehd954rh40i&amp;f=HBQTQYZYGY4TOM3CGRSGMMBWGAYDCM3DGYZGMOBWGFRDANDCMUZAaaaa" alt="" /></p>

<p>You can play with the shape of the graph at <a href="http://www.wolframalpha.com/share/clip?f=d41d8cd98f00b204e9800998ecf8427ehd954rh40i">Wolfram|Alpha if you&#39;re feeling really geeky</a> :).</p>

<p>This gives us very aggressive polling for the first few minutes after discovering an email, then dropping off rapidly to close to the one every ten minutes mark that I decided was a reasonable background polling rate.</p>

<p>It&#39;s not truly adaptive in the machine learning sense, but it gives a very good first cut that is an awful lot better than any fixed value could be.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Corrected Error Handling Computational Expression]]></title>
    <link href="https://blog.mavnn.co.uk/corrected-error-handling-computational-expres/index.html"/>
    <updated>2013-01-18T00:00:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/corrected-error-handling-computational-expres/corrected-error-handling-computational-expres</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been wanting to write code like this in F#, and know that any
exceptions within a bound expression in an audit { } block will not
only get caught, but that an external auditing service will get
notified that the operation has failed.</p>

<p><script src="https://gist.github.com/4565937.js"></script></p>

<p>Unfortunately, it turns out my code in my post on error handling
( <a href="https//blog.mavnn.co.uk/playing-with-error-handling-strategies">https//blog.mavnn.co.uk/playing-with-error-handling-strategies</a> ) was
flawed in its ability to handle errors. The irony has not escaped me.</p>

<p>The issue is with the eager evaluation of arguments to the TryFinally
method of the builder. If it takes you a while to work out what that
means, don&rsquo;t worry: it took me about 2 days to wrap my head round it
and work out how to correct the code to make it behave as I would have
expected.</p>

<p>To make things work correctly, the type returned by the computational
expression pretty much has to be a deferred function of some kind.</p>

<p>So, the Interface, now renamed IAuditBuilder, gains a couple of helper
functions and becomes:</p>

<p><script src="https://gist.github.com/4565812.js"></script></p>

<p>The implementation of the TestAuditBuilder (only logs to console on
error) becomes:</p>

<p><script src="https://gist.github.com/4565838.js"></script></p>

<p>So: many thanks to Johann Deneux for patiently pointing out to me what
the flaw in the original code was. I hope this example of a lazy
computational expression is useful to other starting out down this
rabbit hole of monadic weirdness. At least the resulting code looks
pretty nice and readable now that the builder is fixed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anyone Using FsCheck for Business Code?]]></title>
    <link href="https://blog.mavnn.co.uk/anyone-using-fscheck-for-business-code/index.html"/>
    <updated>2012-12-13T00:00:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/anyone-using-fscheck-for-business-code/anyone-using-fscheck-for-business-code</id>
    <content type="html"><![CDATA[<p>Libraries like FsCheck ( <a href="http://fscheck.codeplex.com/">http://fscheck.codeplex.com/</a> ) andÂ  Pex always capture my imagination as fantastically clever and potentially useful tools. Along with things like strong type systems and code contacts they especially appeal to my long buried mathematical background.</p> <p>Unfortunately, and probably because of said mathematical background, I sometimes struggle to think of ways to use them outside of maths and science problems. If I&#39;m working on a maths library or I decide I want to write a sorting algorithm, trivially easy sanity checks of things like whether a function is cummutative or associative are immediately useful.</p> <p>If I&#39;m writing a service that polls an email address for bounced emails and out of office replies... I don&#39;t know. It feels like there should be things they can help me with: after all, over the years I&#39;ve decided the strong type system is helpful even for this side of things, so surely the QuickCheck/proof side of things should be to. But the amount of work it requires to set up the test generators for complex data types (and then trying to formalize the acceptance criteria without just writing the actual implementation!) feels so large compared to the size of the project that I can never justify the time to actually use the tools.</p> <p>So I&#39;m left wondering: am I missing something? Is there a whole new level of treating ease and vigour I&#39;m missing out on just because I don&#39;t have the imagination and experience to make good use of the tools right there in front of me? </p> <p>Or are these tools only really useful in their own narrow field? </p> <p>I suspect the middle ground; for the moment ideas are avoiding me in droves. Any good open source examples out there of these tools in use for the kind of &#39;business&#39; code that most of us spend most of our time writing? </p>
]]></content>
  </entry>
  
</feed>
