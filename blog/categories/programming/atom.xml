<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Mavnn's blog]]></title>
  <link href="http://blog.mavnn.co.uk/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://blog.mavnn.co.uk/"/>
  <updated>2013-10-31T09:41:05+00:00</updated>
  <id>http://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[To Infinity and Beyond]]></title>
    <link href="http://blog.mavnn.co.uk/to-infinity/"/>
    <updated>2013-10-31T07:41:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/to-infinity</id>
    <content type="html"><![CDATA[<p>So, a couple of weeks ago I went to the Brighton Functional Programmers meet up. It was a fun night, and at one point I ended up live coding in front of a room of functional programmers trying to give examples of lazy and strict evaluation.</p>

<p>The canonical go to tool for the job, is of course the infinite sequence and being stared at by a bunch of people and having syntax highlighting but no compiler, the first thing my brain pulled out of the air was this:</p>

<p><div><script src='https://gist.github.com/mavnn/7246744.js?file=Part1.fs'></script>
<noscript><pre><code>let ones =
    seq {
        while true do
            yield 1
    }
// seq [1; 1; 1; 1; ...]</code></pre></noscript></div>
</p>

<p>Which prompted one of the people attending (hi <a href="https://twitter.com/milessabin">Miles!</a>) to comment &ldquo;let&rsquo;s see that in Haskell without the bizarre looping generator&rdquo;. Roughly &ndash; I&rsquo;m slightly paraphrasing here given the couple of weeks in between. He has a bit of a point, this isn&rsquo;t the most functional looking sequence generator in the world, and it looks like quite a lot of code to just generate a lot of ones.</p>

<p>As always in these situations, I had of course thought of several other alternatives before I even reached my chair, so I thought I&rsquo;d have a quick survey of them and their advantages and disadvantages.</p>

<p>My first thought was that I&rsquo;d missed the obvious and succinct option of just generating a range. In F# (as in Haskell) the 1 .. 10 notation generates a list of the integers from 1 to 10. Unfortunately:</p>

<p><div><script src='https://gist.github.com/mavnn/7246744.js?file=Part2.fs'></script>
<noscript><pre><code>// Can't do this, unfortunately
// seq { 1 .. }
//
// or this:
// seq { 1 .. 0 .. 2 }
//
// Which I thought might be a nice hack.
</code></pre></noscript></div>
</p>

<p>Unlike Haskell, you can&rsquo;t have an unbounded range, nor can you set the &ldquo;step&rdquo; to zero to just keep on generating the same number. So you&rsquo;re limited to generating very big, but definitely not infinite sequences:</p>

<p><div><script src='https://gist.github.com/mavnn/7246744.js?file=Part3.fs'></script>
<noscript><pre><code>let notInfiniteOrOnes = seq { 1 .. System.Int32.MaxValue }
// seq [1; 2; 3; 4; ...]

let notInfinite = seq { for _ in 1 .. System.Int32.MaxValue -&gt; 1 }
// seq [1; 1; 1; 1; ...]
</code></pre></noscript></div>
</p>

<p>But hey! We&rsquo;re in functional world. So if we can&rsquo;t use sneaky built in syntax constructs, the next obvious choice is a recursive function:</p>

<p><div><script src='https://gist.github.com/mavnn/7246744.js?file=Part4.fs'></script>
<noscript><pre><code>let ones' =
    let rec gen () =
        seq {
            yield 1
            yield! gen ()
        }
    gen ()
// seq [1; 1; 1; 1; ...]
</code></pre></noscript></div>
</p>

<p>This is definitely infinite, and definitely functional in style. Bit verbose, of course, but it least it won&rsquo;t stack overflow as F# implements tail call recursion. It&rsquo;s verbose, but it does also have its advantages. It&rsquo;s trivial to pass things round in the recursive function (previous values from the sequence, etc) making this a very flexible way of generating sequences.</p>

<p>And, of course, let&rsquo;s not ignore the standard library. The <code>Seq</code> module gives us a couple of methods designed specifically for generating (potentially) infinite sequences.</p>

<p><code>Seq.initInfinite</code> just takes a function that returns a sequence value based on the index of that value:</p>

<p><div><script src='https://gist.github.com/mavnn/7246744.js?file=Part5.fs'></script>
<noscript><pre><code>let ones'' = Seq.initInfinite (fun _ -&gt; 1)
// seq [1; 1; 1; 1; ...]
</code></pre></noscript></div>
</p>

<p>As long as a simple mapping from index to value exists, this is both clear and concise. In theory, of course, it also suffers from the same issue as my range generators above: if your index exceeds the valid size of an Int32 you&rsquo;re out of luck.</p>

<p><code>Seq.unfold</code> may seem less intuitive, but in my mind is the more flexible and powerful solution. I tend to come across examples where it&rsquo;s easier to generate a sequence based on either some state or the previous term than by index, and that&rsquo;s exactly what unfold allows you to do:</p>

<p><div><script src='https://gist.github.com/mavnn/7246744.js?file=Part6.fs'></script>
<noscript><pre><code>let ones''' = Seq.unfold (fun _ -&gt; Some (1, ())) ()
// seq [1; 1; 1; 1; ...]
</code></pre></noscript></div>
</p>

<p>It will also happily generate sequences forever if your generating function allows.</p>

<p>So, how does it actually work? Let&rsquo;s look at a (slightly) more complex example that actually makes use of some state:</p>

<p><div><script src='https://gist.github.com/mavnn/7246744.js?file=Part7.fs'></script>
<noscript><pre><code>let moreInterestingUnfold =
    Seq.unfold
        (fun state -&gt;
            Some (state, state + 1)) 1
// seq [1; 2; 3; 4; ...]
</code></pre></noscript></div>
</p>

<p>What&rsquo;s going on here then? Well, <code>unfold</code> takes two arguments. The first is a function that takes a &lsquo;State and returns an Option&lt;&rsquo;T * 'State>. In our simple example above, both 'State and &rsquo;T are of type <code>int</code> but there&rsquo;s no requirement for them to be of the same type. If at any point the function returns <code>None</code>, the sequence ends. In our example, we always return <code>Some</code>, so our sequence is infinite (at least until it runs out of integers) and we&rsquo;re return a tuple of two values &ndash; the first of which will be used as the next term in the sequence, and the second which will become the new state.</p>

<p>The second argument to <code>unfold</code> is the starting state. In our case, this means the number that will be the first term in the sequence, and then we&rsquo;ll add one to it each time.</p>

<p>Let&rsquo;s round this out with an example that uses different types for the state and the terms of the sequence, which will hopefully now make some sense:</p>

<p><div><script src='https://gist.github.com/mavnn/7246744.js?file=Part8.fs'></script>
<noscript><pre><code>type Time =
    {
        Hour : int
        Minute : int
    }

let addMinute time =
    match time with
    | { Hour = 23; Minute = 59 } -&gt;
        { Hour = 0; Minute = 0 }
    | { Minute = 59 } -&gt;
        { Hour = time.Hour + 1; Minute = 0 }
    | _ -&gt;
        { Hour = time.Hour; Minute = time.Minute + 1 }

let unfold' =
    Seq.unfold
        (fun state -&gt;
            Some (sprintf &quot;%02d:%02d&quot; state.Hour state.Minute, addMinute state)
            ) { Hour = 22; Minute = 59 }
// seq [&quot;23:59&quot;; &quot;00:00&quot;; &quot;00:01&quot;; &quot;00:02&quot;; ...]
</code></pre></noscript></div>
</p>

<p>I&rsquo;m sure that you&rsquo;ve always needed a convenient way of cycling through every minute of the day repeatedly, with a nice readable string representation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing F# to Experienced Developers]]></title>
    <link href="http://blog.mavnn.co.uk/introducing-f-number-to-experienced-developers/"/>
    <updated>2013-10-14T12:30:00+01:00</updated>
    <id>http://blog.mavnn.co.uk/introducing-f-number-to-experienced-developers</id>
    <content type="html"><![CDATA[<p>So, as a follow up to <a href="" title="http://blog.mavnn.co.uk/teaching-f-number-to-c-number-devs/">this post</a> I&rsquo;m in the final stages of preparing a presentation for this Friday introducing an audience of (mostly) fairly experienced developers to F# and F# syntax. The main reason for this is to get a number of people up to speed enough on reading F# that they can have a better experience at <a href="" title="http://skillsmatter.com/event/scala/progressive-f-tutorials-2013">the Progressive F# Tutorials</a> at the end of the month. So the aim here isn&rsquo;t to get people fully autonomous and writing code <em>right now</em>, but to allow them to read the bulk of the example code in the tutorials and follow what&rsquo;s going on.</p>

<p>The general approach I&rsquo;ve gone for is to set up a Git repository that has a series of tagged snap shots I can check out as I work through the concepts I&rsquo;m planning to cover. This will enable me to actually demonstrate and run pieces of code, answer questions and make live modifications and then always jump back to a known starting point for the next section of the talk. Given the people involved have all done some .net development and I don&rsquo;t need to cover things like Visual Studio usage and projects, all of the code is contained in a single Program.fs file in a console app. I&rsquo;ve included the snapshot of the file from each tagged commit below, with a brief overview of what I&rsquo;m planning to introduce before skipping to the next snapshot.</p>

<p>With a full screen Visual Studio editing session, I should be able to make the code large enough to be visible and reasonably rapidly guide people to the areas where the code has changed.</p>

<p>A combination of the excellent <a href="http://papercut.codeplex.com/">PaperCut</a> project and a local &lsquo;http request to email&rsquo; service pretending to be an SMS sender, we should be able to see messages being generated by the code as we go along.</p>

<p>After the session, I&rsquo;m planning to mention <a href="" title="https://github.com/ChrisMarinos/FSharpKoans">Chris Marinos' koans</a> and <a href="" title="http://www.tryfsharp.org/">Try F#</a> (especially given that Rachel Reese is <a href="http://skillsmatter.com/podcast/scala/try-f-from-zero-to-data-science">running a session</a> at the tutorials for those who are going).</p>

<p>Please note that these are up here for comment and suggestions at this point &ndash; I&rsquo;ll be pushing up the actual Git repository and a screencast (I hope) after the event. The code is designed to be a prop for the talk rather than an independent resource &ndash; for that I&rsquo;d always point people to the koans/Try F# first.</p>

<p>So, show me the codez:</p>

<!--more-->


<h2>Tag &lsquo;1&rsquo;</h2>

<p>Nothing too exciting here :). This is just a place holder while giving the introduction, although I will also point out the lack of required boiler plate compared to C#.</p>

<p><div><script src='https://gist.github.com/mavnn/6973457.js?file=part1.fs'></script>
<noscript><pre><code>// Let's send an email!
</code></pre></noscript></div>
</p>

<h2>Tag &lsquo;2&rsquo;</h2>

<p>Introduce the <code>open</code> keyword, <code>let</code> for value assignment, and give people a feel that they&rsquo;re not completely leaving their nice safe .net world behind.</p>

<p><div><script src='https://gist.github.com/mavnn/6973457.js?file=part2.fs'></script>
<noscript><pre><code>// Let's send an email!

open System.Net.Mail

// We only use the 'new' keyword here because SmtpClient is disposable
let smtpClient = new SmtpClient(&quot;smtp.local&quot;)

// And given it's disposable, we should really dispose of it...
smtpClient.Dispose()</code></pre></noscript></div>
</p>

<h2>Tag &lsquo;3&rsquo;</h2>

<p>Talk about functions, show parameter application, introduce the pipe operator.</p>

<p>Some discussion about type inference will probably happen here.</p>

<p><div><script src='https://gist.github.com/mavnn/6973457.js?file=part3.fs'></script>
<noscript><pre><code>open System.Net.Mail

let smtpClient = new SmtpClient(&quot;smtp.local&quot;)

// This is a function
let sendMessage client message =
    // We'd better do something here to actually
    // send a message...
    printfn &quot;I haven't sent a mail message!&quot;
    ()

sendMessage smtpClient &quot;My message&quot;

smtpClient.Dispose()

// And we'll add this so we can see the output
// before it disappears
System.Console.ReadLine() |&gt; ignore
// This line would be the same as writing:
//
// ignore (System.Console.Readline())
//
// but you have to admit that this is a bit 
// more readable</code></pre></noscript></div>
</p>

<h2>Tag &lsquo;4&rsquo;</h2>

<p>Introduce the <code>use</code> keyword, show property assignment with <code>&lt;-</code>.</p>

<p><div><script src='https://gist.github.com/mavnn/6973457.js?file=part4.fs'></script>
<noscript><pre><code>open System.Net.Mail

let smtpClient = new SmtpClient(&quot;smtp.local&quot;)

let sendMessage client message =
    (* Because we used 'use' this will get
    disposed at the end of the declaring
    scope *)
    use mailMessage = new MailMessage(&quot;me@example.com&quot;, &quot;you@example.com&quot;)
    (* This is have you assign a parameter *)
    mailMessage.Subject &lt;- &quot;Message subject&quot;
    mailMessage.Body &lt;- message
    smtpClient.Send mailMessage
    printfn &quot;I've sent a mail message!&quot;

sendMessage smtpClient &quot;My message&quot;

smtpClient.Dispose()
System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>
</p>

<h2>Tag &lsquo;5&rsquo;</h2>

<p>List syntax and introduce the <code>Seq</code> module. Example of currying.</p>

<p><div><script src='https://gist.github.com/mavnn/6973457.js?file=part5.fs'></script>
<noscript><pre><code>open System.Net.Mail

let smtpClient = new SmtpClient(&quot;smtp.local&quot;)

let sendMessage client message =
    use mailMessage = new MailMessage(&quot;me@example.com&quot;, &quot;you@example.com&quot;)
    mailMessage.Subject &lt;- &quot;Message subject&quot;
    mailMessage.Body &lt;- message
    smtpClient.Send mailMessage
    printfn &quot;I've sent a mail message!&quot;

(* But really, what you want computers for
is doing the same thing lots of times... *)
let myMessages =
    [
        &quot;My first message&quot;
        &quot;My second message&quot;
        &quot;My third and final message&quot;
    ]

myMessages
|&gt; Seq.iter (sendMessage smtpClient)
(* Let's have some vindaloo with that map *)

smtpClient.Dispose()
System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>
</p>

<h2>Tag &lsquo;6&rsquo;</h2>

<p>An async workflow. Turns out that <code>SmtpClient</code> is not as clean for that as you would hope &ndash; it&rsquo;s async send methods don&rsquo;t appear to be thread safe (wait, what?) and even the relatively recent looking <code>SendMailAsync</code> method returns a <code>Task</code> rather than a <code>Task&lt;'T&gt;</code>. Having said that, it shows that even in less than ideal circumstances, you can leverage the <code>async</code> stuff even when interfacing with older .net code from other languages.</p>

<p><div><script src='https://gist.github.com/mavnn/6973457.js?file=part6.fs'></script>
<noscript><pre><code>open System.Net.Mail


(* But really, what you want computers for
is doing the same thing lots of times... 
at the same time! *)
let sendMessage message =
    async {
        // Move the client inside because...
        // have _you_ checked if it's thread safe?
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = new MailMessage(&quot;me@example.com&quot;, &quot;you@example.com&quot;)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- message
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }

let myMessages =
    [
        &quot;My first message&quot;
        &quot;My second message&quot;
        &quot;My third and final message&quot;
    ]

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>
</p>

<h2>Tag &lsquo;7&rsquo;</h2>

<p>Tuples! Showing both construction and deconstruction syntax. Also discuss that this is how we pass multiple parameters to methods on classes.</p>

<p>In the live coding for this one, I&rsquo;ll make sure to demonstrate adding and removing brackets in different places.</p>

<p><div><script src='https://gist.github.com/mavnn/6973457.js?file=part7.fs'></script>
<noscript><pre><code>open System.Net.Mail

let sendMessage messageDetails =
    async {
        let address, body = messageDetails
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = new MailMessage(&quot;me@example.com&quot;, address)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- body
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }


(* But we probably don't want to send all of these
to the same person. *)
let myMessages =
    [
        &quot;first@example.com&quot;, &quot;My first message&quot;
        &quot;secord@example.com&quot;, &quot;My second message&quot;
        &quot;third@example.com&quot;, &quot;My third and final message&quot;
    ]

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>
</p>

<h2>Tag &lsquo;8&rsquo;</h2>

<p>Record syntax.</p>

<p><div><script src='https://gist.github.com/mavnn/6973457.js?file=part8.fs'></script>
<noscript><pre><code>open System.Net.Mail

(* How about if I want to pass lots of different bits
of information in? *)
type messageDetails =
    {
        toAddress : string
        fromAddress : string
        body : string
    }

let sendMessage messageDetails =
    async {
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = 
            new MailMessage(
                messageDetails.fromAddress,
                messageDetails.toAddress)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- messageDetails.body
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }

let myMessages =
    [
        { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My first message&quot; }
        { toAddress = &quot;second@example.com&quot;; fromAddress = &quot;personal@example.com&quot;; body = &quot;My second message&quot; }
        { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My third message&quot; }
    ]

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>
</p>

<h2>Tag &lsquo;9&rsquo;</h2>

<p>Use discriminated unions for modeling business inputs. In this case, building a MessageDetails class that can contain the details of either an email or an SMS send request.</p>

<p>Also has a 2nd, maybe slightly more idiomatic implementation of an async workflow.</p>

<p>I&rsquo;m hoping to get at least this far in the session. The rest of it would be nice, but if we get here then I&rsquo;ll be happy I&rsquo;ve covered at least the basics.</p>

<p><div><script src='https://gist.github.com/mavnn/6973457.js?file=part9.fs'></script>
<noscript><pre><code>open System.IO
open System.Net
open System.Net.Mail

(* But some people have given us mobile
numbers rather than email addresses *)
type EmailDetails =
    {
        toAddress : string
        fromAddress : string
        body : string
    }

type SmsDetails =
    {
        toNumber : string
        fromNumber : string
        message : string
    }

type MessageDetails =
    | Email of EmailDetails
    | Sms of SmsDetails

let sendEmail messageDetails =
    async {
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = 
            new MailMessage(
                messageDetails.fromAddress,
                messageDetails.toAddress)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- messageDetails.body
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }

let sendSms messageDetails =
    async {
        let http = HttpWebRequest.Create(&quot;http://sms.local&quot;) :?&gt; HttpWebRequest
        http.Method &lt;- &quot;POST&quot;
        let messagePayload =
            sprintf
                &quot;To: %s\nFrom: %s\nMessage: %s&quot;
                messageDetails.toNumber
                messageDetails.fromNumber
                messageDetails.message
        using 
            (http.GetRequestStream())
            (fun stream -&gt; 
                use sw = new StreamWriter(stream)
                sw.Write(messagePayload))
        let! response = http.GetResponseAsync() |&gt; Async.AwaitTask
        if (response :?&gt; HttpWebResponse).StatusCode &lt;&gt; HttpStatusCode.OK then
            failwith &quot;Http request failed!&quot;
        printfn &quot;I've sent an SMS!&quot;
    }

let sendMessage message =
    match message with
    | Email details -&gt; sendEmail details
    | Sms details -&gt; sendSms details

let myMessages =
    [
        Email { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My first message&quot; }
        Email { toAddress = &quot;second@example.com&quot;; fromAddress = &quot;personal@example.com&quot;; body = &quot;My second message&quot; }
        Email { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My third message&quot; }
        Sms { toNumber = &quot;+447777123123&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms&quot; }
        Sms { toNumber = &quot;+447777123124&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms x2&quot; }
        Sms { toNumber = &quot;+447777123123&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms x3&quot; }
    ]

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>
</p>

<h2>Tag &lsquo;10&rsquo;</h2>

<p>Validation with Active patterns.</p>

<p><div><script src='https://gist.github.com/mavnn/6973457.js?file=part10.fs'></script>
<noscript><pre><code>open System.IO
open System.Net
open System.Net.Mail

type EmailDetails =
    {
        toAddress : string
        fromAddress : string
        body : string
    }

type SmsDetails =
    {
        toNumber : string
        fromNumber : string
        message : string
    }

type MessageDetails =
    | Email of EmailDetails
    | Sms of SmsDetails

(* But what if some people have given us invalid data?

Our SMS sender requires full numbers with national
codes - let's add some validation! *)
let (|ValidSmsRequest|InvalidSmsRequest|) details =
    // Hmm. Bananas. My favourite.
    let regex = System.Text.RegularExpressions.Regex(@&quot;^\+\d\d&quot;)
    if regex.IsMatch(details.toNumber) &amp;&amp; regex.IsMatch(details.fromNumber) then
        ValidSmsRequest details
    else
        InvalidSmsRequest &quot;You must include the +xx country prefix on mobile numbers.&quot;

let sendEmail messageDetails =
    async {
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = 
            new MailMessage(
                messageDetails.fromAddress,
                messageDetails.toAddress)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- messageDetails.body
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }

(* We've moved the SMS post logic into this method
without change - no validation here.

We've marked it private so no one else can call it
by mistake *)
let private postSms messageDetails =
    async {
        let http = HttpWebRequest.Create(&quot;http://sms.local&quot;) :?&gt; HttpWebRequest
        http.Method &lt;- &quot;POST&quot;
        let messagePayload =
            sprintf
                &quot;To: %s\nFrom: %s\nMessage: %s&quot;
                messageDetails.toNumber
                messageDetails.fromNumber
                messageDetails.message
        using 
            (http.GetRequestStream())
            (fun stream -&gt; 
                use sw = new StreamWriter(stream)
                sw.Write(messagePayload))
        let! response = http.GetResponseAsync() |&gt; Async.AwaitTask
        if (response :?&gt; HttpWebResponse).StatusCode &lt;&gt; HttpStatusCode.OK then
            failwith &quot;Http request failed!&quot;
        printfn &quot;I've sent an SMS!&quot;
    }

(* And this is where we do our validation *)
let sendSms messageDetails =
    match messageDetails with
    | ValidSmsRequest details -&gt; postSms details
    | InvalidSmsRequest error -&gt; async { printfn &quot;Sms sending error: %s&quot; error }

let sendMessage message =
    match message with
    | Email details -&gt; sendEmail details
    | Sms details -&gt; sendSms details

let myMessages =
    [
        Email { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My first message&quot; }
        Email { toAddress = &quot;second@example.com&quot;; fromAddress = &quot;personal@example.com&quot;; body = &quot;My second message&quot; }
        Email { toAddress = &quot;first@example.com&quot;; fromAddress = &quot;official@example.com&quot;; body = &quot;My third message&quot; }
        Sms { toNumber = &quot;+447777123123&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms&quot; }
        Sms { toNumber = &quot;+447777123124&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms x2&quot; }
        Sms { toNumber = &quot;+447777123123&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;Hello by sms x3&quot; }
        Sms { toNumber = &quot;447777123123&quot;; fromNumber = &quot;+447888321321&quot;; message = &quot;I won't be sent!&quot; }
        Sms { toNumber = &quot;+447777123123&quot;; fromNumber = &quot;+ab7888321321&quot;; message = &quot;Neither will I!&quot; }
        Sms { toNumber = &quot;Bob&quot;; fromNumber = &quot;+ab7888321321&quot;; message = &quot;..and I definitely won't!&quot; }
    ]

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>
</p>

<h2>Tag &lsquo;11&rsquo;</h2>

<p>The extra credit section! I very much doubt I&rsquo;ll get this far in a one hour session, but if I do this is just some fun playing with type providers. Also covers randomness such as:</p>

<ul>
<li>generating infinite sequences using <code>seq</code> expressions</li>
<li>double back tick identifiers</li>
<li>pattern matching with guards</li>
<li>a bit more of a workout of the <code>Seq</code> module</li>
<li>we can have a lot of discussion of lazy evaluation, because this code is just insanely broken without it</li>
</ul>


<p><div><script src='https://gist.github.com/mavnn/6973457.js?file=part11.fs'></script>
<noscript><pre><code>open System
open System.IO
open System.Net
open System.Net.Mail
open System.Text.RegularExpressions

type EmailDetails =
    {
        toAddress : string
        fromAddress : string
        body : string
    }

type SmsDetails =
    {
        toNumber : string
        fromNumber : string
        message : string
    }

type MessageDetails =
    | Email of EmailDetails
    | Sms of SmsDetails

let (|ValidSmsRequest|InvalidSmsRequest|) details =
    let regex = Regex(@&quot;^\+\d\d&quot;)
    if regex.IsMatch(details.toNumber) &amp;&amp; regex.IsMatch(details.fromNumber) then
        ValidSmsRequest details
    else
        InvalidSmsRequest &quot;You must include the +xx country prefix on mobile numbers.&quot;

let sendEmail messageDetails =
    async {
        use smtpClient = new SmtpClient(&quot;smtp.local&quot;)
        use mailMessage = 
            new MailMessage(
                messageDetails.fromAddress,
                messageDetails.toAddress)
        mailMessage.Subject &lt;- &quot;Message subject&quot;
        mailMessage.Body &lt;- messageDetails.body
        do!
            smtpClient.SendMailAsync(mailMessage)
            |&gt; Async.AwaitIAsyncResult
            |&gt; Async.Ignore
        printfn &quot;I've sent a mail message!&quot;
    }

let private postSms messageDetails =
    async {
        let http = HttpWebRequest.Create(&quot;http://sms.local&quot;) :?&gt; HttpWebRequest
        http.Method &lt;- &quot;POST&quot;
        let messagePayload =
            sprintf
                &quot;To: %s\nFrom: %s\nMessage: %s&quot;
                messageDetails.toNumber
                messageDetails.fromNumber
                messageDetails.message
        using 
            (http.GetRequestStream())
            (fun stream -&gt; 
                use sw = new StreamWriter(stream)
                sw.Write(messagePayload))
        let! response = http.GetResponseAsync() |&gt; Async.AwaitTask
        if (response :?&gt; HttpWebResponse).StatusCode &lt;&gt; HttpStatusCode.OK then
            failwith &quot;Http request failed!&quot;
        printfn &quot;I've sent an SMS!&quot;
    }

let sendSms messageDetails =
    match messageDetails with
    | ValidSmsRequest details -&gt; postSms details
    | InvalidSmsRequest error -&gt; async { printfn &quot;Sms sending error: %s&quot; error }

let sendMessage message =
    match message with
    | Email details -&gt; sendEmail details
    | Sms details -&gt; sendSms details
    
(* And now for something completely different...

Let's send a bunch of actors and celebrities a selection 
of astronomical data. Because, you know. Why not?

If you're running this code at home, you'll need
to install the nuget package from the packages.config
file *)
open FSharp.Data
let FreebaseKey =
    let rec getKey (dir : DirectoryInfo) =
        match dir.EnumerateFiles(&quot;freebase.key&quot;) with
        | files when Seq.isEmpty files -&gt; getKey (dir.Parent)
        | files -&gt; (Seq.head files).OpenText().ReadToEnd().Trim()
    let dir = DirectoryInfo(Directory.GetCurrentDirectory())
    getKey dir

type FreebaseProvider = FreebaseDataProvider&lt;Key=&quot;api key goes here&quot;&gt;

let freebase = FreebaseProvider.GetDataContext()

(* If you don't have an api key you can delete lines
88 to the end of this comment, and uncomment the line below.

It will limit how many times you can run the program
before it starts throwing authentication errors,
though - there's a fairly strict rate limit. *)
//let freebase = FreebaseData.GetDataContext()

let actors =
    freebase.``Arts and Entertainment``.Film.``Film actors``
    |&gt; Seq.filter (fun a -&gt; not &lt;| Seq.isEmpty a.``Film performances``)
    (* You get a (virtual) cookie if you can work out
    why I've added the filter below *)
    |&gt; Seq.filter (fun a -&gt; 
        (a.``Film performances`` |&gt; Seq.head)
            .Film.Name.[0 .. 0]
        |&gt; Regex(&quot;[a-zA-Z]&quot;).IsMatch)
    |&gt; Seq.filter (fun a -&gt; not &lt;| Seq.isEmpty a.``Country of nationality``)
    |&gt; Seq.take 20

let encode (str : string) =
    let clean = Regex(&quot;\W&quot;)
    clean.Replace(str, &quot;-&quot;)

let emailAddresses =
    seq { for actor in actors -&gt; 
            let name = actor.Name |&gt; encode
            let domain =
                (actor.``Film performances`` |&gt; Seq.head).Film.Name
                |&gt; encode
            let countryCode =
                match (actor.``Country of nationality`` |&gt; Seq.head).``ISO Alpha 2`` with
                | alpha when Seq.isEmpty alpha -&gt;
                    &quot;com&quot;
                | alpha when (Seq.head alpha).ToLower() = &quot;us&quot; -&gt;
                    &quot;com&quot;
                | alpha -&gt; sprintf &quot;co.%s&quot; &lt;| (Seq.head alpha).ToLower()
            sprintf &quot;%s@%s.%s&quot;
                name
                domain
                countryCode }

(* We're going to need 20 planets for our 20 celebrities,
so we'll repeat the planets as many times as we need *)
let planets =
    seq {
        while true do
            yield! freebase.``Science and Technology``.Astronomy.Planets
    }

let messages =
    seq { for planet in planets -&gt;
            sprintf &quot;&quot;&quot;Hi there!
We thought you might be interested to know that:

The planet %s has:
%d moons!
An average orbital velocity of %Am/s!

And is also known as:
%s

Regards,

Astro
                &quot;&quot;&quot;
                planet.Name
                (planet.``Orbited by`` |&gt; Seq.length)
                planet.``Average Orbital Speed``
                (planet.``Also known as`` |&gt; String.concat &quot;, &quot;) }

let combineAddressAndMessage (address, message) =
    Email {
        toAddress = address
        fromAddress = &quot;astro@random.org&quot;
        body = message
    }

let myMessages =
    Seq.zip emailAddresses messages
    |&gt; Seq.map combineAddressAndMessage

myMessages
|&gt; Seq.map sendMessage
|&gt; Async.Parallel
|&gt; Async.RunSynchronously
|&gt; fun _ -&gt; printfn &quot;Finished all sends!&quot;

System.Console.ReadLine() |&gt; ignore
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teaching F# to C# Devs]]></title>
    <link href="http://blog.mavnn.co.uk/teaching-f-number-to-c-number-devs/"/>
    <updated>2013-09-17T11:12:00+01:00</updated>
    <id>http://blog.mavnn.co.uk/teaching-f-number-to-c-number-devs</id>
    <content type="html"><![CDATA[<p>So, in a fit of enthusiasm my boss bought 15 tickets to the <a href="" title="http://skillsmatter.com/event/scala/progressive-f-tutorials-2013">London Progressive F# Tutorials</a> when he saw the early birds pricing (did I mention it&rsquo;s nice working here?). Several of the people who have been assigned tickets have asked to go largely because they are new to F#, so I&rsquo;ve been asked to put together a starter session to teach them the basics. I&rsquo;ve tried this <a href="" title="http://blog.mavnn.co.uk/an-introduction-to-f-screencast-and-pdf-slide">once before</a> and it was a fairly successful session (F# was adopted as a official supported language in the company partly due to feedback following it). But it was still pretty rough around the edges, and as normal with these things, you always want to do them better the next time round&hellip;</p>

<p>So, with a target audience of curious, experienced C# devs I&rsquo;m wondering about the best approach. The initial session needs to fit in an hour, although I can do individual follow ups afterwards.</p>

<p>My current thinking is to take a block of C# code (smtp sender?) that is fairly straight forward but &lsquo;production ready&rsquo; in the sense that it includes error handling, logging, etc. Then do a straight re-write in F# live coding. And then start refactoring to more idiomatic F# as we go along.</p>

<p>Features I feel would be important to cover:</p>

<ul>
<li>Basic syntax (let, functions, if &hellip; then, etc)</li>
<li>Common idioms (|>, Seq.map)</li>
<li>At least one computational expression (probably an error handling one; simpler than async in some ways)</li>
<li>Several examples of using the match statements</li>
<li>&hellip;which probably means at least one DU, possibly for error handling</li>
<li>Records and { &hellip; with &hellip; } expressions</li>
</ul>


<p>I&rsquo;ve got a week or two to prepare, so what I&rsquo;m really hoping for at this point is suggestions and ideas from people for how to improve this as a session idea, things that threw you when you first started writing F# you think should be covered, whether you think this is a stupid idea for a session from the concept up, etc. Once the session is completed I&rsquo;ll be posting the slides and hopefully a screen cast of it as I did last time for use by <a href="" title="http://fsharp.org">fsharp.org</a>.</p>

<p>Suggestions on the piece of C# code to translate would also be appreciated &ndash; either in terms of ideas of the type of code, or actual open source code that would serve as a code starting point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FsCheck - Breaking your code in new and exciting ways]]></title>
    <link href="http://blog.mavnn.co.uk/fscheck-breaking-your-code-in-new-and-exciting-ways/"/>
    <updated>2013-07-12T11:55:00+01:00</updated>
    <id>http://blog.mavnn.co.uk/fscheck-breaking-your-code-in-new-and-exciting-ways</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/fsharp/FsCheck">FsCheck</a> is a property based testing library for .net. Based on <a href="http://book.realworldhaskell.org/read/testing-and-quality-assurance.html">QuickCheck</a> and <a href="https://github.com/rickynils/scalacheck">scalacheck</a> it can be easily called from any .net language.</p>

<p>But what is property based testing? It&rsquo;s a technique that allows us to define &lsquo;properties&rsquo; for our code, and then let the library try and find input values that break these properties. Let&rsquo;s take an example and see what happens.</p>

<h3>The Brief</h3>

<p>I&rsquo;ve been tasked with writing the backend of a public facing endpoint. Customers can pass user defined input into the endpoint, and we&rsquo;ll add it to their &lsquo;booking&rsquo;. Once they have called the service once with any particular input, we should ignore any further calls with the same value.</p>

<p>Previous architectural decisions mean that we are storing the bookings as XML documents.</p>

<p>(Why yes, I do know this is slightly contrived. Thank you for asking. Hopefully though, you should begin to see similarities to real scenarios you&rsquo;ve coded against.)</p>

<h3>What can we get out of this?</h3>

<p>Well, as well as any normal exploratory unit tests we may decide to write (which I&rsquo;ll ignore for this article to keep things succinct) we can determine a few properties that should always hold true in the brief above:</p>

<ul>
<li>Repeatedly calling the code with the same input xml document and the same input text should always give us the same result. I.E., the code should be idempotent.</li>
<li>Our code should never remove nodes from the XML. The result document will always be the same or longer than the original.</li>
<li>The input is supplied by the customer. It&rsquo;s about as trustworthy as a hungry stoat on speed.</li>
</ul>


<h3>Let&rsquo;s get started</h3>

<p>Let&rsquo;s start off with the core &lsquo;business logic&rsquo; function of this code. We&rsquo;ll ignore for this post how the input gets to the function, and how the document is persisted. It&rsquo;s signature (F# style) will be:</p>

<pre><code>val AddEnhancement :
  xDoc:System.Xml.Linq.XDocument -&gt; input:string -&gt; System.Xml.Linq.XDocument
</code></pre>

<p>After referencing <code>System.Xml</code> and <code>System.Xml.Linq</code>, our first, very naive, attempt at the implementation looks like this:</p>

<p><div><script src='https://gist.github.com/mavnn/5983701.js?file=Part1.fs'></script>
<noscript><pre><code>let AddEnhancement (xDoc : XDocument) (input : string) =
    xDoc.Root.Add(XElement(XName.Get &quot;Enhancement&quot;, input))
    xDoc</code></pre></noscript></div>
</p>

<p>We know this isn&rsquo;t right &ndash; it&rsquo;s blatantly not idempotent. So let&rsquo;s try and get our failing test.</p>

<p>Although FsCheck does expose a set of NUnit plugin attributes, for this blog post I&rsquo;m just going to run the tests via a console app. So; add a new F# console app to your solution, add references to <code>System.Xml</code>, <code>System.Xml.Linq</code> and your library project then grab FsCheck (it&rsquo;s on NuGet) and we&rsquo;ll see what we can do.</p>

<p>First, we&rsquo;ll need to add a property that we want to test. A property is simply a function that takes a data type FsCheck knows how to generate, and returns a bool. FsCheck knows how to generate strings, so our idempotence property looks something like this:</p>

<p><div><script src='https://gist.github.com/mavnn/5983701.js?file=Part2.fs'></script>
<noscript><pre><code>open FsCheck
open DevEd.FsCheck
open System.Xml.Linq

let baseDoc = &quot;&lt;root /&gt;&quot;

let ``Add enhancement must be idompotent`` input =
    let xml1 = XDocument.Parse baseDoc
    let xml2 = XDocument.Parse baseDoc
    (AddEnhancement xml1 input).ToString() =
        (AddEnhancement (AddEnhancement xml2 input) input).ToString()</code></pre></noscript></div>
</p>

<p>Looking good. How do we run it? Just add this to the end of the file:</p>

<p><div><script src='https://gist.github.com/mavnn/5983701.js?file=Part3.fs'></script>
<noscript><pre><code>Check.Quick ``Add enhancement must be idompotent``

System.Console.ReadLine() |&gt; ignore</code></pre></noscript></div>
</p>

<p>And hey presto:</p>

<p><img src="/images/FsCheck1.png" alt="&quot;&quot; broke my code :(" /></p>

<p>Failing test. Interestingly (and if you check the documents, not coincidently), FsCheck has found the &lsquo;simplest&rsquo; possible failure case: <code>""</code>. Of course, it was helped on this occasion by the fact it was also the first input it tried.</p>

<p>So; let&rsquo;s add some checking to <code>AddEnhancement</code> to make sure we don&rsquo;t re-add the same input more than once.</p>

<p><div><script src='https://gist.github.com/mavnn/5983701.js?file=Part4.fs'></script>
<noscript><pre><code>let AddEnhancement (xDoc : XDocument) (input : string) =
    if 
        xDoc.Root.Elements(XName.Get &quot;Enhancement&quot;)
        |&gt; Seq.exists (fun e -&gt; e.Value = input)
        |&gt; not then
            xDoc.Root.Add(XElement(XName.Get &quot;Enhancement&quot;, input))
    xDoc
</code></pre></noscript></div>
</p>

<p>And re-run the test and&hellip; oops.</p>

<p><div><script src='https://gist.github.com/mavnn/5983701.js?file=Part5.txt'></script>
<noscript><pre><code>System.ArgumentException was unhandled by user code
  HResult=-2147024809
  Message=' ', hexadecimal value 0x18, is an invalid character.
  Source=System.Xml
  StackTrace:
       at System.Xml.XmlEncodedRawTextWriter.InvalidXmlChar(Int32 ch, Char* pDst, Boolean entitize)
       at System.Xml.XmlEncodedRawTextWriter.WriteElementTextBlock(Char* pSrc, Char* pSrcEnd)
       at System.Xml.XmlEncodedRawTextWriter.WriteString(String text)
       at System.Xml.XmlEncodedRawTextWriterIndent.WriteString(String text)
       at System.Xml.XmlWellFormedWriter.WriteString(String text)
       at System.Xml.Linq.ElementWriter.WriteElement(XElement e)
       at System.Xml.Linq.XElement.WriteTo(XmlWriter writer)
       at System.Xml.Linq.XContainer.WriteContentTo(XmlWriter writer)
       at System.Xml.Linq.XNode.GetXmlString(SaveOptions o)
       at System.Xml.Linq.XNode.ToString()
       at Program.Add enhancement must be idompotent(String input) in C:\Users\michael.newton\documents\visual studio 2012\Projects\DevEd.FsCheck\TestRunner\Program.fs:line 10
       at Program.clo@13.Invoke(String input) in C:\Users\michael.newton\documents\visual studio 2012\Projects\DevEd.FsCheck\TestRunner\Program.fs:line 13
       at FsCheck.Testable.evaluate[a,b](FSharpFunc`2 body, a a)
  InnerException: 
</code></pre></noscript></div>
</p>

<p>And this is where the full power of FsCheck starts becoming apparent. I know my input is untrusted, so I&rsquo;ve told it to generate <em>any</em> string. And it believed me, and has created an input string that breaks <code>System.Xml.XmlEncodedRawTextWriter.WriteElementTextBlock</code>. This is not a unit test I would have thought to write myself, as I&rsquo;d managed to miss that the fact that <a href="http://blog.mark-mclaren.info/2007/02/invalid-xml-characters-when-valid-utf8_5873.html">not all utf-8 characters are valid in utf-8 encoded xml</a>. In fact, it took me more than a few minutes to work out why it was throwing.</p>

<p>At this point FsCheck has revealed to us that our initial brief is actually incomplete; we&rsquo;ve told the customer that we&rsquo;re willing to accept utf-8 strings as input, but our storage mechanism doesn&rsquo;t support all utf-8 strings. To even get FsCheck to run, we&rsquo;ll have to decide on an error handling strategy &ndash; and importantly, it will have to be a strategy that still fulfils the initial properties specified (unless we decide that what we&rsquo;ve discovered so fundamentally breaks our initial assumptions that they need to be re-visited).</p>

<p>This is a toy project so I&rsquo;m going to bail slightly on this one: I&rsquo;m going to assume that invalid values just add an error node with a &lsquo;cleaned&rsquo; version of the input which could then be reviewed by a human at a later date. This has the advantage that it still fulfils all of our properties above.</p>

<p>Fortunately for us, in .NET 4.0 and above there is a function in the <code>System.Xml</code> namespace called <code>XmlConvert.IsXmlChar</code> which does roughly what you would expect from the name. Let&rsquo;s add an invalid character filter, and an active pattern to tell us if any characters have been removed:</p>

<p><div><script src='https://gist.github.com/mavnn/5983701.js?file=Part6.fs'></script>
<noscript><pre><code>let filterInvalidChars (input : string) =
    input
    |&gt; Seq.filter (fun c -&gt; XmlConvert.IsXmlChar c)
    |&gt; Seq.map string
    |&gt; String.concat &quot;&quot;    

let (|ValidXml|InvalidXml|) str =
    let filtered = filterInvalidChars str
    if String.length filtered = String.length str then
        ValidXml str
    else
        InvalidXml filtered
</code></pre></noscript></div>
</p>

<p>Now we can amend <code>AddEnhancement</code> to add enhancement nodes for valid XML text or an error node for sanitized invalid XML text:</p>

<p><div><script src='https://gist.github.com/mavnn/5983701.js?file=Part7.fs'></script>
<noscript><pre><code>let AddEnhancement (xDoc : XDocument) (input : string) =
    match input with
    | ValidXml text -&gt;
        if xDoc.Root.Elements(XName.Get &quot;Enhancement&quot;) |&gt; Seq.exists(fun enhance -&gt; enhance.Value = text) then
            None
        else
            Some &lt;| XElement(XName.Get &quot;Enhancement&quot;, text)
    | InvalidXml text -&gt;
        if xDoc.Root.Elements(XName.Get &quot;Error&quot;) |&gt; Seq.exists(fun error -&gt; error.Value = text) then
            None
        else
            Some &lt;| XElement(XName.Get &quot;Error&quot;, text)</code></pre></noscript></div>
</p>

<p>And when we run FsCheck again:</p>

<p><img src="/images/FsCheck2.png" alt="Hurrah!" /></p>

<p>Excellent stuff.</p>

<p>As a bonus extra, I&rsquo;ve included below a somewhat expanded version of the test code. Remember I said that FsCheck already knows how to generate strings? Unfortunately it doesn&rsquo;t know how to generate XML out of the box, but I was pleasantly surprised how quick and easy it was to write a naive XML generator. It generates <a href="https://gist.github.com/mavnn/5976004#file-example-xml">XML like this</a>. Also, check out the <code>CheckAll</code> function used at the end which allows you to build and run &lsquo;property classes&rsquo; to group families of properties together.</p>

<p>And, of course, per the specification, it checks that the 3rd property above holds true (that adding enhancements never reduces the size of the document).</p>

<p><div><script src='https://gist.github.com/mavnn/5983701.js?file=Part8.fs'></script>
<noscript><pre><code>module FsCheck.Examples.Tests

open FsCheck
open DevEd.FsCheck
open System.Xml.Linq

let baseDocText = &quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;root /&gt;
&quot;&quot;&quot;

type XmlTree = 
    | NodeName of string
    | Container of string * List&lt;XmlTree&gt;

let nodeNames = 
    [&quot;myNode&quot;;
     &quot;myOtherNode&quot;;
     &quot;someDifferentNode&quot;]

let tree = 
    let rec tree' s = 
        match s with
        | 0 -&gt; Gen.map NodeName (Gen.elements nodeNames)
        | n when n &gt; 0 -&gt; 
            let subtrees = 
                Gen.sized &lt;| fun s -&gt; 
                    Gen.resize (s
                                |&gt; float
                                |&gt; sqrt
                                |&gt; int) (Gen.listOf(tree'(n / 2)))
            Gen.oneof 
                [Gen.map NodeName (Gen.elements nodeNames);
                 
                 Gen.map2 (fun name contents -&gt; Container(name, contents)) 
                     (Gen.elements nodeNames) subtrees]
        | _ -&gt; invalidArg &quot;s&quot; &quot;Size most be positive.&quot;
    Gen.sized tree'

let treeToXDoc xmlTree = 
    let rec inner currentNode children = 
        let childMatch child = 
            match child with
            | NodeName name -&gt; XElement(XName.Get name)
            | Container(name, contents) -&gt; 
                let element = XElement(XName.Get name)
                inner element contents
        currentNode.Add(List.map childMatch children |&gt; List.toArray)
        currentNode
    match xmlTree with
    | NodeName name -&gt; XDocument(XElement(XName.Get name))
    | Container(name, contents) -&gt; 
        let doc = XDocument(XElement(XName.Get name))
        inner doc.Root contents |&gt; ignore
        doc

type XmlGenerator() = 
    static member XmlTree() = 
        { new Arbitrary&lt;XmlTree&gt;() with
              member x.Generator = tree
              member x.Shrinker t = 
                  match t with
                  | NodeName _ -&gt; Seq.empty
                  | Container(name, contents) -&gt; 
                      match contents with
                      | [] -&gt; seq { yield NodeName name }
                      | c -&gt; 
                          seq { 
                              for n in c -&gt; n } }

type XmlUpdaterProperties() = 
    static member ``AddEnhancement is idempotent``(data : string) = 
        ((AddEnhancement &lt;| AddEnhancement (XDocument.Parse baseDocText) data) data)
            .ToString() = (AddEnhancement (XDocument.Parse baseDocText) data)
            .ToString()
    static member ``AddEnhancement is idempotent on different xml structures``(xmlDoc : XmlTree, 
                                                                           data : string) = 
        (AddEnhancement (treeToXDoc xmlDoc) data).ToString() = (AddEnhancement (AddEnhancement (treeToXDoc xmlDoc) data) data)
            .ToString()
    static member ``AddEnhancement never reduces the number of nodes`` (xmlDoc : XmlTree, data : string) =
        Seq.length ((treeToXDoc xmlDoc).DescendantNodes()) = Seq.length ((AddEnhancement (treeToXDoc xmlDoc) data).DescendantNodes())

Arb.register&lt;XmlGenerator&gt;() |&gt; ignore
Check.QuickAll&lt;XmlUpdaterProperties&gt;()
System.Console.ReadLine() |&gt; ignore</code></pre></noscript></div>
</p>

<p>Thanks for reading this far. If you want to play yourself, a full copy of the example code is <a href="https://github.com/mavnn/DevEd.FsCheck">on GitHub</a> with an MIT license.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding Hygiene: Moving from project references to NuGet dependencies]]></title>
    <link href="http://blog.mavnn.co.uk/coding-hygiene-moving-from-project-references-to-nuget-dependencies/"/>
    <updated>2013-03-08T17:08:00+00:00</updated>
    <id>http://blog.mavnn.co.uk/coding-hygiene-moving-from-project-references-to-nuget-dependencies</id>
    <content type="html"><![CDATA[<p>So, first post with the new blogging engine. Let&rsquo;s see how it goes.</p>

<p>Our code base at <a href="http://15below.com">15below</a> started it&rsquo;s life a fair
while ago, well before any form of .NET package management became
practical. Because of that, we ended up building a lot of code in
&lsquo;lockstep&rsquo; with project references in code as there was no sensible way
of taking versioned binary dependencies.</p>

<p>That&rsquo;s fine and all, but it encourages bad code hygiene: rather than
having sharply defined contracts between components, if you&rsquo;ve got them
all open in the same solution it becomes far too tempting to just nudge
changes around as it&rsquo;s convenient at the time. Changes can infect other
pieces of code, and the power of automatic refactoring across the entire
solution becomes intoxicating.</p>

<p>The result? It becomes very hard to do incremental builds (or
deployments, for that matter). This in turn makes for a long feed back
cycle between making a change, and being able to see it rolled out to a
testing environment.</p>

<p>So as part of the ongoing refactoring that any long lived code base needs to
keep it maintainable and under control, we&rsquo;ve embarked on the process of
splitting our code down into more logically separated repositories that
reference each other via NuGet. This will require us to start being much
more disciplined in our <a href="http://semver.org">semantic versioning</a> than we
have been in the past, but will also allow us to build and deploy
incrementally and massively reduce our feed back times.</p>

<p>As part of splitting out the first logical division (I&rsquo;d like to say
<a href="http://en.wikipedia.org/wiki/Domain-driven_design">domain</a> but we&rsquo;re
not there yet!), I created the new repository and got the included
assemblies up and building on TeamCity. It was only then (stupidly) that
I realised that we had several hundred project references to these
assemblies in our code. There was no way I was going to update them all
by hand, so after a few hours development we now have a script for
idempotently updating a project reference in a [cs|vb|fs]proj file to a
NuGet reference. It does require you to do one update manually first;
especially with assemblies that are strongly signed, I chickened out of
trying to generate the reference nodes that needed to be added
automatically. The script also makes sure that you end up with a
packages.config file with the project that includes the new dependency.</p>

<p>It should be noted that this script has only seen minimal testing, was
coded up for one time use and does not come with a warranty of any kind!
Use at your own risk, and once you understand what it&rsquo;s doing. But for
all that, I hope you find it useful.</p>

<p><div><script src='https://gist.github.com/mavnn/5983379.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
