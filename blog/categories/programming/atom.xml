<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Mavnn's blog]]></title>
  <link href="http://blog.mavnn.co.uk/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://blog.mavnn.co.uk/"/>
  <updated>2015-06-12T11:39:39+01:00</updated>
  <id>http://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functional Programming in an Imperative World]]></title>
    <link href="http://blog.mavnn.co.uk/functional-programming-in-an-imperitive-world/"/>
    <updated>2015-06-12T10:54:20+01:00</updated>
    <id>http://blog.mavnn.co.uk/functional-programming-in-an-imperitive-world</id>
    <content type="html"><![CDATA[<p>Yesterday was the <a href="https://skillsmatter.com/conferences/7036-functional-programming-exchange-2015#skillscasts">Functional Programming Exchange 2015</a> and this being SkillsMatter,
the videos are already up. It&rsquo;s a great place to talk from that point of view, with consistently excellent organisation.</p>

<p>I was talking on being a &ldquo;Functional Programmer in an Imperative World&rdquo;; the slides are embedded below, but for the full experience check out the video at the link above.</p>

<iframe src="http://blog.mavnn.co.uk//www.slideshare.net/slideshow/embed_code/key/cSlUuPevYKsSHL" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://blog.mavnn.co.uk//www.slideshare.net/mavnn/functional-programming-in-an-imperitive-world" title="Functional Programming in an Imperitive World" target="_blank">Functional Programming in an Imperitive World</a> </strong> from <strong><a href="http://blog.mavnn.co.uk//www.slideshare.net/mavnn" target="_blank">mavnn</a></strong> </div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Property Based Testing at SDD Conf 2015]]></title>
    <link href="http://blog.mavnn.co.uk/sdd-conf-2015/"/>
    <updated>2015-06-08T10:21:44+01:00</updated>
    <id>http://blog.mavnn.co.uk/sdd-conf-2015</id>
    <content type="html"><![CDATA[<p>So, nearly a month back now I had the fantastic opportunity to speak at this year&rsquo;s
<a href="http://sddconf.com/">Software, Design &amp; Development</a> at the Barbican on property based
testing &ndash; or more specifically, FsCheck.</p>

<!-- more -->


<p>It was a fun experience and a very different type of conference to the smaller, generally
open source community based events that I normally attend. There were a wide variety of
expert speakers, covering the whole range from people like myself presenting on potentially
useful but relatively unknown technology (in the enterprise world, at least &ndash;
property based testing is pretty well known in functional programming circles) through to
known industry names.</p>

<p>I won&rsquo;t go into the details of all the talks I attended as I was there for 3 days. But there
were a lot of good ideas on display ranging through sane naming (always worth watching
anything by <a href="https://twitter.com/KevlinHenney">Kevlin Henney</a> if you get a chance) to
project design (as opposed to project planning, probably more thoughts on that later) to
practical DDD examples in .net to the &ldquo;Zen of Architecture&rdquo;.</p>

<p>As a thank you
to <a href="https://twitter.com/kurt2001">Kurt Schelfthout</a> who wrote FsCheck, to spread further what
I think is an awesome concept and to give an idea
of some of the kind of things we do at <a href="http://www.15below.com/">15below</a> to any interested
developers I managed to arrange for the recording of my talk to be released publicly. It&rsquo;s
an unmanned camera, so you have a pretty good view of the slides with out having to see my
face at any point, which many people will see as an advantage! I strongly recommend full
screen viewing; there&rsquo;s a fair amount of code in the presentation.</p>

<iframe src="https://player.vimeo.com/video/129109178" width="100%" height="400" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p>If you want to play with the code from the demo yourself, it&rsquo;s available <a href="https://github.com/mavnn/SddConf2015">on Github</a>. The slides are also available <a href="http://sddconf.com/brands/sdd/library/Breaking_Your_Code_In_New_Exciting_Ways.pdf">as a PDF</a>.</p>

<p>Many thanks to the conference organisers <a href="http://www.yellowstonetechmedia.com/">Yellowstone TechMedia</a>, and I&rsquo;ll definitely be considering submitting talks/attending again next year.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serialization in .net]]></title>
    <link href="http://blog.mavnn.co.uk/serialization-in-net/"/>
    <updated>2015-05-21T16:11:28+01:00</updated>
    <id>http://blog.mavnn.co.uk/serialization-in-net</id>
    <content type="html"><![CDATA[<p>Leaving the confines of your own process&rsquo;s safe little memory space is always a potentially painful moment
when you&rsquo;re coding up an up. Whether it&rsquo;s receiving data from the outside world, passing a message over
RabbitMQ to an other in house service, or writing an audit trail that needs to be accessible for the next
20 years, there&rsquo;s a bunch of considerations that need to be taken into account when you hit the joys of
serialization and deserialization.</p>

<!-- more -->


<h2>Mirror, mirror on the wall</h2>

<p>First up on the list is whether or not to use reflection. For those of you who aren&rsquo;t aware, reflection
is a way of inspecting the properties of your .net code at runtime, and various serialization libraries
take advantage of this to try and make your life easier.</p>

<p>The best known example of this is <a href="http://www.newtonsoft.com/json">Json.NET</a> &ndash; which will take any .net
object and try and create a Json representation of it &ndash; or vice versa.</p>

<p>``` csharp
Product product = new Product();
product.Name = &ldquo;Apple&rdquo;;
product.Expiry = new DateTime(2008, 12, 28);
product.Sizes = new string[] { &ldquo;Small&rdquo; };</p>

<p>string json = JsonConvert.SerializeObject(product);
// {
//   &ldquo;Name&rdquo;: &ldquo;Apple&rdquo;,
//   &ldquo;Expiry&rdquo;: &ldquo;2008-12-28T00:00:00&rdquo;,
//   &ldquo;Sizes&rdquo;: [
//     &ldquo;Small&rdquo;
//   ]
// }
```</p>

<p>This is a common technique, but it does have a few problems.</p>

<h3>Versioning</h3>

<p>The &ldquo;schema&rdquo; here is actually the underlying .net type that you are serializing &ndash; this can be great for
quick to implement communications between .net services which can share a &ldquo;messages&rdquo; dll with the type in.</p>

<p>Unfortunately, this also plays merry havoc in any scenario where your messages might persist
between versions of your messaging dll. Saving these objects to a document store for example, or trying to run two versions of a service at once (required for seamless deployment)
connected to a messaging bus.</p>

<p>Because .net will only allow you to have one version of an assembly loaded at once, you can&rsquo;t
easily build a way of deserializing the old format.</p>

<h3>Uglyness</h3>

<p>This might sound like a purely aesthetic consideration, and therefore beneath us
technical types but the result of automatic serialization is often ugly and strange
looking. And to be fair, it isn&rsquo;t normally a huge problem for as long as you&rsquo;re working
in a .net to .net scenario. But if, for example, you&rsquo;re writing an API to be consumed
from JavaScript your UI developers (which is probably still you, right?) will curse your
name forever more if you go this route. As well as this, as there&rsquo;s no schema, it&rsquo;s very
hard to tell in any other language whether the object you&rsquo;ve created will make it through
the deserialization process when it hits .net land again.</p>

<h3>Runtime failure</h3>

<p>That <code>JsonConvert.SerializeObject</code> method up there: it&rsquo;s generic. Which means it will
take any .net object you want to throw at it.</p>

<p>Unfortunately, the number of .net objects it can actually serialize is quite a bit more
restricted than &ldquo;any .net object you want to throw at it&rdquo;. And it has no way of telling
you that until run time, when it will just throw an exception, which can be pretty painful.</p>

<h3>When to use?</h3>

<p>Only use reflection based serialization in situations where you know the serialized
representation will be transient, and where you can test your serialization works at
runtime in advance. Additional, be very suspicious of using reflection based serialization
in any scenario where anything outside the .net ecosystem will need to access the data.</p>

<p>Typical scenarios:</p>

<ul>
<li>Caching</li>
<li>Inter-process communication in distributed systems</li>
<li>Message bus communications (only if you can guarantee the messages are transient)</li>
</ul>


<p>Avoid for:</p>

<ul>
<li>Permanent persistence</li>
<li>Defining APIs to be used from outside .net</li>
</ul>


<h3>Recommended implementation</h3>

<p>If you are doing reflection based serialization in .net, you want to use
<a href="https://nessos.github.io/FsPickler/">FsPickler</a>. It covers binary, json, bson and xml
serialization in a single library, is faster than Json.NET and successfully serializes
more types than Json.NET. What&rsquo;s not to like?</p>

<h2>Attribute all the things!</h2>

<p>As well as just trying to guess how to serialize things with reflection in .net,
there is also the <a href="https://msdn.microsoft.com/en-us/library/system.serializableattribute%28v=vs.110%29.aspx">Serializable</a> attribute that allows you to then serialize to a variety
of formats using the <code>System.Runtime.Serialization</code> name space. This a few advantages
over the raw reflection technique in theory (you can mark specific fields not to be serialized, for example) but to be blunt if you&rsquo;re going to go to this amount of effort you may
as well go for one of the safer options below.</p>

<h3>When to use?</h3>

<p>When you&rsquo;re using a Microsoft library that requires you to.</p>

<h2>Safety with (type) class</h2>

<p>If you happen to be working in F#, then <a href="https://msdn.microsoft.com/en-us/library/dd233203.aspx">member constraints</a> allow you to try a more flexible and type safe way of expressing
serialization &ndash; in exchange for a little more work.</p>

<p>As an example, the Chiron library allows you to do things like this:</p>

<p>``` fsharp
open Chiron
open Chiron.Operators</p>

<p>type InnerRecord =</p>

<pre><code>{
    Start : System.DateTime
    Id : System.Guid
}
static member FromJson (_ : InnerRecord) =
    (fun s i -&gt; { Start = s; Id = i })
    &lt;!&gt; Json.read "startTime"
    &lt;*&gt; Json.read "identity"
static member ToJson innerRecord =
    Json.write "startTime" innerRecord.Start
    *&gt; Json.write "identity" innerRecord.Id
</code></pre>

<p>type OuterRecord =</p>

<pre><code>{
    Name : string
    Inner : InnerRecord
}
static member FromJson (_ : OuterRecord) =
    (fun n i -&gt; { Name = n; Inner = i })
    &lt;!&gt; Json.read "name"
    &lt;*&gt; Json.read "inner"
static member ToJson outerRecord =
    Json.write "name" outerRecord.Name
    *&gt; Json.write "inner" outerRecord.Inner
</code></pre>

<p>{
  Name = &ldquo;my object&rdquo;
  Inner = {</p>

<pre><code>        Start = System.DateTime(2015, 5, 21)
        Id = System.Guid.NewGuid()
      }
</code></pre>

<p>}
|> Json.serialize
|> Json.format
// Your json goes here
```</p>

<p>A few interesting things to note here. Firstly, as you&rsquo;ve probably guessed, the magic
of telling Chiron how to serialize and deserialize things happens in the <code>ToJson</code> and
<code>FromJson</code> methods. What might not be so obvious is that if these methods are not
implemented with the correct signature, than <code>Json.serialize</code> will not compile when
fed the erroneous object. Which does wonders for eliminating run time errors!</p>

<p>Also, if you look carefully at the To and From methods you&rsquo;ll see that there&rsquo;s no need
for the fields in the Json and the .net object to have the same name. In fact, you can
apply what ever logic you want within them, allowing you to match a specific schema,
allow for different versions of the serialized data to be deserialized or just generally
make the serialized version prettier to use from other places.</p>

<p>You do, of course, have to actually write the From and To methods, which is definitely
more work. Having said that, it&rsquo;s not quite as bad as it sounds though: as you can see
from the <code>OuterRecord</code> type with it&rsquo;s <code>InnerRecord</code> field, and can nest the To and
From methods nicely &ndash; and the type system will check that your object is serializable
all the way down. Nice.</p>

<h3>When to use?</h3>

<p>Any time when you might have to persist data between versions, or process data during
the serialization/deserialization process &ndash; and you can specify your data types in F#.</p>

<h3>Recommended implementation</h3>

<p><a href="https://github.com/mausch/Fleece">Fleece</a> and <a href="https://github.com/xyncro/chiron/">Chiron</a>
both implement these techniques. Fleece is a more established library that has been tested
for longer, but I have had some performance issues with it in libraries with a lot of types
that implement To and From methods. Chiron is a little bit&hellip; cutting edge in age, but
has always been fast and reliable for me so far.</p>

<p>We currently use Fleece in one of our projects, and have provided some support to improving
the testing of Chiron as it looks like a hopeful alternative.</p>

<p>Edit: Eirik points out in the comments that FsPickler (mentioned above) also has a mechanism
for defining type safe (de)serialization <a href="http://nessos.github.io/FsPickler/tutorial.html#Picklers-and-Pickler-combinators">using Picklers</a>. I couldn&rsquo;t possibly guess where the library
got it&rsquo;s name.</p>

<h2>All the rest</h2>

<p>I&rsquo;m sure that there are other ways of tackling these problems &ndash; for example, for our
customer facing &ldquo;business&rdquo; APIs we&rsquo;re moving to specifying our API using hand crafted
XSD and WSDL files and then autogenerating code behind. This assumes, of course, you
have some reason to be using SOAP. But if you do, it works an awful lot better than
trying to autogenerate the schema from the code &ndash; a path that&rsquo;s lead me to worlds of
pain both as the consumer and producer of the schemas.</p>

<p>But the routes above are the most common paths that I&rsquo;ve come across as a .net developer
and I&rsquo;ve often discovered them being used in the &ldquo;wrong&rdquo; places. Retroactively having to
version reflection based APIs is a particular pain point that I&rsquo;d recommend avoiding if
you possibly can!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API Design Workshop]]></title>
    <link href="http://blog.mavnn.co.uk/api-design-workshop/"/>
    <updated>2015-05-07T15:35:51+01:00</updated>
    <id>http://blog.mavnn.co.uk/api-design-workshop</id>
    <content type="html"><![CDATA[<p>Designing an API is hard.</p>

<p>You want to actually apply the
<a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment">principle of least astonishment</a> &ndash;
but you&rsquo;re the person who wrote the code. You&rsquo;re unlikely to be astonished. So
you&rsquo;re trying to think how someone who didn&rsquo;t know what you know would think &ndash;
which is never an easy starting point!</p>

<p>Similarly, you&rsquo;re trying to create the
<a href="http://blog.codinghorror.com/falling-into-the-pit-of-success/">pit of success</a>
for users. Which means trying to make it <em>very hard</em> to do the wrong thing with
your API. Preferably, in strongly typed languages, this should include using the
type system to
<a href="http://fsharpforfunandprofit.com/posts/designing-with-types-making-illegal-states-unrepresentable/">make illegal states unrepresentable</a>
so that code that compiles is very likely to work.</p>

<p>In general, the core libraries for .net are not bad at API design, but there are
a few places where this isn&rsquo;t true. As an exercise, we at
<a href="http://www.15below.com/">15below</a> are going to take one of them, split into
teams and spend an hour or so seeing what alternatives we can come up with. Feel
free to follow along at home, and if you do give it a try ping me a code snippet
and I&rsquo;ll post it up with our internal attempts in a week or so.</p>

<!-- more -->


<h2>The API</h2>

<p>Lots of things can be represented as streams of data. Files, network
connections, compressed archives, chunks of memory&hellip; the list goes on.</p>

<p>So .net provides us with the <a href="https://msdn.microsoft.com/en-us/library/system.io.stream%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396"><code>System.IO.Stream</code> class</a>.</p>

<p>Which is great and all&hellip; except that not all streams are equal. For example,
your function might need write access to a stream, and not all streams are
writable. You can check easily enough, but the only way of flagging to the user
you need write access is via comments or naming conventions. The same is true
for requiring the ability to read from the stream or seek to specific locations
with in it.</p>

<h2>The challenge</h2>

<p>Have a look through the interface provided by <code>System.IO.Stream</code>. Create a
skeleton of an API that could implement the same functionality, be reasonably
easy to use and tries to make illegal states unrepresentable as much as
possible. Note: this API does <em>not</em> have to be functional.</p>

<p>Try adding a few example methods that make use of your API (hint: your design
will probably be better if you write these first).</p>

<p>Maybe you want to try using interfaces and
<a href="http://stackoverflow.com/questions/3663739/method-parameter-with-multiple-interface-restrictions">multiple interface constraints</a>. Or
you have some clever idea for representing things with
<a href="http://fsharpforfunandprofit.com/posts/discriminated-unions/">discriminated unions</a>. Or
maybe you just know that there&rsquo;s a better core library out there with a nicer
representation you can rip off whole sale! Who knows?</p>

<p>Post your work up somewhere it can be seen on the internet and ping me a link,
and we&rsquo;ll go over the submissions and write up a commentary over the next week
or two.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ecumenical APIs]]></title>
    <link href="http://blog.mavnn.co.uk/ecumenical-apis/"/>
    <updated>2015-05-06T10:44:16+01:00</updated>
    <id>http://blog.mavnn.co.uk/ecumenical-apis</id>
    <content type="html"><![CDATA[<p>One of the big sells of shared runtime functional languages such as F#, Scala
and Clojure is that you can carrying on using the surrounding library ecosystem
and your existing code. The different paradigm occasionally causes a little
pain, but there are plenty of blog posts about how to wrap OO interfaces in a
functionally friendly way.</p>

<p>This is not one of those blog posts. This is about making sure that your
colleagues who are consuming your shiny new code in an imperative language
(generally C# in my case) don&rsquo;t threaten to defenestrate you.</p>

<p>At <a href="http://15below.com">15below</a> we&rsquo;ve recently had need in some of our services
of taking a distributed lock between servers. There are many services available
designed for doing this, but after some deliberation we decided that we didn&rsquo;t
want to add a new piece of infrastructure purely for this one purpose. So
<a href="http://15below.github.io/Sproc.Lock">Sproc.Lock</a> was born: SQL Server based
distributed locking.</p>

<p>In this post, I&rsquo;m not going to talk about the design of the service. What I&rsquo;m
going to write about is how I engineered the API to be pleasent to use from both
C# and F#, giving a idiomatic interface from both languages.</p>

<!-- more -->


<h2>The original interface (F#)</h2>

<p>The F# interface was written first, and follows a pattern that will feel
immediately familiar to an F# programmer. Our lock can be of 3 types (global,
organisation or environment) and so we have a discriminated union (<code>Lock</code>)
representing these three options.</p>

<p>(I&rsquo;ve removed the implementations of the various bits to leave the shape of the
code clear)</p>

<p>``` fsharp
/// Type representing a Lock that has definitely been acquired. Locks are
/// IDisposable; disposing the lock will ensure it is released.
type Lock =</p>

<pre><code> /// A lock that applies globally across the lock server
 | Global of ...
 /// A lock scoped to a specific organisation
 | Organisation of ...
 /// A lock scoped to a particular environment belonging to a particular organisation
 | Environment of ...
 /// The LockId acquired. Useful in combination when getting one of a list of locks to determine which was free.
 member lock.LockId =
     ...
 /// Disposing releases the lock
 member lock.Dispose () =
     ...
 interface IDisposable with
     /// Disposing releases the lock
     member lock.Dispose () =
        lock.Dispose()
</code></pre>

<p>```</p>

<p>The lock is <code>IDisposable</code> to take advantage of .net&rsquo;s most common resource
management idiom. You can release a lock by disposing it.</p>

<p>Then, of course, when we try and acquire a lock we may or may not be able to &ndash;
the whole point of locks is that you cannot obtain them if someone else has
locked it already, after all.</p>

<p>So we have a second discriminated union (<code>LockResult</code>) wrapping the first,
with (again) three potential cases:</p>

<p>``` fsharp
/// A type representing the possible results of attempting to acquire a lock.
type LockResult =</p>

<pre><code> /// A lock was successfully acquired
 | Locked of Lock
 /// No lock was available
 | Unavailable
 /// The attempt to acquire a lock caused an error in SQL Server
 | Error of int
 /// Disposing a lock result disposes the lock if it was acquired, and has no effect otherwise
 member x.Dispose () =
    match x with
    | Locked l -&gt; l.Dispose()
    | Unavailable -&gt; ()
    | Error _ -&gt; ()
 interface IDisposable with
    member x.Dispose () =
        x.Dispose()
</code></pre>

<p>```</p>

<p>Again, this is <code>IDisposable</code> so that you can just dispose of your overall
<code>LockResult</code> object which makes a lot of the code cleaner.</p>

<p>So: how do we get a <code>LockResult</code>? Well, we have a set of functions for getting
locks. Let&rsquo;s have a look at the skeleton of one of them:</p>

<p>``` fsharp
// val GetOrganisationLock : string &ndash;> string &ndash;> TimeSpan &ndash;> string &ndash;> LockResult
let GetOrganisationLock connString organisation (maxDuration : TimeSpan) lockIdentifier =</p>

<pre><code>...
</code></pre>

<p>```</p>

<p>What&rsquo;s this doing? Well, it&rsquo;s going to (try and) create a lock scoped to a
particular database and organisation with a particular ID, returning a
<code>LockResult</code>.</p>

<p>From an API design point of view, what&rsquo;s interesting here is the order of the
arguments. <a href="https://en.wikipedia.org/wiki/Currying">Currying</a> enables easy
partial application, and here it is very likely that the application will want
to take all locks from the same database (making the first parameter) and
reasonably likely that it will always want them scoped to the same organisation
(second parameter). This is a common pattern in languages that allow for easy
currying, and invariably a consumer of this library in F# will end up with a
partially applied helper function looking something like this:</p>

<p>``` fsharp
// val getLock : string &ndash;> LockResult
let getLock =</p>

<pre><code>GetOrganisationLock "myDbConnString" "OrgName" (TimeSpan.FromMinutes 5.)
</code></pre>

<p>```</p>

<p>We also have a set of helper functions for common operations we might want to
carry out on locks, all of which take a higher order function as part of their
arguments. Let&rsquo;s have a look at <code>AwaitLock</code> which will wait for a lock to
become available for a specified length of time, rather then returning
immediately with an <code>Unavailable</code> result:</p>

<p>``` fsharp
// val AwaitLock : TimeSpan &ndash;> (unit &ndash;> LockResult) &ndash;> LockResult
let AwaitLock (timeOut : TimeSpan) getLock =</p>

<pre><code>...
</code></pre>

<p>// Using it using the helper above:
let awaitMyLock identifier =</p>

<pre><code>AwaitLock (TimeSpan.FromSeconds 2.) (getLock identifier)
</code></pre>

<p>```</p>

<p>If we then want (say) to wait up to 2 seconds for one of a list of possible
locks to become available, we can then compose this function with the
<code>OneOfLocks</code> function:</p>

<p>``` fsharp
// val OneOfLocks : (&lsquo;a &ndash;> LockResult) &ndash;> seq&lt;'a> &ndash;> LockResult
let OneOfLocks getLock lockIds =</p>

<pre><code>...
</code></pre>

<p>// Using it using await helper:
let pickLock () =</p>

<pre><code>OneOfLocks awaitMyLock ["LockId1";"LockId2"] 
</code></pre>

<p>```</p>

<p>I&rsquo;m sure the comments will disagree, but I&rsquo;m actually pretty happy with this as
an F# interface to this library. It&rsquo;s not strictly pure, but that&rsquo;s an option in
F#, and the combination of composable functions and careful choice of parameter
order make for concise and readable code.</p>

<p>So, we&rsquo;re done &ndash; right?</p>

<p>Unfortunately not. This code would be truely horrible to use from C#, and we
still use a lot of C# here &ndash; some of our (stranger?) developers even prefer
it. Why would it be so nasty?</p>

<ul>
<li>Consuming discriminated unions from C# is verbose to the point of unusable</li>
<li>Partial application is a pain in C#, and no one wants to repeat the connection
string everytime they want a lock</li>
<li>Function composition is possible in C# but is not idiomatic and may make the
capabilities of the library unclear</li>
</ul>


<h2>API Take 2: the &ldquo;OO&rdquo; namespace</h2>

<p>In thinking about the kind of API I would expect for a locking library in C#, a
few things immediately sprang to mind:</p>

<ul>
<li>I would expect some kind of configurable provider object or factory</li>
<li>Out of flow returns are normally signalled by exceptions</li>
<li>Function composition only for more unusual calling options</li>
</ul>


<p>Wrapping the functional API turned out to be reasonably simple. A couple of
custom exception types and the <code>OOise</code> method later (I love that function
name, even if I say so myself) we can easily wrap our functional API in
something that makes sense in C# land &ndash; they either return an acquired,
<code>IDisposable</code> lock or throw.</p>

<p><code>` fsharp
/// Exception thrown by</code>LockProvider`` if none of the specified locks are available.
type LockUnavailableException (message) =</p>

<pre><code>inherit System.Exception(message)
</code></pre>

<p>/// Exception thrown by <code>LockProvider</code> if a lock request errors on SQL Server.
/// <code>LockErrorCode</code> is the SQL error response.
type LockRequestErrorException (errorCode) as this =</p>

<pre><code>inherit System.Exception(sprintf "Error code: %d" errorCode)
do
    this.Data.Add(box "ErrorCode", box errorCode)
member x.LockErrorCode
    with get () =
        x.Data.["ErrorCode"] |&gt; unbox&lt;int&gt;
</code></pre>

<p>let private OOise lockId getLock =</p>

<pre><code>match getLock lockId with
| Locked l -&gt; l
| Unavailable -&gt; raise &lt;| LockUnavailableException(sprintf "Lock %s was unavailable." lockId)
| Error i -&gt; raise &lt;| LockRequestErrorException i
</code></pre>

<p>```</p>

<p>Then, a simple <code>LockProvider</code> class allows for all the normal patterns we&rsquo;ve
come to know (and in some cases love) such as dependency injection:</p>

<p>``` fsharp
type LockProvider (connString : string) =</p>

<pre><code>member x.GlobalLock (lockId, maxDuration) =
    GetGlobalLock connString maxDuration |&gt; OOise lockId
member x.OrganisationLock (lockId, organisation, maxDuration) =
    // Rest of the implementations snipped
    ...
member x.EnvironmentLock (lockId, organisation, environment, maxDuration) =
    ...
member x.AwaitGlobalLock (lockId, maxDuration, timeOut) =
    ...
member x.AwaitOrganisationLock (lockId, organisation, maxDuration, timeOut) =
    ...
member x.AwaitEnvironmentLock (lockId, organisation, environment, maxDuration, timeOut) =
    ...
/// Build a ``System.Func`` that returns a lock based on lockId and provide a list of lockIds.
/// If any of the locks are available, it will pick one of the available locks at random.
member x.OneOf&lt;'t&gt; (getLock : System.Func&lt;'t, Lock&gt;, lockIds) =
    ...
/// Build a ``System.Func`` that returns a lock based on lockId and provide a list of lockIds.
/// If any of the locks are available, it will pick one of the available locks at random.
/// If none are available it will wait until one is, or ``timeOut`` has passed.
member x.AwaitOneOf&lt;'t&gt; (getLock : System.Func&lt;'t, Lock&gt;, lockIds, timeOut) =
    ...
</code></pre>

<p>```</p>

<p>As you can see, by the time we get to the <code>OneOf</code> members, we&rsquo;re pretty much
forced into taking higher order functions to avoid a combinatorial explosion of
members (not that that always seems to deter OO API designers&hellip;). Other than
that, I think we&rsquo;re left with an API which will immediately make sense to a C#
developer: you can new up a <code>LockProvider</code>, you have a specified list of
exception types to expect, and you can easily intellisense your way around all
of the available options.</p>

<p>Our C# consuming code ends up looking a bit like this:</p>

<p>``` csharp
using System;
using Sproc.Lock.OO;</p>

<p>namespace MyApp
{</p>

<pre><code>class Thing
{
    static void DoLockRequiringWork()
    {
        var provider = new LockProvider("sql connection string");
        try
        {
            using (var lock2 = provider.GlobalLock("MyAppLock", TimeSpan.FromMinutes(5.0)))
            {
                // If I get here, I have a lock!
                // Doing stuff!
            } // Lock released when Disposed
        }
        catch (LockUnavailableException)
        {
            // Could not get the lock
            throw;
        }
        catch (LockRequestErrorException)
        {
            // Getting the lock threw an error
            throw;
        }
    }
}
</code></pre>

<p>}
```</p>

<p>Note the very different parameter order, placing the parameters that change most
frequently at the beginning of the list as you would normally expect in C#. This
makes a surprisingly large difference to how easy the code is to consume.</p>

<p>Again: quite nice, if I do say so myself.</p>

<p>So there you have it &ndash; want to play nicely the whole .net ecosystem? Be
kind to your consumers, and build them an ecumenical API!</p>
]]></content>
  </entry>
  
</feed>
