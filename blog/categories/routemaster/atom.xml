<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RouteMaster | Mavnn's blog]]></title>
  <link href="https://blog.mavnn.co.uk/blog/categories/routemaster/atom.xml" rel="self"/>
  <link href="https://blog.mavnn.co.uk/"/>
  <updated>2018-03-14T12:35:46+00:00</updated>
  <id>https://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RouteMaster : Master Your Messaging Routes]]></title>
    <link href="https://blog.mavnn.co.uk/routemaster-master-your-messaging-routes/"/>
    <updated>2017-10-27T16:25:53+01:00</updated>
    <id>https://blog.mavnn.co.uk/routemaster-master-your-messaging-routes</id>
    <content type="html"><![CDATA[<p>I&#39;m very pleased to announce the release of an initial alpha of <a href="https://github.com/RouteMasterIntegration/RouteMaster">RouteMaster</a>.</p>

<p>What is it? Well, I&#39;ll let the README speak for itself:</p>

<blockquote>
<p>RouteMaster is a .NET library for writing stateful workflows on top of a message bus. It exists to make the implementation of long running business processes easy in event driven systems.</p>
</blockquote>

<p>There is also example code in the repository so you can see what things are starting to look like.</p>

<p>For those of you following along, this will sound awfully familiar; that&#39;s because RouteMaster is the outcome of my decision to rebuild a <a href="/process-management-in-easynetq/">Process Manager</a> for EasyNetQ. The first cut of that was imaginatively called &quot;EasyNetQ.ProcessManager&quot;, but I decided to rename it for three main reasons:</p>

<ul>
<li>On re-reading <a href="http://www.enterpriseintegrationpatterns.com/">Enterprise Integration Patterns</a>, it occurred to me that RouteMaster was an enabler for many of the other patterns as well as the &quot;Process Manager&quot;</li>
<li>The message bus RouteMaster uses is provided as an interface; the main dll has no dependency on EasyNetQ at all</li>
<li>The previous EasyNetQ.ProcessManager is still available as a Nuget package supplied by my previous employer, and they have both the moral and legal rights to the package given I wrote the original on their time</li>
</ul>

<p>A pre-emptive few FAQs:</p>

<h3>Is this ready to use?</h3>

<p>No, not yet. I&#39;m out of time I can afford to spend on it right now, get in touch if you can/want to fund future development.</p>

<p>If you want to play, the code as provided does run and all of the process tests pass.</p>

<h3>Urgh! All the examples are F#!?</h3>

<p>Yes, but there is a C# friendly API in the works. See the first question :)</p>

<h3>What infrastructure do I need to run this?</h3>

<p>At the moment, I&#39;m using EasyNetQ (over RabbitMQ) and PostgreSQL (via Marten) for transport and storage respectively.</p>

<h3>What about things like NServiceBus and MassTransit?</h3>

<p>In some ways they fall in a similar space to RouteMaster, but with a different philosophy. Just as EasyNetQ is a focused library that supplies only part of the functionality you&#39;d find in these larger solutions, RouteMaster is designed to work with your chosen transport abstraction not replace it.</p>

<h2>Ask not what your RouteMaster can do for you, but what you can do for your RouteMaster!</h2>

<p>I&#39;d really like feedback, ideas, use cases and suggestions - leave comments here or ping an issue onto the repository. If you&#39;re feeling really brave and can try and actually experiment with it, but at the moment I&#39;m mostly hoping for concrete use cases and, well, funding.</p>

<p>Quite a few people over the years have hit my website searching for an EasyNetQ process manager, and others have asked me if it&#39;s still available. I&#39;d like to hear from as many of you as possible to build the tightest, simplest solution which will do the job.</p>
]]></content>
  </entry>
  
</feed>
