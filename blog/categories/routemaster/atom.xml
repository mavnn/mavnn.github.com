<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RouteMaster | Mavnn's blog]]></title>
  <link href="https://blog.mavnn.co.uk/blog/categories/routemaster/atom.xml" rel="self"/>
  <link href="https://blog.mavnn.co.uk/"/>
  <updated>2020-03-20T20:35:10+00:00</updated>
  <id>https://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RouteMaster and the Tale of the Globally Unique Voters]]></title>
    <link href="https://blog.mavnn.co.uk/routemaster-and-the-tale-of-the-globally-unique-voters/"/>
    <updated>2018-03-15T21:43:38+00:00</updated>
    <id>https://blog.mavnn.co.uk/routemaster-and-the-tale-of-the-globally-unique-voters</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/RouteMasterIntegration/RouteMaster">RouteMaster</a> is a process manager library I&#39;ve been working on for simplifying the creation of complex work flows in message based systems.</p>

<p>One of the challenges RouteMaster faces is that once you have defined your &quot;route&quot; in RouteMaster, you generally want to run multiple instances of your process manager service in your distributed environment. This means that a lot of care has been taken to make sure that things like work flow state is handled safely, but it also causes a particular challenge for dealing with timeouts.</p>

<!-- more -->

<h3>What&#39;s the problem?</h3>

<p>RouteMaster nodes for managing the same process maintain a shared list of messages they are expecting to receive - and how long they&#39;re willing to wait for them. This list is stored in a transactional data store.</p>

<p>Approximately every second, the list should be scanned, and messages which have not been received before their timeout should be removed and <code>TimeOut</code> messages published to the process&#39; time out handlers.</p>

<p>It turns out that this scan is the single slowest action that RouteMaster needs to take... and here we have all of the nodes carrying it out every second or so.</p>

<h3>The solution</h3>

<p>My first thought was the sinking feeling that I was going to have to implement a <a href="https://en.wikipedia.org/wiki/Consensus_algorithm">consensus algorithm</a>, and have the nodes &quot;agree&quot; on a master to deal with time outs.</p>

<p>Fortunately I had the good sense to talk to <a href="https://twitter.com/kjnilsson">Karl</a> before doing so. Karl pointed out that I didn&#39;t need <em>exactly one</em> master at any one time; if there was no master for short periods, or multiple masters for short periods, that was fine. The problem only kicks in if there are <em>lots</em> of masters at the same time.</p>

<p>He mentioned that there was a known answer in these kinds of situations: have a GUID election.</p>

<p>The logic is fairly straight forward, and goes something like this...</p>

<p>Each node stores some state about itself and the other nodes it has seen. (The full code can be seen at <a href="https://github.com/RouteMasterIntegration/RouteMaster/blob/master/Core/TimeoutManager.fs">in the RouteMaster repository if you&#39;re curious</a>, but I&#39;ll put enough here to follow the idea).</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">type</span> <span class="k">internal</span> <span class="nc">State</span> <span class="o">=</span>
    <span class="o">{</span> <span class="nc">Id</span> <span class="o">:</span> <span class="nc">Guid</span>
      <span class="nc">Active</span> <span class="o">:</span> <span class="kt">bool</span>
      <span class="nc">Tick</span> <span class="o">:</span> <span class="kt">int64</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span>
      <span class="nc">LowestGuidSeen</span> <span class="o">:</span> <span class="nc">Guid</span>
      <span class="nc">LowestGuidSeenTick</span> <span class="o">:</span> <span class="kt">int64</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span>
      <span class="nc">GuidsSeen</span> <span class="o">:</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Guid</span><span class="o">,</span> <span class="kt">int64</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;&gt;</span>
      <span class="nc">LastPublish</span> <span class="o">:</span> <span class="kt">int64</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span> <span class="o">}</span>
    <span class="k">static</span> <span class="k">member</span> <span class="nc">Empty</span><span class="bp">()</span> <span class="o">=</span>
        <span class="o">{</span> <span class="nc">Id</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">NewGuid</span><span class="bp">()</span>
          <span class="nc">Active</span> <span class="o">=</span> <span class="bp">false</span>
          <span class="nc">Tick</span> <span class="o">=</span> <span class="mi">0</span><span class="n">L</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span>
          <span class="nc">LowestGuidSeen</span> <span class="o">=</span> <span class="nn">Guid</span><span class="p">.</span><span class="nc">MaxValue</span>
          <span class="nc">LowestGuidSeenTick</span> <span class="o">=</span> <span class="mi">0</span><span class="n">L</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span>
          <span class="nc">GuidsSeen</span> <span class="o">=</span> <span class="nn">Map</span><span class="p">.</span><span class="n">empty</span>
          <span class="nc">LastPublish</span> <span class="o">=</span> <span class="o">-</span><span class="mi">10</span><span class="n">L</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span> <span class="o">}</span>
</code></pre></div>
<p>As you can see, each node starts off with a unique ID, and keeps track of every other ID it has seen and when. It also sets the &quot;lowest&quot; GUID it&#39;s seen so far to the value <code>Guid.MaxValue</code>:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">type</span> <span class="nc">Guid</span> <span class="k">with</span>
    <span class="k">static</span> <span class="k">member</span> <span class="nc">MaxValue</span> <span class="o">=</span>
        <span class="nc">Guid</span><span class="o">(</span><span class="nn">Array</span><span class="p">.</span><span class="n">create</span> <span class="mi">16</span> <span class="nn">Byte</span><span class="p">.</span><span class="nc">MaxValue</span><span class="o">)</span>
</code></pre></div>
<p>A <code>MailBoxProcessor</code> is then connected to the message bus (we&#39;re in a message based system) and to a one second <code>Tick</code> generator.</p>

<p>If a new GUID arrives, we add it to our state, and check if it&#39;s the lowest we seen we far. If it is, we record that. If it&#39;s also our own, we mark ourselves <code>Active</code>.</p>
<div class="highlight"><pre><code class="fsharp">    <span class="k">let</span> <span class="n">addGuid</span> <span class="n">guid</span> <span class="n">state</span> <span class="o">=</span>
        <span class="k">if</span> <span class="n">guid</span> <span class="o">&lt;=</span> <span class="n">state</span><span class="o">.</span><span class="nc">LowestGuidSeen</span> <span class="k">then</span>
            <span class="o">{</span> <span class="n">state</span> <span class="k">with</span>
                <span class="nc">Active</span> <span class="o">=</span> <span class="n">guid</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="nc">Id</span>
                <span class="nc">LowestGuidSeen</span> <span class="o">=</span> <span class="n">guid</span>
                <span class="nc">LowestGuidSeenTick</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span>
                <span class="nc">GuidsSeen</span> <span class="o">=</span> <span class="nn">Map</span><span class="p">.</span><span class="n">add</span> <span class="n">guid</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span> <span class="n">state</span><span class="o">.</span><span class="nc">GuidsSeen</span> <span class="o">}</span>
        <span class="k">else</span>
            <span class="o">{</span> <span class="n">state</span> <span class="k">with</span>
                <span class="nc">GuidsSeen</span> <span class="o">=</span> <span class="nn">Map</span><span class="p">.</span><span class="n">add</span> <span class="n">guid</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span> <span class="n">state</span><span class="o">.</span><span class="nc">GuidsSeen</span> <span class="o">}</span>
</code></pre></div>
<p>Every second, when the <code>Tick</code> fires, we:</p>

<h4>Increment the Tick count</h4>
<div class="highlight"><pre><code class="fsharp">    <span class="k">let</span> <span class="n">increment</span> <span class="n">state</span> <span class="o">=</span>
        <span class="o">{</span> <span class="n">state</span> <span class="k">with</span> <span class="nc">Tick</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span> <span class="o">+</span> <span class="mi">1</span><span class="n">L</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span> <span class="o">}</span>
</code></pre></div>
<h4>Clean out &quot;old&quot; GUIDs</h4>
<div class="highlight"><pre><code class="fsharp">    <span class="k">let</span> <span class="n">cleanOld</span> <span class="n">state</span> <span class="o">=</span>
        <span class="k">let</span> <span class="n">liveMap</span> <span class="o">=</span>
            <span class="nn">Map</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="n">t</span> <span class="o">-&gt;</span> <span class="n">t</span> <span class="o">+</span> <span class="mi">15</span><span class="n">L</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span> <span class="o">&lt;</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span><span class="o">)</span> <span class="n">state</span><span class="o">.</span><span class="nc">GuidsSeen</span>
        <span class="k">if</span> <span class="n">state</span><span class="o">.</span><span class="nc">LowestGuidSeenTick</span> <span class="o">+</span> <span class="mi">15</span><span class="n">L</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span> <span class="o">&lt;</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span> <span class="k">then</span>
            <span class="k">match</span> <span class="nn">Map</span><span class="p">.</span><span class="n">toSeq</span> <span class="n">liveMap</span> <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">sortBy</span> <span class="n">fst</span> <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">tryHead</span> <span class="k">with</span>
            <span class="o">|</span> <span class="nc">Some</span> <span class="o">(</span><span class="n">guid</span><span class="o">,</span> <span class="n">tick</span><span class="o">)</span> <span class="o">-&gt;</span>
                <span class="o">{</span> <span class="n">state</span> <span class="k">with</span>
                    <span class="nc">Active</span> <span class="o">=</span> <span class="n">guid</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="nc">Id</span>
                    <span class="nc">LowestGuidSeen</span> <span class="o">=</span> <span class="n">guid</span>
                    <span class="nc">LowestGuidSeenTick</span> <span class="o">=</span> <span class="n">tick</span>
                    <span class="nc">GuidsSeen</span> <span class="o">=</span> <span class="n">liveMap</span> <span class="o">}</span>
            <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span>
                <span class="c1">// If we reach here, we&#39;re not even seeing our own announcement</span>
                <span class="c1">// messages - something is wrong...</span>
                <span class="nn">Message</span><span class="p">.</span><span class="n">event</span> <span class="nc">Warn</span> <span class="s2">&quot;Manager {managerId} is not receiving timeout manager announcements&quot;</span>
                <span class="o">|&gt;</span> <span class="nn">Message</span><span class="p">.</span><span class="n">setField</span> <span class="s2">&quot;managerId&quot;</span> <span class="n">state</span><span class="o">.</span><span class="nc">Id</span>
                <span class="o">|&gt;</span> <span class="n">logger</span><span class="o">.</span><span class="n">logSimple</span>
                <span class="o">{</span> <span class="n">state</span> <span class="k">with</span>
                    <span class="nc">Active</span> <span class="o">=</span> <span class="bp">true</span>
                    <span class="nc">LowestGuidSeen</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="nc">Id</span>
                    <span class="nc">LowestGuidSeenTick</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span>
                    <span class="nc">GuidsSeen</span> <span class="o">=</span> <span class="n">liveMap</span> <span class="o">}</span>
        <span class="k">else</span> <span class="n">state</span>
</code></pre></div>
<h4>Annouce we&#39;re live if we haven&#39;t for a while</h4>
<div class="highlight"><pre><code class="fsharp"><span class="k">let</span> <span class="k">internal</span> <span class="n">checkPublishAnnoucement</span> <span class="n">topic</span> <span class="o">(</span><span class="n">bus</span> <span class="o">:</span> <span class="nc">MessageBus</span><span class="o">)</span> <span class="n">state</span> <span class="o">=</span>
    <span class="n">async</span> <span class="o">{</span>
        <span class="k">if</span> <span class="n">state</span><span class="o">.</span><span class="nc">LastPublish</span> <span class="o">+</span> <span class="mi">10</span><span class="n">L</span><span class="o">&lt;</span><span class="nc">Tick</span><span class="o">&gt;</span> <span class="o">&lt;=</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span> <span class="k">then</span>
            <span class="k">do</span><span class="o">!</span> <span class="n">bus</span><span class="o">.</span><span class="nc">TopicPublish</span>
                    <span class="o">(</span><span class="nc">TimeoutManagerAnnouncement</span> <span class="n">state</span><span class="o">.</span><span class="nc">Id</span><span class="o">)</span>
                    <span class="n">topic</span>
                    <span class="o">(</span><span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromSeconds</span> <span class="mi">15</span><span class="o">.)</span>
            <span class="k">return</span> <span class="o">{</span> <span class="n">state</span> <span class="k">with</span> <span class="nc">LastPublish</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="nc">Tick</span> <span class="o">}</span>
        <span class="k">else</span>
            <span class="k">return</span> <span class="n">state</span>
    <span class="o">}</span>
</code></pre></div>
<h4>Act if we&#39;re active</h4>

<p>This is the clever bit: if the lowest GUID we&#39;ve seen in a while is our own, we&#39;re the &quot;master&quot; node and we take responsibility for dealing with timed out messages. We&#39;ll stay active until a message arrives from a node with a lower GUID. There&#39;s no guarantee at any particular point that only one node will <em>definitely</em> think it&#39;s the master, or that a master will <em>definitely</em> be the only master - but it&#39;s more than good enough for the needs we have here.</p>

<h2>The moral of the story</h2>

<p>If you need to do something hard, ask Karl how to do it. No - wait. That&#39;s good advice, but the real moral is:</p>

<p>Make sure you&#39;re building what you actually need - not something vastly more complex for no practical gain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RouteMaster : Master Your Messaging Routes]]></title>
    <link href="https://blog.mavnn.co.uk/routemaster-master-your-messaging-routes/"/>
    <updated>2017-10-27T16:25:53+01:00</updated>
    <id>https://blog.mavnn.co.uk/routemaster-master-your-messaging-routes</id>
    <content type="html"><![CDATA[<p>I&#39;m very pleased to announce the release of an initial alpha of <a href="https://github.com/RouteMasterIntegration/RouteMaster">RouteMaster</a>.</p>

<p>What is it? Well, I&#39;ll let the README speak for itself:</p>

<blockquote>
<p>RouteMaster is a .NET library for writing stateful workflows on top of a message bus. It exists to make the implementation of long running business processes easy in event driven systems.</p>
</blockquote>

<p>There is also example code in the repository so you can see what things are starting to look like.</p>

<p>For those of you following along, this will sound awfully familiar; that&#39;s because RouteMaster is the outcome of my decision to rebuild a <a href="/process-management-in-easynetq/">Process Manager</a> for EasyNetQ. The first cut of that was imaginatively called &quot;EasyNetQ.ProcessManager&quot;, but I decided to rename it for three main reasons:</p>

<ul>
<li>On re-reading <a href="http://www.enterpriseintegrationpatterns.com/">Enterprise Integration Patterns</a>, it occurred to me that RouteMaster was an enabler for many of the other patterns as well as the &quot;Process Manager&quot;</li>
<li>The message bus RouteMaster uses is provided as an interface; the main dll has no dependency on EasyNetQ at all</li>
<li>The previous EasyNetQ.ProcessManager is still available as a Nuget package supplied by my previous employer, and they have both the moral and legal rights to the package given I wrote the original on their time</li>
</ul>

<p>A pre-emptive few FAQs:</p>

<h3>Is this ready to use?</h3>

<p>No, not yet. I&#39;m out of time I can afford to spend on it right now, get in touch if you can/want to fund future development.</p>

<p>If you want to play, the code as provided does run and all of the process tests pass.</p>

<h3>Urgh! All the examples are F#!?</h3>

<p>Yes, but there is a C# friendly API in the works. See the first question :)</p>

<h3>What infrastructure do I need to run this?</h3>

<p>At the moment, I&#39;m using EasyNetQ (over RabbitMQ) and PostgreSQL (via Marten) for transport and storage respectively.</p>

<h3>What about things like NServiceBus and MassTransit?</h3>

<p>In some ways they fall in a similar space to RouteMaster, but with a different philosophy. Just as EasyNetQ is a focused library that supplies only part of the functionality you&#39;d find in these larger solutions, RouteMaster is designed to work with your chosen transport abstraction not replace it.</p>

<h2>Ask not what your RouteMaster can do for you, but what you can do for your RouteMaster!</h2>

<p>I&#39;d really like feedback, ideas, use cases and suggestions - leave comments here or ping an issue onto the repository. If you&#39;re feeling really brave and can try and actually experiment with it, but at the moment I&#39;m mostly hoping for concrete use cases and, well, funding.</p>

<p>Quite a few people over the years have hit my website searching for an EasyNetQ process manager, and others have asked me if it&#39;s still available. I&#39;d like to hear from as many of you as possible to build the tightest, simplest solution which will do the job.</p>
]]></content>
  </entry>
  
</feed>
