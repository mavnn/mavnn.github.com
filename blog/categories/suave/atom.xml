<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: suave | Mavnn's blog]]></title>
  <link href="https://blog.mavnn.co.uk/blog/categories/suave/atom.xml" rel="self"/>
  <link href="https://blog.mavnn.co.uk/"/>
  <updated>2020-03-20T20:35:10+00:00</updated>
  <id>https://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Single file websites with Suave]]></title>
    <link href="https://blog.mavnn.co.uk/single-file-websites-with-suave/"/>
    <updated>2014-02-28T09:54:46+00:00</updated>
    <id>https://blog.mavnn.co.uk/single-file-websites-with-suave</id>
    <content type="html"><![CDATA[<blockquote>
<p>As of a few days ago, the embedded module <a href="https://github.com/SuaveIO/suave/pull/100/files">was merged</a> into Suave master. Enjoy!</p>
</blockquote>

<p>I&#39;m a great fan of <a href="http://suave.io/">Suave</a> for simple web development in F#. I highly recommend checking out the site for details, but in the mean time I&#39;d like to share a little trick I&#39;ve been using for rapid prototyping that I&#39;m finding very useful.</p>

<p>The Suave.Http module contains a few helpers for serving static files from disk. Unfortunately, depending on use case and deployment strategy, relying on the location of a bunch of files on disk can be problematic.</p>

<p>So (open source to the rescue!) I cracked open the code and wrote a small alternative implementation that serves files from the current assembly&#39;s embedded resources. I&#39;m finding it especially useful for single page JavaScript apps where you have a small number of resources and then a lot of end points providing api functionality.</p>

<p>Setting up your website looks something like this:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nc">Website</span>
<span class="k">open</span> <span class="nc">System</span>
<span class="k">open</span> <span class="nn">Suave</span><span class="p">.</span><span class="nc">Http</span>
<span class="k">open</span> <span class="nn">Suave</span><span class="p">.</span><span class="nc">Types</span>
<span class="k">open</span> <span class="nc">Embedded</span>

<span class="k">let</span> <span class="n">app</span> <span class="o">=</span>
    <span class="n">choose</span> <span class="o">[</span>
        <span class="c1">// serve the embedded index.html for &quot;/&quot;</span>
        <span class="nc">GET</span> <span class="o">&gt;&gt;=</span> <span class="n">url</span> <span class="s2">&quot;/&quot;</span> <span class="o">&gt;&gt;=</span> <span class="n">resource</span> <span class="s2">&quot;index.html&quot;</span>
        <span class="c1">// check if the request matches the name of an embedded resource</span>
        <span class="c1">// if it does, serve it up with a reasonable cache</span>
        <span class="nc">GET</span> <span class="o">&gt;&gt;=</span> <span class="n">browse_embedded</span>
        <span class="c1">// If it doesn&#39;t, try and trigger your api end points</span>
        <span class="nc">GET</span> <span class="o">&gt;&gt;=</span> <span class="n">url</span> <span class="s2">&quot;/json&quot;</span> <span class="o">&gt;&gt;==</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">serveJson</span> <span class="o">&lt;|</span> <span class="n">makeData</span><span class="bp">()</span><span class="o">)</span>
        <span class="nc">GET</span> <span class="o">&gt;&gt;=</span> <span class="n">url</span> <span class="s2">&quot;/carrier&quot;</span> <span class="o">&gt;&gt;==</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">getCarrierCodes</span> <span class="bp">()</span><span class="o">)</span>
        <span class="c1">// Nothing else has worked - 404</span>
        <span class="nc">NOT_FOUND</span> <span class="s2">&quot;Sorry, couldn&#39;t find your page&quot;</span>
    <span class="o">]</span>

<span class="n">web_server</span> <span class="n">default_config</span> <span class="n">app</span>
</code></pre></div>
<p>And the embedded module looks like this:</p>
<div class="highlight"><pre><code class="fsharp"><span class="k">module</span> <span class="nc">Embedded</span>

<span class="k">open</span> <span class="nc">System</span>
<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
<span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
<span class="k">open</span> <span class="nc">Suave</span>
<span class="k">open</span> <span class="nn">Suave</span><span class="p">.</span><span class="nc">Http</span>
<span class="k">open</span> <span class="nn">Suave</span><span class="p">.</span><span class="nc">Types</span>
<span class="k">open</span> <span class="nn">Suave</span><span class="p">.</span><span class="nc">Socket</span>

<span class="k">let</span> <span class="k">private</span> <span class="n">ass</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>

<span class="k">let</span> <span class="k">private</span> <span class="n">resources</span> <span class="o">=</span>
    <span class="n">ass</span><span class="o">.</span><span class="nc">GetManifestResourceNames</span><span class="bp">()</span>

<span class="k">let</span> <span class="k">private</span> <span class="nc">CACHE_CONTROL_MAX_AGE</span> <span class="o">=</span> <span class="mi">600</span>

<span class="k">let</span> <span class="k">private</span> <span class="n">lastModified</span> <span class="o">=</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">UtcNow</span>

<span class="k">let</span> <span class="k">private</span> <span class="n">send_embedded</span> <span class="n">resourceName</span> <span class="n">r</span> <span class="o">=</span>
    <span class="k">let</span> <span class="n">write_embedded</span> <span class="n">file</span> <span class="o">(</span><span class="n">r</span> <span class="o">:</span> <span class="nc">HttpRequest</span><span class="o">)</span> <span class="o">=</span> <span class="n">async</span> <span class="o">{</span>
      <span class="k">use</span> <span class="n">s</span> <span class="o">=</span> <span class="n">ass</span><span class="o">.</span><span class="nc">GetManifestResourceStream</span><span class="o">(</span><span class="n">resourceName</span><span class="o">)</span>

      <span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="nc">Length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="n">L</span> <span class="k">then</span>
        <span class="k">do</span><span class="o">!</span> <span class="n">async_writeln</span> <span class="n">r</span><span class="o">.</span><span class="n">connection</span> <span class="o">(</span><span class="n">sprintf</span> <span class="s2">&quot;Content-Length: %d&quot;</span> <span class="n">s</span><span class="o">.</span><span class="nc">Length</span><span class="o">)</span> <span class="n">r</span><span class="o">.</span><span class="n">line_buffer</span>

      <span class="k">do</span><span class="o">!</span> <span class="n">async_writeln</span> <span class="n">r</span><span class="o">.</span><span class="n">connection</span> <span class="s2">&quot;&quot;</span> <span class="n">r</span><span class="o">.</span><span class="n">line_buffer</span>

      <span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="nc">Length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="n">L</span> <span class="k">then</span>
        <span class="k">do</span><span class="o">!</span> <span class="n">transfer_x</span> <span class="n">r</span><span class="o">.</span><span class="n">connection</span> <span class="n">s</span> <span class="o">}</span>

    <span class="n">async</span> <span class="o">{</span> <span class="k">do</span><span class="o">!</span> <span class="n">response_f</span> <span class="mi">200</span> <span class="s2">&quot;OK&quot;</span> <span class="o">(</span><span class="n">write_embedded</span> <span class="n">resourceName</span><span class="o">)</span> <span class="n">r</span> <span class="o">}</span> <span class="o">|&gt;</span> <span class="n">succeed</span>

<span class="k">let</span> <span class="n">resource</span> <span class="n">resourceName</span> <span class="o">=</span>
    <span class="k">if</span> <span class="n">resources</span> <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">exists</span> <span class="o">((=)</span> <span class="n">resourceName</span><span class="o">)</span> <span class="k">then</span>
      <span class="k">let</span> <span class="n">send_it</span> <span class="o">_</span> <span class="o">=</span> 
        <span class="k">let</span> <span class="n">mimes</span> <span class="o">=</span> <span class="n">mime_type</span> <span class="o">&lt;|</span> <span class="nn">IO</span><span class="p">.</span><span class="nn">Path</span><span class="p">.</span><span class="nc">GetExtension</span> <span class="n">resourceName</span>
        <span class="o">#</span><span class="k">if</span> <span class="nc">DEBUG</span>
        <span class="n">set_mime_type</span> <span class="n">mimes</span> 
        <span class="o">&gt;&gt;</span> <span class="n">send_embedded</span> <span class="o">(</span><span class="n">resourceName</span><span class="o">)</span>
        <span class="o">#</span><span class="k">else</span>
        <span class="n">set_header</span> <span class="s2">&quot;Cache-Control&quot;</span> <span class="o">(</span><span class="n">sprintf</span> <span class="s2">&quot;max-age=%d&quot;</span> <span class="nc">CACHE_CONTROL_MAX_AGE</span><span class="o">)</span>
        <span class="o">&gt;&gt;</span> <span class="n">set_header</span> <span class="s2">&quot;Last-Modified&quot;</span> <span class="o">(</span><span class="n">lastModified</span><span class="o">.</span><span class="nc">ToString</span><span class="o">(</span><span class="s2">&quot;R&quot;</span><span class="o">))</span>
        <span class="o">&gt;&gt;</span> <span class="n">set_header</span> <span class="s2">&quot;Expires&quot;</span> <span class="o">(</span><span class="nn">DateTime</span><span class="p">.</span><span class="nn">UtcNow</span><span class="p">.</span><span class="nc">AddSeconds</span><span class="o">(</span><span class="kt">float</span><span class="o">(</span><span class="nc">CACHE_CONTROL_MAX_AGE</span><span class="o">)).</span><span class="nc">ToString</span><span class="o">(</span><span class="s2">&quot;R&quot;</span><span class="o">))</span> 
        <span class="o">&gt;&gt;</span> <span class="n">set_mime_type</span> <span class="n">mimes</span> 
        <span class="o">&gt;&gt;</span> <span class="n">send_embedded</span> <span class="o">(</span><span class="n">resourceName</span><span class="o">)</span>
        <span class="o">#</span><span class="n">endif</span>
      <span class="n">warbler</span> <span class="o">(</span> <span class="k">fun</span> <span class="o">(</span><span class="n">r</span><span class="o">:</span><span class="nc">HttpRequest</span><span class="o">)</span> <span class="o">-&gt;</span>
        <span class="k">let</span> <span class="n">modified_since</span> <span class="o">=</span> <span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="n">headers</span> <span class="o">?</span> <span class="o">``</span><span class="k">if</span><span class="o">-</span><span class="n">modified</span><span class="o">-</span><span class="n">since</span><span class="o">``</span> <span class="o">)</span>
        <span class="k">match</span> <span class="n">modified_since</span> <span class="k">with</span>
        <span class="o">|</span> <span class="nc">Some</span> <span class="n">v</span> <span class="o">-&gt;</span> <span class="k">let</span> <span class="n">date</span> <span class="o">=</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">Parse</span> <span class="n">v</span>
                    <span class="k">if</span> <span class="n">lastModified</span> <span class="o">&gt;</span> <span class="n">date</span> <span class="k">then</span> <span class="n">send_it</span> <span class="bp">()</span>
                    <span class="k">else</span> <span class="nc">NOT_MODIFIED</span>
        <span class="o">|</span> <span class="nc">None</span>   <span class="o">-&gt;</span> <span class="n">send_it</span> <span class="bp">()</span><span class="o">)</span>
    <span class="k">else</span>
      <span class="n">never</span>

<span class="k">let</span> <span class="n">browse_embedded</span> <span class="o">:</span> <span class="nc">WebPart</span> <span class="o">=</span>
    <span class="n">warbler</span> <span class="o">(</span><span class="k">fun</span> <span class="n">req</span> <span class="o">-&gt;</span> <span class="n">resource</span> <span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="n">url</span><span class="o">.</span><span class="nc">TrimStart</span><span class="o">([|</span> <span class="sc">&#39;/&#39;</span> <span class="o">|])))</span>
</code></pre></div>
<p><a href="https://twitter.com/ad3mar">@ad3mar</a> if you feel like rolling this into Suave, you can consider it licenced under what ever is most convenient. An official licence file would make me much happier using Suave in production, by the way (hint, hint).</p>

<p>Edit: ad3mar has pointed out in the comments that Suave is already Apache2 licensed, I just failed to find the file last time I looked.</p>
]]></content>
  </entry>
  
</feed>
