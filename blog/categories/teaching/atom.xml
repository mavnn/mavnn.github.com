<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Teaching | Mavnn's blog]]></title>
  <link href="https://blog.mavnn.co.uk/blog/categories/teaching/atom.xml" rel="self"/>
  <link href="https://blog.mavnn.co.uk/"/>
  <updated>2020-03-20T20:35:10+00:00</updated>
  <id>https://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Teaching Good Programming Style]]></title>
    <link href="https://blog.mavnn.co.uk/teaching-good-programming-style/index.html"/>
    <updated>2012-10-09T00:00:00+01:00</updated>
    <id>https://blog.mavnn.co.uk/teaching-good-programming-style/teaching-good-programming-style</id>
    <content type="html"><![CDATA[<p>So, I have several people from technical/mathematical backgrounds who are interested in learning more about programming, specifically with .net in some cases.</p> <p>Tooling is easy; Visual Studio Express, Monodevelop and Sharp Develop are all freely available.</p> <p>The question is, where would you start people off in terms of learning good, solid (see what I did there?) coding practices? Give them small projects and critique? Are there good open source projects for starters to get involved with? </p> <p>Given the intelligence and background of these people, teaching them syntax is the least of my worries: a basic tutorial and Project Euler will have them writing code that works in no time. Most of them even have &#39;toy project&#39; level skills in other programming languages. It&#39;s helping them learn how to build projects that work without falling into all the classic pitfalls of spaghetti code, or at least helping them climb out as quickly as possible.</p> <p>The thing that springs to mind (given there is several people) is to find a real world project that could be split into several &#39;trivial&#39; pieces that would need to communicate with each other; immediate opportunities to teach things like messaging, modularization and IoC (especially with some not very strict TDD built in). After the tutorial/Project Euler stage above, obviously.</p> <p>Suggestions? Other ideas? </p>
]]></content>
  </entry>
  
</feed>
