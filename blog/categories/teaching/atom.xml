<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: teaching | Mavnn's blog]]></title>
  <link href="http://blog.mavnn.co.uk/blog/categories/teaching/atom.xml" rel="self"/>
  <link href="http://blog.mavnn.co.uk/"/>
  <updated>2015-01-12T09:55:34+00:00</updated>
  <id>http://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing F# to Experienced Developers]]></title>
    <link href="http://blog.mavnn.co.uk/introducing-f-number-to-experienced-developers/"/>
    <updated>2013-10-14T12:30:00+01:00</updated>
    <id>http://blog.mavnn.co.uk/introducing-f-number-to-experienced-developers</id>
    <content type="html"><![CDATA[<p>So, as a follow up to <a href="" title="http://blog.mavnn.co.uk/teaching-f-number-to-c-number-devs/">this post</a> I&rsquo;m in the final stages of preparing a presentation for this Friday introducing an audience of (mostly) fairly experienced developers to F# and F# syntax. The main reason for this is to get a number of people up to speed enough on reading F# that they can have a better experience at <a href="" title="http://skillsmatter.com/event/scala/progressive-f-tutorials-2013">the Progressive F# Tutorials</a> at the end of the month. So the aim here isn&rsquo;t to get people fully autonomous and writing code <em>right now</em>, but to allow them to read the bulk of the example code in the tutorials and follow what&rsquo;s going on.</p>

<p>The general approach I&rsquo;ve gone for is to set up a Git repository that has a series of tagged snap shots I can check out as I work through the concepts I&rsquo;m planning to cover. This will enable me to actually demonstrate and run pieces of code, answer questions and make live modifications and then always jump back to a known starting point for the next section of the talk. Given the people involved have all done some .net development and I don&rsquo;t need to cover things like Visual Studio usage and projects, all of the code is contained in a single Program.fs file in a console app. I&rsquo;ve included the snapshot of the file from each tagged commit below, with a brief overview of what I&rsquo;m planning to introduce before skipping to the next snapshot.</p>

<p>With a full screen Visual Studio editing session, I should be able to make the code large enough to be visible and reasonably rapidly guide people to the areas where the code has changed.</p>

<p>A combination of the excellent <a href="http://papercut.codeplex.com/">PaperCut</a> project and a local &lsquo;http request to email&rsquo; service pretending to be an SMS sender, we should be able to see messages being generated by the code as we go along.</p>

<p>After the session, I&rsquo;m planning to mention <a href="https://github.com/ChrisMarinos/FSharpKoans">Chris Marinos' koans</a> and <a href="http://www.tryfsharp.org/">Try F#</a> (especially given that Rachel Reese is <a href="http://skillsmatter.com/podcast/scala/try-f-from-zero-to-data-science">running a session</a> at the tutorials for those who are going).</p>

<p>Please note that these are up here for comment and suggestions at this point &ndash; I&rsquo;ll be pushing up the actual Git repository and a screencast (I hope) after the event. The code is designed to be a prop for the talk rather than an independent resource &ndash; for that I&rsquo;d always point people to the koans/Try F# first.</p>

<p>So, show me the codez:</p>

<!--more-->


<h2>Tag &lsquo;1&rsquo;</h2>

<p>Nothing too exciting here :). This is just a place holder while giving the introduction, although I will also point out the lack of required boiler plate compared to C#.</p>

<p>{% gist 6973457 part1.fs %}</p>

<h2>Tag &lsquo;2&rsquo;</h2>

<p>Introduce the <code>open</code> keyword, <code>let</code> for value assignment, and give people a feel that they&rsquo;re not completely leaving their nice safe .net world behind.</p>

<p>{% gist 6973457 part2.fs %}</p>

<h2>Tag &lsquo;3&rsquo;</h2>

<p>Talk about functions, show parameter application, introduce the pipe operator.</p>

<p>Some discussion about type inference will probably happen here.</p>

<p>{% gist 6973457 part3.fs %}</p>

<h2>Tag &lsquo;4&rsquo;</h2>

<p>Introduce the <code>use</code> keyword, show property assignment with <code>&lt;-</code>.</p>

<p>{% gist 6973457 part4.fs %}</p>

<h2>Tag &lsquo;5&rsquo;</h2>

<p>List syntax and introduce the <code>Seq</code> module. Example of currying.</p>

<p>{% gist 6973457 part5.fs %}</p>

<h2>Tag &lsquo;6&rsquo;</h2>

<p>An async workflow. Turns out that <code>SmtpClient</code> is not as clean for that as you would hope &ndash; it&rsquo;s async send methods don&rsquo;t appear to be thread safe (wait, what?) and even the relatively recent looking <code>SendMailAsync</code> method returns a <code>Task</code> rather than a <code>Task&lt;'T&gt;</code>. Having said that, it shows that even in less than ideal circumstances, you can leverage the <code>async</code> stuff even when interfacing with older .net code from other languages.</p>

<p>{% gist 6973457 part6.fs %}</p>

<h2>Tag &lsquo;7&rsquo;</h2>

<p>Tuples! Showing both construction and deconstruction syntax. Also discuss that this is how we pass multiple parameters to methods on classes.</p>

<p>In the live coding for this one, I&rsquo;ll make sure to demonstrate adding and removing brackets in different places.</p>

<p>{% gist 6973457 part7.fs %}</p>

<h2>Tag &lsquo;8&rsquo;</h2>

<p>Record syntax.</p>

<p>{% gist 6973457 part8.fs %}</p>

<h2>Tag &lsquo;9&rsquo;</h2>

<p>Use discriminated unions for modeling business inputs. In this case, building a MessageDetails class that can contain the details of either an email or an SMS send request.</p>

<p>Also has a 2nd, maybe slightly more idiomatic implementation of an async workflow.</p>

<p>I&rsquo;m hoping to get at least this far in the session. The rest of it would be nice, but if we get here then I&rsquo;ll be happy I&rsquo;ve covered at least the basics.</p>

<p>{% gist 6973457 part9.fs %}</p>

<h2>Tag &lsquo;10&rsquo;</h2>

<p>Validation with Active patterns.</p>

<p>{% gist 6973457 part10.fs %}</p>

<h2>Tag &lsquo;11&rsquo;</h2>

<p>The extra credit section! I very much doubt I&rsquo;ll get this far in a one hour session, but if I do this is just some fun playing with type providers. Also covers randomness such as:</p>

<ul>
<li>generating infinite sequences using <code>seq</code> expressions</li>
<li>double back tick identifiers</li>
<li>pattern matching with guards</li>
<li>a bit more of a workout of the <code>Seq</code> module</li>
<li>we can have a lot of discussion of lazy evaluation, because this code is just insanely broken without it</li>
</ul>


<p>{% gist 6973457 part11.fs %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teaching F# to C# Devs]]></title>
    <link href="http://blog.mavnn.co.uk/teaching-f-number-to-c-number-devs/"/>
    <updated>2013-09-17T11:12:00+01:00</updated>
    <id>http://blog.mavnn.co.uk/teaching-f-number-to-c-number-devs</id>
    <content type="html"><![CDATA[<p>So, in a fit of enthusiasm my boss bought 15 tickets to the <a href="" title="http://skillsmatter.com/event/scala/progressive-f-tutorials-2013">London Progressive F# Tutorials</a> when he saw the early birds pricing (did I mention it&rsquo;s nice working here?). Several of the people who have been assigned tickets have asked to go largely because they are new to F#, so I&rsquo;ve been asked to put together a starter session to teach them the basics. I&rsquo;ve tried this <a href="" title="http://blog.mavnn.co.uk/an-introduction-to-f-screencast-and-pdf-slide">once before</a> and it was a fairly successful session (F# was adopted as a official supported language in the company partly due to feedback following it). But it was still pretty rough around the edges, and as normal with these things, you always want to do them better the next time round&hellip;</p>

<p>So, with a target audience of curious, experienced C# devs I&rsquo;m wondering about the best approach. The initial session needs to fit in an hour, although I can do individual follow ups afterwards.</p>

<p>My current thinking is to take a block of C# code (smtp sender?) that is fairly straight forward but &lsquo;production ready&rsquo; in the sense that it includes error handling, logging, etc. Then do a straight re-write in F# live coding. And then start refactoring to more idiomatic F# as we go along.</p>

<p>Features I feel would be important to cover:</p>

<ul>
<li>Basic syntax (let, functions, if &hellip; then, etc)</li>
<li>Common idioms (|>, Seq.map)</li>
<li>At least one computational expression (probably an error handling one; simpler than async in some ways)</li>
<li>Several examples of using the match statements</li>
<li>&hellip;which probably means at least one DU, possibly for error handling</li>
<li>Records and { &hellip; with &hellip; } expressions</li>
</ul>


<p>I&rsquo;ve got a week or two to prepare, so what I&rsquo;m really hoping for at this point is suggestions and ideas from people for how to improve this as a session idea, things that threw you when you first started writing F# you think should be covered, whether you think this is a stupid idea for a session from the concept up, etc. Once the session is completed I&rsquo;ll be posting the slides and hopefully a screen cast of it as I did last time for use by <a href="" title="http://fsharp.org">fsharp.org</a>.</p>

<p>Suggestions on the piece of C# code to translate would also be appreciated &ndash; either in terms of ideas of the type of code, or actual open source code that would serve as a code starting point.</p>
]]></content>
  </entry>
  
</feed>
