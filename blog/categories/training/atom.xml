<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: training | Mavnn's blog]]></title>
  <link href="https://blog.mavnn.co.uk/blog/categories/training/atom.xml" rel="self"/>
  <link href="https://blog.mavnn.co.uk/"/>
  <updated>2018-02-27T12:44:18+00:00</updated>
  <id>https://blog.mavnn.co.uk/</id>
  <author>
    <name><![CDATA[mavnn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Internal Training Deep Dive]]></title>
    <link href="https://blog.mavnn.co.uk/internal-training-deep-dive/"/>
    <updated>2018-02-27T11:43:22+00:00</updated>
    <id>https://blog.mavnn.co.uk/internal-training-deep-dive</id>
    <content type="html"><![CDATA[<p>I sometimes get asked what I actually do when I go to companies. The answer is, it varies a lot - but hopefully this post will give you some idea.</p>

<p>A few months back, <a href="https://twitter.com/rickasaurus">Rick Minerich</a> noticed I was running an <a href="https://blog.mavnn.co.uk/building-solid-systems-in-f-number/">F# course</a> in the UK, and mentioned that he had a team of developers that were hoping to take their F# skills to the next level.</p>

<p>There were only two problems: the team is based in Atlanta, Georgia. And the course focused on writing distributed systems, which isn&#39;t the current problem space the team is working in.</p>

<p>I had several rounds of conversation with Rick to sort out exactly what it was that the team needed, and we worked together to form a syllabus for a week of internal training. </p>

<p>Each time I&#39;ve done this the result has been very different; in this case the level of experience also varied across the team so I was asked for clear prerequisite criteria to allow people to choose relevant sessions to come along to.</p>

<p>The five days ended up looking like this:</p>

<!-- more -->

<h1>Monday AM: SOLID to Functional</h1>

<h2>Objective</h2>

<p>Understand and recognize some of the basic functional programming
techniques which take the place of SOLID principles in object oriented
code.</p>

<h2>Session Outline</h2>

<p>We&#39;ll start with a analyzing a simple but carefully written object
oriented data processing application. Step by step we&#39;ll take examples
of SOLID principles from the code base (like Single Responsibility and
Dependency Inversion) and convert our service to use equivalent
functional techniques.</p>

<h2>Prerequisites</h2>

<p>None</p>

<h1>Monday PM: Responding to Real Time Input</h1>

<h2>Objective</h2>

<p>Learn the differences between &quot;pure&quot; and &quot;impure&quot; code and learn how
to interact with external inputs (user actions, incoming network
connections) in real time while keeping your core logic pure.</p>

<h2>Session Outline</h2>

<p>Working through guided examples we&#39;ll explore how our application logic
can treat both incoming events and outgoing data as &quot;lazily evaluated
sequences&quot; manipulated by &quot;pure&quot; functions.</p>

<p>This will enable us to separate the &quot;impure&quot; input and output code we
use to interact with the outside world from our &quot;pure&quot; internal logic,
increasing readability and ease of testing.</p>

<h2>Prerequisites</h2>

<p>None</p>

<h1>Tuesday AM: Pipelines Beyond the &quot;Happy Path&quot;</h1>

<h2>Objective</h2>

<p>Learn to use and recognize functional techniques for handling errors and
disposable resources, especially within &quot;pipeline&quot; applications.</p>

<h2>Session Outline</h2>

<p>Basic pipeline logic in F# is easy to write, easy to reason about and
expresses intent clearly. Unfortunately, how you handle exceptional
circumstances such as disposable resources and errors is not always
obvious.</p>

<p>We&#39;ll take our functional pipeline application from Monday morning and
start adding:</p>

<ul>
<li>  error handling</li>
<li>  asynchronous IO</li>
<li>  handling of disposable resources</li>
<li>  logging</li>
</ul>

<h2>Prerequisites</h2>

<p>Basic handling of sequences and lists via the Seq and List modules.</p>

<h1>Tuesday PM: Computational Expressions and Bind</h1>

<h2>Objective</h2>

<p>Understand how &quot;Computational Expressions&quot; work and become confident
in their use.</p>

<h2>Session Outline</h2>

<p>In C#, async/await is a compiler construct. In F#, async is
implemented as a &quot;Computational Expression&quot; - and you can define your
own. In this session we&#39;ll cover the basics of what computational
expressions are, how to define them, and how to use them with
confidence.</p>

<h2>Prerequisites</h2>

<p>Understanding of &quot;bind&quot; functions of the shape
<code>T&lt;&#39;a&gt; -&gt; (&#39;a -&gt; T&lt;&#39;b&gt;) -&gt; T&lt;&#39;b&gt;</code> (as covered Tuesday AM).</p>

<h1>Wednesday AM: Breaking Your Code in New and Unusual Ways</h1>

<h2>Objective</h2>

<p>Discover how to use property based testing and BenchmarkDotNet to help
build correct and high performance code.</p>

<h2>Session Outline</h2>

<p>Beyond the basics of unit testing we can also test code&#39;s
<strong>performance</strong> and whether it obeys defined <strong>properties</strong>.</p>

<p>In this unit we&#39;ll take several different implementations of the same
logic and find out how to test it to destruction with FsCheck, and how
to choose the most performant version with BenchmarkDotNet.</p>

<h2>Prerequisites</h2>

<p>Confident use of computational expressions (for property based testing).</p>

<h1>Wednesday PM: Useful F# Tricks and Tips</h1>

<h2>Objective</h2>

<p>Use Active Patterns to partition data with clean, readable code.
Depending on timings, learn how to write highly generic and reusable
library code with &quot;member constraints&quot;.</p>

<h2>Session Outline</h2>

<p>We&#39;ll work through a series of examples of using some of F#&#39;s most
unusual features: active patterns and member constraints.</p>

<p>Active patterns allow us to use custom logic in pattern matching; for
example dividing strings into valid and invalid phone numbers using a
pattern match statement.</p>

<p>Member constraints (sometimes referred to as &quot;type safe duck typing&quot;)
allow us to build highly generic code which will accept any type which
implements a member with matching name and signature - even types which
are not available at compile time to your code. This technique is used
by the F# core libraries in places, and can allow the writing of type
safe code that would other wise be impossible within the F# type
system.</p>

<h2>Prerequisites</h2>

<p>None</p>

<h1>Thursday (all day): Presenting Your Data to the User</h1>

<h2>Objective</h2>

<p>Create user interfaces which are efficient, look good and use the same
principles (and in some cases underlying code) as the functional
services they sit on top of.</p>

<h2>Session Outline</h2>

<p>Fable is a F# to JavaScript compiler designed to allow easy interop
with &quot;raw&quot; JavaScript and typed F# code which can be used on both
server and client.</p>

<p>Elmish is a UI library which sits on top of Fable (inspired by the Elm
programming language), which can create both SPAs (Single Page
Application websites) and native applications via React and React Native
respectively. It models the user interface as a &quot;state&quot; (what you wish
to display) updated by an incoming stream of &quot;events&quot; which are
treated as a sequence.</p>

<p>Here we will experience how the basic functional concepts of processing
sequences of data can be applied even to interactive domains.</p>

<h2>Prerequisites</h2>

<p>Good understanding of writing F# code with sequence combinators (see
the course sections for Monday afternoon and Tuesday all day).</p>

<h1>Friday AM: Building a Domain Description With Types</h1>

<h2>Objective</h2>

<p>Learn to model a business process in the F# type system, to help
building code where the links between actual business terms and pieces
of code are made obvious.</p>

<h2>Session Outline</h2>

<p>F# gives us a very concise way of capturing the structure of a business
process via the use of records and union types. In this session we&#39;ll
delve into translating &quot;how we talk about a business process as
humans&quot; into &quot;how we talk about a business process to the compiler&quot;.
Done well, this allows for code which is easier to test, maintain and
understand because it is easier to map from what the business thinks
should happen to the actual code in your editor.</p>

<p>We&#39;ll explore how it&#39;s useful to model a process by capturing several
distinct categories of types:</p>

<ul>
<li>  Commands which can be sent to a system</li>
<li>  Events which occur within a system (normally in response to
Commands)</li>
<li>  Data which the system must be able to understand</li>
</ul>

<h2>Prerequisites</h2>

<p>Knowing something about a business process. No coding knowledge at all
is required, and non-coders would be welcome to take part in the
exercise (it would even be helpful).</p>

<h1>Friday PM: Building Logic Around Your Types</h1>

<h2>Objective</h2>

<p>Construct the basic structure of an application around a well defined
domain captured in the type system.</p>

<h2>Session Outline</h2>

<p>Taking the types from Friday morning (whether you were at the session or
not) we&#39;ll experiment with how to turn them into a code base which
knows about the gory details of computers (IO/networking/parsing/etc) -
without losing the visibility of the underlying business process.</p>

<h2>Prerequisites</h2>

<p>Good understanding of writing F# code with sequence combinators (see
the course sections for Monday afternoon and Tuesday all day).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F# Through a Ruby Lens]]></title>
    <link href="https://blog.mavnn.co.uk/f-number-through-a-ruby-lens/"/>
    <updated>2017-12-07T21:00:00+00:00</updated>
    <id>https://blog.mavnn.co.uk/f-number-through-a-ruby-lens</id>
    <content type="html"><![CDATA[<p>I spent last week delivering a five day deep dive into F# for a group of (mostly) Ruby developers in Munich, and wanted to capture some of my thoughts before I lost them as well as give people an idea of the types of things internal training can give you.</p>

<p>I won&#39;t be mentioning personal, company or exact team names here as I&#39;ve not been given explicit permission to do so; if the people who were on the course want to chime in I&#39;ll add their comments.</p>

<h2>The background</h2>

<p>Although mostly a Ruby on Rails shop, this company also relies on machine learning and expert systems to deliver some of its core services. The R&amp;D department (who build the models) settled on F# for development as a good balance between:</p>

<ul>
<li>familiarity of syntax (most have a background in Python and/or a ML language)</li>
<li>performance (Ruby had struggled here)</li>
<li>type safety</li>
<li>good &quot;production&quot; library support (logging, etc)</li>
</ul>

<p>Having examined the available options in depth, they decided on a standard stack for creating F# microservices of:</p>

<ul>
<li>Freya on Kestrel via .NET Core</li>
<li>Chiron for type safe JSON serialization/deserialization</li>
</ul>

<p>They wanted to investigate the use of Hephaestus as a rules engine (Freya uses Hephaestus to process HTTP requests). Many of their machine learning models only work with quite constrained ranges of input values, and Hephaestus as a rules engine looked an effective way of routing decisions to the &quot;correct&quot; machine learning algorithm for a particular input range. This in turn would allow for the models to stay reasonably simple and testable.</p>

<h2>The brief</h2>

<p>Having made these decisions, the company needed to bring the production services team up to speed on what R&amp;D were going to produce, especially because production had expressed an interest in having F# as an extra potential tool for their own projects.</p>

<p>My brief was to create 5 days of training, after which production needed to know enough about the F# libraries in use that they could work out what R&amp;D&#39;s code was doing, and enough about running .NET code in production to feel confident adding error handling, logging, metrics, tests and all the rest of the &quot;engineering&quot; side of development which is not about the programming language but the surrounding ecosystem.</p>

<h2>What we did</h2>

<p>I knew that I had a lot of ground to cover in just 5 days, so there was no way that the team was going to come away with all of the new knowledge absorbed and at their finger tips. At the same time, it couldn&#39;t be an overwhelming flood of information.</p>

<p>I decided to split the training time between a deep dive in understanding a few key areas in depth (Freya&#39;s design, optics and testing), and providing worked examples for the rest which could be referred back to when they became needed. Although I had relevant training material on several of the areas already, it was all tailored in this course to fit a single theme: over the course of a week, we were going to build a microservice that did just one thing, and we were going to test the heck out of it.</p>

<p>The timetable ended up looking like this:</p>

<ul>
<li>Monday AM: Introductions

<ul>
<li>high level microservice design</li>
<li>check everyone had all the software they needed installed</li>
</ul></li>
<li>Monday PM: Freya overview

<ul>
<li>install the template</li>
<li>modify the hello world service to accept POSTs with a name</li>
</ul></li>
<li>Tuesday AM: Optics

<ul>
<li>Chiron, Freya and Hephaestus all make heavy use of &quot;Optics&quot;</li>
<li>What are they?</li>
<li>Building our own</li>
</ul></li>
<li>Tuesday PM: Handling external data

<ul>
<li>Using Chiron for translation, version handling and API design (using our new found knowledge of optics)</li>
</ul></li>
<li>Wednesday AM: Start our actual microservice as a real project

<ul>
<li>how .NET solutions are (normally) laid out</li>
<li>using Paket for package management</li>
<li>add a test project with <a href="/going-down-the-property-based-testing-rabbit-hole/">this set of property based tests</a></li>
<li>write our first bit of domain logic to pass these tests, and plug it into the Freya API</li>
</ul></li>
<li>Wednesday PM: Start making our service production worthy

<ul>
<li>Spin up a docker &quot;infrastructure&quot; with Kibana and ElasticSearch</li>
<li>Adding logging to our service, plugged into Freya to automatically capture context like request IDs</li>
<li>Health endpoint</li>
<li>How to capture metrics</li>
</ul></li>
<li>Thursday AM: interesting bits &amp; answers to questions asked

<ul>
<li>How do computational expressions work?</li>
<li>How would I structure a functional UI?</li>
</ul></li>
<li>Thursday PM: flexible rules engines with Hephaestus

<ul>
<li>rebuilt the logic from Wednesday AM reusing the same property tests</li>
<li>looked at how we can splice Hephaestus rules graphs together</li>
</ul></li>
<li>Friday AM: BenchmarkDotNet

<ul>
<li>now we know it&#39;s correct - is it fast?</li>
<li>benchmarked our two implementations of the same logic together</li>
</ul></li>
<li>Friday PM: Using it all in real life

<ul>
<li>code review of pieces of the existing code base, looking at adding what we&#39;d learned</li>
</ul></li>
</ul>

<h2>How it went</h2>

<p>Overall the course seemed to go really well. At the end of it, the delegates were confident about the basics of building HTTP resources with Freya and Chiron, and happily building benchmarks and tests for their existing code base. For other areas (the boiler plate for plugging logging into Kestrel and Freya, for example) they understood the concepts and felt the course notes were sufficiently detailed they that could make use of them in other situations as needed. That was incredibly pleasing to hear from my point of view, as the course notes for these sessions are by far the most time consuming part of the process to create.</p>

<p>Although they missed some of the features of Ruby when writing F#, pattern matching with discriminated unions was a big hit and they liked the enforced discipline of Freya that required separating the logic of the various stages of handling an HTTP request - and how reusable that made components for handling concerns such as authentication.</p>

<p>Finally, all 3 of the core participants (there were other people around for certain parts of the course) came away saying that they&#39;d really enjoyed it and found it interesting throughout - so that&#39;s a big win right there!</p>

<h2>Can you do this for us?</h2>

<p>Yes; this particular course was tailored for the specific circumstances, but I&#39;ve also provided training on the more conceptual side (functional programming concepts) through to the gritty detail of DevOps (with both new and existing code bases).</p>

<p>We can also tailor delivery to match your availability; for this course I traveled to Munich to deliver it, and so it was delivered in a single 5 day unit. For other clients we can arrange regular shorter sessions or even remote workshops (group or individual) with tools such as Zoom.</p>

<p>And if you just want to turn up at a venue and get trained, check out <a href="/building-solid-systems-in-f-number/">Building Solid Systems in F#</a> happening 31st Jan-1st Feb 2018 in London.</p>

<p>Get in touch with us at <a href="us@mavnn.co.uk">us@mavnn.co.uk</a> if you have any ideas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kubernetes for the Masses]]></title>
    <link href="https://blog.mavnn.co.uk/kubernetes-for-the-masses/"/>
    <updated>2017-09-29T11:54:37+01:00</updated>
    <id>https://blog.mavnn.co.uk/kubernetes-for-the-masses</id>
    <content type="html"><![CDATA[<p>As part of <a href="/building-solid-systems-in-f-number/">a two day training course</a> I&#39;m going to be putting together a bunch of material on how to run .NET Core code on kubernetes.</p>

<p>It will include things like:</p>

<ul>
<li>Setting up CI/automated builds</li>
<li>Configuring ingress points (including ssl via self updating Let&#39;s Encrypt certs)</li>
<li>Monitoring and metrics of the running system</li>
</ul>

<p>If you&#39;d have any interest in this material as a separate module (which wouldn&#39;t be F# specific), do get in touch. I&#39;d reckon it will become a one day course, either in house or hosted.</p>

<p>As an aside, once the material has been battle tested a few times, I will also be putting together a &quot;base&quot; deployment repository - although it will have fair warning that Kubernetes is really still the kind of thing that requires you to understand it before you start pushing things onto it, not just cutting and pasting someone else&#39;s config.</p>

<p>After all, you&#39;re the one who&#39;s going to get the phone call at 03:00...</p>
]]></content>
  </entry>
  
</feed>
