<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
	   xmlns:content="http://purl.org/rss/1.0/modules/content/"
	   xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	   xmlns:dc="http://purl.org/dc/elements/1.1/"
	   xmlns:atom="http://www.w3.org/2005/Atom"
	   xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	   xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	   xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Mavnn's blog</title>
  <atom:link href="https://blog.mavnn.co.uk/rss.xml" rel="self" type="application/rss+xml" />
  <link>https://blog.mavnn.co.uk/</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Mon, 29 Jan 2024 10:32:59 +0100</pubDate>
  <lastBuildDate>Mon, 29 Jan 2024 10:32:59 +0100</lastBuildDate>
  <generator>Emacs 29.1 Org-mode 9.6.6</generator>
  <webMaster>michael@mavnn.eu (Michael Newton)</webMaster>
  <image>
    <url>http://blog.mavnn.co.uk/images/swirl.svg</url>
    <title>Mavnn's blog</title>
    <link>https://blog.mavnn.co.uk/</link>
  </image>


  <item>
    <title>Writing CVs for more senior roles</title>
    <link>https://blog.mavnn.co.uk/2024/01/26/writing_a_cv.html</link>
    <author>michael@mavnn.eu (Michael Newton)</author>
    <guid isPermaLink="false">https://blog.mavnn.co.uk/2024/01/26/writing_a_cv.html</guid>
    <pubDate>Fri, 26 Jan 2024 00:00:00 +0100</pubDate>

    <description><![CDATA[<p>
    A while back (<i>checks notes, gulps</i>) I wrote a fairly successful <a href="https://blog.mavnn.co.uk/good-developer-cvs/">blog post on the types of CVs</a> I liked receiving as one of the people screening technical applications, and some of the mistakes I was seeing applicants making.
    </p>

    <p>
    What I didn't speak about at all was the "structure" of the CV; how to arrange it, and what sections to include/not include.
    </p>

    <p>
    Today somebody asked me for an actual CV for the first time in... quite a while actually. The last couple of jobs both had their own interview process that didn't include one, so that means it's been at least 5 years.
    </p>

    <p>
    Turns out that having been on the other side of the table a few more times now, and hiring for more senior candidates, my CV creation style has changed radically. The result is four broad categories of ways I've been effective in previous jobs, with a brief description of when I became senior enough to start doing that. So rather than having a big timeline of work history and education, I end up with things like:
    </p>

    <blockquote>
    <p>
    <b>Training and mentoring</b>
    </p>

    <p>
    For over a decade I have provided mentoring and training both to team members and as a service offered. This has ranged from people learning to code for the first time (CodeInstitute), to week long courses teaching professional developers new programming languages or architectural styles (@mavnn ltd), to giving talks at conferences on topics from the obscure to the philosophical (SDDConf, NDC, F# Exchange, Lambda Days, etc).
    </p>

    <p>
    Apart from formal training I have mentored teams several times during the introduction of new programming languages, libraries, and techniques (15below, NoRedInk, Blissfully/Vendr).
    </p>
    </blockquote>

    <p>
    Again - your mileage may vary; it's not like I've had any feed back on the application yet, or even that a single response tells you much about how the CV be received in general. But I can tell you that from the other side of the table that I'm much more interested in what <b>you</b> think are the areas you've made a difference, or that you're proud of, than I am in the job descriptions of your last 5 posts and where you went to secondary school.
    </p>

    <p>
    One slight caveat: I did include my LinkedIn profile, which has all the gritty dates and things. It just wasn't what I chose to highlight in the part of the process that I can control. Your CV is your chance to control the narrative - take it.
    </p>
    ]]></description>
  </item>
  <item>
    <title>TypeScript Enums and Serialization</title>
    <link>https://blog.mavnn.co.uk/2022/11/24/typescript_enums_and_serialization.html</link>
    <author>michael@mavnn.eu (Michael Newton)</author>
    <guid isPermaLink="false">https://blog.mavnn.co.uk/2022/11/24/typescript_enums_and_serialization.html</guid>
    <pubDate>Wed, 24 Jan 2024 00:00:00 +0100</pubDate>

    <description><![CDATA[<p>
    In general, TypeScript is <a href="../../../2022/01/07/types-in-typescript.html">not its own language</a> - it's a set of annotations that
    can be added to JavaScript to help check the "correctness" of you program. The
    authors have been very reluctant to add features to TypeScript that don't exist
    in JavaScript, and so normally you can turn your TypeScript into JavaScript purely
    by <i>deleting</i> the type annotations that you've added.
    </p>

    <p>
    Enums, though, are a bit different. They actually generate JavaScript code based on
    the TypeScript you write. Today, we're going to look at a piece of code that allows
    you to deserialize enums with string values in a type safe manner. And we're going
    to take advantage of the fact that enums (according to the TypeScript compiler) are
    both a type, and a value with a different type - at the same time.
    </p>

    <p>
    For context, we're going to be using <a href="https://www.npmjs.com/package/schemawax">SchemaWax</a> to create our decoder, so we can
    build it into a larger contextual decoder as needed.
    </p>

    <p>
    First: the code! If you already know SchemaWax, you don't care about types, and
    you're here because it was a hit for "deserialize any enum" on Google this is
    the bit to cut and paste.
    </p>

    <div class="org-src-container">
    <pre class="src src-typescript"><span class="org-keyword">import</span> * <span class="org-keyword">as</span> D <span class="org-keyword">from</span> <span class="org-string">"schemawax"</span>

    <span class="org-comment-delimiter">// </span><span class="org-comment">This is only type safe if passed a Enum with string values.</span>
    <span class="org-comment-delimiter">// </span><span class="org-comment">I don't think there's anyway to stop someone passing { "boo": "broken" }</span>
    <span class="org-comment-delimiter">// </span><span class="org-comment">in TypeScripts type system :(</span>
    <span class="org-comment-delimiter">// </span><span class="org-comment">At least this stops us from rewriting the same unsafe code every time though.</span>
    <span class="org-keyword">export</span> <span class="org-keyword">const</span> <span class="org-variable-name">stringEnumDecoder</span> = &lt;Enum <span class="org-typescript-access-modifier">extends</span> <span class="org-rainbow-delimiters-depth-1">{</span> <span class="org-rainbow-delimiters-depth-2">[</span>name: <span class="org-typescript-primitive">string</span><span class="org-rainbow-delimiters-depth-2">]</span>: <span class="org-typescript-primitive">string</span> <span class="org-rainbow-delimiters-depth-1">}</span>&gt;<span class="org-rainbow-delimiters-depth-1">(</span>
    targetEnum: <span class="org-type">Enum</span>,
    <span class="org-rainbow-delimiters-depth-1">)</span>: D.Decoder&lt;<span class="org-type">Enum</span><span class="org-rainbow-delimiters-depth-1">[</span><span class="org-type">keyof</span> <span class="org-type">Enum</span><span class="org-rainbow-delimiters-depth-1">]</span>&gt; <span class="org-keyword">=&gt;</span> <span class="org-type">D</span>.<span class="org-function-name">literalUnion</span><span class="org-rainbow-delimiters-depth-1">(</span>...<span class="org-type">Object</span>.<span class="org-function-name">values</span><span class="org-rainbow-delimiters-depth-2">(</span><span class="org-type">targetEnum</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-type">as</span> <span class="org-type">D</span>.<span class="org-type">Decoder</span>&lt;<span class="org-type">Enum</span><span class="org-rainbow-delimiters-depth-1">[</span><span class="org-type">keyof</span> <span class="org-type">Enum</span><span class="org-rainbow-delimiters-depth-1">]</span>&gt;
    </pre>
    </div>

    <p>
    That's it. The whole thing. How do you use it?
    </p>

    <p>
    Like this:
    </p>

    <div class="org-src-container">
    <pre class="src src-typescript"><span class="org-keyword">import</span> * <span class="org-keyword">as</span> D <span class="org-keyword">from</span> <span class="org-string">"schemawax"</span>
    <span class="org-keyword">import</span> <span class="org-rainbow-delimiters-depth-1">{</span> stringEnumDecoder <span class="org-rainbow-delimiters-depth-1">}</span> <span class="org-keyword">from</span> <span class="org-string">"./enum"</span>

    <span class="org-keyword">enum</span> <span class="org-type">TestEnum1</span> <span class="org-rainbow-delimiters-depth-1">{</span>
    <span class="org-string">"why"</span> = <span class="org-string">"would"</span>,
    <span class="org-string">"anyone"</span> = <span class="org-string">"do"</span>,
    <span class="org-string">"this"</span> = <span class="org-string">"!"</span>,
    <span class="org-rainbow-delimiters-depth-1">}</span>

    <span class="org-keyword">type</span> <span class="org-type">ObjectWithEnumField</span> = <span class="org-rainbow-delimiters-depth-1">{</span>
    testEnum: <span class="org-type">TestEnum1</span>
    name: <span class="org-typescript-primitive">string</span>
    age?: <span class="org-typescript-primitive">number</span>
    <span class="org-rainbow-delimiters-depth-1">}</span>

    <span class="org-function-name">describe</span><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-string">"stringEnumDecoder"</span>, <span class="org-rainbow-delimiters-depth-2">()</span> <span class="org-keyword">=&gt;</span> <span class="org-rainbow-delimiters-depth-2">{</span>
    <span class="org-function-name">it</span><span class="org-rainbow-delimiters-depth-3">(</span><span class="org-string">"decodes string enums"</span>, <span class="org-rainbow-delimiters-depth-4">()</span> <span class="org-keyword">=&gt;</span> <span class="org-rainbow-delimiters-depth-4">{</span>
    <span class="org-keyword">const</span> <span class="org-variable-name">result</span> = <span class="org-function-name">stringEnumDecoder</span><span class="org-rainbow-delimiters-depth-5">(</span>TestEnum1<span class="org-rainbow-delimiters-depth-5">)</span>.<span class="org-function-name">forceDecode</span><span class="org-rainbow-delimiters-depth-5">(</span><span class="org-string">"!"</span><span class="org-rainbow-delimiters-depth-5">)</span>
    <span class="org-function-name">expect</span><span class="org-rainbow-delimiters-depth-5">(</span>result<span class="org-rainbow-delimiters-depth-5">)</span>.<span class="org-function-name">toEqual</span><span class="org-rainbow-delimiters-depth-5">(</span>TestEnum1.<span class="org-constant">this</span><span class="org-rainbow-delimiters-depth-5">)</span>
    <span class="org-rainbow-delimiters-depth-4">}</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-function-name">it</span><span class="org-rainbow-delimiters-depth-3">(</span><span class="org-string">"rejects invalid enum values"</span>, <span class="org-rainbow-delimiters-depth-4">()</span> <span class="org-keyword">=&gt;</span> <span class="org-rainbow-delimiters-depth-4">{</span>
    <span class="org-keyword">const</span> <span class="org-variable-name">result</span> = <span class="org-function-name">stringEnumDecoder</span><span class="org-rainbow-delimiters-depth-5">(</span>TestEnum1<span class="org-rainbow-delimiters-depth-5">)</span>.<span class="org-function-name">decode</span><span class="org-rainbow-delimiters-depth-5">(</span><span class="org-string">"this"</span><span class="org-rainbow-delimiters-depth-5">)</span>
    <span class="org-function-name">expect</span><span class="org-rainbow-delimiters-depth-5">(</span>result<span class="org-rainbow-delimiters-depth-5">)</span>.<span class="org-function-name">toBeNull</span><span class="org-rainbow-delimiters-depth-5">()</span>
    <span class="org-rainbow-delimiters-depth-4">}</span><span class="org-rainbow-delimiters-depth-3">)</span>

    <span class="org-function-name">it</span><span class="org-rainbow-delimiters-depth-3">(</span><span class="org-string">"can be used in larger decoders"</span>, <span class="org-rainbow-delimiters-depth-4">()</span> <span class="org-keyword">=&gt;</span> <span class="org-rainbow-delimiters-depth-4">{</span>
    <span class="org-keyword">const</span> <span class="org-variable-name">objectDecoder</span>: D.Decoder&lt;<span class="org-type">ObjectWithEnumField</span>&gt; = D.<span class="org-function-name">object</span><span class="org-rainbow-delimiters-depth-5">(</span><span class="org-rainbow-delimiters-depth-6">{</span>
    required: <span class="org-rainbow-delimiters-depth-7">{</span>
    testEnum: <span class="org-function-name">stringEnumDecoder</span><span class="org-rainbow-delimiters-depth-8">(</span>TestEnum1<span class="org-rainbow-delimiters-depth-8">)</span>,
    name: D.<span class="org-typescript-primitive">string</span>,
    <span class="org-rainbow-delimiters-depth-7">}</span>,
    optional: <span class="org-rainbow-delimiters-depth-7">{</span>
    dateOfBirth: D.<span class="org-typescript-primitive">string</span>.<span class="org-function-name">andThen</span><span class="org-rainbow-delimiters-depth-8">(</span><span class="org-rainbow-delimiters-depth-9">(</span>str<span class="org-rainbow-delimiters-depth-9">)</span> <span class="org-keyword">=&gt;</span> <span class="org-keyword">new</span> <span class="org-type">Date</span><span class="org-rainbow-delimiters-depth-9">(</span>str<span class="org-rainbow-delimiters-depth-9">)</span><span class="org-rainbow-delimiters-depth-8">)</span>,
    <span class="org-rainbow-delimiters-depth-7">}</span>,
    <span class="org-rainbow-delimiters-depth-6">}</span><span class="org-rainbow-delimiters-depth-5">)</span>

    <span class="org-keyword">const</span> <span class="org-variable-name">inputFromApi</span> = <span class="org-string">`{ "testEnum": "!", "name": "bob", "dateOfBirth": "2022-11-24"}`</span>
    <span class="org-keyword">const</span> <span class="org-variable-name">result1</span> = objectDecoder.<span class="org-function-name">decode</span><span class="org-rainbow-delimiters-depth-5">(</span>JSON.<span class="org-function-name">parse</span><span class="org-rainbow-delimiters-depth-6">(</span>inputFromApi<span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span>
    <span class="org-function-name">expect</span><span class="org-rainbow-delimiters-depth-5">(</span>result1<span class="org-rainbow-delimiters-depth-5">)</span>.<span class="org-function-name">toEqual</span><span class="org-rainbow-delimiters-depth-5">(</span><span class="org-rainbow-delimiters-depth-6">{</span> testEnum: <span class="org-type">TestEnum1</span>.<span class="org-constant">this</span>, name: <span class="org-string">"bob"</span>, dateOfBirth: <span class="org-keyword">new</span> <span class="org-type">Date</span><span class="org-rainbow-delimiters-depth-7">(</span><span class="org-string">"2022-11-24"</span><span class="org-rainbow-delimiters-depth-7">)</span> <span class="org-rainbow-delimiters-depth-6">}</span><span class="org-rainbow-delimiters-depth-5">)</span>
    <span class="org-rainbow-delimiters-depth-4">}</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-2">}</span><span class="org-rainbow-delimiters-depth-1">)</span>
    </pre>
    </div>

    <p>
    How does this work? How can we write a function that can take an enum type as an
    argument, and then generate a decoder? (Feel free to drop out if you were just
    here to solve your immediate problem!)
    </p>

    <p>
    If you type an enum into the online TypeScript playground (<a href="https://www.typescriptlang.org/play?#code/KYOwrgtgBAYg9nKBvAUFKB5EwoF4oBEc2BANGlACoDui+BALrWSgL4pA">here's one I prepared
    earlier</a>), you'll see that the enum (with string values) is, in fact, compiled
    into a variable that ends up with a simple record with string keys and values
    attached to it.
    </p>

    <p>
    Going back to the implementation, you'll see that's exactly the constraint on
    the argument we pass into <code>stringEnumDecoder</code>.
    </p>

    <div class="org-src-container">
    <pre class="src src-typescript">...
    <span class="org-keyword">export</span> <span class="org-keyword">const</span> <span class="org-variable-name">stringEnumDecoder</span> = &lt;Enum <span class="org-typescript-access-modifier">extends</span> <span class="org-rainbow-delimiters-depth-1">{</span> <span class="org-rainbow-delimiters-depth-2">[</span>name: <span class="org-typescript-primitive">string</span><span class="org-rainbow-delimiters-depth-2">]</span>: <span class="org-typescript-primitive">string</span> <span class="org-rainbow-delimiters-depth-1">}</span>&gt;<span class="org-rainbow-delimiters-depth-1">(</span>... rest <span class="org-keyword">of</span> implementation<span class="org-rainbow-delimiters-depth-1">)</span>
    </pre>
    </div>

    <p>
    Then some slightly weird magic happens: when you pass an enum into the function,
    the TypeScript compiler infers that the type of the argument is the <code>typeof</code> the
    enum you passed in. Whatever is happening internally here, it keeps track of the
    fact that the keys of this type are the types of the valid enum cases, so it
    turns <code>Enum[keyof Enum]</code> into the union type of each of the possible enum value
    types which is, if you squint hard enough, actually the enum itself. We then
    return a decoder that accepts a string, checks that said string is actually one
    of the <i>values</i> stored in the enum object, and then tells the compiler that this
    decoder will only ever return valid enum values. Unfortunately with a cast - but
    the full context we need to check this cast is valid is contained within this
    one line of code.
    </p>

    <p>
    So there you have it: a safe way to deserialize strings into enums, and it even
    composes nicely into more complex decoders.
    </p>

    <p>
    Until next time!
    </p>

    <p>
    Want to comment on something you've read here? <a href="https://mastodon.sdf.org/@mavnn/109400451463740531">This mastodon post</a> is the
    official commenting point!
    </p>
    ]]></description>
</item>
<item>
  <title>ADHD and me</title>
  <link>https://blog.mavnn.co.uk/2022/10/14/adhd_and_me.html</link>
  <author>michael@mavnn.eu (Michael Newton)</author>
  <guid isPermaLink="false">https://blog.mavnn.co.uk/2022/10/14/adhd_and_me.html</guid>
  <pubDate>Fri, 14 Oct 2022 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  This morning, I did the washing up.
  </p>

  <p>
  Now: your first response might be "Michael: why do I care? Do I look like a
  washing up blog reader?"
  </p>

  <p>
  But that would miss the point. This morning I did the washing up, and only the
  washing up. I didn't procrastinate with some Twitter or YouTube videos first. I
  didn't need to listen to a podcast at the same time to avoid getting lost
  staring off into space thinking about something completely different.
  </p>

  <p>
  Most importantly: no crushing feeling of overwhelm about needing to do this task
  that both feels insurmountable but is obviously (objectively) trivial. It's
  embarrassing to admit that I've been repeatedly reduced to tears by the need to
  do the washing up.
  </p>

  <p>
  This change, it appears, is the impact of methylphenidate (Ritalin®) on my
  brain. I was recently diagnosed with ADHD, and yesterday I undertook a series of
  "challenge tests" to see if I am one of the <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2732009/">75% of adult's with ADHD whose
  symptoms are helped by the drug</a>.
  </p>

  <p>
  I did the same series of tests twice: once in the morning, before taking
  methylphenidate; the other in the afternoon an hour after taking the first trial
  intake under observation (methylphenidate is a controlled substance here in
  Italy).
  </p>

  <p>
  It was a strange, and almost disturbing, experience to feel my brain acting
  differently. Recall was smoother. Free association on a topic easier because my
  brain stayed on <i>that</i> topic, without veering away onto side lines that I needed
  to filter out from what I was saying. My thoughts were still my own, but
  with... less in the way.
  </p>

  <p>
  You see: trying to do stuff (and by stuff I mean pretty much <i>anything</i> that you
  need to choose to do, rather than that you happen to start because it distracted
  you...) with ADHD is hard. I didn't realize how hard until some of that effort
  was lifted.
  </p>

  <p>
  The closest I've come to being able to describe it is that having ADHD is like
  your brain wearing an ancient near eastern tunic to work a farm.
  </p>

  <p>
  Ever hear the phrase "gird your loins"? It's the <a href="https://www.artofmanliness.com/skills/manly-know-how/how-to-gird-up-your-loins-an-illustrated-guide/">process of tying up your tunic</a>
  (designed primarily to keep you cool) so that you can run, or fight, or carry
  out hard physical labour at ground level without the 'skirt' of the tunic
  getting in the way and tripping you up.
  </p>

  <p>
  My brain wears a tunic: I need to put effort into preparing to do things before
  I can even start doing them. So it takes energy and effort just to <i>get ready to
  start</i>. And if you make a mistake in the girding, or the knot slips? Well, now
  you're half way through your task with a bunch of cloth swishing around your
  legs and getting in the way.
  </p>

  <p>
  Methylphenidate is the equivalent of putting on jeans.You can be casual still,
  but you can also just... do stuff? Finish your morning coffee, look across the
  kitchen, and go: "I need to do the washing up."
  </p>

  <p>
  This morning, I did the washing up.
  </p>
  ]]></description>
</item>
<item>
  <title>Teaching (coding) wisdom</title>
  <link>https://blog.mavnn.co.uk/2022/06/20/teaching-coding-wisdom.html</link>
  <author>michael@mavnn.eu (Michael Newton)</author>
  <guid isPermaLink="false">https://blog.mavnn.co.uk/2022/06/20/teaching-coding-wisdom.html</guid>
  <pubDate>Mon, 20 Jun 2022 00:00:00 +0200</pubDate>

  <description><![CDATA[<blockquote>
  <p>
  [talking about the teaching of wisdom]
  </p>

  <p>
  There are these distillations that we get throughout the story, like in the ten commandments or in the Sermon on the Mount. At points, it’s very clear: “Don’t murder.” “Honor your ma and pa.” “Do to others what you want them to do to you.” But if you really think about it, you don’t want a list. You might want a list for a certain season that will train your moral compass. Then, when you confront really complex situations, like Joshua or Moses, and it’s not clear, and there’s no list, you’ve been shaped to be the kind of person who knows how to figure out the right way forward. Lists will not help you do that. Wisdom will help you do that.
  </p>

  <p>
  --- <a href="https://bibleproject.com/podcast/wisdom-lifes-complexity/">https://bibleproject.com/podcast/wisdom-lifes-complexity/</a>
  </p>
  </blockquote>

  <p>
  Listening to the podcast above earlier and thinking that it feels very similar to how to teach good coding practices. We use the short hand of rules, and lists of recommendations… sometimes. But that doesn’t teach you how to deal with the complex situations, the edge cases, the actual real problems that need solving.
  </p>

  <p>
  The flip side being that as soon as you’re guided by wisdom, by the stories of what works, the shaping of thinking, you start getting into interpretation and ambiguity because you’re actually needing to think about the decisions you’re making. It can become hard to explain why you’re doing things, and different experiences will have coloured the “wisdom” that you’ve formed over the years. Which is why it becomes so important to have a variety of backgrounds and a willingness to communicate in a technical team that’s actually going to get things done. Why the lists and rules (microservices rule the world! TDD is the one true way! pure code is the only real code!) only get you so far, and should be starting points - not ending points.
  </p>

  <p>
  If you'd like to comment on this post, or suggest a correction, you can <a href="https://github.com/mavnn/blog/blob/master/2022/06/20/teaching-coding-wisdom.org">submit suggestions for changes</a> (GitHub account required). Just hit the "edit this file button" and go from there - or log an issue on the repository.
  </p>
  ]]></description>
</item>
</channel>
</rss>