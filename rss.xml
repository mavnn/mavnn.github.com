<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
	   xmlns:content="http://purl.org/rss/1.0/modules/content/"
	   xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	   xmlns:dc="http://purl.org/dc/elements/1.1/"
	   xmlns:atom="http://www.w3.org/2005/Atom"
	   xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	   xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	   xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Mavnn's blog</title>
  <atom:link href="https://blog.mavnn.co.uk/rss.xml" rel="self" type="application/rss+xml" />
  <link>https://blog.mavnn.co.uk/</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Fri, 16 Feb 2024 10:22:58 +0100</pubDate>
  <lastBuildDate>Fri, 16 Feb 2024 10:22:58 +0100</lastBuildDate>
  <generator>Emacs 29.1 Org-mode 9.6.6</generator>
  <webMaster>michael@mavnn.eu (Michael Newton)</webMaster>
  <image>
    <url>http://blog.mavnn.co.uk/images/swirl.svg</url>
    <title>Mavnn's blog</title>
    <link>https://blog.mavnn.co.uk/</link>
  </image>


  <item>
    <title>Do notation for TypeScript</title>
    <link>https://blog.mavnn.co.uk/2024/02/08/do-notation-for-typescript.html</link>
    <author>michael@mavnn.eu (Michael Newton)</author>
    <guid isPermaLink="false">https://blog.mavnn.co.uk/2024/02/08/do-notation-for-typescript.html</guid>
    <pubDate>Thu, 08 Feb 2024 00:00:00 +0100</pubDate>

    <description><![CDATA[<p>
    This is rather an aside from recent blog posts, but something I found interesting none the less.
    </p>

    <p>
    Fair warning to start us off: this post assumes that you are aware of and understand "do notation" (or "computational expressions" or "monad syntax") and like the idea of having it available in TypeScript.
    </p>

    <div id="outline-container-orgc0cafcc" class="outline-3">
    <h3 id="orgc0cafcc"><span class="section-number-3">1.1.</span> The idea</h3>
    <div class="outline-text-3" id="text-1-1">
    <p>
    TypeScript has one form of monad notation already - the <code>await</code> keyword. Unfortunately, there isn't any way to plug into the mechanism used and define your own alternative <code>bind</code> implementation without doing something dangerously hacky. And, frankly, the last thing your TypeScript code needs is an other sharp edge to cut yourself on.
    </p>

    <p>
    But... what does binding a value in monad notation really do? It doesn't allow you to write code you couldn't have written anyway long hand. It allows you to give the result of a calculation in your code in name in the current scope.
    </p>

    <p>
    So: if we consider the fact that a scope is really just a mapping from names to values, and that TypeScript allows function inputs to alter the type of their output... maybe we can do something with that?
    </p>
    </div>
    </div>

    <div id="outline-container-orgc87faae" class="outline-3">
    <h3 id="orgc87faae"><span class="section-number-3">1.2.</span> Defining a scope</h3>
    <div class="outline-text-3" id="text-1-2">
    <p>
    A type that maps names to values is reasonably easy to define in TypeScript. It looks something like this:
    </p>

    <div class="org-src-container">
    <pre class="src src-typescript"><span class="org-keyword">export</span> <span class="org-keyword">type</span> <span class="org-type">Scope</span>&lt;<span class="org-type">Keys</span> <span class="org-typescript-access-modifier">extends</span> <span class="org-typescript-primitive">string</span>&gt; = <span class="org-rainbow-delimiters-depth-1">{</span>
    <span class="org-rainbow-delimiters-depth-2">[</span>K <span class="org-keyword">in</span> Keys<span class="org-rainbow-delimiters-depth-2">]</span>: <span class="org-typescript-primitive">any</span>;
    <span class="org-rainbow-delimiters-depth-1">}</span>;
    </pre>
    </div>

    <p>
    We can say that anything we're willing to consider as a scope is a type that extends the type above: it will have some keys, which will all be strings, and they will map to some values, which will all be sub types of <code>any</code>.
    </p>

    <p>
    Now we need a type safe way to add a value to the scope.
    </p>

    <p>
    We start with a calculated type which works out what the result of adding a value with a name to a scope should be:
    </p>

    <div class="org-src-container">
    <pre class="src src-typescript"><span class="org-keyword">export</span> <span class="org-keyword">type</span> <span class="org-type">ExtendedScope</span>&lt;
    OldScope <span class="org-typescript-access-modifier">extends</span> <span class="org-type">Scope</span>&lt;<span class="org-typescript-primitive">any</span>&gt;,
    NewField <span class="org-typescript-access-modifier">extends</span> <span class="org-typescript-primitive">string</span>,
    NewValue
    &gt; = OldScope <span class="org-typescript-access-modifier">extends</span> <span class="org-typescript-primitive">any</span>
    ? <span class="org-rainbow-delimiters-depth-1">{</span>
    <span class="org-rainbow-delimiters-depth-2">[</span>K <span class="org-keyword">in</span> <span class="org-keyword">keyof</span> OldScope | NewField<span class="org-rainbow-delimiters-depth-2">]</span>: K <span class="org-typescript-access-modifier">extends</span> <span class="org-type">NewField</span>
    ? NewValue
    : K <span class="org-typescript-access-modifier">extends</span> <span class="org-keyword">keyof</span> OldScope
    ? OldScope<span class="org-rainbow-delimiters-depth-2">[</span>K<span class="org-rainbow-delimiters-depth-2">]</span>
    : <span class="org-typescript-primitive">never</span>;
    <span class="org-rainbow-delimiters-depth-1">}</span>
    : <span class="org-typescript-primitive">never</span>;
    </pre>
    </div>
    </div>
    </div>
    ]]></description>
</item>
</channel>
</rss>