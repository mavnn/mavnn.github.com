<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
	   xmlns:content="http://purl.org/rss/1.0/modules/content/"
	   xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	   xmlns:dc="http://purl.org/dc/elements/1.1/"
	   xmlns:atom="http://www.w3.org/2005/Atom"
	   xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	   xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	   xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Mavnn's blog</title>
  <atom:link href="https://blog.mavnn.co.uk/rss.xml" rel="self" type="application/rss+xml" />
  <link>https://blog.mavnn.co.uk/</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Thu, 25 Jan 2024 15:52:01 +0100</pubDate>
  <lastBuildDate>Thu, 25 Jan 2024 15:52:01 +0100</lastBuildDate>
  <generator>Emacs 29.1 Org-mode 9.6.6</generator>
  <webMaster>michael@mavnn.eu (Michael Newton)</webMaster>
  <image>
    <url>http://blog.mavnn.co.uk/images/swirl.svg</url>
    <title>Mavnn's blog</title>
    <link>https://blog.mavnn.co.uk/</link>
  </image>


  <item>
    <title>Short term help</title>
    <link>https://blog.mavnn.co.uk/2024/01/25/short_term_help.html</link>
    <author>michael@mavnn.eu (Michael Newton)</author>
    <guid isPermaLink="false">https://blog.mavnn.co.uk/2024/01/25/short_term_help.html</guid>
    <pubDate>Thu, 25 Jan 2024 00:00:00 +0100</pubDate>

    <description><![CDATA[<p>
    These days I generally work longer term contracts, which means I'm not often available for the more immediate "pay money for a solved problem" services I could offer while I was consulting. Right now though, I'm between long term contracts.
    </p>

    <p>
    "But Michael," I hear you say, "what problems can I give you money to solve to avoid distracting my own amazing team from actually <b>building the product</b>?"
    </p>

    <p>
    I'm so glad you asked. Or, you know, you can just skip straight to the <a href="#org350d733">logistics</a> section if you already know what you want.
    </p>

    <nav id="table-of-contents" role="doc-toc">
    <h2>Table of Contents</h2>
    <div id="text-table-of-contents" role="doc-toc">
    <ul>
    <li><a href="#orgc144544">1. Short term help</a>
    <ul>
    <li><a href="#orgac8e834">1.1. The kinds of things I can do for you</a></li>
    <li><a href="#orga147577">1.2. Build, packaging, and continuous integration</a></li>
    <li><a href="#org0dc2551">1.3. Making sure that CI/CD is managed <b>in the code repository</b> so that running the build locally and on the build server does the same thing in the same way, and the build can evolve in a safe, version controlled way just like all your other code</a></li>
    <li><a href="#org603394a">1.4. Helping trace and encode the <i>real</i> dependencies in your code base to unlock incremental, cachable build steps and reduce overall build times with concurrency</a></li>
    <li><a href="#orgd413c98">1.5. Split your test suite so tests can be run in parallel (yes, even integration tests) and then aggregate the results</a></li>
    <li><a href="#orge1b4f6f">1.6. Use tools like Nix or multi-step docker/podman builds to create minimal containers that only contain what they really need</a></li>
    <li><a href="#org1a9978b">1.7. Architecture review</a></li>
    <li><a href="#orgfde1b6a">1.8. Code review</a></li>
    <li><a href="#orga0182cb">1.9. Technology evaluation</a></li>
    <li><a href="#org330d28f">1.10. Domain driven design coaching</a></li>
    <li><a href="#orgdba37bf">1.11. Event sourcing</a></li>
    <li><a href="#orgbad4b40">1.12. Teach property based testing</a></li>
    <li><a href="#org19eb50a">1.13. Build a tool/library</a></li>
    <li><a href="#org350d733">1.14. Logistics</a></li>
    <li><a href="#org72a38ec">1.15. I will <i>always</i> want to have an extensive conversation(s) and will normally want to provide a quote before starting a short term piece of work. Book a slot to talk on Calendly or just send me an email (michael at mavnn.eu)</a></li>
    <li><a href="#org5e40235">1.16. I currently live in Italy, about an hour away from Rome. I can offer all of the services above remotely. Asking me to attend in person will add travel costs and at least 2 billable days of my time. Note: in some situations this is totally worthwhile.</a></li>
    <li><a href="#org72070e9">1.17. My day rate runs at 1000 euros per day for short term work like this, but in general I will use that to generate a quote and then charge you for the work delivered rather than bill by unit time. I never bill by the hour; I will consider discounts for non-profits, educational sites, friends, etc. It it's easier for you, I can give a quote that includes all expenses (travel etc) rather than reclaiming them separately. (Hint: if you're in a large organization and this is the first time you're arranging to get a consultant in - <i>this will be easier for you</i>)</a></li>
    <li><a href="#orgc5a7d68">1.18. In the rare occasion where it turns out that I cannot deliver what I promised (I'm just one human - things like illness can happen) I will let you know promptly, and before the work is due to be delivered, so we can renegotiate where to go from the reality of the situation.</a></li>
    </ul>
    </li>
    <li><a href="#orgca87aef">2. TypeScript Enums and Serialization</a></li>
    <li><a href="#org6ee668c">3. ADHD and me</a></li>
    <li><a href="#orga713fb2">4. Teaching (coding) wisdom</a></li>
    </ul>
    </div>
    </nav>

    <div id="outline-container-orgac8e834" class="outline-3">
    <h3 id="orgac8e834"><span class="section-number-3">1.1.</span> The kinds of things I can do for you</h3>
    <div class="outline-text-3" id="text-1-1">
    </div>
    </div>

    <div id="outline-container-orga147577" class="outline-3">
    <h3 id="orga147577"><span class="section-number-3">1.2.</span> Build, packaging, and continuous integration</h3>
    <div class="outline-text-3" id="text-1-2">
    <p>
    I have spent a <i>lot</i> of time getting build, test, and deployment pipelines up and running. A lot of the advice out there assumes you are using one technology and that you can just use "the build tool" for that stack. Reality tends to be more complicated than that, with many projects involving multiple languages, code generation, and extensive test set up.
    </p>

    <p>
    What kind of things would a CI/CD process I help build give you? It depends on <i>your</i> needs, but things that have really helped in other places include:
    </p>
    </div>
    </div>

    <div id="outline-container-org0dc2551" class="outline-3">
    <h3 id="org0dc2551"><span class="section-number-3">1.3.</span> Making sure that CI/CD is managed <b>in the code repository</b> so that running the build locally and on the build server does the same thing in the same way, and the build can evolve in a safe, version controlled way just like all your other code</h3>
    <div class="outline-text-3" id="text-1-3">
    </div>
    </div>
    <div id="outline-container-org603394a" class="outline-3">
    <h3 id="org603394a"><span class="section-number-3">1.4.</span> Helping trace and encode the <i>real</i> dependencies in your code base to unlock incremental, cachable build steps and reduce overall build times with concurrency</h3>
    <div class="outline-text-3" id="text-1-4">
    </div>
    </div>
    <div id="outline-container-orgd413c98" class="outline-3">
    <h3 id="orgd413c98"><span class="section-number-3">1.5.</span> Split your test suite so tests can be run in parallel (yes, even integration tests) and then aggregate the results</h3>
    <div class="outline-text-3" id="text-1-5">
    </div>
    </div>
    <div id="outline-container-orge1b4f6f" class="outline-3">
    <h3 id="orge1b4f6f"><span class="section-number-3">1.6.</span> Use tools like Nix or multi-step docker/podman builds to create minimal containers that only contain what they really need</h3>
    <div class="outline-text-3" id="text-1-6">
    </div>
    <div id="outline-container-orgdd56784" class="outline-4">
    <h4 id="orgdd56784"><span class="section-number-4">1.6.1.</span> bonus extra: doing this with Nix also gives you development environments as code and reproducible deployment artifacts - same code in, same container out</h4>
    <div class="outline-text-4" id="text-1-6-1">
    </div>
    </div>
    </div>

    <div id="outline-container-org1a9978b" class="outline-3">
    <h3 id="org1a9978b"><span class="section-number-3">1.7.</span> Architecture review</h3>
    <div class="outline-text-3" id="text-1-7">
    <p>
    Putting together a new project, or have a code base that's moving from "minimum viable" to "oh - I've got customers"? I can review your plans, or, given your constraints and objectives I can put together a suggested system architecture for you.
    </p>

    <p>
    It's worth noting that I don't have a personal axe to grind here. I won't tell you to use a "clean" architecture because that's my thing, or to use microservices because they are fashionable. Different architectural styles exist for a reason, and each has its own trade offs in terms of constraints you accept to gain certain benefits.
    </p>

    <p>
    This is a bit of a hybrid service that includes aspects of <a href="#orga0182cb">technology evaluation</a>, <a href="#orgfde1b6a">code review</a>, and <a href="#org330d28f">domain driven design coaching</a> but zoomed out to look at "how do I put this all together."
    </p>
    </div>
    </div>

    <div id="outline-container-orgfde1b6a" class="outline-3">
    <h3 id="orgfde1b6a"><span class="section-number-3">1.8.</span> Code review</h3>
    <div class="outline-text-3" id="text-1-8">
    <p>
    For ecosystems I've built decent sized projects in (.NET, TypeScript) I can spend some time reviewing your code and pointing out things you may want to improve.
    </p>

    <p>
    This isn't the kind of code review you'd do on an individual PR: this is the kind of code review where I can (as an outsider) come in with fresh eyes and point out broader patterns in your code base that may be problematic. I can also help you take your conventions and "traditions" and turn them into a coding style guide with (in many cases) automated tooling to help the team put it into practice.
    </p>
    </div>
    </div>

    <div id="outline-container-orga0182cb" class="outline-3">
    <h3 id="orga0182cb"><span class="section-number-3">1.9.</span> Technology evaluation</h3>
    <div class="outline-text-3" id="text-1-9">
    <p>
    Considering buying a new service, picking up a new programming language, or changing to a new database library? I can do the research and evaluation you need: I've been helping drive technology choices in organizations for well over a decade now and can help you spot the good, the bad, and the ugly of the options you're considering.
    </p>
    </div>
    </div>

    <div id="outline-container-org330d28f" class="outline-3">
    <h3 id="org330d28f"><span class="section-number-3">1.10.</span> Domain driven design coaching</h3>
    <div class="outline-text-3" id="text-1-10">
    <p>
    At its heart, the promise of domain driven design is simple: a code base that uses the same language as the people using it do, so that developers and domain experts can accurately share understanding of what the code <i>should</i> do and why.
    </p>

    <p>
    Actually <i>doing</i> domain driven design is not simple at all, because it is a process to help you model reality and it turns out <a href="http://johnsalvatier.org/blog/2017/reality-has-a-surprising-amount-of-detail">reality has a surprising amount of detail</a>.
    </p>

    <p>
    I can help with the process of getting started with DDD, help lead the early exploratory meetings between developers and domain experts, and give advice at how to capture what you discover in code while keeping everything maintainable.
    </p>
    </div>
    </div>

    <div id="outline-container-orgdba37bf" class="outline-3">
    <h3 id="orgdba37bf"><span class="section-number-3">1.11.</span> Event sourcing</h3>
    <div class="outline-text-3" id="text-1-11">
    <p>
    Event sourcing is a technique for capturing all the events that "have happened" and using those to calculate the current state of your system.
    </p>

    <p>
    For example, if a customer of yours moves you may publish a <code>CustomerHasMoved</code> event when they tell you, and a <code>CustomerAddressHasChanged</code> event when you have finished the business process that manages customers moving.
    </p>

    <p>
    This has enormous benefits for auditing, for being able to look at how the system has changed over time, and for being able to fix bugs "retroactively" as you don't only have the current state of the system but also all of the steps that got you here.
    </p>

    <p>
    It <i>also</i> requires a slightly different way of thinking about your code base and some specific tooling to avoid a system that slows down over time. And it affects how you think about business constraints like data retention and <a href="https://www.dataprotection.ie/en/individuals/know-your-rights/right-erasure-articles-17-19-gdpr">the right to erasure</a>.
    </p>

    <p>
    As the saying goes: been there, done that. I can help you do it too.
    </p>
    </div>
    </div>

    <div id="outline-container-orgbad4b40" class="outline-3">
    <h3 id="orgbad4b40"><span class="section-number-3">1.12.</span> Teach property based testing</h3>
    <div class="outline-text-3" id="text-1-12">
    <p>
    I'm a huge fan of property based testing, and I'm more than happy to give interactive workshops on getting started with it in .NET, TypeScript, and probably other languages if you ask nicely. Why pay for this when you could download a conference talk about it for free (including ones I've given myself)? Because I'll use a piece of <i>your</i> code to get started with, so that you walk away with an up and running example in your code base and we all talk about the reality of doing this rather than seeing the nice, easy, examples you tend to be shown in a 45 minute talk.
    </p>
    </div>
    </div>

    <div id="outline-container-org19eb50a" class="outline-3">
    <h3 id="org19eb50a"><span class="section-number-3">1.13.</span> Build a tool/library</h3>
    <div class="outline-text-3" id="text-1-13">
    <p>
    I do just write good code as well. If you need a self contained library or a small solution built, I can do that for you.
    </p>
    </div>
    </div>

    <div id="outline-container-org350d733" class="outline-3">
    <h3 id="org350d733"><span class="section-number-3">1.14.</span> Logistics</h3>
    <div class="outline-text-3" id="text-1-14">
    <p>
    Let's cover the basics. Neither of us has time to waste, so I'm going to keep this blunt and simple:
    </p>
    </div>
    </div>

    <div id="outline-container-org72a38ec" class="outline-3">
    <h3 id="org72a38ec"><span class="section-number-3">1.15.</span> I will <i>always</i> want to have an extensive conversation(s) and will normally want to provide a quote before starting a short term piece of work. Book a slot to talk on <a href="https://calendly.com/mavnn/1-hour-slot">Calendly</a> or just send me an email (michael at mavnn.eu)</h3>
    <div class="outline-text-3" id="text-1-15">
    </div>
    </div>
    <div id="outline-container-org5e40235" class="outline-3">
    <h3 id="org5e40235"><span class="section-number-3">1.16.</span> I currently live in Italy, about an hour away from Rome. I can offer all of the services above remotely. Asking me to attend in person will add travel costs and at least 2 billable days of my time. Note: in some situations this is totally worthwhile.</h3>
    <div class="outline-text-3" id="text-1-16">
    </div>
    </div>
    <div id="outline-container-org72070e9" class="outline-3">
    <h3 id="org72070e9"><span class="section-number-3">1.17.</span> My day rate runs at 1000 euros per day for short term work like this, but in general I will use that to generate a quote and then charge you for the work delivered rather than bill by unit time. I never bill by the hour; I will consider discounts for non-profits, educational sites, friends, etc. It it's easier for you, I can give a quote that includes all expenses (travel etc) rather than reclaiming them separately. (Hint: if you're in a large organization and this is the first time you're arranging to get a consultant in - <i>this will be easier for you</i>)</h3>
    <div class="outline-text-3" id="text-1-17">
    </div>
    <div id="outline-container-org3ae6922" class="outline-4">
    <h4 id="org3ae6922"><span class="section-number-4">1.17.1.</span> If you are in the EU, note that I am VAT registered</h4>
    <div class="outline-text-4" id="text-1-17-1">
    </div>
    </div>
    </div>
    <div id="outline-container-orgc5a7d68" class="outline-3">
    <h3 id="orgc5a7d68"><span class="section-number-3">1.18.</span> In the rare occasion where it turns out that I cannot deliver what I promised (I'm just one human - things like illness can happen) I will let you know promptly, and before the work is due to be delivered, so we can renegotiate where to go from the reality of the situation.</h3>
    <div class="outline-text-3" id="text-1-18">
    <p>
    That's about everything, I think.
    </p>
    </div>
    </div>
    ]]></description>
</item>
<item>
  <title>TypeScript Enums and Serialization</title>
  <link>https://blog.mavnn.co.uk/2022/11/24/typescript_enums_and_serialization.html</link>
  <author>michael@mavnn.eu (Michael Newton)</author>
  <guid isPermaLink="false">https://blog.mavnn.co.uk/2022/11/24/typescript_enums_and_serialization.html</guid>
  <pubDate>Wed, 24 Jan 2024 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  In general, TypeScript is <a href="../../../2022/01/07/types-in-typescript.html">not its own language</a> - it's a set of annotations that
  can be added to JavaScript to help check the "correctness" of you program. The
  authors have been very reluctant to add features to TypeScript that don't exist
  in JavaScript, and so normally you can turn your TypeScript into JavaScript purely
  by <i>deleting</i> the type annotations that you've added.
  </p>

  <p>
  Enums, though, are a bit different. They actually generate JavaScript code based on
  the TypeScript you write. Today, we're going to look at a piece of code that allows
  you to deserialize enums with string values in a type safe manner. And we're going
  to take advantage of the fact that enums (according to the TypeScript compiler) are
  both a type, and a value with a different type - at the same time.
  </p>

  <p>
  For context, we're going to be using <a href="https://www.npmjs.com/package/schemawax">SchemaWax</a> to create our decoder, so we can
  build it into a larger contextual decoder as needed.
  </p>

  <p>
  First: the code! If you already know SchemaWax, you don't care about types, and
  you're here because it was a hit for "deserialize any enum" on Google this is
  the bit to cut and paste.
  </p>

  <div class="org-src-container">
  <pre class="src src-typescript"><span class="org-keyword">import</span> * <span class="org-keyword">as</span> D <span class="org-keyword">from</span> <span class="org-string">"schemawax"</span>

  <span class="org-comment-delimiter">// </span><span class="org-comment">This is only type safe if passed a Enum with string values.</span>
  <span class="org-comment-delimiter">// </span><span class="org-comment">I don't think there's anyway to stop someone passing { "boo": "broken" }</span>
  <span class="org-comment-delimiter">// </span><span class="org-comment">in TypeScripts type system :(</span>
  <span class="org-comment-delimiter">// </span><span class="org-comment">At least this stops us from rewriting the same unsafe code every time though.</span>
  <span class="org-keyword">export</span> <span class="org-keyword">const</span> <span class="org-variable-name">stringEnumDecoder</span> = &lt;Enum <span class="org-typescript-access-modifier">extends</span> <span class="org-rainbow-delimiters-depth-1">{</span> <span class="org-rainbow-delimiters-depth-2">[</span>name: <span class="org-typescript-primitive">string</span><span class="org-rainbow-delimiters-depth-2">]</span>: <span class="org-typescript-primitive">string</span> <span class="org-rainbow-delimiters-depth-1">}</span>&gt;<span class="org-rainbow-delimiters-depth-1">(</span>
  targetEnum: <span class="org-type">Enum</span>,
  <span class="org-rainbow-delimiters-depth-1">)</span>: D.Decoder&lt;<span class="org-type">Enum</span><span class="org-rainbow-delimiters-depth-1">[</span><span class="org-type">keyof</span> <span class="org-type">Enum</span><span class="org-rainbow-delimiters-depth-1">]</span>&gt; <span class="org-keyword">=&gt;</span> <span class="org-type">D</span>.<span class="org-function-name">literalUnion</span><span class="org-rainbow-delimiters-depth-1">(</span>...<span class="org-type">Object</span>.<span class="org-function-name">values</span><span class="org-rainbow-delimiters-depth-2">(</span><span class="org-type">targetEnum</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-type">as</span> <span class="org-type">D</span>.<span class="org-type">Decoder</span>&lt;<span class="org-type">Enum</span><span class="org-rainbow-delimiters-depth-1">[</span><span class="org-type">keyof</span> <span class="org-type">Enum</span><span class="org-rainbow-delimiters-depth-1">]</span>&gt;
  </pre>
  </div>

  <p>
  That's it. The whole thing. How do you use it?
  </p>

  <p>
  Like this:
  </p>

  <div class="org-src-container">
  <pre class="src src-typescript"><span class="org-keyword">import</span> * <span class="org-keyword">as</span> D <span class="org-keyword">from</span> <span class="org-string">"schemawax"</span>
  <span class="org-keyword">import</span> <span class="org-rainbow-delimiters-depth-1">{</span> stringEnumDecoder <span class="org-rainbow-delimiters-depth-1">}</span> <span class="org-keyword">from</span> <span class="org-string">"./enum"</span>

  <span class="org-keyword">enum</span> <span class="org-type">TestEnum1</span> <span class="org-rainbow-delimiters-depth-1">{</span>
  <span class="org-string">"why"</span> = <span class="org-string">"would"</span>,
  <span class="org-string">"anyone"</span> = <span class="org-string">"do"</span>,
  <span class="org-string">"this"</span> = <span class="org-string">"!"</span>,
  <span class="org-rainbow-delimiters-depth-1">}</span>

  <span class="org-keyword">type</span> <span class="org-type">ObjectWithEnumField</span> = <span class="org-rainbow-delimiters-depth-1">{</span>
  testEnum: <span class="org-type">TestEnum1</span>
  name: <span class="org-typescript-primitive">string</span>
  age?: <span class="org-typescript-primitive">number</span>
  <span class="org-rainbow-delimiters-depth-1">}</span>

  <span class="org-function-name">describe</span><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-string">"stringEnumDecoder"</span>, <span class="org-rainbow-delimiters-depth-2">()</span> <span class="org-keyword">=&gt;</span> <span class="org-rainbow-delimiters-depth-2">{</span>
  <span class="org-function-name">it</span><span class="org-rainbow-delimiters-depth-3">(</span><span class="org-string">"decodes string enums"</span>, <span class="org-rainbow-delimiters-depth-4">()</span> <span class="org-keyword">=&gt;</span> <span class="org-rainbow-delimiters-depth-4">{</span>
  <span class="org-keyword">const</span> <span class="org-variable-name">result</span> = <span class="org-function-name">stringEnumDecoder</span><span class="org-rainbow-delimiters-depth-5">(</span>TestEnum1<span class="org-rainbow-delimiters-depth-5">)</span>.<span class="org-function-name">forceDecode</span><span class="org-rainbow-delimiters-depth-5">(</span><span class="org-string">"!"</span><span class="org-rainbow-delimiters-depth-5">)</span>
  <span class="org-function-name">expect</span><span class="org-rainbow-delimiters-depth-5">(</span>result<span class="org-rainbow-delimiters-depth-5">)</span>.<span class="org-function-name">toEqual</span><span class="org-rainbow-delimiters-depth-5">(</span>TestEnum1.<span class="org-constant">this</span><span class="org-rainbow-delimiters-depth-5">)</span>
  <span class="org-rainbow-delimiters-depth-4">}</span><span class="org-rainbow-delimiters-depth-3">)</span>
  <span class="org-function-name">it</span><span class="org-rainbow-delimiters-depth-3">(</span><span class="org-string">"rejects invalid enum values"</span>, <span class="org-rainbow-delimiters-depth-4">()</span> <span class="org-keyword">=&gt;</span> <span class="org-rainbow-delimiters-depth-4">{</span>
  <span class="org-keyword">const</span> <span class="org-variable-name">result</span> = <span class="org-function-name">stringEnumDecoder</span><span class="org-rainbow-delimiters-depth-5">(</span>TestEnum1<span class="org-rainbow-delimiters-depth-5">)</span>.<span class="org-function-name">decode</span><span class="org-rainbow-delimiters-depth-5">(</span><span class="org-string">"this"</span><span class="org-rainbow-delimiters-depth-5">)</span>
  <span class="org-function-name">expect</span><span class="org-rainbow-delimiters-depth-5">(</span>result<span class="org-rainbow-delimiters-depth-5">)</span>.<span class="org-function-name">toBeNull</span><span class="org-rainbow-delimiters-depth-5">()</span>
  <span class="org-rainbow-delimiters-depth-4">}</span><span class="org-rainbow-delimiters-depth-3">)</span>

  <span class="org-function-name">it</span><span class="org-rainbow-delimiters-depth-3">(</span><span class="org-string">"can be used in larger decoders"</span>, <span class="org-rainbow-delimiters-depth-4">()</span> <span class="org-keyword">=&gt;</span> <span class="org-rainbow-delimiters-depth-4">{</span>
  <span class="org-keyword">const</span> <span class="org-variable-name">objectDecoder</span>: D.Decoder&lt;<span class="org-type">ObjectWithEnumField</span>&gt; = D.<span class="org-function-name">object</span><span class="org-rainbow-delimiters-depth-5">(</span><span class="org-rainbow-delimiters-depth-6">{</span>
  required: <span class="org-rainbow-delimiters-depth-7">{</span>
  testEnum: <span class="org-function-name">stringEnumDecoder</span><span class="org-rainbow-delimiters-depth-8">(</span>TestEnum1<span class="org-rainbow-delimiters-depth-8">)</span>,
  name: D.<span class="org-typescript-primitive">string</span>,
  <span class="org-rainbow-delimiters-depth-7">}</span>,
  optional: <span class="org-rainbow-delimiters-depth-7">{</span>
  dateOfBirth: D.<span class="org-typescript-primitive">string</span>.<span class="org-function-name">andThen</span><span class="org-rainbow-delimiters-depth-8">(</span><span class="org-rainbow-delimiters-depth-9">(</span>str<span class="org-rainbow-delimiters-depth-9">)</span> <span class="org-keyword">=&gt;</span> <span class="org-keyword">new</span> <span class="org-type">Date</span><span class="org-rainbow-delimiters-depth-9">(</span>str<span class="org-rainbow-delimiters-depth-9">)</span><span class="org-rainbow-delimiters-depth-8">)</span>,
  <span class="org-rainbow-delimiters-depth-7">}</span>,
  <span class="org-rainbow-delimiters-depth-6">}</span><span class="org-rainbow-delimiters-depth-5">)</span>

  <span class="org-keyword">const</span> <span class="org-variable-name">inputFromApi</span> = <span class="org-string">`{ "testEnum": "!", "name": "bob", "dateOfBirth": "2022-11-24"}`</span>
  <span class="org-keyword">const</span> <span class="org-variable-name">result1</span> = objectDecoder.<span class="org-function-name">decode</span><span class="org-rainbow-delimiters-depth-5">(</span>JSON.<span class="org-function-name">parse</span><span class="org-rainbow-delimiters-depth-6">(</span>inputFromApi<span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span>
  <span class="org-function-name">expect</span><span class="org-rainbow-delimiters-depth-5">(</span>result1<span class="org-rainbow-delimiters-depth-5">)</span>.<span class="org-function-name">toEqual</span><span class="org-rainbow-delimiters-depth-5">(</span><span class="org-rainbow-delimiters-depth-6">{</span> testEnum: <span class="org-type">TestEnum1</span>.<span class="org-constant">this</span>, name: <span class="org-string">"bob"</span>, dateOfBirth: <span class="org-keyword">new</span> <span class="org-type">Date</span><span class="org-rainbow-delimiters-depth-7">(</span><span class="org-string">"2022-11-24"</span><span class="org-rainbow-delimiters-depth-7">)</span> <span class="org-rainbow-delimiters-depth-6">}</span><span class="org-rainbow-delimiters-depth-5">)</span>
  <span class="org-rainbow-delimiters-depth-4">}</span><span class="org-rainbow-delimiters-depth-3">)</span>
  <span class="org-rainbow-delimiters-depth-2">}</span><span class="org-rainbow-delimiters-depth-1">)</span>
  </pre>
  </div>

  <p>
  How does this work? How can we write a function that can take an enum type as an
  argument, and then generate a decoder? (Feel free to drop out if you were just
  here to solve your immediate problem!)
  </p>

  <p>
  If you type an enum into the online TypeScript playground (<a href="https://www.typescriptlang.org/play?#code/KYOwrgtgBAYg9nKBvAUFKB5EwoF4oBEc2BANGlACoDui+BALrWSgL4pA">here's one I prepared
  earlier</a>), you'll see that the enum (with string values) is, in fact, compiled
  into a variable that ends up with a simple record with string keys and values
  attached to it.
  </p>

  <p>
  Going back to the implementation, you'll see that's exactly the constraint on
  the argument we pass into <code>stringEnumDecoder</code>.
  </p>

  <div class="org-src-container">
  <pre class="src src-typescript">...
  <span class="org-keyword">export</span> <span class="org-keyword">const</span> <span class="org-variable-name">stringEnumDecoder</span> = &lt;Enum <span class="org-typescript-access-modifier">extends</span> <span class="org-rainbow-delimiters-depth-1">{</span> <span class="org-rainbow-delimiters-depth-2">[</span>name: <span class="org-typescript-primitive">string</span><span class="org-rainbow-delimiters-depth-2">]</span>: <span class="org-typescript-primitive">string</span> <span class="org-rainbow-delimiters-depth-1">}</span>&gt;<span class="org-rainbow-delimiters-depth-1">(</span>... rest <span class="org-keyword">of</span> implementation<span class="org-rainbow-delimiters-depth-1">)</span>
  </pre>
  </div>

  <p>
  Then some slightly weird magic happens: when you pass an enum into the function,
  the TypeScript compiler infers that the type of the argument is the <code>typeof</code> the
  enum you passed in. Whatever is happening internally here, it keeps track of the
  fact that the keys of this type are the types of the valid enum cases, so it
  turns <code>Enum[keyof Enum]</code> into the union type of each of the possible enum value
  types which is, if you squint hard enough, actually the enum itself. We then
  return a decoder that accepts a string, checks that said string is actually one
  of the <i>values</i> stored in the enum object, and then tells the compiler that this
  decoder will only ever return valid enum values. Unfortunately with a cast - but
  the full context we need to check this cast is valid is contained within this
  one line of code.
  </p>

  <p>
  So there you have it: a safe way to deserialize strings into enums, and it even
  composes nicely into more complex decoders.
  </p>

  <p>
  Until next time!
  </p>

  <p>
  Want to comment on something you've read here? <a href="https://mastodon.sdf.org/@mavnn/109400451463740531">This mastodon post</a> is the
  official commenting point!
  </p>
  ]]></description>
</item>
<item>
  <title>ADHD and me</title>
  <link>https://blog.mavnn.co.uk/2022/10/14/adhd_and_me.html</link>
  <author>michael@mavnn.eu (Michael Newton)</author>
  <guid isPermaLink="false">https://blog.mavnn.co.uk/2022/10/14/adhd_and_me.html</guid>
  <pubDate>Fri, 14 Oct 2022 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  This morning, I did the washing up.
  </p>

  <p>
  Now: your first response might be "Michael: why do I care? Do I look like a
  washing up blog reader?"
  </p>

  <p>
  But that would miss the point. This morning I did the washing up, and only the
  washing up. I didn't procrastinate with some Twitter or YouTube videos first. I
  didn't need to listen to a podcast at the same time to avoid getting lost
  staring off into space thinking about something completely different.
  </p>

  <p>
  Most importantly: no crushing feeling of overwhelm about needing to do this task
  that both feels insurmountable but is obviously (objectively) trivial. It's
  embarrassing to admit that I've been repeatedly reduced to tears by the need to
  do the washing up.
  </p>

  <p>
  This change, it appears, is the impact of methylphenidate (Ritalin®) on my
  brain. I was recently diagnosed with ADHD, and yesterday I undertook a series of
  "challenge tests" to see if I am one of the <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2732009/">75% of adult's with ADHD whose
  symptoms are helped by the drug</a>.
  </p>

  <p>
  I did the same series of tests twice: once in the morning, before taking
  methylphenidate; the other in the afternoon an hour after taking the first trial
  intake under observation (methylphenidate is a controlled substance here in
  Italy).
  </p>

  <p>
  It was a strange, and almost disturbing, experience to feel my brain acting
  differently. Recall was smoother. Free association on a topic easier because my
  brain stayed on <i>that</i> topic, without veering away onto side lines that I needed
  to filter out from what I was saying. My thoughts were still my own, but
  with... less in the way.
  </p>

  <p>
  You see: trying to do stuff (and by stuff I mean pretty much <i>anything</i> that you
  need to choose to do, rather than that you happen to start because it distracted
  you...) with ADHD is hard. I didn't realize how hard until some of that effort
  was lifted.
  </p>

  <p>
  The closest I've come to being able to describe it is that having ADHD is like
  your brain wearing an ancient near eastern tunic to work a farm.
  </p>

  <p>
  Ever hear the phrase "gird your loins"? It's the <a href="https://www.artofmanliness.com/skills/manly-know-how/how-to-gird-up-your-loins-an-illustrated-guide/">process of tying up your tunic</a>
  (designed primarily to keep you cool) so that you can run, or fight, or carry
  out hard physical labour at ground level without the 'skirt' of the tunic
  getting in the way and tripping you up.
  </p>

  <p>
  My brain wears a tunic: I need to put effort into preparing to do things before
  I can even start doing them. So it takes energy and effort just to <i>get ready to
  start</i>. And if you make a mistake in the girding, or the knot slips? Well, now
  you're half way through your task with a bunch of cloth swishing around your
  legs and getting in the way.
  </p>

  <p>
  Methylphenidate is the equivalent of putting on jeans.<sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup> You can be casual still,
  but you can also just... do stuff? Finish your morning coffee, look across the
  kitchen, and go: "I need to do the washing up."
  </p>

  <p>
  This morning, I did the washing up.
  </p>
  ]]></description>
</item>
<item>
  <title>Teaching (coding) wisdom</title>
  <link>https://blog.mavnn.co.uk/2022/06/20/teaching-coding-wisdom.html</link>
  <author>michael@mavnn.eu (Michael Newton)</author>
  <guid isPermaLink="false">https://blog.mavnn.co.uk/2022/06/20/teaching-coding-wisdom.html</guid>
  <pubDate>Mon, 20 Jun 2022 00:00:00 +0200</pubDate>

  <description><![CDATA[<blockquote>
  <p>
  [talking about the teaching of wisdom]
  </p>

  <p>
  There are these distillations that we get throughout the story, like in the ten commandments or in the Sermon on the Mount. At points, it’s very clear: “Don’t murder.” “Honor your ma and pa.” “Do to others what you want them to do to you.” But if you really think about it, you don’t want a list. You might want a list for a certain season that will train your moral compass. Then, when you confront really complex situations, like Joshua or Moses, and it’s not clear, and there’s no list, you’ve been shaped to be the kind of person who knows how to figure out the right way forward. Lists will not help you do that. Wisdom will help you do that.
  </p>

  <p>
  --- <a href="https://bibleproject.com/podcast/wisdom-lifes-complexity/">https://bibleproject.com/podcast/wisdom-lifes-complexity/</a>
  </p>
  </blockquote>

  <p>
  Listening to the podcast above earlier and thinking that it feels very similar to how to teach good coding practices. We use the short hand of rules, and lists of recommendations… sometimes. But that doesn’t teach you how to deal with the complex situations, the edge cases, the actual real problems that need solving.
  </p>

  <p>
  The flip side being that as soon as you’re guided by wisdom, by the stories of what works, the shaping of thinking, you start getting into interpretation and ambiguity because you’re actually needing to think about the decisions you’re making. It can become hard to explain why you’re doing things, and different experiences will have coloured the “wisdom” that you’ve formed over the years. Which is why it becomes so important to have a variety of backgrounds and a willingness to communicate in a technical team that’s actually going to get things done. Why the lists and rules (microservices rule the world! TDD is the one true way! pure code is the only real code!) only get you so far, and should be starting points - not ending points.
  </p>

  <p>
  If you'd like to comment on this post, or suggest a correction, you can <a href="https://github.com/mavnn/blog/blob/master/2022/06/20/teaching-coding-wisdom.org">submit suggestions for changes</a> (GitHub account required). Just hit the "edit this file button" and go from there - or log an issue on the repository.
  </p>
  ]]></description>
</item>
<div id="footnotes">
  <h2 class="footnotes">Footnotes: </h2>
  <div id="text-footnotes">

    <div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
    Very short lived jeans, at the moment. While slow release versions are
    available, the version of methylphenidate used while experimenting to find the
    ideal personal dose has an effect period of about 4-6 hours at the outside and
    I'm only prescribed one dose a day. So I still get to wear a brain tunic in the
    afternoons until I reach a stable enough dosage to take the slow release
    version.
    </p></div></div>


  </div>
</div></channel>
</rss>