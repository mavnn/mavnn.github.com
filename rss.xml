<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Mavnn's blog</title>
  <atom:link href="https://blog.mavnn.co.uk/rss.xml" rel="self" type="application/rss+xml" />
  <link>https://blog.mavnn.co.uk/</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Wed, 29 Oct 2025 18:17:20 +0100</pubDate>
  <lastBuildDate>Wed, 29 Oct 2025 18:17:20 +0100</lastBuildDate>
  <generator>Emacs 30.1 Org-mode 9.8-pre</generator>
  <webMaster>michael@mavnn.eu (Michael Newton)</webMaster>
  <image>
    <url>http://blog.mavnn.co.uk/images/swirl.svg</url>
    <title>Mavnn's blog</title>
    <link>https://blog.mavnn.co.uk/</link>
  </image>

  <item>
    <title>Coding games with a story</title>
    <link>https://blog.mavnn.co.uk/2025/10/29/coding_games_with_a_story.html</link>
    <author>michael@mavnn.eu (Michael Newton)</author>
    <guid isPermaLink="false">https://blog.mavnn.co.uk/2025/10/29/coding_games_with_a_story.html</guid>
    <pubDate>Wed, 29 Oct 2025 00:00:00 +0100</pubDate>

    <description><![CDATA[<p>
    A short post this time, but one that will probably lead to more content here.
    </p>

    <p>
    I'm teaming up with the long established and trusted <a href="https://www.thinkersmeetup.com/">Thinkers Meetup</a> to offer a course for 9-13 year old thinkers to write visual novels called <a href="https://www.thinkersmeetup.com/service-page/coding-games-with-a-story-ages-9-13">Coding Games with a Story</a>. I'm hoping this will be the first of many!
    </p>

    <p>
    If you know people in that age range who would in interested, or you're wondering what on earth I'm talking about, this video might help!
    </p>

    <p>
    For those of you who have been following along for a while, you might be worth interested to hear that the course is being powered by an open source website written in F#, including some code that might look very familiar from my previous "dev journals" a year or two back. If you're interested in having a look at what a full (if not huge) F# project looks like, with realistically unpolished code, the repository is at <a href="https://github.com/mavnn/VisualInk">https://github.com/mavnn/VisualInk</a>.
    </p>
    ]]></description>
  </item>
  <item>
    <title>Stun lock procrastination</title>
    <link>https://blog.mavnn.co.uk/2025/09/16/stun_lock_procrastination.html</link>
    <author>michael@mavnn.eu (Michael Newton)</author>
    <guid isPermaLink="false">https://blog.mavnn.co.uk/2025/09/16/stun_lock_procrastination.html</guid>
    <pubDate>Tue, 16 Sep 2025 00:00:00 +0200</pubDate>

    <description><![CDATA[<p>
    One of the primary markers of ADHD is <i>not starting</i>. There are many other aspects, for sure, but often what looks like "hyperactivity" is actually just the noise getting in the way of what we <i>want</i> to be doing but that we haven't started yet.
    </p>

    <p>
    So when I first came across the idea of procrastination as a tool via <a href="https://www.structuredprocrastination.com/">structured procrastination</a> years before my ADHD diagnosis it somewhat resonated... but not completely. The essay is well written, funny, and makes some good points but something felt fundamentally "off" about it when I tried to see if I could use the techniques. John Perry describes his trick as filling the top of the to do list with a certain type of task:
    </p>

    <blockquote>
    <p>
    The ideal sorts of things have two characteristics, First, they seem to have clear deadlines (but really don't). Second, they seem awfully important (but really aren't).
    </p>
    </blockquote>

    <p>
    He rightly points out that interacting with pretty much any organisation of any size will be stuffed full of such tasks.
    </p>

    <p>
    This then allows him to procrastinate on the things at the top of the list by doing things that are actually more important but "less urgent". Turns out: my brain does not work like that. A sentence that I live by a little more often than is strictly comfortable.
    </p>

    <p>
    My default state of procrastination is not the same as John Perry's; he describes a state in which he chooses to do something else, where he decides to do something different. Mine tends to fall into one of two categories:
    </p>
    <div id="outline-container-ID-7CCBC4B9-AA15-47C6-B8A9-6400642BE3D2" class="outline-3">
    <h3 id="ID-7CCBC4B9-AA15-47C6-B8A9-6400642BE3D2"><span class="section-number-3">2.1.</span> I do something for hours, and when I'm next interrupted I wonder "why was I even doing that?"</h3>
    <div class="outline-text-3" id="text-2-1">
    </div>
    </div>
    <div id="outline-container-ID-08E5E064-B64D-4D8E-AB78-E734BFF2E105" class="outline-3">
    <h3 id="ID-08E5E064-B64D-4D8E-AB78-E734BFF2E105"><span class="section-number-3">2.2.</span> I realise that I need to do something and I cannot make myself do it so I do <i>nothing</i></h3>
    <div class="outline-text-3" id="text-2-2">
    <p>
    And on that latter point, I really do mean <i>nothing</i>. If I know that I need to do the washing up, but I can't face it, I will "stun lock" sitting on a chair for anything from minutes to multiple hours because washing up is what I <i>need to do</i> and the washing up is what I <i>cannot do</i>. I have lost entire days to not being able to face trivial ten minute tasks because they were the crucial thing that needed to get done, and I could not face starting them.
    </p>

    <p>
    On the "why was I even" form of procrastination, I have to admit that the only thing I've really found helpful is good medication and trying to build at least some structure into the day - although without either the medication or outside help the structure doesn't tend to be that reliable.
    </p>

    <p>
    But for the second kind I've slowly begun to realise that it is an experience that I can learn to recognise. It is the historical experience of beating myself up for being too lazy to do the thing that needed doing. Never mind that I wasn't actually doing what I wanted to do instead; if you blink long enough to look objectively, it would be a strange definition of laziness that included "not doing the things I want to do for hours at a time while feeling miserable." In fact, that sounds rather more like hard work to me.
    </p>

    <p>
    By combining learning to recognise the experience with the processing I needed to do after my diagnosis, it became possible to accept it as something which is going to happen to me not because I'm intolerably lazy, but because sometimes my brain is going to find task initiation objectively difficult. The final piece of the puzzle was spotting in the research that it is very unpredictable <i>what</i> tasks will be difficult to initiate.
    </p>

    <p>
    Slowly, a light appeared in the depressive haze of not getting stuff done: what if, instead of trying to force myself to do <i>this</i> thing, or trying to trick myself into doing it by "doing something fun" first, I just asked the question: "what can I do right now?" Trying to consult a to do list or be certain I'm doing something important is often a task I <i>can't</i> do right now, so I look for tasks that are short, productive, and feel achievable without trying to check too hard if they are the <i>most</i> important, or the <i>most</i> urgent, of the tasks I might theoretically be able to do right now.
    </p>

    <p>
    Turns out, it actually works pretty well. Especially because <i>starting</i> really is the hardest bit. For example, I've written this blog post now that I've been meaning to write for weeks having promised someone I'd explain a throw away comment in a bit more detail. And once it's posted, I'm pretty sure that I've built up enough momentum that I'll be able to fill in the form that I was "supposed" to be filling in this morning as the most urgent task on the list.
    </p>

    <p>
    And if I haven't, there's still the washing up.
    </p>

    <p>
    Thoughts? Comments? Here's a <a href="https://mastodon.sdf.org/@mavnn/115213753851467347">Mastodon post</a> to leave them on.
    </p>
    </div>
    </div>
    ]]></description>
</item>
<item>
  <title>Conflict free syncthing notes</title>
  <link>https://blog.mavnn.co.uk/2025/08/15/conflict_free_syncthing_notes.html</link>
  <author>michael@mavnn.eu (Michael Newton)</author>
  <guid isPermaLink="false">https://blog.mavnn.co.uk/2025/08/15/conflict_free_syncthing_notes.html</guid>
  <pubDate>Fri, 15 Aug 2025 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  Just a short trick this time, mostly for my own records. As a family we've started moving to Syncthing for syncing files across devices, and "open" note taking formats like ".org" and ".md" for long term note taking. I've been using org-mode for a while personally, and now the rest of the family have been burned enough by the alternatives over the years that they're coming to similar conclusions even if not all of them want to use Emacs!
  </p>

  <p>
  Syncthing has a sensible general purpose policy with conflicts of creating a copy of a file where a conflict exists by adding a <code>.sync-conflict-&lt;date&gt;-&lt;time&gt;-&lt;device-id&gt;.</code> pseudo-extension before the file's true extension (or to the end of the filename if it didn't have one).
  </p>

  <p>
  In general, this is great as it means that a) all in sync devices have a shared understanding of the "winning" version of the file, and b) you can manually do any comparisons you need to and by saving a new version of the "original" file name and deleting the conflicting copies you resolve the conflict for everybody.
  </p>

  <p>
  But with plain text note files, we can actually do a bit better than that. Because these files are always text, we can use a standard merge algorithm on them. And because the places where conflicts happen most are (almost by definition) things like todo lists and similar, we can even go a step further and specify that even if there is a line/word level conflict that the algorithm can't resolve, we can allow the resolution to be "just in line the changes from both sides."
  </p>

  <p>
  So there's now a cron job running on the Raspberry Pi that acts as our "introducer" node in our Syncthing mesh, which looks like this:
  </p>

  <div class="org-src-container">
  <pre class="src src-bash"><span class="org-tree-sitter-hl-faceXcomment">#!/usr/bin/</span><span class="org-keyword">env</span><span class="org-tree-sitter-hl-faceXcomment"> bash</span>
  <span class="org-tree-sitter-hl-faceXcomment"># Find all files that are syncthing conflict markers, and have</span>
  <span class="org-tree-sitter-hl-faceXcomment"># a "note" extension (md or txt or org)</span>
  <span class="org-tree-sitter-hl-faceXfunctionXcall">readarray</span> <span class="org-tree-sitter-hl-faceXconstant">-t</span> CONFLICTS <span class="org-tree-sitter-hl-faceXoperator">&lt;</span> <span class="org-tree-sitter-hl-faceXpunctuationXspecial">&lt;(</span> <span class="org-sh-escaped-newline">\</span>
  <span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXfunctionXcall">find</span></span><span class="org-tree-sitter-hl-faceXembedded"> /syncthing/share/parent/directory </span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXconstant">-type</span></span><span class="org-tree-sitter-hl-faceXembedded"> f \</span>
  <span class="org-tree-sitter-hl-faceXembedded">       </span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXconstant">-name</span></span><span class="org-tree-sitter-hl-faceXembedded"> </span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring">"*.sync-conflict*"</span></span><span class="org-tree-sitter-hl-faceXembedded"> \</span>
  <span class="org-tree-sitter-hl-faceXembedded">       \( </span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXconstant">-name</span></span><span class="org-tree-sitter-hl-faceXembedded"> </span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring">"*.md"</span></span><span class="org-tree-sitter-hl-faceXembedded"> </span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXconstant">-o</span></span><span class="org-tree-sitter-hl-faceXembedded"> </span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXconstant">-name</span></span><span class="org-tree-sitter-hl-faceXembedded"> </span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring">"*.org"</span></span><span class="org-tree-sitter-hl-faceXembedded"> </span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXconstant">-o</span></span><span class="org-tree-sitter-hl-faceXembedded"> </span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXconstant">-name</span></span><span class="org-tree-sitter-hl-faceXembedded"> </span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring">"*.txt"</span></span><span class="org-tree-sitter-hl-faceXembedded"> \)</span> <span class="org-sh-escaped-newline">\</span>
  <span class="org-tree-sitter-hl-faceXpunctuationXspecial">)</span>
  <span class="org-tree-sitter-hl-faceXcomment"># For each file:</span>
  <span class="org-tree-sitter-hl-faceXkeyword">for</span> <span class="org-tree-sitter-hl-faceXproperty">CONFLICT</span> <span class="org-tree-sitter-hl-faceXkeyword">in</span> <span class="org-tree-sitter-hl-faceXstring">"</span><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXpunctuationXspecial">${</span></span><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXproperty">CONFLICTS</span></span></span><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXembedded">[@]</span></span><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXpunctuationXspecial">}</span></span><span class="org-tree-sitter-hl-faceXstring">"</span><span class="org-tree-sitter-hl-faceXoperator">;</span>
  <span class="org-tree-sitter-hl-faceXkeyword">do</span>
  <span class="org-tree-sitter-hl-faceXcomment"># Build the regex for matching conflict files and extracting</span>
  <span class="org-tree-sitter-hl-faceXcomment"># the original file name.</span>
  <span class="org-tree-sitter-hl-faceXcomment"># 1. The marker, capturing the file name in a group.</span>
  <span class="org-tree-sitter-hl-faceXproperty"><span class="org-tree-sitter-hl-faceXvariable">REG</span></span>=<span class="org-tree-sitter-hl-faceXstring">"\(.*\)sync-conflict-"</span>
  <span class="org-tree-sitter-hl-faceXcomment"># 2. The date</span>
  <span class="org-tree-sitter-hl-faceXproperty"><span class="org-tree-sitter-hl-faceXvariable">REG</span></span>+=<span class="org-tree-sitter-hl-faceXstring">"[[:digit:]]\{8\}-"</span>
  <span class="org-tree-sitter-hl-faceXcomment"># 3. The time</span>
  <span class="org-tree-sitter-hl-faceXproperty"><span class="org-tree-sitter-hl-faceXvariable">REG</span></span>+=<span class="org-tree-sitter-hl-faceXstring">"[[:digit:]]\{6\}-"</span>
  <span class="org-tree-sitter-hl-faceXcomment"># 4. The originating device ID</span>
  <span class="org-tree-sitter-hl-faceXproperty"><span class="org-tree-sitter-hl-faceXvariable">REG</span></span>+=<span class="org-tree-sitter-hl-faceXstring">"[A-Z0-9]\{7\}"</span>
  <span class="org-tree-sitter-hl-faceXcomment"># 5. The original file extension</span>
  <span class="org-tree-sitter-hl-faceXproperty"><span class="org-tree-sitter-hl-faceXvariable">REG</span></span>+=<span class="org-tree-sitter-hl-faceXstring">".\(.*\)"</span>
  <span class="org-tree-sitter-hl-faceXcomment"># Find the "winning" version with the original file name</span>
  <span class="org-tree-sitter-hl-faceXproperty"><span class="org-tree-sitter-hl-faceXvariable">CHOSEN</span></span>=<span class="org-tree-sitter-hl-faceXstring">"</span><span class="org-tree-sitter-hl-faceXpunctuationXspecial"><span class="org-tree-sitter-hl-faceXstring">$(</span></span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXfunctionXcall"><span class="org-tree-sitter-hl-faceXfunctionXbuiltin">echo</span></span></span></span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring"> "</span></span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXpunctuationXspecial">$</span></span></span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXproperty">CONFLICT</span></span></span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring">" </span></span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXoperator">|</span></span></span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring"> </span></span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXfunctionXcall">sed</span></span></span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring"> </span></span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXconstant">-n</span></span></span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring"> "s/</span></span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXpunctuationXspecial">${</span></span></span><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXproperty">REG</span></span></span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXpunctuationXspecial">}</span></span></span><span class="org-tree-sitter-hl-faceXembedded"><span class="org-tree-sitter-hl-faceXstring">/\1\2/p"</span></span><span class="org-tree-sitter-hl-faceXstring"> </span><span class="org-tree-sitter-hl-faceXpunctuationXspecial"><span class="org-tree-sitter-hl-faceXstring">)</span></span><span class="org-tree-sitter-hl-faceXstring">"</span>
  <span class="org-tree-sitter-hl-faceXfunctionXcall"><span class="org-tree-sitter-hl-faceXfunctionXbuiltin">echo</span></span> Merging <span class="org-tree-sitter-hl-faceXstring">"</span><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXpunctuationXspecial">$</span></span><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXproperty">CHOSEN</span></span><span class="org-tree-sitter-hl-faceXstring">"</span> <span class="org-tree-sitter-hl-faceXstring">"</span><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXpunctuationXspecial">$</span></span><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXproperty">CONFLICT</span></span><span class="org-tree-sitter-hl-faceXstring">"</span>
  <span class="org-tree-sitter-hl-faceXcomment"># If the original file actually exists (nothing stops a user from deleting it)</span>
  <span class="org-tree-sitter-hl-faceXkeyword">if</span> [ -f <span class="org-tree-sitter-hl-faceXstring">"</span><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXpunctuationXspecial">$</span></span><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXproperty">CHOSEN</span></span><span class="org-tree-sitter-hl-faceXstring">"</span> ]<span class="org-tree-sitter-hl-faceXoperator">;</span> <span class="org-tree-sitter-hl-faceXkeyword">then</span>
  <span class="org-tree-sitter-hl-faceXcomment"># Merge the two versions of the file, taking from both in case of conflict;</span>
  <span class="org-tree-sitter-hl-faceXcomment"># this may cause repetition but won't lose data. Delete the conflict file</span>
  <span class="org-tree-sitter-hl-faceXcomment"># but only if the merge reported no errors.</span>
  <span class="org-tree-sitter-hl-faceXfunctionXcall">git</span> merge-file <span class="org-tree-sitter-hl-faceXconstant">--union</span> <span class="org-sh-escaped-newline">\</span>
  <span class="org-tree-sitter-hl-faceXstring">"</span><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXpunctuationXspecial">$</span></span><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXproperty">CHOSEN</span></span><span class="org-tree-sitter-hl-faceXstring">"</span> <span class="org-tree-sitter-hl-faceXstring">"/syncthing/share/parent/directory/empty_file"</span> <span class="org-sh-escaped-newline">\</span>
  <span class="org-tree-sitter-hl-faceXstring">"</span><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXpunctuationXspecial">$</span></span><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXproperty">CONFLICT</span></span><span class="org-tree-sitter-hl-faceXstring">"</span> <span class="org-tree-sitter-hl-faceXoperator">&amp;&amp;</span> <span class="org-tree-sitter-hl-faceXfunctionXcall">rm</span> <span class="org-tree-sitter-hl-faceXstring">"</span><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXpunctuationXspecial">$</span></span><span class="org-tree-sitter-hl-faceXstring"><span class="org-tree-sitter-hl-faceXproperty">CONFLICT</span></span><span class="org-tree-sitter-hl-faceXstring">"</span>
  <span class="org-tree-sitter-hl-faceXkeyword">else</span>
  <span class="org-tree-sitter-hl-faceXfunctionXcall"><span class="org-tree-sitter-hl-faceXfunctionXbuiltin">echo</span></span> <span class="org-tree-sitter-hl-faceXstring">"No current file found"</span>
  <span class="org-tree-sitter-hl-faceXkeyword">fi</span>
  <span class="org-tree-sitter-hl-faceXkeyword">done</span>
  </pre>
  </div>

  <p>
  The only slight gotcha is you'll need to run <code>touch /syncthing/share/parent/directory/empty_file</code> to create an empty file to be used as the "parent" of the two conflicting versions. Extra internet points available to anyone who instead works out how to use a historical version from syncthing's archive functionality, but for me on this occasion that wasn't really needed.
  </p>

  <p>
  Got comments or ideas? The Mastodon post for this blog can be found here: <a href="https://mastodon.sdf.org/@mavnn/115038110993820603">https://mastodon.sdf.org/@mavnn/115038110993820603</a>
  </p>
  ]]></description>
</item>
<item>
  <title>A gentle introduction to Effect TS</title>
  <link>https://blog.mavnn.co.uk/2024/09/16/intro_to_effect_ts.html</link>
  <author>michael@mavnn.eu (Michael Newton)</author>
  <guid isPermaLink="false">https://blog.mavnn.co.uk/2024/09/16/intro_to_effect_ts.html</guid>
  <pubDate>Mon, 16 Sep 2024 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  I've recently been writing TypeScript again in a green field project, and we made the decision to
  use the <a href="https://effect.website/">Effect</a> library. It's not a small decision to make: although you can use bits of Effect in
  an existing code base, its real benefit is when it is used as (to quote the website) "the missing
  standard library for TypeScript".
  </p>

  <p>
  Overall, we're happy with the choice but the learning curve has a few sharp edges and while the
  <a href="https://effect.website/docs/introduction">docs</a> aren't bad it does feel like they could do a better job of introducing the most used features
  in a way that feels familiar to TypeScript developers so they can at least <b>read existing</b> Effect
  code before starting to introduce the many, many, powerful features that come with the library.
  </p>

  <p>
  This post is an attempt to do exactly that.
  </p>
  <div id="outline-container-ID-7F364232-908C-4D7B-B8CB-2669681BBCE9" class="outline-3">
  <h3 id="ID-7F364232-908C-4D7B-B8CB-2669681BBCE9"><span class="section-number-3">4.1.</span> The Effect type</h3>
  <div class="outline-text-3" id="text-4-1">
  <p>
  The very first thing you need to understand about Effect is that it is built around a specific type.
  Appropriately enough, the <code>Effect</code> type. This type functions as a replacement for <code>Promise</code>, allowing
  for asynchronous code, but also covers a few other needs.
  </p>

  <p>
  Let's get started, in the traditional way:
  </p>

  <div class="org-src-container">
  <pre class="src src-typescript"><span class="org-tree-sitter-hl-faceXkeyword">import</span> <span class="org-tree-sitter-hl-faceXpunctuationXbracket">{</span> <span class="org-tree-sitter-hl-faceXconstructor">Effect</span> <span class="org-tree-sitter-hl-faceXpunctuationXbracket">}</span> <span class="org-tree-sitter-hl-faceXkeyword">from</span> <span class="org-tree-sitter-hl-faceXstring">"effect"</span>

  <span class="org-tree-sitter-hl-faceXkeyword">const</span> <span class="org-tree-sitter-hl-faceXvariable"><span class="org-tree-sitter-hl-faceXfunction">hello</span></span> <span class="org-tree-sitter-hl-faceXoperator">=</span> <span class="org-tree-sitter-hl-faceXpunctuationXbracket">(</span><span class="org-tree-sitter-hl-faceXvariableXparameter">name</span><span class="org-tree-sitter-hl-faceXpunctuationXspecial">?</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">:</span> <span class="org-tree-sitter-hl-faceXtypeXbuiltin">string</span><span class="org-tree-sitter-hl-faceXpunctuationXbracket">)</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">:</span> <span class="org-tree-sitter-hl-faceXconstructor">Effect</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">.</span><span class="org-tree-sitter-hl-faceXtype">Effect</span><span class="org-tree-sitter-hl-faceXoperator"><span class="org-tree-sitter-hl-faceXpunctuationXbracket">&lt;</span></span><span class="org-tree-sitter-hl-faceXtypeXbuiltin">string</span><span class="org-tree-sitter-hl-faceXoperator"><span class="org-tree-sitter-hl-faceXpunctuationXbracket">&gt;</span></span> <span class="org-tree-sitter-hl-faceXoperator">=&gt;</span>
  <span class="org-tree-sitter-hl-faceXconstructor">Effect</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">.</span><span class="org-function-name">gen</span><span class="org-tree-sitter-hl-faceXpunctuationXbracket">(</span><span class="org-tree-sitter-hl-faceXkeyword">function</span>* <span class="org-tree-sitter-hl-faceXpunctuationXbracket">()</span> <span class="org-tree-sitter-hl-faceXpunctuationXbracket">{</span>
  <span class="org-tree-sitter-hl-faceXkeyword">return</span> <span class="org-tree-sitter-hl-faceXstring">`Hello, </span><span class="org-keyword">${</span><span class="org-default">name || "world"</span><span class="org-keyword">}</span><span class="org-tree-sitter-hl-faceXstring">!`</span>
  <span class="org-tree-sitter-hl-faceXpunctuationXbracket">})</span>
  </pre>
  </div>

  <p>
  This code is spiritually the same as writing:
  </p>

  <div class="org-src-container">
  <pre class="src src-typescript"><span class="org-tree-sitter-hl-faceXkeyword">const</span> <span class="org-tree-sitter-hl-faceXvariable"><span class="org-tree-sitter-hl-faceXfunction">helloAsync</span></span> <span class="org-tree-sitter-hl-faceXoperator">=</span> <span class="org-tree-sitter-hl-faceXkeyword">async</span> <span class="org-tree-sitter-hl-faceXpunctuationXbracket">(</span><span class="org-variable-name">name?</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">:</span> <span class="org-tree-sitter-hl-faceXtypeXbuiltin">string</span><span class="org-tree-sitter-hl-faceXpunctuationXbracket">)</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">:</span> <span class="org-tree-sitter-hl-faceXtype">Promise</span><span class="org-tree-sitter-hl-faceXoperator"><span class="org-tree-sitter-hl-faceXpunctuationXbracket">&lt;</span></span><span class="org-tree-sitter-hl-faceXtypeXbuiltin">string</span><span class="org-tree-sitter-hl-faceXoperator"><span class="org-tree-sitter-hl-faceXpunctuationXbracket">&gt;</span></span> <span class="org-tree-sitter-hl-faceXoperator">=&gt;</span> <span class="org-tree-sitter-hl-faceXpunctuationXbracket">{</span>
  <span class="org-tree-sitter-hl-faceXkeyword">return</span> <span class="org-tree-sitter-hl-faceXstring">`Hello, </span><span class="org-keyword">${</span><span class="org-default">name || "world"</span><span class="org-keyword">}</span><span class="org-tree-sitter-hl-faceXstring">!`</span>
  <span class="org-tree-sitter-hl-faceXpunctuationXbracket">}</span>
  </pre>
  </div>

  <p>
  You can think of the <code>Effect.gen(function* () { ... })</code> as a slightly more verbose version of the <code>async</code> prefix to a function.
  </p>

  <p>
  What about calling the function? Again, we have a similar concept but different syntax to <code>async/await</code>.
  </p>

  <div class="org-src-container">
  <pre class="src src-typescript"><span class="org-tree-sitter-hl-faceXcomment">// Effect version</span>
  <span class="org-tree-sitter-hl-faceXkeyword">const</span> <span class="org-tree-sitter-hl-faceXvariable">sayHello</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">:</span> <span class="org-tree-sitter-hl-faceXconstructor">Effect</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">.</span><span class="org-tree-sitter-hl-faceXtype">Effect</span><span class="org-tree-sitter-hl-faceXoperator"><span class="org-tree-sitter-hl-faceXpunctuationXbracket">&lt;</span></span><span class="org-tree-sitter-hl-faceXkeyword"><span class="org-tree-sitter-hl-faceXtypeXbuiltin">void</span></span><span class="org-tree-sitter-hl-faceXoperator"><span class="org-tree-sitter-hl-faceXpunctuationXbracket">&gt;</span></span> <span class="org-tree-sitter-hl-faceXoperator">=</span>
  <span class="org-tree-sitter-hl-faceXconstructor">Effect</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">.</span><span class="org-function-name">gen</span><span class="org-tree-sitter-hl-faceXpunctuationXbracket">(</span><span class="org-tree-sitter-hl-faceXkeyword">function</span>* <span class="org-tree-sitter-hl-faceXpunctuationXbracket">()</span> <span class="org-tree-sitter-hl-faceXpunctuationXbracket">{</span>
  <span class="org-tree-sitter-hl-faceXkeyword">const</span> <span class="org-tree-sitter-hl-faceXvariable">greeting</span> <span class="org-tree-sitter-hl-faceXoperator">=</span> <span class="org-tree-sitter-hl-faceXkeyword">yield</span>* <span class="org-tree-sitter-hl-faceXfunctionXcall">hello</span><span class="org-tree-sitter-hl-faceXpunctuationXbracket">(</span><span class="org-tree-sitter-hl-faceXstring">"world"</span><span class="org-tree-sitter-hl-faceXpunctuationXbracket">)</span>
  <span class="org-tree-sitter-hl-faceXkeyword">yield</span>* <span class="org-tree-sitter-hl-faceXfunctionXcall">sendGreetings</span><span class="org-tree-sitter-hl-faceXpunctuationXbracket">(</span>greeting<span class="org-tree-sitter-hl-faceXpunctuationXbracket">)</span>
  <span class="org-tree-sitter-hl-faceXpunctuationXbracket">})</span>

  <span class="org-tree-sitter-hl-faceXcomment">// Async/await version</span>
  <span class="org-tree-sitter-hl-faceXkeyword">const</span> <span class="org-variable-name">sayHelloAsync</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">:</span> <span class="org-tree-sitter-hl-faceXtype">Promise</span><span class="org-tree-sitter-hl-faceXoperator"><span class="org-tree-sitter-hl-faceXpunctuationXbracket">&lt;</span></span><span class="org-tree-sitter-hl-faceXkeyword"><span class="org-tree-sitter-hl-faceXtypeXbuiltin">void</span></span><span class="org-tree-sitter-hl-faceXoperator"><span class="org-tree-sitter-hl-faceXpunctuationXbracket">&gt;</span></span> <span class="org-tree-sitter-hl-faceXoperator">=</span> <span class="org-tree-sitter-hl-faceXpunctuationXbracket">{</span>
  <span class="org-keyword">const</span> <span class="org-variable-name">greeting</span> <span class="org-tree-sitter-hl-faceXoperator">=</span> <span class="org-tree-sitter-hl-faceXkeyword">await</span> <span class="org-tree-sitter-hl-faceXfunctionXcall">helloAsync</span><span class="org-tree-sitter-hl-faceXpunctuationXbracket">(</span><span class="org-tree-sitter-hl-faceXstring">"world"</span><span class="org-tree-sitter-hl-faceXpunctuationXbracket">)</span>
  <span class="org-tree-sitter-hl-faceXkeyword">await</span> <span class="org-tree-sitter-hl-faceXfunctionXcall">sendGreetingsAsync</span><span class="org-tree-sitter-hl-faceXpunctuationXbracket">(</span>greeting<span class="org-tree-sitter-hl-faceXpunctuationXbracket">)</span>
  <span class="org-tree-sitter-hl-faceXpunctuationXbracket">}</span>
  </pre>
  </div>

  <p>
  Given that we're using a cooperative scheduling system for asynchronous code, you can think of <code>yield*</code> as
  saying "hey runtime - I'm yielding the thread now, start me back up when the effect on the right has finished."
  </p>

  <p>
  There is, however one big difference between these two which will catch you out if you don't know about it.
  </p>
  </div>
  </div>
  <div id="outline-container-ID-9B1FE3D6-AB68-40C3-A1BF-CE503E8BD1A2" class="outline-3">
  <h3 id="ID-9B1FE3D6-AB68-40C3-A1BF-CE503E8BD1A2"><span class="section-number-3">4.2.</span> Hot and cold promises</h3>
  <div class="outline-text-3" id="text-4-2">
  <p>
  <code>Promise</code> is what is sometimes referred to as a "hot" or "immediate" asynchronous construct. What does that mean?
  </p>

  <p>
  Well, in the example above <code>sayHelloAsync</code> is a constant value. As soon as the value is created, the logic within
  the promise will be scheduled for execution and we will start the process of asynchronously running the <code>helloAsync</code>
  function. If we await the result of <code>sayHelloAsync</code> somewhere else, we will block until the function has finished.
  </p>

  <p>
  This also means that if we <code>await</code> <code>sayHelloAsync</code> in two different places, we will only send greetings <b>once</b>. After
  all, the <code>Promise</code> type that we are handing around represents the running execution of an asynchronous process; it has
  already started, and awaiting it multiple times won't start it again.
  </p>

  <p>
  <code>Effect</code>, by contrast, is a "cold" or "thunked" asynchronous construct. It represents a series of steps that <i>will be</i>
  executed <i>if</i> the result is requested.
  </p>

  <p>
  So if we run:
  </p>

  <div class="org-src-container">
  <pre class="src src-typescript"><span class="org-tree-sitter-hl-faceXkeyword">const</span> <span class="org-tree-sitter-hl-faceXvariable">camelot</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">:</span> <span class="org-tree-sitter-hl-faceXconstructor">Effect</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">.</span><span class="org-tree-sitter-hl-faceXtype">Effect</span><span class="org-tree-sitter-hl-faceXoperator"><span class="org-tree-sitter-hl-faceXpunctuationXbracket">&lt;</span></span><span class="org-tree-sitter-hl-faceXkeyword"><span class="org-tree-sitter-hl-faceXtypeXbuiltin">void</span></span><span class="org-tree-sitter-hl-faceXoperator"><span class="org-tree-sitter-hl-faceXpunctuationXbracket">&gt;</span></span> <span class="org-tree-sitter-hl-faceXoperator">=</span>
  <span class="org-tree-sitter-hl-faceXconstructor">Effect</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">.</span><span class="org-function-name">gen</span><span class="org-tree-sitter-hl-faceXpunctuationXbracket">(</span><span class="org-tree-sitter-hl-faceXkeyword">function</span>* <span class="org-tree-sitter-hl-faceXpunctuationXbracket">()</span> <span class="org-tree-sitter-hl-faceXpunctuationXbracket">{</span>
  <span class="org-tree-sitter-hl-faceXkeyword">yield</span>* sayHello
  <span class="org-tree-sitter-hl-faceXkeyword">yield</span>* sayHello
  <span class="org-tree-sitter-hl-faceXkeyword">yield</span>* sayHello
  <span class="org-tree-sitter-hl-faceXpunctuationXbracket">})</span>
  </pre>
  </div>

  <p>
  We will send the greetings three times, but only when somebody requests the result of running <code>camelot</code>. Until
  then, nothing will happen at all.
  </p>

  <p>
  <b>If you remember nothing else from this post</b>, remember that an <code>Effect</code> that nobody executes never runs. This <i>will</i> catch you
  out with logging.
  </p>

  <div class="org-src-container">
  <pre class="src src-typescript"><span class="org-tree-sitter-hl-faceXcomment">// logs nothing</span>
  <span class="org-tree-sitter-hl-faceXkeyword">const</span> <span class="org-tree-sitter-hl-faceXvariable">camelot</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">:</span> <span class="org-tree-sitter-hl-faceXconstructor">Effect</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">.</span><span class="org-tree-sitter-hl-faceXtype">Effect</span><span class="org-tree-sitter-hl-faceXoperator"><span class="org-tree-sitter-hl-faceXpunctuationXbracket">&lt;</span></span><span class="org-tree-sitter-hl-faceXkeyword"><span class="org-tree-sitter-hl-faceXtypeXbuiltin">void</span></span><span class="org-tree-sitter-hl-faceXoperator"><span class="org-tree-sitter-hl-faceXpunctuationXbracket">&gt;</span></span> <span class="org-tree-sitter-hl-faceXoperator">=</span>
  <span class="org-tree-sitter-hl-faceXconstructor">Effect</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">.</span><span class="org-function-name">gen</span><span class="org-tree-sitter-hl-faceXpunctuationXbracket">(</span><span class="org-tree-sitter-hl-faceXkeyword">function</span>* <span class="org-tree-sitter-hl-faceXpunctuationXbracket">()</span> <span class="org-tree-sitter-hl-faceXpunctuationXbracket">{</span>
  <span class="org-tree-sitter-hl-faceXconstructor">Effect</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">.</span><span class="org-function-name">log</span><span class="org-tree-sitter-hl-faceXpunctuationXbracket">(</span><span class="org-tree-sitter-hl-faceXstring">"Bass voice: spam a looooooot"</span><span class="org-tree-sitter-hl-faceXpunctuationXbracket">)</span>
  <span class="org-tree-sitter-hl-faceXkeyword">yield</span>* sayHello
  <span class="org-tree-sitter-hl-faceXkeyword">yield</span>* sayHello
  <span class="org-tree-sitter-hl-faceXkeyword">yield</span>* sayHello
  <span class="org-tree-sitter-hl-faceXpunctuationXbracket">})</span>

  <span class="org-tree-sitter-hl-faceXcomment">// logs the bass voice</span>
  <span class="org-tree-sitter-hl-faceXkeyword">const</span> <span class="org-tree-sitter-hl-faceXvariable">camelot</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">:</span> <span class="org-tree-sitter-hl-faceXconstructor">Effect</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">.</span><span class="org-tree-sitter-hl-faceXtype">Effect</span><span class="org-tree-sitter-hl-faceXoperator"><span class="org-tree-sitter-hl-faceXpunctuationXbracket">&lt;</span></span><span class="org-tree-sitter-hl-faceXkeyword"><span class="org-tree-sitter-hl-faceXtypeXbuiltin">void</span></span><span class="org-tree-sitter-hl-faceXoperator"><span class="org-tree-sitter-hl-faceXpunctuationXbracket">&gt;</span></span> <span class="org-tree-sitter-hl-faceXoperator">=</span>
  <span class="org-tree-sitter-hl-faceXconstructor">Effect</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">.</span><span class="org-function-name">gen</span><span class="org-tree-sitter-hl-faceXpunctuationXbracket">(</span><span class="org-tree-sitter-hl-faceXkeyword">function</span>* <span class="org-tree-sitter-hl-faceXpunctuationXbracket">()</span> <span class="org-tree-sitter-hl-faceXpunctuationXbracket">{</span>
  <span class="org-tree-sitter-hl-faceXkeyword">yield</span>* <span class="org-tree-sitter-hl-faceXconstructor">Effect</span><span class="org-tree-sitter-hl-faceXpunctuationXdelimiter">.</span><span class="org-function-name">log</span><span class="org-tree-sitter-hl-faceXpunctuationXbracket">(</span><span class="org-tree-sitter-hl-faceXstring">"Bass voice: spam a looooooot"</span><span class="org-tree-sitter-hl-faceXpunctuationXbracket">)</span>
  <span class="org-tree-sitter-hl-faceXkeyword">yield</span>* sayHello
  <span class="org-tree-sitter-hl-faceXkeyword">yield</span>* sayHello
  <span class="org-tree-sitter-hl-faceXkeyword">yield</span>* sayHello
  <span class="org-tree-sitter-hl-faceXpunctuationXbracket">})</span>
  </pre>
  </div>

  <p>
  Although the ability to create Effects without executing them can be extremely useful, leaving <code>yield*</code> out of
  your code when you actually need it is probably the most frustrating element of learning Effect, and the one
  that the compiler is least able to warn you about.
  </p>
  </div>
  </div>
  <div id="outline-container-ID-6F0C585E-9CE1-475C-8EFA-2D52B94A9881" class="outline-3">
  <h3 id="ID-6F0C585E-9CE1-475C-8EFA-2D52B94A9881"><span class="section-number-3">4.3.</span> Pipes</h3>
  <div class="outline-text-3" id="text-4-3">
  <p>
  Effect makes heavy usage of a concept it calls "pipes", which is a way of passing a value through a series of functions.
  </p>

  <p>
  The main place you'll see this is that we can wrap <code>Effect</code> values in a wide variety of ways. These are very powerful,
  but quickly start suffering from the "lisp effect" of a pyramid of brackets when we start combining them.
  </p>

  <p>
  Let's rewrite the <code>camelot</code> function above using the built in <code>Effect.repeatN</code> method:
  </p>
  </div>
  </div>
  ]]></description>
</item>
</channel>
</rss>
