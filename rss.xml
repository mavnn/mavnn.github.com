<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
	   xmlns:content="http://purl.org/rss/1.0/modules/content/"
	   xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	   xmlns:dc="http://purl.org/dc/elements/1.1/"
	   xmlns:atom="http://www.w3.org/2005/Atom"
	   xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	   xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	   xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Mavnn's blog</title>
  <atom:link href="https://blog.mavnn.co.uk/rss.xml" rel="self" type="application/rss+xml" />
  <link>https://blog.mavnn.co.uk/</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Mon, 16 Sep 2024 15:22:19 +0200</pubDate>
  <lastBuildDate>Mon, 16 Sep 2024 15:22:19 +0200</lastBuildDate>
  <generator>Emacs 29.3 Org-mode 9.6.15</generator>
  <webMaster>michael@mavnn.eu (Michael Newton)</webMaster>
  <image>
    <url>http://blog.mavnn.co.uk/images/swirl.svg</url>
    <title>Mavnn's blog</title>
    <link>https://blog.mavnn.co.uk/</link>
  </image>


  <item>
    <title>A gentle introduction to Effect TS</title>
    <link>https://blog.mavnn.co.uk/2024/09/16/intro_to_effect_ts.html</link>
    <author>michael@mavnn.eu (Michael Newton)</author>
    <guid isPermaLink="false">https://blog.mavnn.co.uk/2024/09/16/intro_to_effect_ts.html</guid>
    <pubDate>Mon, 16 Sep 2024 00:00:00 +0200</pubDate>

    <description><![CDATA[<p>
    I've recently been writing TypeScript again in a green field project, and we made the decision to
    use the <a href="https://effect.website/">Effect</a> library. It's not a small decision to make: although you can use bits of Effect in
    an existing code base, its real benefit is when it is used as (to quote the website) "the missing
    standard library for TypeScript".
    </p>

    <p>
    Overall, we're happy with the choice but the learning curve has a few sharp edges and while the
    <a href="https://effect.website/docs/introduction">docs</a> aren't bad it does feel like they could do a better job of introducing the most used features
    in a way that feels familiar to TypeScript developers so they can at least <b>read existing</b> Effect
    code before starting to introduce the many, many, powerful features that come with the library.
    </p>

    <p>
    This post is an attempt to do exactly that.
    </p>

    <div id="outline-container-org6fcb615" class="outline-3">
    <h3 id="org6fcb615"><span class="section-number-3">1.1.</span> The Effect type</h3>
    <div class="outline-text-3" id="text-1-1">
    <p>
    The very first thing you need to understand about Effect is that it is built around a specific type.
    Appropriately enough, the <code>Effect</code> type. This type functions as a replacement for <code>Promise</code>, allowing
    for asynchronous code, but also covers a few other needs.
    </p>

    <p>
    Let's get started, in the traditional way:
    </p>

    <div class="org-src-container">
    <pre class="src src-typescript"><span class="org-keyword">import</span> <span class="org-rainbow-delimiters-depth-1">{</span> Effect <span class="org-rainbow-delimiters-depth-1">}</span> <span class="org-keyword">from</span> <span class="org-string">"effect"</span>

    <span class="org-keyword">const</span> <span class="org-variable-name">hello</span> = <span class="org-rainbow-delimiters-depth-1">(</span>name?: <span class="org-typescript-primitive">string</span><span class="org-rainbow-delimiters-depth-1">)</span>: <span class="org-type">Effect.Effect</span>&lt;<span class="org-typescript-primitive">string</span>&gt; <span class="org-keyword">=&gt;</span>
    Effect.<span class="org-function-name">gen</span><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">function</span>* <span class="org-rainbow-delimiters-depth-2">()</span> <span class="org-rainbow-delimiters-depth-2">{</span>
    <span class="org-keyword">return</span> <span class="org-string">`Hello, ${name || "world"}!`</span>
    <span class="org-rainbow-delimiters-depth-2">}</span><span class="org-rainbow-delimiters-depth-1">)</span>
    </pre>
    </div>

    <p>
    This code is spiritually the same as writing:
    </p>

    <div class="org-src-container">
    <pre class="src src-typescript"><span class="org-keyword">const</span> <span class="org-variable-name">helloAsync</span> = <span class="org-keyword">async</span> <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-variable-name">name?</span>: <span class="org-typescript-primitive">string</span><span class="org-rainbow-delimiters-depth-1">)</span>: <span class="org-type">Promise</span>&lt;<span class="org-typescript-primitive">string</span>&gt; <span class="org-keyword">=&gt;</span> <span class="org-rainbow-delimiters-depth-1">{</span>
    <span class="org-keyword">return</span> <span class="org-string">`Hello, ${name || "world"}!`</span>
    <span class="org-rainbow-delimiters-depth-1">}</span>
    </pre>
    </div>

    <p>
    You can think of the <code>Effect.gen(function* () { ... })</code> as a slightly more verbose version of the <code>async</code> prefix to a function.
    </p>

    <p>
    What about calling the function? Again, we have a similar concept but different syntax to <code>async/await</code>.
    </p>

    <div class="org-src-container">
    <pre class="src src-typescript"><span class="org-comment-delimiter">// </span><span class="org-comment">Effect version</span>
    <span class="org-keyword">const</span> <span class="org-variable-name">sayHello</span>: <span class="org-type">Effect.Effect</span>&lt;<span class="org-typescript-primitive">void</span>&gt; =
    Effect.<span class="org-function-name">gen</span><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">function</span>* <span class="org-rainbow-delimiters-depth-2">()</span> <span class="org-rainbow-delimiters-depth-2">{</span>
    <span class="org-keyword">const</span> <span class="org-variable-name">greeting</span> = <span class="org-keyword">yield*</span> <span class="org-function-name">hello</span><span class="org-rainbow-delimiters-depth-3">(</span><span class="org-string">"world"</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-keyword">yield*</span> <span class="org-function-name">sendGreetings</span><span class="org-rainbow-delimiters-depth-3">(</span>greeting<span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-2">}</span><span class="org-rainbow-delimiters-depth-1">)</span>

    <span class="org-comment-delimiter">// </span><span class="org-comment">Async/await version</span>
    <span class="org-keyword">const</span> <span class="org-variable-name">sayHelloAsync</span>: <span class="org-type">Promise</span>&lt;<span class="org-typescript-primitive">void</span>&gt; = <span class="org-rainbow-delimiters-depth-1">{</span>
    <span class="org-keyword">const</span> <span class="org-variable-name">greeting</span> = <span class="org-keyword">await</span> <span class="org-function-name">helloAsync</span><span class="org-rainbow-delimiters-depth-2">(</span><span class="org-string">"world"</span><span class="org-rainbow-delimiters-depth-2">)</span>
    <span class="org-keyword">await</span> <span class="org-function-name">sendGreetingsAsync</span><span class="org-rainbow-delimiters-depth-2">(</span>greeting<span class="org-rainbow-delimiters-depth-2">)</span>
    <span class="org-rainbow-delimiters-depth-1">}</span>
    </pre>
    </div>

    <p>
    Given that we're using a cooperative scheduling system for asynchronous code, you can think of <code>yield*</code> as
    saying "hey runtime - I'm yielding the thread now, start me back up when the effect on the right has finished."
    </p>

    <p>
    There is, however one big difference between these two which will catch you out if you don't know about it.
    </p>
    </div>
    </div>

    <div id="outline-container-org28279cf" class="outline-3">
    <h3 id="org28279cf"><span class="section-number-3">1.2.</span> Hot and cold promises</h3>
    <div class="outline-text-3" id="text-1-2">
    <p>
    <code>Promise</code> is what is sometimes referred to as a "hot" or "immediate" asynchronous construct. What does that mean?
    </p>

    <p>
    Well, in the example above <code>sayHelloAsync</code> is a constant value. As soon as the value is created, the logic within
    the promise will be scheduled for execution and we will start the process of asynchronously running the <code>helloAsync</code>
    function. If we await the result of <code>sayHelloAsync</code> somewhere else, we will block until the function has finished.
    </p>

    <p>
    This also means that if we <code>await</code> <code>sayHelloAsync</code> in two different places, we will only send greetings <b>once</b>. After
    all, the <code>Promise</code> type that we are handing around represents the running execution of an asynchronous process; it has
    already started, and awaiting it multiple times won't start it again.
    </p>

    <p>
    <code>Effect</code>, by contrast, is a "cold" or "thunked" asynchronous construct. It represents a series of steps that <i>will be</i>
    executed <i>if</i> the result is requested.
    </p>

    <p>
    So if we run:
    </p>

    <div class="org-src-container">
    <pre class="src src-typescript"><span class="org-keyword">const</span> <span class="org-variable-name">camelot</span>: <span class="org-type">Effect.Effect</span>&lt;<span class="org-typescript-primitive">void</span>&gt; =
    Effect.<span class="org-function-name">gen</span><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">function</span>* <span class="org-rainbow-delimiters-depth-2">()</span> <span class="org-rainbow-delimiters-depth-2">{</span>
    <span class="org-keyword">yield*</span> sayHello
    <span class="org-keyword">yield*</span> sayHello
    <span class="org-keyword">yield*</span> sayHello
    <span class="org-rainbow-delimiters-depth-2">}</span><span class="org-rainbow-delimiters-depth-1">)</span>
    </pre>
    </div>

    <p>
    We will send the greetings three times, but only when somebody requests the result of running <code>camelot</code>. Until
    then, nothing will happen at all.
    </p>

    <p>
    <b>If you remember nothing else from this post</b>, remember that an <code>Effect</code> that nobody executes never runs. This <i>will</i> catch you
    out with logging.
    </p>

    <div class="org-src-container">
    <pre class="src src-typescript"><span class="org-comment-delimiter">// </span><span class="org-comment">logs nothing</span>
    <span class="org-keyword">const</span> <span class="org-variable-name">camelot</span>: <span class="org-type">Effect.Effect</span>&lt;<span class="org-typescript-primitive">void</span>&gt; =
    Effect.<span class="org-function-name">gen</span><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">function</span>* <span class="org-rainbow-delimiters-depth-2">()</span> <span class="org-rainbow-delimiters-depth-2">{</span>
    Effect.<span class="org-function-name">log</span><span class="org-rainbow-delimiters-depth-3">(</span><span class="org-string">"Bass voice: spam a looooooot"</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-keyword">yield*</span> sayHello
    <span class="org-keyword">yield*</span> sayHello
    <span class="org-keyword">yield*</span> sayHello
    <span class="org-rainbow-delimiters-depth-2">}</span><span class="org-rainbow-delimiters-depth-1">)</span>

    <span class="org-comment-delimiter">// </span><span class="org-comment">logs the bass voice</span>
    <span class="org-keyword">const</span> <span class="org-variable-name">camelot</span>: <span class="org-type">Effect.Effect</span>&lt;<span class="org-typescript-primitive">void</span>&gt; =
    Effect.<span class="org-function-name">gen</span><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">function</span>* <span class="org-rainbow-delimiters-depth-2">()</span> <span class="org-rainbow-delimiters-depth-2">{</span>
    <span class="org-keyword">yield*</span> Effect.<span class="org-function-name">log</span><span class="org-rainbow-delimiters-depth-3">(</span><span class="org-string">"Bass voice: spam a looooooot"</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-keyword">yield*</span> sayHello
    <span class="org-keyword">yield*</span> sayHello
    <span class="org-keyword">yield*</span> sayHello
    <span class="org-rainbow-delimiters-depth-2">}</span><span class="org-rainbow-delimiters-depth-1">)</span>
    </pre>
    </div>

    <p>
    Although the ability to create Effects without executing them can be extremely useful, leaving <code>yield*</code> out of
    your code when you actually need it is probably the most frustrating element of learning Effect, and the one
    that the compiler is least able to warn you about.
    </p>
    </div>
    </div>

    <div id="outline-container-org86825e9" class="outline-3">
    <h3 id="org86825e9"><span class="section-number-3">1.3.</span> Pipes</h3>
    <div class="outline-text-3" id="text-1-3">
    <p>
    Effect makes heavy usage of a concept it calls "pipes", which is a way of passing a value through a series of functions.
    </p>

    <p>
    The main place you'll see this is that we can wrap <code>Effect</code> values in a wide variety of ways. These are very powerful,
    but quickly start suffering from the "lisp effect" of a pyramid of brackets when we start combining them.
    </p>

    <p>
    Let's rewrite the <code>camelot</code> function above using the built in <code>Effect.repeatN</code> method:
    </p>
    </div>
    </div>
    ]]></description>
</item>
</channel>
</rss>
