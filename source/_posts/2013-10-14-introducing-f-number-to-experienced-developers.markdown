---
layout: post
title: "Introducing F# to Experienced Developers"
date: 2013-10-14 12:30
comments: true
categories: [fsharp, programming, teaching]
---
So, as a follow up to [this post]("http://blog.mavnn.co.uk/teaching-f-number-to-c-number-devs/") I'm in the final stages of preparing a presentation for this Friday introducing an audience of (mostly) fairly experienced developers to F# and F# syntax. The main reason for this is to get a number of people up to speed enough on reading F# that they can have a better experience at [the Progressive F# Tutorials]("http://skillsmatter.com/event/scala/progressive-f-tutorials-2013") at the end of the month. So the aim here isn't to get people fully autonomous and writing code *right now*, but to allow them to read the bulk of the example code in the tutorials and follow what's going on.

The general approach I've gone for is to set up a Git repository that has a series of tagged snap shots I can check out as I work through the concepts I'm planning to cover. This will enable me to actually demonstrate and run pieces of code, answer questions and make live modifications and then always jump back to a known starting point for the next section of the talk. Given the people involved have all done some .net development and I don't need to cover things like Visual Studio usage and projects, all of the code is contained in a single Program.fs file in a console app. I've included the snapshot of the file from each tagged commit below, with a brief overview of what I'm planning to introduce before skipping to the next snapshot.

With a full screen Visual Studio editing session, I should be able to make the code large enough to be visible and reasonably rapidly guide people to the areas where the code has changed.

A combination of the excellent [PaperCut](http://papercut.codeplex.com/) project and a local 'http request to email' service pretending to be an SMS sender, we should be able to see messages being generated by the code as we go along.

After the session, I'm planning to mention [Chris Marinos' koans](https://github.com/ChrisMarinos/FSharpKoans) and [Try F#](http://www.tryfsharp.org/) (especially given that Rachel Reese is [running a session](http://skillsmatter.com/podcast/scala/try-f-from-zero-to-data-science) at the tutorials for those who are going).

Please note that these are up here for comment and suggestions at this point - I'll be pushing up the actual Git repository and a screencast (I hope) after the event. The code is designed to be a prop for the talk rather than an independent resource - for that I'd always point people to the koans/Try F# first.

So, show me the codez:

<!--more-->

## Tag '1'

Nothing too exciting here :). This is just a place holder while giving the introduction, although I will also point out the lack of required boiler plate compared to C#.

{% gist 6973457 part1.fs %}

## Tag '2'

Introduce the `open` keyword, `let` for value assignment, and give people a feel that they're not completely leaving their nice safe .net world behind.

{% gist 6973457 part2.fs %}

## Tag '3'

Talk about functions, show parameter application, introduce the pipe operator.

Some discussion about type inference will probably happen here.

{% gist 6973457 part3.fs %}

## Tag '4'

Introduce the `use` keyword, show property assignment with `<-`.

{% gist 6973457 part4.fs %}

## Tag '5'

List syntax and introduce the `Seq` module. Example of currying.

{% gist 6973457 part5.fs %}

## Tag '6'

An async workflow. Turns out that `SmtpClient` is not as clean for that as you would hope - it's async send methods don't appear to be thread safe (wait, what?) and even the relatively recent looking `SendMailAsync` method returns a `Task` rather than a `Task<'T>`. Having said that, it shows that even in less than ideal circumstances, you can leverage the `async` stuff even when interfacing with older .net code from other languages.

{% gist 6973457 part6.fs %}

## Tag '7'

Tuples! Showing both construction and deconstruction syntax. Also discuss that this is how we pass multiple parameters to methods on classes.

In the live coding for this one, I'll make sure to demonstrate adding and removing brackets in different places.

{% gist 6973457 part7.fs %}

## Tag '8'

Record syntax.

{% gist 6973457 part8.fs %}

## Tag '9'

Use discriminated unions for modeling business inputs. In this case, building a MessageDetails class that can contain the details of either an email or an SMS send request.

Also has a 2nd, maybe slightly more idiomatic implementation of an async workflow.

I'm hoping to get at least this far in the session. The rest of it would be nice, but if we get here then I'll be happy I've covered at least the basics.

{% gist 6973457 part9.fs %}

## Tag '10'

Validation with Active patterns.

{% gist 6973457 part10.fs %}

## Tag '11'

The extra credit section! I very much doubt I'll get this far in a one hour session, but if I do this is just some fun playing with type providers. Also covers randomness such as:

* generating infinite sequences using `seq` expressions
* double back tick identifiers
* pattern matching with guards
* a bit more of a workout of the `Seq` module
* we can have a lot of discussion of lazy evaluation, because this code is just insanely broken without it

{% gist 6973457 part11.fs %}
